From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <5360339+camdenorrb@users.noreply.github.com>
Date: Mon, 12 Apr 2021 00:52:12 -0500
Subject: [PATCH] Lots of cleanups, hopefully didn't break anything :)


diff --git a/pom.xml b/pom.xml
index 6adf000f5ccab0aeeadbdf09c6f4f535b4ee7ffc..133e23a6c37f492e26d85fff5b7858fa8c4ac827 100644
--- a/pom.xml
+++ b/pom.xml
@@ -8,7 +8,6 @@
         <version>dev-SNAPSHOT</version>
     </parent>
 
-    <groupId>com.destroystokyo.paper</groupId>
     <artifactId>paper-api</artifactId>
     <version>1.16.5-R0.1-SNAPSHOT</version>
     <packaging>jar</packaging>
diff --git a/src/main/java/co/aikar/timings/TimingData.java b/src/main/java/co/aikar/timings/TimingData.java
index a5d13a1e44edb861f45c83a9b4309fbf799d407d..b32fa1f5d3039b01f74cce56002be8fadb2ecaf9 100644
--- a/src/main/java/co/aikar/timings/TimingData.java
+++ b/src/main/java/co/aikar/timings/TimingData.java
@@ -79,6 +79,7 @@ class TimingData {
         lagTotalTime = 0;
     }
 
+    /** @noinspection CloneDoesntDeclareCloneNotSupportedException, MethodDoesntCallSuperMethod */
     protected TimingData clone() {
         return new TimingData(this);
     }
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index 199789d56d22fcb1b77ebd56805cc28aa5a5ab0a..d69f0985981cc1ebfe622911f1f820c00f84b0f1 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -38,8 +38,8 @@ import org.jetbrains.annotations.Nullable;
 
 class TimingHandler implements Timing {
 
-    private static AtomicInteger idPool = new AtomicInteger(1);
-    private static Deque<TimingHandler> TIMING_STACK = new ArrayDeque<>();
+    private static final AtomicInteger idPool = new AtomicInteger(1);
+    private static final Deque<TimingHandler> TIMING_STACK = new ArrayDeque<>();
     final int id = idPool.getAndIncrement();
 
     final TimingIdentifier identifier;
diff --git a/src/main/java/co/aikar/timings/TimingHistory.java b/src/main/java/co/aikar/timings/TimingHistory.java
index 203cda0f9a4dea4f28a21ea9ee8db7a7369842e3..2b43a62b59c197d9b5ba32604110f27eb3295dc0 100644
--- a/src/main/java/co/aikar/timings/TimingHistory.java
+++ b/src/main/java/co/aikar/timings/TimingHistory.java
@@ -50,7 +50,7 @@ import static co.aikar.timings.TimingsManager.FULL_SERVER_TICK;
 import static co.aikar.timings.TimingsManager.MINUTE_REPORTS;
 import static co.aikar.util.JSONUtil.*;
 
-@SuppressWarnings({"deprecation", "SuppressionAnnotation", "Convert2Lambda", "Anonymous2MethodRef"})
+@SuppressWarnings({"SuppressionAnnotation", "Convert2Lambda", "Anonymous2MethodRef"})
 public class TimingHistory {
     public static long lastMinuteTime;
     public static long timedTicks;
@@ -59,7 +59,7 @@ public class TimingHistory {
     public static long tileEntityTicks;
     public static long activatedEntityTicks;
     private static int worldIdPool = 1;
-    static Map<String, Integer> worldMap = LoadingMap.newHashMap(new Function<String, Integer>() {
+    static final Map<String, Integer> worldMap = LoadingMap.newHashMap(new Function<>() {
         @NotNull
         @Override
         public Integer apply(@Nullable String input) {
@@ -84,7 +84,7 @@ public class TimingHistory {
             this.minuteReports = MINUTE_REPORTS.toArray(new MinuteReport[MINUTE_REPORTS.size() + 1]);
             this.minuteReports[this.minuteReports.length - 1] = new MinuteReport();
         } else {
-            this.minuteReports = MINUTE_REPORTS.toArray(new MinuteReport[MINUTE_REPORTS.size()]);
+            this.minuteReports = MINUTE_REPORTS.toArray(new MinuteReport[0]);
         }
         long ticks = 0;
         for (MinuteReport mp : this.minuteReports) {
@@ -101,7 +101,7 @@ public class TimingHistory {
 
         // Information about all loaded chunks/entities
         //noinspection unchecked
-        this.worlds = toObjectMapper(Bukkit.getWorlds(), new Function<World, JSONPair>() {
+        this.worlds = toObjectMapper(Bukkit.getWorlds(), new Function<World, @org.checkerframework.checker.nullness.qual.Nullable JSONPair>() {
             @NotNull
             @Override
             public JSONPair apply(World world) {
@@ -111,26 +111,18 @@ public class TimingHistory {
                     RegionData data = regions.get(new RegionId(chunk.getX(), chunk.getZ()));
 
                     for (Entity entity : chunk.getEntities()) {
-                        if (entity == null) {
-                            Bukkit.getLogger().warning("Null entity detected in chunk at position x: " + chunk.getX() + ", z: " + chunk.getZ());
-                            continue;
-                        }
 
-                        data.entityCounts.get(entity.getType()).increment();
+	                    data.entityCounts.get(entity.getType()).increment();
                     }
 
                     for (BlockState tileEntity : chunk.getTileEntities(false)) {
-                        if (tileEntity == null) {
-                            Bukkit.getLogger().warning("Null tileentity detected in chunk at position x: " + chunk.getX() + ", z: " + chunk.getZ());
-                            continue;
-                        }
 
-                        data.tileEntityCounts.get(tileEntity.getBlock().getType()).increment();
+	                    data.tileEntityCounts.get(tileEntity.getBlock().getType()).increment();
                     }
                 }
                 return pair(
                     worldMap.get(world.getName()),
-                    toArrayMapper(regions.values(),new Function<RegionData, Object>() {
+                    toArrayMapper(regions.values(), new Function<RegionData, @org.checkerframework.checker.nullness.qual.Nullable Object>() {
                         @NotNull
                         @Override
                         public Object apply(RegionData input) {
@@ -138,27 +130,27 @@ public class TimingHistory {
                                 input.regionId.x,
                                 input.regionId.z,
                                 toObjectMapper(input.entityCounts.entrySet(),
-                                    new Function<Map.Entry<EntityType, Counter>, JSONPair>() {
+                                    new Function<Map.Entry<EntityType, Counter>, @org.checkerframework.checker.nullness.qual.Nullable JSONPair>() {
                                         @NotNull
                                         @Override
                                         public JSONPair apply(Map.Entry<EntityType, Counter> entry) {
                                             entityTypeSet.add(entry.getKey());
                                             return pair(
-                                                    String.valueOf(entry.getKey().ordinal()),
-                                                    entry.getValue().count()
+                                                String.valueOf(entry.getKey().ordinal()),
+                                                entry.getValue().count()
                                             );
                                         }
                                     }
                                 ),
                                 toObjectMapper(input.tileEntityCounts.entrySet(),
-                                    new Function<Map.Entry<Material, Counter>, JSONPair>() {
+                                    new Function<Map.Entry<Material, Counter>, @org.checkerframework.checker.nullness.qual.Nullable JSONPair>() {
                                         @NotNull
                                         @Override
                                         public JSONPair apply(Map.Entry<Material, Counter> entry) {
                                             tileEntityTypeSet.add(entry.getKey());
                                             return pair(
-                                                    String.valueOf(entry.getKey().ordinal()),
-                                                    entry.getValue().count()
+                                                String.valueOf(entry.getKey().ordinal()),
+                                                entry.getValue().count()
                                             );
                                         }
                                     }
@@ -173,7 +165,7 @@ public class TimingHistory {
     static class RegionData {
         final RegionId regionId;
         @SuppressWarnings("Guava")
-        static Function<RegionId, RegionData> LOADER = new Function<RegionId, RegionData>() {
+        static final Function<RegionId, RegionData> LOADER = new Function<>() {
             @NotNull
             @Override
             public RegionData apply(@NotNull RegionId id) {
@@ -204,13 +196,11 @@ public class TimingHistory {
             return regionId.hashCode();
         }
 
-        @SuppressWarnings("unchecked")
         final Map<EntityType, Counter> entityCounts = MRUMapCache.of(LoadingMap.of(
-                new EnumMap<EntityType, Counter>(EntityType.class), k -> new Counter()
+            new EnumMap<>(EntityType.class), k -> new Counter()
         ));
-        @SuppressWarnings("unchecked")
         final Map<Material, Counter> tileEntityCounts = MRUMapCache.of(LoadingMap.of(
-                new EnumMap<Material, Counter>(Material.class), k -> new Counter()
+            new EnumMap<>(Material.class), k -> new Counter()
         ));
 
         static class RegionId {
@@ -259,7 +249,7 @@ public class TimingHistory {
             pair("tk", totalTicks),
             pair("tm", totalTime),
             pair("w", worlds),
-            pair("h", toArrayMapper(entries, new Function<TimingHistoryEntry, Object>() {
+            pair("h", toArrayMapper(entries, new Function<>() {
                 @Nullable
                 @Override
                 public Object apply(TimingHistoryEntry entry) {
@@ -270,7 +260,7 @@ public class TimingHistory {
                     return entry.export();
                 }
             })),
-            pair("mp", toArrayMapper(minuteReports, new Function<MinuteReport, Object>() {
+            pair("mp", toArrayMapper(minuteReports, new Function<>() {
                 @NotNull
                 @Override
                 public Object apply(MinuteReport input) {
@@ -319,7 +309,7 @@ public class TimingHistory {
         final long activatedEntity;
 
         TicksRecord() {
-            timed = timedTicks - (TimingsManager.MINUTE_REPORTS.size() * 1200);
+            timed = timedTicks - (TimingsManager.MINUTE_REPORTS.size() * 1200L);
             player = playerTicks;
             entity = entityTicks;
             tileEntity = tileEntityTicks;
diff --git a/src/main/java/co/aikar/timings/TimingHistoryEntry.java b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
index 86d5ac6bd0d7d0003688761aceb3f3343575319f..7572dfb633781b97c3b1729ba5d1b8c01a1597aa 100644
--- a/src/main/java/co/aikar/timings/TimingHistoryEntry.java
+++ b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
@@ -23,8 +23,6 @@
  */
 package co.aikar.timings;
 
-import com.google.common.base.Function;
-
 import java.util.List;
 import org.jetbrains.annotations.NotNull;
 
@@ -44,13 +42,7 @@ class TimingHistoryEntry {
         List<Object> result = data.export();
         if (children.length > 0) {
             result.add(
-                toArrayMapper(children, new Function<TimingData, Object>() {
-                    @NotNull
-                    @Override
-                    public Object apply(TimingData child) {
-                        return child.export();
-                    }
-                })
+                toArrayMapper(children, TimingData::export)
             );
         }
         return result;
diff --git a/src/main/java/co/aikar/timings/TimingIdentifier.java b/src/main/java/co/aikar/timings/TimingIdentifier.java
index df142a89b8c43acb81eb383eac0ef048a1f49a6e..a9dedf9898822aa55d6f7658424d470965afb993 100644
--- a/src/main/java/co/aikar/timings/TimingIdentifier.java
+++ b/src/main/java/co/aikar/timings/TimingIdentifier.java
@@ -90,7 +90,7 @@ final class TimingIdentifier {
 
     static class TimingGroup {
 
-        private static AtomicInteger idPool = new AtomicInteger(1);
+        private static final AtomicInteger idPool = new AtomicInteger(1);
         final int id = idPool.getAndIncrement();
 
         final String name;
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index da76e1aaee1dee794e38ddd4e0a28e0071e90bbf..be5f5a8dddd4f14b7b10af6a5ec182fb44125428 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -60,10 +60,8 @@ public final class Timings {
     @NotNull
     public static Timing of(@NotNull Plugin plugin, @NotNull String name) {
         Timing pluginHandler = null;
-        if (plugin != null) {
-            pluginHandler = ofSafe(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
-        }
-        return of(plugin, name, pluginHandler);
+	    pluginHandler = ofSafe(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
+	    return of(plugin, name, pluginHandler);
     }
 
     /**
diff --git a/src/main/java/co/aikar/timings/TimingsCommand.java b/src/main/java/co/aikar/timings/TimingsCommand.java
index f7c2245a310a084367ff25db539b3c967d5cb141..95963f5e11275de59197992473579d3ff0cc7b9d 100644
--- a/src/main/java/co/aikar/timings/TimingsCommand.java
+++ b/src/main/java/co/aikar/timings/TimingsCommand.java
@@ -33,7 +33,6 @@ import org.bukkit.util.StringUtil;
 import java.util.ArrayList;
 import java.util.List;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 
 public class TimingsCommand extends BukkitCommand {
@@ -112,7 +111,7 @@ public class TimingsCommand extends BukkitCommand {
 
         if (args.length == 1) {
             return StringUtil.copyPartialMatches(args[0], TIMINGS_SUBCOMMANDS,
-                new ArrayList<String>(TIMINGS_SUBCOMMANDS.size()));
+	            new ArrayList<>(TIMINGS_SUBCOMMANDS.size()));
         }
         return ImmutableList.of();
     }
diff --git a/src/main/java/co/aikar/timings/TimingsManager.java b/src/main/java/co/aikar/timings/TimingsManager.java
index ef824d701c97cad8b31e76ad98c94fc4367a7eda..08cba6586c8b8634981fd6ab69e6ade306246061 100644
--- a/src/main/java/co/aikar/timings/TimingsManager.java
+++ b/src/main/java/co/aikar/timings/TimingsManager.java
@@ -32,7 +32,6 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.java.PluginClassLoader;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
@@ -47,7 +46,7 @@ public final class TimingsManager {
     public static final FullServerTickHandler FULL_SERVER_TICK = new FullServerTickHandler();
     public static final TimingHandler TIMINGS_TICK = Timings.ofSafe("Timings Tick", FULL_SERVER_TICK);
     public static final Timing PLUGIN_GROUP_HANDLER = Timings.ofSafe("Plugins");
-    public static List<String> hiddenConfigs = new ArrayList<String>();
+    public static List<String> hiddenConfigs = new ArrayList<>();
     public static boolean privacy = false;
 
     static final List<TimingHandler> HANDLERS = new ArrayList<>(1024);
@@ -149,9 +148,7 @@ public final class TimingsManager {
     public static Timing getCommandTiming(@Nullable String pluginName, @NotNull Command command) {
         Plugin plugin = null;
         final Server server = Bukkit.getServer();
-        if (!(  server == null || pluginName == null ||
-                "minecraft".equals(pluginName) || "bukkit".equals(pluginName) ||
-                "spigot".equalsIgnoreCase(pluginName) || "paper".equals(pluginName)
+        if (!(pluginName == null || "minecraft".equals(pluginName) || "bukkit".equals(pluginName) || "spigot".equalsIgnoreCase(pluginName) || "paper".equals(pluginName)
         )) {
             plugin = server.getPluginManager().getPlugin(pluginName);
         }
diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java
index ecd149157d4fb80444f34bf5633d74bcdb63dec5..1c8a3fa0d0c8c814a9e849c8f12819471f482346 100644
--- a/src/main/java/co/aikar/timings/TimingsReportListener.java
+++ b/src/main/java/co/aikar/timings/TimingsReportListener.java
@@ -9,7 +9,6 @@ import org.bukkit.command.MessageCommandSender;
 import org.bukkit.command.RemoteConsoleCommandSender;
 
 import java.util.List;
-import java.util.UUID;
 
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -66,9 +65,10 @@ public class TimingsReportListener implements net.kyori.adventure.audience.Forwa
     public void addConsoleIfNeeded() {
         boolean hasConsole = false;
         for (CommandSender sender : this.senders) {
-            if (sender instanceof ConsoleCommandSender || sender instanceof RemoteConsoleCommandSender) {
-                hasConsole = true;
-            }
+	        if (sender instanceof ConsoleCommandSender || sender instanceof RemoteConsoleCommandSender) {
+		        hasConsole = true;
+		        break;
+	        }
         }
         if (!hasConsole) {
             this.senders.add(Bukkit.getConsoleSender());
diff --git a/src/main/java/co/aikar/util/Counter.java b/src/main/java/co/aikar/util/Counter.java
index 80155072d1004e34e04342d434cf7d75f0b7e29d..baf5ba2c15b213773f1f99d0860692788b2e7a8b 100644
--- a/src/main/java/co/aikar/util/Counter.java
+++ b/src/main/java/co/aikar/util/Counter.java
@@ -1,11 +1,11 @@
 package co.aikar.util;
 
 import com.google.common.collect.ForwardingMap;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.HashMap;
 import java.util.Map;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 public class Counter <T> extends ForwardingMap<T, Long> {
     private final Map<T, Long> counts = new HashMap<>();
@@ -20,7 +20,7 @@ public class Counter <T> extends ForwardingMap<T, Long> {
         return decrement(key, -amount);
     }
     public long increment(@Nullable T key, long amount) {
-        Long count = this.getCount(key);
+        long count = this.getCount(key);
         count += amount;
         this.counts.put(key, count);
         return count;
diff --git a/src/main/java/co/aikar/util/JSONUtil.java b/src/main/java/co/aikar/util/JSONUtil.java
index 190bf0598442c89c2a1c93ad7c8c1a29797304ae..7b0cf8a89d65f175df47a7dff0aa800ef91bc95c 100644
--- a/src/main/java/co/aikar/util/JSONUtil.java
+++ b/src/main/java/co/aikar/util/JSONUtil.java
@@ -5,10 +5,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.json.simple.JSONArray;
-import org.json.simple.JSONObject;
 
-import java.util.ArrayList;
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
diff --git a/src/main/java/co/aikar/util/LoadingMap.java b/src/main/java/co/aikar/util/LoadingMap.java
index aedbb03321886cb267879d7994653e447b485f6a..baa038a55cbd1a9ad9053e230b07b20cda12b0fa 100644
--- a/src/main/java/co/aikar/util/LoadingMap.java
+++ b/src/main/java/co/aikar/util/LoadingMap.java
@@ -23,7 +23,6 @@
  */
 package co.aikar.util;
 
-import com.google.common.base.Preconditions;
 import java.lang.reflect.Constructor;
 import java.util.AbstractMap;
 import java.util.Collection;
@@ -306,6 +305,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
         return backingMap.entrySet();
     }
 
+    /** @noinspection MethodDoesntCallSuperMethod*/
     @NotNull
     public LoadingMap<K, V> clone() {
         return new LoadingMap<>(backingMap, loader);
@@ -325,7 +325,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
                 }
             } catch (NoSuchMethodException e) {
                 throw new IllegalStateException(
-                    valueClass.getName() + " does not have a constructor for " + (keyClass != null ? keyClass.getName() : null));
+	                valueClass.getName() + " does not have a constructor for " + keyClass.getName());
             }
         }
 
diff --git a/src/main/java/co/aikar/util/MRUMapCache.java b/src/main/java/co/aikar/util/MRUMapCache.java
index 5989ee21297935651b0edd44b8239e655eaef1d9..d7aa8cb9854d98a164e1aa59e4ba77379b49dd9a 100644
--- a/src/main/java/co/aikar/util/MRUMapCache.java
+++ b/src/main/java/co/aikar/util/MRUMapCache.java
@@ -106,6 +106,6 @@ public class MRUMapCache<K, V> extends AbstractMap<K, V> {
      */
     @NotNull
     public static <K, V> Map<K, V> of(@NotNull Map<K, V> map) {
-        return new MRUMapCache<K, V>(map);
+        return new MRUMapCache<>(map);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/HeightmapType.java b/src/main/java/com/destroystokyo/paper/HeightmapType.java
index 709e44ea1b14ab6917501c928e689cc6cbdf4bb4..c51b0426af6397b18db9e78fa417b90be2e2673d 100644
--- a/src/main/java/com/destroystokyo/paper/HeightmapType.java
+++ b/src/main/java/com/destroystokyo/paper/HeightmapType.java
@@ -35,5 +35,5 @@ public enum HeightmapType {
     /**
      * References the highest solid or liquid block in a world, excluding leaves.
      */
-    SOLID_OR_LIQUID_NO_LEAVES;
+    SOLID_OR_LIQUID_NO_LEAVES
 }
diff --git a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
index a02a02aa0c87e0f0ed9e509e4dcab01565b3d92a..c38094b6ce0d68a8be10e7afd2958368ac5273e6 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
@@ -59,6 +59,7 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
         this(key != null ? key : NamespacedKey.randomKey(), materials, ((Predicate<Material>) Material::isLegacy).negate());
     }
 
+    @SafeVarargs
     public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Collection<Material> materials, @NotNull Predicate<Material>...globalPredicates) {
         super(Material.class, key != null ? key : NamespacedKey.randomKey(), materials, globalPredicates);
     }
diff --git a/src/main/java/com/destroystokyo/paper/MaterialTags.java b/src/main/java/com/destroystokyo/paper/MaterialTags.java
index 3f36165d89ae4aaa153dcb9ddbb8c58a9b1a046f..94b09cd53ed9932f7b0998bd408fe96c142b94e7 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialTags.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialTags.java
@@ -519,7 +519,6 @@ public class MaterialTags {
     public static final MaterialSetTag THROWABLE_PROJECTILES = new MaterialSetTag(keyFor("throwable_projectiles"))
         .add(Material.EGG, Material.SNOWBALL, Material.SPLASH_POTION, Material.TRIDENT, Material.ENDER_PEARL, Material.EXPERIENCE_BOTTLE, Material.FIREWORK_ROCKET);
 
-    @SuppressWarnings("unchecked")
     public static final MaterialSetTag COLORABLE = new MaterialSetTag(keyFor("colorable"))
         .add(Tag.WOOL, Tag.CARPETS).add(SHULKER_BOXES, STAINED_GLASS, STAINED_GLASS_PANES, CONCRETES, BEDS);
         //.ensureSize("COLORABLE", 81); unit test don't have the vanilla item tags, so counts don't line up for real
diff --git a/src/main/java/com/destroystokyo/paper/NamespacedTag.java b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
index 28f3fda950999a9c964a3608042ca60567ae1d6a..45339395469507886806130a55f4ffdec6e43b2a 100644
--- a/src/main/java/com/destroystokyo/paper/NamespacedTag.java
+++ b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
@@ -46,8 +46,8 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      */
     @Deprecated
     public NamespacedTag(@NotNull String namespace, @NotNull String key) {
-        Preconditions.checkArgument(namespace != null && VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
-        Preconditions.checkArgument(key != null && VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
+        Preconditions.checkArgument(VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
+        Preconditions.checkArgument(VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
 
         this.namespace = namespace;
         this.key = key;
@@ -69,8 +69,8 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @param key the key to create
      */
     public NamespacedTag(@NotNull Plugin plugin, @NotNull String key) {
-        Preconditions.checkArgument(plugin != null, "Plugin cannot be null");
-        Preconditions.checkArgument(key != null, "Key cannot be null");
+        Preconditions.checkArgument(true, "Plugin cannot be null");
+        Preconditions.checkArgument(true, "Key cannot be null");
 
         this.namespace = plugin.getName().toLowerCase(Locale.ROOT);
         this.key = key.toLowerCase().toLowerCase(Locale.ROOT);
diff --git a/src/main/java/com/destroystokyo/paper/Title.java b/src/main/java/com/destroystokyo/paper/Title.java
index 9e90c3df567a65b48a0b9341f784eb902cb35d8c..644d6c9c3b72538cd0fcff4d8c588fec53d698f5 100644
--- a/src/main/java/com/destroystokyo/paper/Title.java
+++ b/src/main/java/com/destroystokyo/paper/Title.java
@@ -8,10 +8,7 @@ import org.bukkit.entity.Player;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
-import java.util.ArrayList;
-import java.util.Arrays;
 import java.util.Collection;
-import java.util.List;
 
 import static com.google.common.base.Preconditions.checkArgument;
 import static com.google.common.base.Preconditions.checkNotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
index a83c286c1c11af25fc4d16af7a42b95ce90b9dee..9f8041e76d03572fcfe0099f23f1615157856bc3 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
@@ -97,7 +97,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
         DAMAGED(Material.DAMAGED_ANVIL),
         BROKEN(Material.AIR);
 
-        private Material material;
+        private final Material material;
 
         DamageState(@NotNull Material material) {
             this.material = material;
diff --git a/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java b/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
index 978813b94a5eae0afccbd3b38b463091a46b56ac..ea929a3e4c2c28452cfcf54ee4a44a64d13c8ab8 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
@@ -15,8 +15,8 @@ public class BeaconEffectEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     private PotionEffect effect;
-    private Player player;
-    private boolean primary;
+    private final Player player;
+    private final boolean primary;
 
     public BeaconEffectEvent(@NotNull Block block, @NotNull PotionEffect effect, @NotNull Player player, boolean primary) {
         super(block);
diff --git a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
index 73dabb82c7fbea3f0cccade0a2944b11a80ede06..563ffad23b6577b579d51a3bb7947b20ebaaa2ed 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
@@ -19,8 +19,8 @@ import org.jetbrains.annotations.Nullable;
 public class TNTPrimeEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
-    @NotNull private PrimeReason reason;
-    @Nullable private Entity primerEntity;
+    @NotNull private final PrimeReason reason;
+    @Nullable private final Entity primerEntity;
 
     public TNTPrimeEvent(@NotNull Block theBlock, @NotNull PrimeReason reason, @Nullable Entity primerEntity) {
         super(theBlock);
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
index f530a3d9314e17d1da896cac633f6a422258d9a9..84ee5904b450d0b7e024039875d8a18cf10b03aa 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
@@ -24,10 +24,8 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Enderman;
-import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
index 806112a8b5a7ce31166675f5b074ceaf42e364b6..bed4727417f57337b1f2f5b09e3c7efbbc01e635 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
@@ -1,9 +1,7 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Enderman;
-import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
index 07660202e41ee86f1b66bad3335cf6fe126e7f9c..a8c4c1cee9ed97523458e21995dd2a87818c4ca7 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Entity;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
index e5dbbd660409bae0d3b96e83390511d3a423a52e..d23773d9013bfa4da085b91669e39768fb6e8800 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Entity;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
index 3b725a489008d333630af166d2be5fc48168a6b9..b0444fd72a1bc6bdf598fc76d5cd627c1bd8abc3 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
@@ -5,7 +5,6 @@ import org.bukkit.entity.Entity;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
-import org.bukkit.event.entity.EntityEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
 
 import java.util.Collections;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
index 112a0dbf522b8e74ce882678434923814e6b187f..1a89870e118aae3fd7c0b7f218c14f51083d1946 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
@@ -2,7 +2,6 @@ package com.destroystokyo.paper.event.entity;
 
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
index 085d77dde83d6ed13eb83f23cf3e51d380187c9c..cd5e0d6f605f47ae50ab387f28658771ec56a12a 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
@@ -71,7 +71,7 @@ public class ThrownEggHatchEvent extends Event {
      * @param hatchType The type of the mob being hatched by the egg
      */
     public void setHatchingType(@NotNull EntityType hatchType) {
-        if (!hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
+        if (hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
         this.hatchType = hatchType;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
index a315c5185cd465dcf63c0ababef195da76dfc786..16521e5d1a1d08b0a6dedf516ef3d2c41c3273dd 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
@@ -15,7 +15,7 @@ public class TurtleLayEggEvent extends EntityEvent implements Cancellable {
     private boolean cancelled = false;
     @NotNull
     private final Location location;
-    private int eggCount;
+    private final int eggCount;
 
     public TurtleLayEggEvent(@NotNull Turtle turtle, @NotNull Location location, int eggCount) {
         super(turtle);
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
index 5b28e9b1daba7834af67dbc193dd656bedd9a994..ef99d7dde1573fcbb1ef0f298768b63381b3be8e 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -6,7 +6,6 @@ import java.lang.reflect.Method;
 
 import com.destroystokyo.paper.util.SneakyThrow;
 import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
@@ -31,7 +30,7 @@ public class MethodHandleEventExecutor implements EventExecutor {
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull Listener listener, @NotNull Event event) {
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(listener, event);
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
index c83672427324bd068ed52916f700b68446a226f6..0d2b94b5589de44145dc1b0401a8fd2f49b1a7cc 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -8,9 +8,7 @@ import java.lang.reflect.Modifier;
 import com.destroystokyo.paper.util.SneakyThrow;
 import com.google.common.base.Preconditions;
 
-import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
 import org.bukkit.event.Listener;
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
@@ -21,7 +19,7 @@ public class StaticMethodHandleEventExecutor implements EventExecutor {
 
     public StaticMethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
         Preconditions.checkArgument(Modifier.isStatic(m.getModifiers()), "Not a static method: %s", m);
-        Preconditions.checkArgument(eventClass != null, "eventClass is null");
+        Preconditions.checkArgument(true, "eventClass is null");
         this.eventClass = eventClass;
         try {
             m.setAccessible(true);
@@ -32,7 +30,7 @@ public class StaticMethodHandleEventExecutor implements EventExecutor {
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull Listener listener, @NotNull Event event) {
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(event);
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
index b6e7d8ee8d903ebf975d60bec0e08603d9a49fdb..8992087cb3f705845aed87d6f4bce0bb40a45f08 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -1,14 +1,14 @@
 package com.destroystokyo.paper.event.executor.asm;
 
-import java.lang.reflect.Method;
-import java.util.concurrent.atomic.AtomicInteger;
-
 import org.bukkit.plugin.EventExecutor;
 import org.jetbrains.annotations.NotNull;
 import org.objectweb.asm.ClassWriter;
 import org.objectweb.asm.Type;
 import org.objectweb.asm.commons.GeneratorAdapter;
 
+import java.lang.reflect.Method;
+import java.util.concurrent.atomic.AtomicInteger;
+
 import static org.objectweb.asm.Opcodes.*;
 
 public class ASMEventExecutorGenerator {
@@ -23,8 +23,8 @@ public class ASMEventExecutorGenerator {
         methodGenerator.returnValue();
         methodGenerator.endMethod();
         // Generate the execute method
-        methodGenerator = new GeneratorAdapter(writer.visitMethod(ACC_PUBLIC, "execute", "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Event;)V", null, null), ACC_PUBLIC, "execute", "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Listener;)V");;
-        methodGenerator.loadArg(0);
+        methodGenerator = new GeneratorAdapter(writer.visitMethod(ACC_PUBLIC, "execute", "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Event;)V", null, null), ACC_PUBLIC, "execute", "(Lorg/bukkit/event/Listener;Lorg/bukkit/event/Listener;)V");
+	    methodGenerator.loadArg(0);
         methodGenerator.checkCast(Type.getType(m.getDeclaringClass()));
         methodGenerator.loadArg(1);
         methodGenerator.checkCast(Type.getType(m.getParameterTypes()[0]));
@@ -38,7 +38,7 @@ public class ASMEventExecutorGenerator {
         return writer.toByteArray();
     }
 
-    public static AtomicInteger NEXT_ID = new AtomicInteger(1);
+    public static final AtomicInteger NEXT_ID = new AtomicInteger(1);
     @NotNull
     public static String generateName() {
         int id = NEXT_ID.getAndIncrement();
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
index f79685b48bb581277a6891927988b6f7a4389dc4..82f30895b5945bfe344404a0b64792989acecab0 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
@@ -9,7 +9,7 @@ public interface ClassDefiner {
      *
      * @return if classes bypass access checks
      */
-    public default boolean isBypassAccessChecks() {
+    default boolean isBypassAccessChecks() {
         return false;
     }
 
@@ -23,11 +23,10 @@ public interface ClassDefiner {
      * @throws ClassFormatError     if the class data is invalid
      * @throws NullPointerException if any of the arguments are null
      */
-    @NotNull
-    public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte[] data);
+    @NotNull Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte[] data);
 
     @NotNull
-    public static ClassDefiner getInstance() {
+    static ClassDefiner getInstance() {
         return SafeClassDefiner.INSTANCE;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
index ac99477e9f2c08041aeff31abc1d1edee58d0a67..01eb8747ad610f4da46adae32a024487996b8121 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
@@ -1,13 +1,12 @@
 package com.destroystokyo.paper.event.executor.asm;
 
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentMap;
 
 import com.google.common.base.Preconditions;
 
 import com.google.common.collect.MapMaker;
 import org.jetbrains.annotations.NotNull;
-import org.objectweb.asm.Type;
+
 
 public class SafeClassDefiner implements ClassDefiner {
     /* default */ static final SafeClassDefiner INSTANCE = new SafeClassDefiner();
@@ -21,7 +20,7 @@ public class SafeClassDefiner implements ClassDefiner {
     public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte[] data) {
         GeneratedClassLoader loader = loaders.computeIfAbsent(parentLoader, GeneratedClassLoader::new);
         synchronized (loader.getClassLoadingLock(name)) {
-            Preconditions.checkState(!loader.hasClass(name), "%s already defined", name);
+            Preconditions.checkState(loader.hasClass(name), "%s already defined", name);
             Class<?> c = loader.define(name, data);
             assert c.getName().equals(name);
             return c;
@@ -39,7 +38,7 @@ public class SafeClassDefiner implements ClassDefiner {
 
         private Class<?> define(@NotNull String name, byte[] data) {
             synchronized (getClassLoadingLock(name)) {
-                assert !hasClass(name);
+                assert hasClass(name);
                 Class<?> c = defineClass(name, data, 0, data.length);
                 resolveClass(c);
                 return c;
@@ -56,9 +55,9 @@ public class SafeClassDefiner implements ClassDefiner {
             synchronized (getClassLoadingLock(name)) {
                 try {
                     Class.forName(name);
-                    return true;
-                } catch (ClassNotFoundException e) {
                     return false;
+                } catch (ClassNotFoundException e) {
+                    return true;
                 }
             }
         }
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
index 449e8c06f8434b59d49a76481fa60c5c49e80579..7a144854ec8998e758bf2327d30d8165fbf39e0f 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
@@ -1,7 +1,5 @@
 package com.destroystokyo.paper.event.inventory;
 
-import org.bukkit.event.HandlerList;
-import org.bukkit.event.inventory.InventoryEvent;
 import org.bukkit.inventory.GrindstoneInventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
index 045ce9ec3c9134aced5f5235b760ac85599d16c6..d8da8903d28ad715e0768fa5c58906540762ca0e 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
@@ -2,7 +2,6 @@ package com.destroystokyo.paper.event.inventory;
 
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.inventory.InventoryEvent;
-import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
index e9a76a25fa5445905a09dbc2fd5b35bff56d80b3..18ea8ee77d5cf370b1a3e7cd5dcc57a4c14cb9cf 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
@@ -15,7 +15,7 @@ public class PlayerElytraBoostEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled = false;
     @NotNull private final ItemStack itemStack;
-    @NotNull private Firework firework;
+    @NotNull private final Firework firework;
     private boolean consume = true;
 
     public PlayerElytraBoostEvent(@NotNull Player player, @NotNull ItemStack itemStack, @NotNull Firework firework) {
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
index 289a0d784a3c74caf8a7231b4dd166096b1849a1..2371deab89caf3f77cc9a8f668aef1427031a485 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
@@ -19,7 +19,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
     @NotNull private Location from;
-    @NotNull private Location to;
+    @NotNull private final Location to;
 
     public PlayerJumpEvent(@NotNull final Player player, @NotNull final Location from, @NotNull final Location to) {
         super(player);
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
index f7beb22d5105157940b39efe594ace9d4cb153f5..d117956ca6026ad676e1aa551b4f10ca83be0b7e 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
@@ -26,7 +26,6 @@ package com.destroystokyo.paper.event.player;
 import org.bukkit.entity.ExperienceOrb;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.jetbrains.annotations.NotNull;
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
index 5d04a22fd6964d8d44a2aa069c9629722893b1f4..5cf47f7ffd039add8bcdce9e08f52b2fc5aafcc6 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
@@ -25,7 +25,6 @@ package com.destroystokyo.paper.event.player;
 
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
index 4dcf6242c9acc62d030a94f67b78729ed29f8c85..2840f684f8a5d2018fa6a31b59b75be80e97f704 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
@@ -1,8 +1,6 @@
 package com.destroystokyo.paper.event.profile;
 
-import com.destroystokyo.paper.profile.PlayerProfile;
 import com.destroystokyo.paper.profile.ProfileProperty;
-import com.google.common.collect.ArrayListMultimap;
 import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
diff --git a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
index 619ed37169c126a8c75d02699a04728bac49d10d..07a5f8d538384d8e6bfbb890f0e8c53aaf6d26b3 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
@@ -23,7 +23,6 @@
 
 package com.destroystokyo.paper.event.server;
 
-import com.google.common.collect.ImmutableList;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.command.Command;
@@ -31,11 +30,11 @@ import org.bukkit.command.CommandSender;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
 
 import java.util.ArrayList;
 import java.util.List;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * Allows plugins to compute tab completion results asynchronously. If this event provides completions, then the standard synchronous process will not be fired to populate the results. However, the synchronous TabCompleteEvent will fire with the Async results.
@@ -51,7 +50,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
     @NotNull private List<String> completions;
     private boolean cancelled;
     private boolean handled = false;
-    private boolean fireSyncHandler = true;
+    private final boolean fireSyncHandler = true;
 
     public AsyncTabCompleteEvent(@NotNull CommandSender sender, @NotNull List<String> completions, @NotNull String buffer, boolean isCommand, @Nullable Location loc) {
         super(true);
diff --git a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
index 77a19995f6792a182c5a43d6714e7bda0f42df5b..ed41986aaca15f66904705473523d9f30763bd7c 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
@@ -102,7 +102,6 @@ public final class GS4QueryEvent extends Event {
          * Full query asks pretty much everything present on this event (only hardcoded values cannot be modified here).
          */
         FULL
-        ;
     }
 
     public final static class QueryResponse {
@@ -260,8 +259,8 @@ public final class GS4QueryEvent extends Event {
             private int maxPlayers;
             private int port;
 
-            private List<String> players = new ArrayList<>();
-            private List<PluginInformation> plugins = new ArrayList<>();
+            private final List<String> players = new ArrayList<>();
+            private final List<PluginInformation> plugins = new ArrayList<>();
 
             private Builder() {}
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
index 2f573299a9a817a98372817a1de8bf641aaca956..8406c852c4fd806145ec8d89f176af464e0e922b 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
@@ -1,7 +1,6 @@
 package com.destroystokyo.paper.event.server;
 
 import com.google.common.base.Preconditions;
-import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
@@ -13,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class ServerExceptionEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
-    @NotNull private ServerException exception;
+    @NotNull private final ServerException exception;
 
     public ServerExceptionEvent(@NotNull ServerException exception) {
         super(!Bukkit.isPrimaryThread());
diff --git a/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java b/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
index fdd5eedb2b7401439912a3a4343a920f32edc860..6ecb63067d73c8677d0c6c544ff5fc9b6f6ca9c0 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class WhitelistToggleEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
 
-    private boolean enabled;
+    private final boolean enabled;
 
     public WhitelistToggleEvent(boolean enabled) {
         this.enabled = enabled;
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
index e762ed0dbad51625e65fef2e1898679108459a36..f235f199af9eb52933093224e991ae3b62948375 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
@@ -27,7 +27,6 @@ public class ServerInternalException extends ServerException {
     public static void reportInternalException(Throwable cause) {
         try {
             Bukkit.getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(cause)));
-            ;
         } catch (Throwable t) {
             t.printStackTrace(); // Don't want to rethrow!
         }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
index 6defac287d0214fdf99418d979144050cc1e53bc..144de8be0c7c5c5bc22c90412ac8b8373e44e1b9 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
@@ -1,7 +1,5 @@
 package com.destroystokyo.paper.exception;
 
-import com.google.common.base.Preconditions;
-import org.apache.commons.lang.Validate;
 import org.bukkit.plugin.Plugin;
 
 import static com.google.common.base.Preconditions.*;
diff --git a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
index 9db0056ab94145819628b3ad8d8d26130d117fcf..b27281a6538cb223f6dffbf3859366dedbbf75f1 100644
--- a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
+++ b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
@@ -5,7 +5,7 @@ import org.jetbrains.annotations.NotNull;
 public class SneakyThrow {
 
     public static void sneaky(@NotNull Throwable exception) {
-        SneakyThrow.<RuntimeException>throwSneaky(exception);
+        SneakyThrow.throwSneaky(exception);
     }
 
     @SuppressWarnings("unchecked")
diff --git a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
index 881e545df51409e6101b4bb49f699655a744f13f..a824684d550335eaf7373c7323ff0d63ab125c9d 100644
--- a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
@@ -5,7 +5,6 @@ import org.bukkit.entity.Entity;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.block.BlockEvent;
-import org.bukkit.potion.PotionEffect;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
index 299ff57b3001b4be41cf2f0eea29ed82b8fb8ec7..e65537369b2a6687900bb62a1aeb1030921abb03 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
@@ -78,7 +78,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
     }
 
     private void validateLocation(@NotNull Location loc) {
-        Preconditions.checkArgument(loc != null, "Cannot use null location!");
+        Preconditions.checkArgument(true, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
index 26370e46e4a12e3470e9bb747fac5786a7305810..dd4f82061877911a550ab58f6defecc36c4c8ddd 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
@@ -7,7 +7,7 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
+
 
 public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancellable {
 
diff --git a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
index 20c25a0f9d65188402e8bb3981348bc6462904bf..588e057b3b243fc9eac0cb899434893d8cf79a59 100644
--- a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
@@ -3,7 +3,6 @@ package io.papermc.paper.event.world;
 import org.bukkit.GameRule;
 import org.bukkit.World;
 import org.bukkit.command.CommandSender;
-import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.world.WorldEvent;
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
index 4a10c773a8d05a596066e63306dead74c1363fd7..934069219a75b5f6bbac99a95472553e5faac25f 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
@@ -5,7 +5,6 @@ import org.bukkit.World;
 import org.bukkit.WorldBorder;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
-import org.bukkit.event.world.WorldEvent;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
index 67bd469d3680c9554ce6c1d5493826a252682835..1a7477a6fe0001fd7d9bca6e7d3a24edb4de9430 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
@@ -2,7 +2,6 @@ package io.papermc.paper.event.world.border;
 
 import org.bukkit.World;
 import org.bukkit.WorldBorder;
-import org.bukkit.event.Cancellable;
 import org.bukkit.event.world.WorldEvent;
 import org.jetbrains.annotations.NotNull;
 
diff --git a/src/main/java/io/papermc/paper/inventory/ItemRarity.java b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
index 74ef8395cc040ce488c2acaa416db20272cc2734..6e72efe45efd9ddf824dbeef1dec6562741f3d54 100644
--- a/src/main/java/io/papermc/paper/inventory/ItemRarity.java
+++ b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
@@ -11,7 +11,7 @@ public enum ItemRarity {
     RARE(NamedTextColor.AQUA),
     EPIC(NamedTextColor.LIGHT_PURPLE);
 
-    TextColor color;
+    final TextColor color;
 
     ItemRarity(TextColor color) {
         this.color = color;
diff --git a/src/main/java/io/papermc/paper/tag/BaseTag.java b/src/main/java/io/papermc/paper/tag/BaseTag.java
index 4b8552e4e4c07b197fa9431fa911535b0222561e..8c5628038cebe83c195f825d9b18a10e75886479 100644
--- a/src/main/java/io/papermc/paper/tag/BaseTag.java
+++ b/src/main/java/io/papermc/paper/tag/BaseTag.java
@@ -6,11 +6,7 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.Tag;
 import org.jetbrains.annotations.NotNull;
 
-import java.util.Collection;
-import java.util.EnumSet;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
+import java.util.*;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
 
@@ -25,6 +21,7 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
         add(filter);
     }
 
+    @SafeVarargs
     public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull T...values) {
         this(clazz, key, Lists.newArrayList(values));
     }
@@ -33,8 +30,9 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
         this(clazz, key, values, o -> true);
     }
 
+    @SafeVarargs
     public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Collection<T> values, @NotNull Predicate<T>... globalPredicates) {
-        this.key = key != null ? key : NamespacedKey.randomKey();
+        this.key = key;
         this.tagged = clazz.isEnum() ? createEnumSet(clazz) : new HashSet<>();
         this.tagged.addAll(values);
         this.globalPredicates = Lists.newArrayList(globalPredicates);
@@ -62,16 +60,18 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
         return tagged.contains(item);
     }
 
+    @SafeVarargs
     @NotNull
-    public C add(@NotNull Tag<T>...tags) {
+    public final C add(@NotNull Tag<T>... tags) {
         for (Tag<T> tag : tags) {
             add(tag.getValues());
         }
         return (C) this;
     }
 
+    @SafeVarargs
     @NotNull
-    public C add(@NotNull T...values) {
+    public final C add(@NotNull T... values) {
         this.tagged.addAll(Lists.newArrayList(values));
         return (C) this;
     }
@@ -102,16 +102,18 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
         return add(value -> getName(value).startsWith(with));
     }
 
+    @SafeVarargs
     @NotNull
-    public C not(@NotNull Tag<T>...tags) {
+    public final C not(@NotNull Tag<T>... tags) {
         for (Tag<T> tag : tags) {
             not(tag.getValues());
         }
         return (C) this;
     }
 
+    @SafeVarargs
     @NotNull
-    public C not(@NotNull T...values) {
+    public final C not(@NotNull T... values) {
         this.tagged.removeAll(Lists.newArrayList(values));
         return (C) this;
     }
diff --git a/src/main/java/io/papermc/paper/tag/EntitySetTag.java b/src/main/java/io/papermc/paper/tag/EntitySetTag.java
index c89c4619aaf388197834d98eb95af2f1e93db871..8426a95474633c3aa621c8dbfb0158017c82587d 100644
--- a/src/main/java/io/papermc/paper/tag/EntitySetTag.java
+++ b/src/main/java/io/papermc/paper/tag/EntitySetTag.java
@@ -24,6 +24,7 @@ public class EntitySetTag extends BaseTag<EntityType, EntitySetTag> {
         super(EntityType.class, key, values);
     }
 
+    @SafeVarargs
     public EntitySetTag(@NotNull NamespacedKey key, @NotNull Collection<EntityType> values, @NotNull Predicate<EntityType>... globalPredicates) {
         super(EntityType.class, key, values, globalPredicates);
     }
diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index e7563acf43fdf4f3f3c44b76441757f81e971117..9362078becf402a74cdaedeb2cee96890e614af9 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -1,11 +1,12 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.HashMap;
 import org.apache.commons.lang.Validate;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+
 /**
  * Represents the art on a painting
  */
@@ -42,7 +43,7 @@ public enum Art implements Keyed {
     private static final HashMap<String, Art> BY_NAME = Maps.newHashMap();
     private static final HashMap<Integer, Art> BY_ID = Maps.newHashMap();
 
-    private Art(int id, int width, int height) {
+    Art(int id, int width, int height) {
         this.id = id;
         this.width = width;
         this.height = height;
diff --git a/src/main/java/org/bukkit/Axis.java b/src/main/java/org/bukkit/Axis.java
index fd86d68d12a525d6d31fdc73385a4682e4f316be..8346d64540e257ec833a45516297c31f7fe12755 100644
--- a/src/main/java/org/bukkit/Axis.java
+++ b/src/main/java/org/bukkit/Axis.java
@@ -17,5 +17,5 @@ public enum Axis {
     /**
      * The z axis.
      */
-    Z;
+    Z
 }
diff --git a/src/main/java/org/bukkit/BanEntry.java b/src/main/java/org/bukkit/BanEntry.java
index 2cf11ca4f67480b5e03d2dad0d3ee9283cddc48a..988279e38694225caf7ca383fb61f4359ec5757d 100644
--- a/src/main/java/org/bukkit/BanEntry.java
+++ b/src/main/java/org/bukkit/BanEntry.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
-import java.util.Date;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Date;
+
 /**
  * A single entry from a ban list. This may represent either a player ban or
  * an IP ban.
@@ -49,16 +50,14 @@ public interface BanEntry {
      *
      * @return the target name or IP address
      */
-    @NotNull
-    public String getTarget();
+    @NotNull String getTarget();
 
     /**
      * Gets the date this ban entry was created.
      *
      * @return the creation date
      */
-    @NotNull
-    public Date getCreated();
+    @NotNull Date getCreated();
 
     /**
      * Sets the date this ban entry was created.
@@ -66,7 +65,7 @@ public interface BanEntry {
      * @param created the new created date, cannot be null
      * @see #save() saving changes
      */
-    public void setCreated(@NotNull Date created);
+    void setCreated(@NotNull Date created);
 
     /**
      * Gets the source of this ban.
@@ -76,8 +75,7 @@ public interface BanEntry {
      *
      * @return the source of the ban
      */
-    @NotNull
-    public String getSource();
+    @NotNull String getSource();
 
     /**
      * Sets the source of this ban.
@@ -88,15 +86,14 @@ public interface BanEntry {
      * @param source the new source where null values become empty strings
      * @see #save() saving changes
      */
-    public void setSource(@NotNull String source);
+    void setSource(@NotNull String source);
 
     /**
      * Gets the date this ban expires on, or null for no defined end date.
      *
      * @return the expiration date
      */
-    @Nullable
-    public Date getExpiration();
+    @Nullable Date getExpiration();
 
     /**
      * Sets the date this ban expires on. Null values are considered
@@ -106,15 +103,14 @@ public interface BanEntry {
      *     eternity
      * @see #save() saving changes
      */
-    public void setExpiration(@Nullable Date expiration);
+    void setExpiration(@Nullable Date expiration);
 
     /**
      * Gets the reason for this ban.
      *
      * @return the ban reason, or null if not set
      */
-    @Nullable
-    public String getReason();
+    @Nullable String getReason();
 
     /**
      * Sets the reason for this ban. Reasons must not be null.
@@ -123,7 +119,7 @@ public interface BanEntry {
      *     default
      * @see #save() saving changes
      */
-    public void setReason(@Nullable String reason);
+    void setReason(@Nullable String reason);
 
     /**
      * Saves the ban entry, overwriting any previous data in the ban list.
@@ -131,5 +127,5 @@ public interface BanEntry {
      * Saving the ban entry of an unbanned player will cause the player to be
      * banned once again.
      */
-    public void save();
+    void save();
 }
diff --git a/src/main/java/org/bukkit/BanList.java b/src/main/java/org/bukkit/BanList.java
index 96ef22fe879c7be4f67bbb4d60c45ad11764dd5b..08d001497ab10c1bcbe549f0a71814e7b8fcee32 100644
--- a/src/main/java/org/bukkit/BanList.java
+++ b/src/main/java/org/bukkit/BanList.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
-import java.util.Date;
-import java.util.Set;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Date;
+import java.util.Set;
+
 /**
  * A ban list, containing bans of some {@link Type}.
  */
@@ -13,7 +14,7 @@ public interface BanList {
     /**
      * Represents a ban-type that a {@link BanList} may track.
      */
-    public enum Type {
+    enum Type {
         /**
          * Banned player names
          */
@@ -31,8 +32,7 @@ public interface BanList {
      * @param target entry parameter to search for
      * @return the corresponding entry, or null if none found
      */
-    @Nullable
-    public BanEntry getBanEntry(@NotNull String target);
+    @Nullable BanEntry getBanEntry(@NotNull String target);
 
     /**
      * Adds a ban to the this list. If a previous ban exists, this will
@@ -46,16 +46,14 @@ public interface BanList {
      * @return the entry for the newly created ban, or the entry for the
      *     (updated) previous ban
      */
-    @Nullable
-    public BanEntry addBan(@NotNull String target, @Nullable String reason, @Nullable Date expires, @Nullable String source);
+    @Nullable BanEntry addBan(@NotNull String target, @Nullable String reason, @Nullable Date expires, @Nullable String source);
 
     /**
      * Gets a set containing every {@link BanEntry} in this list.
      *
      * @return an immutable set containing every entry tracked by this list
      */
-    @NotNull
-    public Set<BanEntry> getBanEntries();
+    @NotNull Set<BanEntry> getBanEntries();
 
     /**
      * Gets if a {@link BanEntry} exists for the target, indicating an active
@@ -65,7 +63,7 @@ public interface BanList {
      * @return true if a {@link BanEntry} exists for the name, indicating an
      *     active ban status, false otherwise
      */
-    public boolean isBanned(@NotNull String target);
+    boolean isBanned(@NotNull String target);
 
     /**
      * Removes the specified target from this list, therefore indicating a
@@ -73,5 +71,5 @@ public interface BanList {
      *
      * @param target the target to remove from this list
      */
-    public void pardon(@NotNull String target);
+    void pardon(@NotNull String target);
 }
diff --git a/src/main/java/org/bukkit/BlockChangeDelegate.java b/src/main/java/org/bukkit/BlockChangeDelegate.java
index 41eff1a31afbd29fa0d6aad38fed619166649c9f..1a0730ea2be72a34ce1a79adc933b5c8485894ab 100644
--- a/src/main/java/org/bukkit/BlockChangeDelegate.java
+++ b/src/main/java/org/bukkit/BlockChangeDelegate.java
@@ -19,7 +19,7 @@ public interface BlockChangeDelegate {
      * @param blockData Block data
      * @return true if the block was set successfully
      */
-    public boolean setBlockData(int x, int y, int z, @NotNull BlockData blockData);
+    boolean setBlockData(int x, int y, int z, @NotNull BlockData blockData);
 
     /**
      * Get the block data at the location.
@@ -29,15 +29,14 @@ public interface BlockChangeDelegate {
      * @param z Z coordinate
      * @return The block data
      */
-    @NotNull
-    public BlockData getBlockData(int x, int y, int z);
+    @NotNull BlockData getBlockData(int x, int y, int z);
 
     /**
      * Gets the height of the world.
      *
      * @return Height of the world
      */
-    public int getHeight();
+    int getHeight();
 
     /**
      * Checks if the specified block is empty (air) or not.
@@ -47,5 +46,5 @@ public interface BlockChangeDelegate {
      * @param z Z coordinate
      * @return True if the block is considered empty.
      */
-    public boolean isEmpty(int x, int y, int z);
+    boolean isEmpty(int x, int y, int z);
 }
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index 4594701d77c5d0f744bece871b98d9f6f73eb5a7..c1bd0da5e7c4c6f5dc4c661c47132f05d5822fbc 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -1,13 +1,14 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
-import java.util.regex.Pattern;
 import org.apache.commons.lang.Validate;
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+import java.util.regex.Pattern;
+
 /**
  * All supported color values for chat
  */
@@ -238,7 +239,7 @@ public enum ChatColor {
      * you need to dynamically convert colour codes from your custom format.
      */
     public static final char COLOR_CHAR = '\u00A7';
-    private static final Pattern STRIP_COLOR_PATTERN = Pattern.compile("(?i)" + String.valueOf(COLOR_CHAR) + "[0-9A-FK-ORX]");
+    private static final Pattern STRIP_COLOR_PATTERN = Pattern.compile("(?i)" + COLOR_CHAR + "[0-9A-FK-ORX]");
 
     private final int intCode;
     private final char code;
@@ -247,11 +248,11 @@ public enum ChatColor {
     private static final Map<Integer, ChatColor> BY_ID = Maps.newHashMap();
     private static final Map<Character, ChatColor> BY_CHAR = Maps.newHashMap();
 
-    private ChatColor(char code, int intCode) {
+    ChatColor(char code, int intCode) {
         this(code, intCode, false);
     }
 
-    private ChatColor(char code, int intCode, boolean isFormat) {
+    ChatColor(char code, int intCode, boolean isFormat) {
         this.code = code;
         this.intCode = intCode;
         this.isFormat = isFormat;
@@ -261,7 +262,7 @@ public enum ChatColor {
     @NotNull
     public net.md_5.bungee.api.ChatColor asBungee() {
         return net.md_5.bungee.api.ChatColor.RESET;
-    };
+    }
 
     /**
      * Gets the char value associated with this color
@@ -374,7 +375,7 @@ public enum ChatColor {
     public static String getLastColors(@NotNull String input) {
         Validate.notNull(input, "Cannot get last colors from null text");
 
-        String result = "";
+        StringBuilder result = new StringBuilder();
         int length = input.length();
 
         // Search backwards from the end as it is faster
@@ -385,7 +386,7 @@ public enum ChatColor {
                 if (index > 11 && input.charAt(index - 12) == COLOR_CHAR && (input.charAt(index - 11) == 'x' || input.charAt(index - 11) == 'X')) {
                     String color = input.substring(index - 12, index + 2);
                     if (HEX_COLOR_PATTERN.matcher(color).matches()) {
-                        result = color + result;
+                        result.insert(0, color);
                         break;
                     }
                 }
@@ -394,7 +395,7 @@ public enum ChatColor {
                 ChatColor color = getByChar(c);
 
                 if (color != null) {
-                    result = color.toString() + result;
+                    result.insert(0, color.toString());
 
                     // Once we find a color or reset we can stop searching
                     if (color.isColor() || color.equals(RESET)) {
@@ -404,7 +405,7 @@ public enum ChatColor {
             }
         }
 
-        return result;
+        return result.toString();
     }
 
     static {
diff --git a/src/main/java/org/bukkit/CoalType.java b/src/main/java/org/bukkit/CoalType.java
index c07499dbdd49d70717dbd674d97b6dbcfd7e9d5b..08c13c92859f9d38b497245ec0aa94e225f2f378 100644
--- a/src/main/java/org/bukkit/CoalType.java
+++ b/src/main/java/org/bukkit/CoalType.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the two types of coal
  */
@@ -14,7 +15,7 @@ public enum CoalType {
     private final byte data;
     private static final Map<Byte, CoalType> BY_DATA = Maps.newHashMap();
 
-    private CoalType(final int data) {
+    CoalType(final int data) {
         this.data = (byte) data;
     }
 
diff --git a/src/main/java/org/bukkit/Color.java b/src/main/java/org/bukkit/Color.java
index deae003b7e9a96bbf1c0167d3e1d864e61b07f82..863f46ed84ef14371d322723484c1c8dd792d413 100644
--- a/src/main/java/org/bukkit/Color.java
+++ b/src/main/java/org/bukkit/Color.java
@@ -1,12 +1,13 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * A container for a color palette. This class is immutable; the set methods
  * return a new color. The color names listed as fields are HTML4 standards,
@@ -145,7 +146,7 @@ public final class Color implements ConfigurationSerializable {
     @NotNull
     public static Color fromRGB(int rgb) throws IllegalArgumentException {
         Validate.isTrue((rgb >> 24) == 0, "Extrenuous data in: ", rgb);
-        return fromRGB(rgb >> 16 & BIT_MASK, rgb >> 8 & BIT_MASK, rgb >> 0 & BIT_MASK);
+        return fromRGB(rgb >> 16 & BIT_MASK, rgb >> 8 & BIT_MASK, rgb & BIT_MASK);
     }
 
     /**
@@ -160,7 +161,7 @@ public final class Color implements ConfigurationSerializable {
     @NotNull
     public static Color fromBGR(int bgr) throws IllegalArgumentException {
         Validate.isTrue((bgr >> 24) == 0, "Extrenuous data in: ", bgr);
-        return fromBGR(bgr >> 16 & BIT_MASK, bgr >> 8 & BIT_MASK, bgr >> 0 & BIT_MASK);
+        return fromBGR(bgr >> 16 & BIT_MASK, bgr >> 8 & BIT_MASK, bgr & BIT_MASK);
     }
 
     private Color(int red, int green, int blue) {
@@ -239,7 +240,7 @@ public final class Color implements ConfigurationSerializable {
      * @return An integer representation of this color, as 0xRRGGBB
      */
     public int asRGB() {
-        return getRed() << 16 | getGreen() << 8 | getBlue() << 0;
+        return getRed() << 16 | getGreen() << 8 | getBlue();
     }
 
     /**
@@ -248,7 +249,7 @@ public final class Color implements ConfigurationSerializable {
      * @return An integer representation of this color, as 0xBBGGRR
      */
     public int asBGR() {
-        return getBlue() << 16 | getGreen() << 8 | getRed() << 0;
+        return getBlue() << 16 | getGreen() << 8 | getRed();
     }
 
     /**
@@ -322,14 +323,13 @@ public final class Color implements ConfigurationSerializable {
     @Override
     @NotNull
     public Map<String, Object> serialize() {
-        return ImmutableMap.<String, Object>of(
+        return ImmutableMap.of(
             "RED", getRed(),
             "BLUE", getBlue(),
             "GREEN", getGreen()
         );
     }
 
-    @SuppressWarnings("javadoc")
     @NotNull
     public static Color deserialize(@NotNull Map<String, Object> map) {
         return fromRGB(
diff --git a/src/main/java/org/bukkit/CropState.java b/src/main/java/org/bukkit/CropState.java
index fb4832fb796a38c0f5f51cf80a67259924f2c607..81c36d9cb3af02cffe8fe5a8f91962f9576aa5b4 100644
--- a/src/main/java/org/bukkit/CropState.java
+++ b/src/main/java/org/bukkit/CropState.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the different growth states of crops
  */
@@ -45,7 +46,7 @@ public enum CropState {
     private final byte data;
     private static final Map<Byte, CropState> BY_DATA = Maps.newHashMap();
 
-    private CropState(final int data) {
+    CropState(final int data) {
         this.data = (byte) data;
     }
 
diff --git a/src/main/java/org/bukkit/Difficulty.java b/src/main/java/org/bukkit/Difficulty.java
index 3f6cbefc2b1414ba2dad709e79288013b3ef73be..4486124dc938fda6a31ed35391dfeef581ea1327 100644
--- a/src/main/java/org/bukkit/Difficulty.java
+++ b/src/main/java/org/bukkit/Difficulty.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
 import com.google.common.collect.Maps;
-import java.util.Map;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents the various difficulty levels that are available.
  */
@@ -36,7 +37,7 @@ public enum Difficulty {
     private final int value;
     private static final Map<Integer, Difficulty> BY_ID = Maps.newHashMap();
 
-    private Difficulty(final int value) {
+    Difficulty(final int value) {
         this.value = value;
     }
 
diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java
index bd213cabddd8752e609544f24cfba95405726155..97ba9d190265a9b27993cfb36bd13d22fd0145d6 100644
--- a/src/main/java/org/bukkit/DyeColor.java
+++ b/src/main/java/org/bukkit/DyeColor.java
@@ -1,10 +1,11 @@
 package org.bukkit;
 
 import com.google.common.collect.ImmutableMap;
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * All supported color values for dyes and cloth
  */
@@ -84,7 +85,7 @@ public enum DyeColor {
     private static final Map<Color, DyeColor> BY_COLOR;
     private static final Map<Color, DyeColor> BY_FIREWORK;
 
-    private DyeColor(final int woolData, final int dyeData, /*@NotNull*/ Color color, /*@NotNull*/ Color firework) {
+    DyeColor(final int woolData, final int dyeData, /*@NotNull*/ Color color, /*@NotNull*/ Color firework) {
         this.woolData = (byte) woolData;
         this.dyeData = (byte) dyeData;
         this.color = color;
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
index 0ae437c0c5052780bd0c78cdd542f62d75796527..52d56d1775dd2e74b821de40a9c6a316c320024c 100644
--- a/src/main/java/org/bukkit/FireworkEffect.java
+++ b/src/main/java/org/bukkit/FireworkEffect.java
@@ -286,7 +286,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
                 flicker,
                 trail,
                 colors.build(),
-                fadeColors == null ? ImmutableList.<Color>of() : fadeColors.build(),
+                fadeColors == null ? ImmutableList.of() : fadeColors.build(),
                 type
             );
         }
@@ -385,7 +385,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        return ImmutableMap.<String, Object>of(
+        return ImmutableMap.of(
             FLICKER, flicker,
             TRAIL, trail,
             COLORS, colors,
diff --git a/src/main/java/org/bukkit/Fluid.java b/src/main/java/org/bukkit/Fluid.java
index 525ede42137cc27cf20cf713478e85292455676e..95fef9bb1f2dd66c9338214205ed152952aa26d4 100644
--- a/src/main/java/org/bukkit/Fluid.java
+++ b/src/main/java/org/bukkit/Fluid.java
@@ -12,7 +12,7 @@ public enum Fluid implements Keyed {
 
     private final NamespacedKey key;
 
-    private Fluid() {
+    Fluid() {
         this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
     }
 
diff --git a/src/main/java/org/bukkit/FluidCollisionMode.java b/src/main/java/org/bukkit/FluidCollisionMode.java
index ae28958941d7a7e66ce3e1215260d3624d4c8122..372ea78d4842628b9679572d84d4772dcbad528a 100644
--- a/src/main/java/org/bukkit/FluidCollisionMode.java
+++ b/src/main/java/org/bukkit/FluidCollisionMode.java
@@ -16,5 +16,5 @@ public enum FluidCollisionMode {
     /**
      * Collide with all fluids.
      */
-    ALWAYS;
+    ALWAYS
 }
diff --git a/src/main/java/org/bukkit/GameMode.java b/src/main/java/org/bukkit/GameMode.java
index 938c3217f92e6d3ef9a637269c469f8359af6347..6696bc74edecfbbbe929518f1040f0f8204f941b 100644
--- a/src/main/java/org/bukkit/GameMode.java
+++ b/src/main/java/org/bukkit/GameMode.java
@@ -36,7 +36,7 @@ public enum GameMode {
     private final int value;
     private static final Map<Integer, GameMode> BY_ID = Maps.newHashMap();
 
-    private GameMode(final int value) {
+    GameMode(final int value) {
         this.value = value;
     }
 
diff --git a/src/main/java/org/bukkit/GameRule.java b/src/main/java/org/bukkit/GameRule.java
index 720fe9f51753be28633ea380e732f676b3be4315..6d253140f33562da57e2d57c8383d8e774a5f183 100644
--- a/src/main/java/org/bukkit/GameRule.java
+++ b/src/main/java/org/bukkit/GameRule.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public final class GameRule<T> {
 
-    private static Map<String, GameRule<?>> gameRules = new HashMap<>();
+    private static final Map<String, GameRule<?>> gameRules = new HashMap<>();
     // Boolean rules
     /**
      * Toggles the announcing of advancements.
@@ -270,6 +270,6 @@ public final class GameRule<T> {
      */
     @NotNull
     public static GameRule<?>[] values() {
-        return gameRules.values().toArray(new GameRule<?>[gameRules.size()]);
+        return gameRules.values().toArray(new GameRule<?>[0]);
     }
 }
diff --git a/src/main/java/org/bukkit/GrassSpecies.java b/src/main/java/org/bukkit/GrassSpecies.java
index f9c9ae463aacd593e3aa9caf037ea1e23d56c780..b5a01dd864132fb9f59193d073de867b68367dc5 100644
--- a/src/main/java/org/bukkit/GrassSpecies.java
+++ b/src/main/java/org/bukkit/GrassSpecies.java
@@ -25,7 +25,7 @@ public enum GrassSpecies {
     private final byte data;
     private static final Map<Byte, GrassSpecies> BY_DATA = Maps.newHashMap();
 
-    private GrassSpecies(final int data) {
+    GrassSpecies(final int data) {
         this.data = (byte) data;
     }
 
diff --git a/src/main/java/org/bukkit/Instrument.java b/src/main/java/org/bukkit/Instrument.java
index 92194803bcdfbcfdb99567835906ce9219eabd04..519bc38e6916c034b549aaf24b0df10834a3b5a1 100644
--- a/src/main/java/org/bukkit/Instrument.java
+++ b/src/main/java/org/bukkit/Instrument.java
@@ -79,7 +79,7 @@ public enum Instrument {
     private final byte type;
     private static final Map<Byte, Instrument> BY_DATA = Maps.newHashMap();
 
-    private Instrument(final int type) {
+    Instrument(final int type) {
         this.type = (byte) type;
     }
 
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 432d5711b7ec34eafeb27df82d367612dfe1fe54..5b84b74c22f30bb8e284ecb519232ce4ca09b920 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -1,6 +1,5 @@
 package org.bukkit;
 
-import com.google.common.base.Preconditions;
 import java.lang.ref.Reference;
 import java.lang.ref.WeakReference;
 import com.google.common.base.Preconditions; // Paper
@@ -8,7 +7,6 @@ import java.util.HashMap;
 import java.util.Map;
 import org.bukkit.block.Block;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.entity.Entity; // Paper
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
@@ -16,6 +14,7 @@ import org.jetbrains.annotations.Nullable;
 
 // Paper start
 import java.util.Collection;
+import java.util.Objects;
 import java.util.function.Predicate;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.LivingEntity;
@@ -356,7 +355,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Location add(@NotNull Location vec) {
-        if (vec == null || vec.getWorld() != getWorld()) {
+        if (vec.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot add Locations of differing worlds");
         }
 
@@ -408,7 +407,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Location subtract(@NotNull Location vec) {
-        if (vec == null || vec.getWorld() != getWorld()) {
+        if (vec.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot add Locations of differing worlds");
         }
 
@@ -502,13 +501,11 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @see Vector
      */
     public double distanceSquared(@NotNull Location o) {
-        if (o == null) {
-            throw new IllegalArgumentException("Cannot measure distance to a null location");
-        } else if (o.getWorld() == null || getWorld() == null) {
-            throw new IllegalArgumentException("Cannot measure distance to a null world");
-        } else if (o.getWorld() != getWorld()) {
-            throw new IllegalArgumentException("Cannot measure distance between " + getWorld().getName() + " and " + o.getWorld().getName());
-        }
+	    if (o.getWorld() == null || getWorld() == null) {
+	        throw new IllegalArgumentException("Cannot measure distance to a null world");
+	    } else if (o.getWorld() != getWorld()) {
+	        throw new IllegalArgumentException("Cannot measure distance between " + getWorld().getName() + " and " + o.getWorld().getName());
+	    }
 
         return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);
     }
@@ -1014,7 +1011,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
 
         World world = (this.world == null) ? null : this.world.get();
         World otherWorld = (other.world == null) ? null : other.world.get();
-        if (world != otherWorld && (world == null || !world.equals(otherWorld))) {
+        if (!Objects.equals(world, otherWorld)) {
             return false;
         }
         if (Double.doubleToLongBits(this.x) != Double.doubleToLongBits(other.x)) {
@@ -1029,10 +1026,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
         if (Float.floatToIntBits(this.pitch) != Float.floatToIntBits(other.pitch)) {
             return false;
         }
-        if (Float.floatToIntBits(this.yaw) != Float.floatToIntBits(other.yaw)) {
-            return false;
-        }
-        return true;
+	    return Float.floatToIntBits(this.yaw) == Float.floatToIntBits(other.yaw);
     }
 
     @Override
@@ -1104,7 +1098,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
     @Utility
     @NotNull
     public Map<String, Object> serialize() {
-        Map<String, Object> data = new HashMap<String, Object>();
+        Map<String, Object> data = new HashMap<>();
 
         if (this.world != null) {
             data.put("world", getWorld().getName());
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 0a31a5321ac519568db936c94394f71b2e2fcec1..78dd678d1381487334b1f3614030a5364838e2a2 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -3523,27 +3523,27 @@ public enum Material implements Keyed {
     private final NamespacedKey key;
     private boolean isBlock; // Paper
 
-    private Material(final int id) {
+    Material(final int id) {
         this(id, 64);
     }
 
-    private Material(final int id, final int stack) {
+    Material(final int id, final int stack) {
         this(id, stack, MaterialData.class);
     }
 
-    private Material(final int id, final int stack, final int durability) {
+    Material(final int id, final int stack, final int durability) {
         this(id, stack, durability, MaterialData.class);
     }
 
-    private Material(final int id, /*@NotNull*/ final Class<?> data) {
+    Material(final int id, /*@NotNull*/ final Class<?> data) {
         this(id, 64, data);
     }
 
-    private Material(final int id, final int stack, /*@NotNull*/ final Class<?> data) {
+    Material(final int id, final int stack, /*@NotNull*/ final Class<?> data) {
         this(id, stack, 0, data);
     }
 
-    private Material(final int id, final int stack, final int durability, /*@NotNull*/ final Class<?> data) {
+    Material(final int id, final int stack, final int durability, /*@NotNull*/ final Class<?> data) {
         this.id = id;
         this.durability = (short) durability;
         this.maxStack = stack;
@@ -3557,9 +3557,7 @@ public enum Material implements Keyed {
             } else {
                 this.ctor = null;
             }
-        } catch (NoSuchMethodException ex) {
-            throw new AssertionError(ex);
-        } catch (SecurityException ex) {
+        } catch (NoSuchMethodException | SecurityException ex) {
             throw new AssertionError(ex);
         }
     }
@@ -3570,13 +3568,10 @@ public enum Material implements Keyed {
      * @return If the type is either AIR, CAVE_AIR or VOID_AIR
      */
     public boolean isEmpty() {
-        switch (this) {
-            case AIR:
-            case CAVE_AIR:
-            case VOID_AIR:
-                return true;
-        }
-        return false;
+        return switch (this) {
+            case AIR, CAVE_AIR, VOID_AIR -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -3735,776 +3730,12 @@ public enum Material implements Keyed {
     }
     private boolean isBlock0() {
     // Paper end
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isBlock">
-            case ACACIA_BUTTON:
-            case ACACIA_DOOR:
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_LEAVES:
-            case ACACIA_LOG:
-            case ACACIA_PLANKS:
-            case ACACIA_PRESSURE_PLATE:
-            case ACACIA_SAPLING:
-            case ACACIA_SIGN:
-            case ACACIA_SLAB:
-            case ACACIA_STAIRS:
-            case ACACIA_TRAPDOOR:
-            case ACACIA_WALL_SIGN:
-            case ACACIA_WOOD:
-            case ACTIVATOR_RAIL:
-            case AIR:
-            case ALLIUM:
-            case ANCIENT_DEBRIS:
-            case ANDESITE:
-            case ANDESITE_SLAB:
-            case ANDESITE_STAIRS:
-            case ANDESITE_WALL:
-            case ANVIL:
-            case ATTACHED_MELON_STEM:
-            case ATTACHED_PUMPKIN_STEM:
-            case AZURE_BLUET:
-            case BAMBOO:
-            case BAMBOO_SAPLING:
-            case BARREL:
-            case BARRIER:
-            case BASALT:
-            case BEACON:
-            case BEDROCK:
-            case BEEHIVE:
-            case BEETROOTS:
-            case BEE_NEST:
-            case BELL:
-            case BIRCH_BUTTON:
-            case BIRCH_DOOR:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_LEAVES:
-            case BIRCH_LOG:
-            case BIRCH_PLANKS:
-            case BIRCH_PRESSURE_PLATE:
-            case BIRCH_SAPLING:
-            case BIRCH_SIGN:
-            case BIRCH_SLAB:
-            case BIRCH_STAIRS:
-            case BIRCH_TRAPDOOR:
-            case BIRCH_WALL_SIGN:
-            case BIRCH_WOOD:
-            case BLACKSTONE:
-            case BLACKSTONE_SLAB:
-            case BLACKSTONE_STAIRS:
-            case BLACKSTONE_WALL:
-            case BLACK_BANNER:
-            case BLACK_BED:
-            case BLACK_CARPET:
-            case BLACK_CONCRETE:
-            case BLACK_CONCRETE_POWDER:
-            case BLACK_GLAZED_TERRACOTTA:
-            case BLACK_SHULKER_BOX:
-            case BLACK_STAINED_GLASS:
-            case BLACK_STAINED_GLASS_PANE:
-            case BLACK_TERRACOTTA:
-            case BLACK_WALL_BANNER:
-            case BLACK_WOOL:
-            case BLAST_FURNACE:
-            case BLUE_BANNER:
-            case BLUE_BED:
-            case BLUE_CARPET:
-            case BLUE_CONCRETE:
-            case BLUE_CONCRETE_POWDER:
-            case BLUE_GLAZED_TERRACOTTA:
-            case BLUE_ICE:
-            case BLUE_ORCHID:
-            case BLUE_SHULKER_BOX:
-            case BLUE_STAINED_GLASS:
-            case BLUE_STAINED_GLASS_PANE:
-            case BLUE_TERRACOTTA:
-            case BLUE_WALL_BANNER:
-            case BLUE_WOOL:
-            case BONE_BLOCK:
-            case BOOKSHELF:
-            case BRAIN_CORAL:
-            case BRAIN_CORAL_BLOCK:
-            case BRAIN_CORAL_FAN:
-            case BRAIN_CORAL_WALL_FAN:
-            case BREWING_STAND:
-            case BRICKS:
-            case BRICK_SLAB:
-            case BRICK_STAIRS:
-            case BRICK_WALL:
-            case BROWN_BANNER:
-            case BROWN_BED:
-            case BROWN_CARPET:
-            case BROWN_CONCRETE:
-            case BROWN_CONCRETE_POWDER:
-            case BROWN_GLAZED_TERRACOTTA:
-            case BROWN_MUSHROOM:
-            case BROWN_MUSHROOM_BLOCK:
-            case BROWN_SHULKER_BOX:
-            case BROWN_STAINED_GLASS:
-            case BROWN_STAINED_GLASS_PANE:
-            case BROWN_TERRACOTTA:
-            case BROWN_WALL_BANNER:
-            case BROWN_WOOL:
-            case BUBBLE_COLUMN:
-            case BUBBLE_CORAL:
-            case BUBBLE_CORAL_BLOCK:
-            case BUBBLE_CORAL_FAN:
-            case BUBBLE_CORAL_WALL_FAN:
-            case CACTUS:
-            case CAKE:
-            case CAMPFIRE:
-            case CARROTS:
-            case CARTOGRAPHY_TABLE:
-            case CARVED_PUMPKIN:
-            case CAULDRON:
-            case CAVE_AIR:
-            case CHAIN:
-            case CHAIN_COMMAND_BLOCK:
-            case CHEST:
-            case CHIPPED_ANVIL:
-            case CHISELED_NETHER_BRICKS:
-            case CHISELED_POLISHED_BLACKSTONE:
-            case CHISELED_QUARTZ_BLOCK:
-            case CHISELED_RED_SANDSTONE:
-            case CHISELED_SANDSTONE:
-            case CHISELED_STONE_BRICKS:
-            case CHORUS_FLOWER:
-            case CHORUS_PLANT:
-            case CLAY:
-            case COAL_BLOCK:
-            case COAL_ORE:
-            case COARSE_DIRT:
-            case COBBLESTONE:
-            case COBBLESTONE_SLAB:
-            case COBBLESTONE_STAIRS:
-            case COBBLESTONE_WALL:
-            case COBWEB:
-            case COCOA:
-            case COMMAND_BLOCK:
-            case COMPARATOR:
-            case COMPOSTER:
-            case CONDUIT:
-            case CORNFLOWER:
-            case CRACKED_NETHER_BRICKS:
-            case CRACKED_POLISHED_BLACKSTONE_BRICKS:
-            case CRACKED_STONE_BRICKS:
-            case CRAFTING_TABLE:
-            case CREEPER_HEAD:
-            case CREEPER_WALL_HEAD:
-            case CRIMSON_BUTTON:
-            case CRIMSON_DOOR:
-            case CRIMSON_FENCE:
-            case CRIMSON_FENCE_GATE:
-            case CRIMSON_FUNGUS:
-            case CRIMSON_HYPHAE:
-            case CRIMSON_NYLIUM:
-            case CRIMSON_PLANKS:
-            case CRIMSON_PRESSURE_PLATE:
-            case CRIMSON_ROOTS:
-            case CRIMSON_SIGN:
-            case CRIMSON_SLAB:
-            case CRIMSON_STAIRS:
-            case CRIMSON_STEM:
-            case CRIMSON_TRAPDOOR:
-            case CRIMSON_WALL_SIGN:
-            case CRYING_OBSIDIAN:
-            case CUT_RED_SANDSTONE:
-            case CUT_RED_SANDSTONE_SLAB:
-            case CUT_SANDSTONE:
-            case CUT_SANDSTONE_SLAB:
-            case CYAN_BANNER:
-            case CYAN_BED:
-            case CYAN_CARPET:
-            case CYAN_CONCRETE:
-            case CYAN_CONCRETE_POWDER:
-            case CYAN_GLAZED_TERRACOTTA:
-            case CYAN_SHULKER_BOX:
-            case CYAN_STAINED_GLASS:
-            case CYAN_STAINED_GLASS_PANE:
-            case CYAN_TERRACOTTA:
-            case CYAN_WALL_BANNER:
-            case CYAN_WOOL:
-            case DAMAGED_ANVIL:
-            case DANDELION:
-            case DARK_OAK_BUTTON:
-            case DARK_OAK_DOOR:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_LEAVES:
-            case DARK_OAK_LOG:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_PRESSURE_PLATE:
-            case DARK_OAK_SAPLING:
-            case DARK_OAK_SIGN:
-            case DARK_OAK_SLAB:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_TRAPDOOR:
-            case DARK_OAK_WALL_SIGN:
-            case DARK_OAK_WOOD:
-            case DARK_PRISMARINE:
-            case DARK_PRISMARINE_SLAB:
-            case DARK_PRISMARINE_STAIRS:
-            case DAYLIGHT_DETECTOR:
-            case DEAD_BRAIN_CORAL:
-            case DEAD_BRAIN_CORAL_BLOCK:
-            case DEAD_BRAIN_CORAL_FAN:
-            case DEAD_BRAIN_CORAL_WALL_FAN:
-            case DEAD_BUBBLE_CORAL:
-            case DEAD_BUBBLE_CORAL_BLOCK:
-            case DEAD_BUBBLE_CORAL_FAN:
-            case DEAD_BUBBLE_CORAL_WALL_FAN:
-            case DEAD_BUSH:
-            case DEAD_FIRE_CORAL:
-            case DEAD_FIRE_CORAL_BLOCK:
-            case DEAD_FIRE_CORAL_FAN:
-            case DEAD_FIRE_CORAL_WALL_FAN:
-            case DEAD_HORN_CORAL:
-            case DEAD_HORN_CORAL_BLOCK:
-            case DEAD_HORN_CORAL_FAN:
-            case DEAD_HORN_CORAL_WALL_FAN:
-            case DEAD_TUBE_CORAL:
-            case DEAD_TUBE_CORAL_BLOCK:
-            case DEAD_TUBE_CORAL_FAN:
-            case DEAD_TUBE_CORAL_WALL_FAN:
-            case DETECTOR_RAIL:
-            case DIAMOND_BLOCK:
-            case DIAMOND_ORE:
-            case DIORITE:
-            case DIORITE_SLAB:
-            case DIORITE_STAIRS:
-            case DIORITE_WALL:
-            case DIRT:
-            case DISPENSER:
-            case DRAGON_EGG:
-            case DRAGON_HEAD:
-            case DRAGON_WALL_HEAD:
-            case DRIED_KELP_BLOCK:
-            case DROPPER:
-            case EMERALD_BLOCK:
-            case EMERALD_ORE:
-            case ENCHANTING_TABLE:
-            case ENDER_CHEST:
-            case END_GATEWAY:
-            case END_PORTAL:
-            case END_PORTAL_FRAME:
-            case END_ROD:
-            case END_STONE:
-            case END_STONE_BRICKS:
-            case END_STONE_BRICK_SLAB:
-            case END_STONE_BRICK_STAIRS:
-            case END_STONE_BRICK_WALL:
-            case FARMLAND:
-            case FERN:
-            case FIRE:
-            case FIRE_CORAL:
-            case FIRE_CORAL_BLOCK:
-            case FIRE_CORAL_FAN:
-            case FIRE_CORAL_WALL_FAN:
-            case FLETCHING_TABLE:
-            case FLOWER_POT:
-            case FROSTED_ICE:
-            case FURNACE:
-            case GILDED_BLACKSTONE:
-            case GLASS:
-            case GLASS_PANE:
-            case GLOWSTONE:
-            case GOLD_BLOCK:
-            case GOLD_ORE:
-            case GRANITE:
-            case GRANITE_SLAB:
-            case GRANITE_STAIRS:
-            case GRANITE_WALL:
-            case GRASS:
-            case GRASS_BLOCK:
-            case GRASS_PATH:
-            case GRAVEL:
-            case GRAY_BANNER:
-            case GRAY_BED:
-            case GRAY_CARPET:
-            case GRAY_CONCRETE:
-            case GRAY_CONCRETE_POWDER:
-            case GRAY_GLAZED_TERRACOTTA:
-            case GRAY_SHULKER_BOX:
-            case GRAY_STAINED_GLASS:
-            case GRAY_STAINED_GLASS_PANE:
-            case GRAY_TERRACOTTA:
-            case GRAY_WALL_BANNER:
-            case GRAY_WOOL:
-            case GREEN_BANNER:
-            case GREEN_BED:
-            case GREEN_CARPET:
-            case GREEN_CONCRETE:
-            case GREEN_CONCRETE_POWDER:
-            case GREEN_GLAZED_TERRACOTTA:
-            case GREEN_SHULKER_BOX:
-            case GREEN_STAINED_GLASS:
-            case GREEN_STAINED_GLASS_PANE:
-            case GREEN_TERRACOTTA:
-            case GREEN_WALL_BANNER:
-            case GREEN_WOOL:
-            case GRINDSTONE:
-            case HAY_BLOCK:
-            case HEAVY_WEIGHTED_PRESSURE_PLATE:
-            case HONEYCOMB_BLOCK:
-            case HONEY_BLOCK:
-            case HOPPER:
-            case HORN_CORAL:
-            case HORN_CORAL_BLOCK:
-            case HORN_CORAL_FAN:
-            case HORN_CORAL_WALL_FAN:
-            case ICE:
-            case INFESTED_CHISELED_STONE_BRICKS:
-            case INFESTED_COBBLESTONE:
-            case INFESTED_CRACKED_STONE_BRICKS:
-            case INFESTED_MOSSY_STONE_BRICKS:
-            case INFESTED_STONE:
-            case INFESTED_STONE_BRICKS:
-            case IRON_BARS:
-            case IRON_BLOCK:
-            case IRON_DOOR:
-            case IRON_ORE:
-            case IRON_TRAPDOOR:
-            case JACK_O_LANTERN:
-            case JIGSAW:
-            case JUKEBOX:
-            case JUNGLE_BUTTON:
-            case JUNGLE_DOOR:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_LEAVES:
-            case JUNGLE_LOG:
-            case JUNGLE_PLANKS:
-            case JUNGLE_PRESSURE_PLATE:
-            case JUNGLE_SAPLING:
-            case JUNGLE_SIGN:
-            case JUNGLE_SLAB:
-            case JUNGLE_STAIRS:
-            case JUNGLE_TRAPDOOR:
-            case JUNGLE_WALL_SIGN:
-            case JUNGLE_WOOD:
-            case KELP:
-            case KELP_PLANT:
-            case LADDER:
-            case LANTERN:
-            case LAPIS_BLOCK:
-            case LAPIS_ORE:
-            case LARGE_FERN:
-            case LAVA:
-            case LECTERN:
-            case LEVER:
-            case LIGHT_BLUE_BANNER:
-            case LIGHT_BLUE_BED:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_BLUE_CONCRETE:
-            case LIGHT_BLUE_CONCRETE_POWDER:
-            case LIGHT_BLUE_GLAZED_TERRACOTTA:
-            case LIGHT_BLUE_SHULKER_BOX:
-            case LIGHT_BLUE_STAINED_GLASS:
-            case LIGHT_BLUE_STAINED_GLASS_PANE:
-            case LIGHT_BLUE_TERRACOTTA:
-            case LIGHT_BLUE_WALL_BANNER:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_BANNER:
-            case LIGHT_GRAY_BED:
-            case LIGHT_GRAY_CARPET:
-            case LIGHT_GRAY_CONCRETE:
-            case LIGHT_GRAY_CONCRETE_POWDER:
-            case LIGHT_GRAY_GLAZED_TERRACOTTA:
-            case LIGHT_GRAY_SHULKER_BOX:
-            case LIGHT_GRAY_STAINED_GLASS:
-            case LIGHT_GRAY_STAINED_GLASS_PANE:
-            case LIGHT_GRAY_TERRACOTTA:
-            case LIGHT_GRAY_WALL_BANNER:
-            case LIGHT_GRAY_WOOL:
-            case LIGHT_WEIGHTED_PRESSURE_PLATE:
-            case LILAC:
-            case LILY_OF_THE_VALLEY:
-            case LILY_PAD:
-            case LIME_BANNER:
-            case LIME_BED:
-            case LIME_CARPET:
-            case LIME_CONCRETE:
-            case LIME_CONCRETE_POWDER:
-            case LIME_GLAZED_TERRACOTTA:
-            case LIME_SHULKER_BOX:
-            case LIME_STAINED_GLASS:
-            case LIME_STAINED_GLASS_PANE:
-            case LIME_TERRACOTTA:
-            case LIME_WALL_BANNER:
-            case LIME_WOOL:
-            case LODESTONE:
-            case LOOM:
-            case MAGENTA_BANNER:
-            case MAGENTA_BED:
-            case MAGENTA_CARPET:
-            case MAGENTA_CONCRETE:
-            case MAGENTA_CONCRETE_POWDER:
-            case MAGENTA_GLAZED_TERRACOTTA:
-            case MAGENTA_SHULKER_BOX:
-            case MAGENTA_STAINED_GLASS:
-            case MAGENTA_STAINED_GLASS_PANE:
-            case MAGENTA_TERRACOTTA:
-            case MAGENTA_WALL_BANNER:
-            case MAGENTA_WOOL:
-            case MAGMA_BLOCK:
-            case MELON:
-            case MELON_STEM:
-            case MOSSY_COBBLESTONE:
-            case MOSSY_COBBLESTONE_SLAB:
-            case MOSSY_COBBLESTONE_STAIRS:
-            case MOSSY_COBBLESTONE_WALL:
-            case MOSSY_STONE_BRICKS:
-            case MOSSY_STONE_BRICK_SLAB:
-            case MOSSY_STONE_BRICK_STAIRS:
-            case MOSSY_STONE_BRICK_WALL:
-            case MOVING_PISTON:
-            case MUSHROOM_STEM:
-            case MYCELIUM:
-            case NETHERITE_BLOCK:
-            case NETHERRACK:
-            case NETHER_BRICKS:
-            case NETHER_BRICK_FENCE:
-            case NETHER_BRICK_SLAB:
-            case NETHER_BRICK_STAIRS:
-            case NETHER_BRICK_WALL:
-            case NETHER_GOLD_ORE:
-            case NETHER_PORTAL:
-            case NETHER_QUARTZ_ORE:
-            case NETHER_SPROUTS:
-            case NETHER_WART:
-            case NETHER_WART_BLOCK:
-            case NOTE_BLOCK:
-            case OAK_BUTTON:
-            case OAK_DOOR:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_LEAVES:
-            case OAK_LOG:
-            case OAK_PLANKS:
-            case OAK_PRESSURE_PLATE:
-            case OAK_SAPLING:
-            case OAK_SIGN:
-            case OAK_SLAB:
-            case OAK_STAIRS:
-            case OAK_TRAPDOOR:
-            case OAK_WALL_SIGN:
-            case OAK_WOOD:
-            case OBSERVER:
-            case OBSIDIAN:
-            case ORANGE_BANNER:
-            case ORANGE_BED:
-            case ORANGE_CARPET:
-            case ORANGE_CONCRETE:
-            case ORANGE_CONCRETE_POWDER:
-            case ORANGE_GLAZED_TERRACOTTA:
-            case ORANGE_SHULKER_BOX:
-            case ORANGE_STAINED_GLASS:
-            case ORANGE_STAINED_GLASS_PANE:
-            case ORANGE_TERRACOTTA:
-            case ORANGE_TULIP:
-            case ORANGE_WALL_BANNER:
-            case ORANGE_WOOL:
-            case OXEYE_DAISY:
-            case PACKED_ICE:
-            case PEONY:
-            case PETRIFIED_OAK_SLAB:
-            case PINK_BANNER:
-            case PINK_BED:
-            case PINK_CARPET:
-            case PINK_CONCRETE:
-            case PINK_CONCRETE_POWDER:
-            case PINK_GLAZED_TERRACOTTA:
-            case PINK_SHULKER_BOX:
-            case PINK_STAINED_GLASS:
-            case PINK_STAINED_GLASS_PANE:
-            case PINK_TERRACOTTA:
-            case PINK_TULIP:
-            case PINK_WALL_BANNER:
-            case PINK_WOOL:
-            case PISTON:
-            case PISTON_HEAD:
-            case PLAYER_HEAD:
-            case PLAYER_WALL_HEAD:
-            case PODZOL:
-            case POLISHED_ANDESITE:
-            case POLISHED_ANDESITE_SLAB:
-            case POLISHED_ANDESITE_STAIRS:
-            case POLISHED_BASALT:
-            case POLISHED_BLACKSTONE:
-            case POLISHED_BLACKSTONE_BRICKS:
-            case POLISHED_BLACKSTONE_BRICK_SLAB:
-            case POLISHED_BLACKSTONE_BRICK_STAIRS:
-            case POLISHED_BLACKSTONE_BRICK_WALL:
-            case POLISHED_BLACKSTONE_BUTTON:
-            case POLISHED_BLACKSTONE_PRESSURE_PLATE:
-            case POLISHED_BLACKSTONE_SLAB:
-            case POLISHED_BLACKSTONE_STAIRS:
-            case POLISHED_BLACKSTONE_WALL:
-            case POLISHED_DIORITE:
-            case POLISHED_DIORITE_SLAB:
-            case POLISHED_DIORITE_STAIRS:
-            case POLISHED_GRANITE:
-            case POLISHED_GRANITE_SLAB:
-            case POLISHED_GRANITE_STAIRS:
-            case POPPY:
-            case POTATOES:
-            case POTTED_ACACIA_SAPLING:
-            case POTTED_ALLIUM:
-            case POTTED_AZURE_BLUET:
-            case POTTED_BAMBOO:
-            case POTTED_BIRCH_SAPLING:
-            case POTTED_BLUE_ORCHID:
-            case POTTED_BROWN_MUSHROOM:
-            case POTTED_CACTUS:
-            case POTTED_CORNFLOWER:
-            case POTTED_CRIMSON_FUNGUS:
-            case POTTED_CRIMSON_ROOTS:
-            case POTTED_DANDELION:
-            case POTTED_DARK_OAK_SAPLING:
-            case POTTED_DEAD_BUSH:
-            case POTTED_FERN:
-            case POTTED_JUNGLE_SAPLING:
-            case POTTED_LILY_OF_THE_VALLEY:
-            case POTTED_OAK_SAPLING:
-            case POTTED_ORANGE_TULIP:
-            case POTTED_OXEYE_DAISY:
-            case POTTED_PINK_TULIP:
-            case POTTED_POPPY:
-            case POTTED_RED_MUSHROOM:
-            case POTTED_RED_TULIP:
-            case POTTED_SPRUCE_SAPLING:
-            case POTTED_WARPED_FUNGUS:
-            case POTTED_WARPED_ROOTS:
-            case POTTED_WHITE_TULIP:
-            case POTTED_WITHER_ROSE:
-            case POWERED_RAIL:
-            case PRISMARINE:
-            case PRISMARINE_BRICKS:
-            case PRISMARINE_BRICK_SLAB:
-            case PRISMARINE_BRICK_STAIRS:
-            case PRISMARINE_SLAB:
-            case PRISMARINE_STAIRS:
-            case PRISMARINE_WALL:
-            case PUMPKIN:
-            case PUMPKIN_STEM:
-            case PURPLE_BANNER:
-            case PURPLE_BED:
-            case PURPLE_CARPET:
-            case PURPLE_CONCRETE:
-            case PURPLE_CONCRETE_POWDER:
-            case PURPLE_GLAZED_TERRACOTTA:
-            case PURPLE_SHULKER_BOX:
-            case PURPLE_STAINED_GLASS:
-            case PURPLE_STAINED_GLASS_PANE:
-            case PURPLE_TERRACOTTA:
-            case PURPLE_WALL_BANNER:
-            case PURPLE_WOOL:
-            case PURPUR_BLOCK:
-            case PURPUR_PILLAR:
-            case PURPUR_SLAB:
-            case PURPUR_STAIRS:
-            case QUARTZ_BLOCK:
-            case QUARTZ_BRICKS:
-            case QUARTZ_PILLAR:
-            case QUARTZ_SLAB:
-            case QUARTZ_STAIRS:
-            case RAIL:
-            case REDSTONE_BLOCK:
-            case REDSTONE_LAMP:
-            case REDSTONE_ORE:
-            case REDSTONE_TORCH:
-            case REDSTONE_WALL_TORCH:
-            case REDSTONE_WIRE:
-            case RED_BANNER:
-            case RED_BED:
-            case RED_CARPET:
-            case RED_CONCRETE:
-            case RED_CONCRETE_POWDER:
-            case RED_GLAZED_TERRACOTTA:
-            case RED_MUSHROOM:
-            case RED_MUSHROOM_BLOCK:
-            case RED_NETHER_BRICKS:
-            case RED_NETHER_BRICK_SLAB:
-            case RED_NETHER_BRICK_STAIRS:
-            case RED_NETHER_BRICK_WALL:
-            case RED_SAND:
-            case RED_SANDSTONE:
-            case RED_SANDSTONE_SLAB:
-            case RED_SANDSTONE_STAIRS:
-            case RED_SANDSTONE_WALL:
-            case RED_SHULKER_BOX:
-            case RED_STAINED_GLASS:
-            case RED_STAINED_GLASS_PANE:
-            case RED_TERRACOTTA:
-            case RED_TULIP:
-            case RED_WALL_BANNER:
-            case RED_WOOL:
-            case REPEATER:
-            case REPEATING_COMMAND_BLOCK:
-            case RESPAWN_ANCHOR:
-            case ROSE_BUSH:
-            case SAND:
-            case SANDSTONE:
-            case SANDSTONE_SLAB:
-            case SANDSTONE_STAIRS:
-            case SANDSTONE_WALL:
-            case SCAFFOLDING:
-            case SEAGRASS:
-            case SEA_LANTERN:
-            case SEA_PICKLE:
-            case SHROOMLIGHT:
-            case SHULKER_BOX:
-            case SKELETON_SKULL:
-            case SKELETON_WALL_SKULL:
-            case SLIME_BLOCK:
-            case SMITHING_TABLE:
-            case SMOKER:
-            case SMOOTH_QUARTZ:
-            case SMOOTH_QUARTZ_SLAB:
-            case SMOOTH_QUARTZ_STAIRS:
-            case SMOOTH_RED_SANDSTONE:
-            case SMOOTH_RED_SANDSTONE_SLAB:
-            case SMOOTH_RED_SANDSTONE_STAIRS:
-            case SMOOTH_SANDSTONE:
-            case SMOOTH_SANDSTONE_SLAB:
-            case SMOOTH_SANDSTONE_STAIRS:
-            case SMOOTH_STONE:
-            case SMOOTH_STONE_SLAB:
-            case SNOW:
-            case SNOW_BLOCK:
-            case SOUL_CAMPFIRE:
-            case SOUL_FIRE:
-            case SOUL_LANTERN:
-            case SOUL_SAND:
-            case SOUL_SOIL:
-            case SOUL_TORCH:
-            case SOUL_WALL_TORCH:
-            case SPAWNER:
-            case SPONGE:
-            case SPRUCE_BUTTON:
-            case SPRUCE_DOOR:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_LEAVES:
-            case SPRUCE_LOG:
-            case SPRUCE_PLANKS:
-            case SPRUCE_PRESSURE_PLATE:
-            case SPRUCE_SAPLING:
-            case SPRUCE_SIGN:
-            case SPRUCE_SLAB:
-            case SPRUCE_STAIRS:
-            case SPRUCE_TRAPDOOR:
-            case SPRUCE_WALL_SIGN:
-            case SPRUCE_WOOD:
-            case STICKY_PISTON:
-            case STONE:
-            case STONECUTTER:
-            case STONE_BRICKS:
-            case STONE_BRICK_SLAB:
-            case STONE_BRICK_STAIRS:
-            case STONE_BRICK_WALL:
-            case STONE_BUTTON:
-            case STONE_PRESSURE_PLATE:
-            case STONE_SLAB:
-            case STONE_STAIRS:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_CRIMSON_HYPHAE:
-            case STRIPPED_CRIMSON_STEM:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case STRIPPED_WARPED_HYPHAE:
-            case STRIPPED_WARPED_STEM:
-            case STRUCTURE_BLOCK:
-            case STRUCTURE_VOID:
-            case SUGAR_CANE:
-            case SUNFLOWER:
-            case SWEET_BERRY_BUSH:
-            case TALL_GRASS:
-            case TALL_SEAGRASS:
-            case TARGET:
-            case TERRACOTTA:
-            case TNT:
-            case TORCH:
-            case TRAPPED_CHEST:
-            case TRIPWIRE:
-            case TRIPWIRE_HOOK:
-            case TUBE_CORAL:
-            case TUBE_CORAL_BLOCK:
-            case TUBE_CORAL_FAN:
-            case TUBE_CORAL_WALL_FAN:
-            case TURTLE_EGG:
-            case TWISTING_VINES:
-            case TWISTING_VINES_PLANT:
-            case VINE:
-            case VOID_AIR:
-            case WALL_TORCH:
-            case WARPED_BUTTON:
-            case WARPED_DOOR:
-            case WARPED_FENCE:
-            case WARPED_FENCE_GATE:
-            case WARPED_FUNGUS:
-            case WARPED_HYPHAE:
-            case WARPED_NYLIUM:
-            case WARPED_PLANKS:
-            case WARPED_PRESSURE_PLATE:
-            case WARPED_ROOTS:
-            case WARPED_SIGN:
-            case WARPED_SLAB:
-            case WARPED_STAIRS:
-            case WARPED_STEM:
-            case WARPED_TRAPDOOR:
-            case WARPED_WALL_SIGN:
-            case WARPED_WART_BLOCK:
-            case WATER:
-            case WEEPING_VINES:
-            case WEEPING_VINES_PLANT:
-            case WET_SPONGE:
-            case WHEAT:
-            case WHITE_BANNER:
-            case WHITE_BED:
-            case WHITE_CARPET:
-            case WHITE_CONCRETE:
-            case WHITE_CONCRETE_POWDER:
-            case WHITE_GLAZED_TERRACOTTA:
-            case WHITE_SHULKER_BOX:
-            case WHITE_STAINED_GLASS:
-            case WHITE_STAINED_GLASS_PANE:
-            case WHITE_TERRACOTTA:
-            case WHITE_TULIP:
-            case WHITE_WALL_BANNER:
-            case WHITE_WOOL:
-            case WITHER_ROSE:
-            case WITHER_SKELETON_SKULL:
-            case WITHER_SKELETON_WALL_SKULL:
-            case YELLOW_BANNER:
-            case YELLOW_BED:
-            case YELLOW_CARPET:
-            case YELLOW_CONCRETE:
-            case YELLOW_CONCRETE_POWDER:
-            case YELLOW_GLAZED_TERRACOTTA:
-            case YELLOW_SHULKER_BOX:
-            case YELLOW_STAINED_GLASS:
-            case YELLOW_STAINED_GLASS_PANE:
-            case YELLOW_TERRACOTTA:
-            case YELLOW_WALL_BANNER:
-            case YELLOW_WOOL:
-            case ZOMBIE_HEAD:
-            case ZOMBIE_WALL_HEAD:
-            //</editor-fold>
-                return true;
-            default:
-                return 0 <= id && id < 256;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isBlock">
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_BUTTON, ACACIA_DOOR, ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_LEAVES, ACACIA_LOG, ACACIA_PLANKS, ACACIA_PRESSURE_PLATE, ACACIA_SAPLING, ACACIA_SIGN, ACACIA_SLAB, ACACIA_STAIRS, ACACIA_TRAPDOOR, ACACIA_WALL_SIGN, ACACIA_WOOD, ACTIVATOR_RAIL, AIR, ALLIUM, ANCIENT_DEBRIS, ANDESITE, ANDESITE_SLAB, ANDESITE_STAIRS, ANDESITE_WALL, ANVIL, ATTACHED_MELON_STEM, ATTACHED_PUMPKIN_STEM, AZURE_BLUET, BAMBOO, BAMBOO_SAPLING, BARREL, BARRIER, BASALT, BEACON, BEDROCK, BEEHIVE, BEETROOTS, BEE_NEST, BELL, BIRCH_BUTTON, BIRCH_DOOR, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_LEAVES, BIRCH_LOG, BIRCH_PLANKS, BIRCH_PRESSURE_PLATE, BIRCH_SAPLING, BIRCH_SIGN, BIRCH_SLAB, BIRCH_STAIRS, BIRCH_TRAPDOOR, BIRCH_WALL_SIGN, BIRCH_WOOD, BLACKSTONE, BLACKSTONE_SLAB, BLACKSTONE_STAIRS, BLACKSTONE_WALL, BLACK_BANNER, BLACK_BED, BLACK_CARPET, BLACK_CONCRETE, BLACK_CONCRETE_POWDER, BLACK_GLAZED_TERRACOTTA, BLACK_SHULKER_BOX, BLACK_STAINED_GLASS, BLACK_STAINED_GLASS_PANE, BLACK_TERRACOTTA, BLACK_WALL_BANNER, BLACK_WOOL, BLAST_FURNACE, BLUE_BANNER, BLUE_BED, BLUE_CARPET, BLUE_CONCRETE, BLUE_CONCRETE_POWDER, BLUE_GLAZED_TERRACOTTA, BLUE_ICE, BLUE_ORCHID, BLUE_SHULKER_BOX, BLUE_STAINED_GLASS, BLUE_STAINED_GLASS_PANE, BLUE_TERRACOTTA, BLUE_WALL_BANNER, BLUE_WOOL, BONE_BLOCK, BOOKSHELF, BRAIN_CORAL, BRAIN_CORAL_BLOCK, BRAIN_CORAL_FAN, BRAIN_CORAL_WALL_FAN, BREWING_STAND, BRICKS, BRICK_SLAB, BRICK_STAIRS, BRICK_WALL, BROWN_BANNER, BROWN_BED, BROWN_CARPET, BROWN_CONCRETE, BROWN_CONCRETE_POWDER, BROWN_GLAZED_TERRACOTTA, BROWN_MUSHROOM, BROWN_MUSHROOM_BLOCK, BROWN_SHULKER_BOX, BROWN_STAINED_GLASS, BROWN_STAINED_GLASS_PANE, BROWN_TERRACOTTA, BROWN_WALL_BANNER, BROWN_WOOL, BUBBLE_COLUMN, BUBBLE_CORAL, BUBBLE_CORAL_BLOCK, BUBBLE_CORAL_FAN, BUBBLE_CORAL_WALL_FAN, CACTUS, CAKE, CAMPFIRE, CARROTS, CARTOGRAPHY_TABLE, CARVED_PUMPKIN, CAULDRON, CAVE_AIR, CHAIN, CHAIN_COMMAND_BLOCK, CHEST, CHIPPED_ANVIL, CHISELED_NETHER_BRICKS, CHISELED_POLISHED_BLACKSTONE, CHISELED_QUARTZ_BLOCK, CHISELED_RED_SANDSTONE, CHISELED_SANDSTONE, CHISELED_STONE_BRICKS, CHORUS_FLOWER, CHORUS_PLANT, CLAY, COAL_BLOCK, COAL_ORE, COARSE_DIRT, COBBLESTONE, COBBLESTONE_SLAB, COBBLESTONE_STAIRS, COBBLESTONE_WALL, COBWEB, COCOA, COMMAND_BLOCK, COMPARATOR, COMPOSTER, CONDUIT, CORNFLOWER, CRACKED_NETHER_BRICKS, CRACKED_POLISHED_BLACKSTONE_BRICKS, CRACKED_STONE_BRICKS, CRAFTING_TABLE, CREEPER_HEAD, CREEPER_WALL_HEAD, CRIMSON_BUTTON, CRIMSON_DOOR, CRIMSON_FENCE, CRIMSON_FENCE_GATE, CRIMSON_FUNGUS, CRIMSON_HYPHAE, CRIMSON_NYLIUM, CRIMSON_PLANKS, CRIMSON_PRESSURE_PLATE, CRIMSON_ROOTS, CRIMSON_SIGN, CRIMSON_SLAB, CRIMSON_STAIRS, CRIMSON_STEM, CRIMSON_TRAPDOOR, CRIMSON_WALL_SIGN, CRYING_OBSIDIAN, CUT_RED_SANDSTONE, CUT_RED_SANDSTONE_SLAB, CUT_SANDSTONE, CUT_SANDSTONE_SLAB, CYAN_BANNER, CYAN_BED, CYAN_CARPET, CYAN_CONCRETE, CYAN_CONCRETE_POWDER, CYAN_GLAZED_TERRACOTTA, CYAN_SHULKER_BOX, CYAN_STAINED_GLASS, CYAN_STAINED_GLASS_PANE, CYAN_TERRACOTTA, CYAN_WALL_BANNER, CYAN_WOOL, DAMAGED_ANVIL, DANDELION, DARK_OAK_BUTTON, DARK_OAK_DOOR, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_LEAVES, DARK_OAK_LOG, DARK_OAK_PLANKS, DARK_OAK_PRESSURE_PLATE, DARK_OAK_SAPLING, DARK_OAK_SIGN, DARK_OAK_SLAB, DARK_OAK_STAIRS, DARK_OAK_TRAPDOOR, DARK_OAK_WALL_SIGN, DARK_OAK_WOOD, DARK_PRISMARINE, DARK_PRISMARINE_SLAB, DARK_PRISMARINE_STAIRS, DAYLIGHT_DETECTOR, DEAD_BRAIN_CORAL, DEAD_BRAIN_CORAL_BLOCK, DEAD_BRAIN_CORAL_FAN, DEAD_BRAIN_CORAL_WALL_FAN, DEAD_BUBBLE_CORAL, DEAD_BUBBLE_CORAL_BLOCK, DEAD_BUBBLE_CORAL_FAN, DEAD_BUBBLE_CORAL_WALL_FAN, DEAD_BUSH, DEAD_FIRE_CORAL, DEAD_FIRE_CORAL_BLOCK, DEAD_FIRE_CORAL_FAN, DEAD_FIRE_CORAL_WALL_FAN, DEAD_HORN_CORAL, DEAD_HORN_CORAL_BLOCK, DEAD_HORN_CORAL_FAN, DEAD_HORN_CORAL_WALL_FAN, DEAD_TUBE_CORAL, DEAD_TUBE_CORAL_BLOCK, DEAD_TUBE_CORAL_FAN, DEAD_TUBE_CORAL_WALL_FAN, DETECTOR_RAIL, DIAMOND_BLOCK, DIAMOND_ORE, DIORITE, DIORITE_SLAB, DIORITE_STAIRS, DIORITE_WALL, DIRT, DISPENSER, DRAGON_EGG, DRAGON_HEAD, DRAGON_WALL_HEAD, DRIED_KELP_BLOCK, DROPPER, EMERALD_BLOCK, EMERALD_ORE, ENCHANTING_TABLE, ENDER_CHEST, END_GATEWAY, END_PORTAL, END_PORTAL_FRAME, END_ROD, END_STONE, END_STONE_BRICKS, END_STONE_BRICK_SLAB, END_STONE_BRICK_STAIRS, END_STONE_BRICK_WALL, FARMLAND, FERN, FIRE, FIRE_CORAL, FIRE_CORAL_BLOCK, FIRE_CORAL_FAN, FIRE_CORAL_WALL_FAN, FLETCHING_TABLE, FLOWER_POT, FROSTED_ICE, FURNACE, GILDED_BLACKSTONE, GLASS, GLASS_PANE, GLOWSTONE, GOLD_BLOCK, GOLD_ORE, GRANITE, GRANITE_SLAB, GRANITE_STAIRS, GRANITE_WALL, GRASS, GRASS_BLOCK, GRASS_PATH, GRAVEL, GRAY_BANNER, GRAY_BED, GRAY_CARPET, GRAY_CONCRETE, GRAY_CONCRETE_POWDER, GRAY_GLAZED_TERRACOTTA, GRAY_SHULKER_BOX, GRAY_STAINED_GLASS, GRAY_STAINED_GLASS_PANE, GRAY_TERRACOTTA, GRAY_WALL_BANNER, GRAY_WOOL, GREEN_BANNER, GREEN_BED, GREEN_CARPET, GREEN_CONCRETE, GREEN_CONCRETE_POWDER, GREEN_GLAZED_TERRACOTTA, GREEN_SHULKER_BOX, GREEN_STAINED_GLASS, GREEN_STAINED_GLASS_PANE, GREEN_TERRACOTTA, GREEN_WALL_BANNER, GREEN_WOOL, GRINDSTONE, HAY_BLOCK, HEAVY_WEIGHTED_PRESSURE_PLATE, HONEYCOMB_BLOCK, HONEY_BLOCK, HOPPER, HORN_CORAL, HORN_CORAL_BLOCK, HORN_CORAL_FAN, HORN_CORAL_WALL_FAN, ICE, INFESTED_CHISELED_STONE_BRICKS, INFESTED_COBBLESTONE, INFESTED_CRACKED_STONE_BRICKS, INFESTED_MOSSY_STONE_BRICKS, INFESTED_STONE, INFESTED_STONE_BRICKS, IRON_BARS, IRON_BLOCK, IRON_DOOR, IRON_ORE, IRON_TRAPDOOR, JACK_O_LANTERN, JIGSAW, JUKEBOX, JUNGLE_BUTTON, JUNGLE_DOOR, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_LEAVES, JUNGLE_LOG, JUNGLE_PLANKS, JUNGLE_PRESSURE_PLATE, JUNGLE_SAPLING, JUNGLE_SIGN, JUNGLE_SLAB, JUNGLE_STAIRS, JUNGLE_TRAPDOOR, JUNGLE_WALL_SIGN, JUNGLE_WOOD, KELP, KELP_PLANT, LADDER, LANTERN, LAPIS_BLOCK, LAPIS_ORE, LARGE_FERN, LAVA, LECTERN, LEVER, LIGHT_BLUE_BANNER, LIGHT_BLUE_BED, LIGHT_BLUE_CARPET, LIGHT_BLUE_CONCRETE, LIGHT_BLUE_CONCRETE_POWDER, LIGHT_BLUE_GLAZED_TERRACOTTA, LIGHT_BLUE_SHULKER_BOX, LIGHT_BLUE_STAINED_GLASS, LIGHT_BLUE_STAINED_GLASS_PANE, LIGHT_BLUE_TERRACOTTA, LIGHT_BLUE_WALL_BANNER, LIGHT_BLUE_WOOL, LIGHT_GRAY_BANNER, LIGHT_GRAY_BED, LIGHT_GRAY_CARPET, LIGHT_GRAY_CONCRETE, LIGHT_GRAY_CONCRETE_POWDER, LIGHT_GRAY_GLAZED_TERRACOTTA, LIGHT_GRAY_SHULKER_BOX, LIGHT_GRAY_STAINED_GLASS, LIGHT_GRAY_STAINED_GLASS_PANE, LIGHT_GRAY_TERRACOTTA, LIGHT_GRAY_WALL_BANNER, LIGHT_GRAY_WOOL, LIGHT_WEIGHTED_PRESSURE_PLATE, LILAC, LILY_OF_THE_VALLEY, LILY_PAD, LIME_BANNER, LIME_BED, LIME_CARPET, LIME_CONCRETE, LIME_CONCRETE_POWDER, LIME_GLAZED_TERRACOTTA, LIME_SHULKER_BOX, LIME_STAINED_GLASS, LIME_STAINED_GLASS_PANE, LIME_TERRACOTTA, LIME_WALL_BANNER, LIME_WOOL, LODESTONE, LOOM, MAGENTA_BANNER, MAGENTA_BED, MAGENTA_CARPET, MAGENTA_CONCRETE, MAGENTA_CONCRETE_POWDER, MAGENTA_GLAZED_TERRACOTTA, MAGENTA_SHULKER_BOX, MAGENTA_STAINED_GLASS, MAGENTA_STAINED_GLASS_PANE, MAGENTA_TERRACOTTA, MAGENTA_WALL_BANNER, MAGENTA_WOOL, MAGMA_BLOCK, MELON, MELON_STEM, MOSSY_COBBLESTONE, MOSSY_COBBLESTONE_SLAB, MOSSY_COBBLESTONE_STAIRS, MOSSY_COBBLESTONE_WALL, MOSSY_STONE_BRICKS, MOSSY_STONE_BRICK_SLAB, MOSSY_STONE_BRICK_STAIRS, MOSSY_STONE_BRICK_WALL, MOVING_PISTON, MUSHROOM_STEM, MYCELIUM, NETHERITE_BLOCK, NETHERRACK, NETHER_BRICKS, NETHER_BRICK_FENCE, NETHER_BRICK_SLAB, NETHER_BRICK_STAIRS, NETHER_BRICK_WALL, NETHER_GOLD_ORE, NETHER_PORTAL, NETHER_QUARTZ_ORE, NETHER_SPROUTS, NETHER_WART, NETHER_WART_BLOCK, NOTE_BLOCK, OAK_BUTTON, OAK_DOOR, OAK_FENCE, OAK_FENCE_GATE, OAK_LEAVES, OAK_LOG, OAK_PLANKS, OAK_PRESSURE_PLATE, OAK_SAPLING, OAK_SIGN, OAK_SLAB, OAK_STAIRS, OAK_TRAPDOOR, OAK_WALL_SIGN, OAK_WOOD, OBSERVER, OBSIDIAN, ORANGE_BANNER, ORANGE_BED, ORANGE_CARPET, ORANGE_CONCRETE, ORANGE_CONCRETE_POWDER, ORANGE_GLAZED_TERRACOTTA, ORANGE_SHULKER_BOX, ORANGE_STAINED_GLASS, ORANGE_STAINED_GLASS_PANE, ORANGE_TERRACOTTA, ORANGE_TULIP, ORANGE_WALL_BANNER, ORANGE_WOOL, OXEYE_DAISY, PACKED_ICE, PEONY, PETRIFIED_OAK_SLAB, PINK_BANNER, PINK_BED, PINK_CARPET, PINK_CONCRETE, PINK_CONCRETE_POWDER, PINK_GLAZED_TERRACOTTA, PINK_SHULKER_BOX, PINK_STAINED_GLASS, PINK_STAINED_GLASS_PANE, PINK_TERRACOTTA, PINK_TULIP, PINK_WALL_BANNER, PINK_WOOL, PISTON, PISTON_HEAD, PLAYER_HEAD, PLAYER_WALL_HEAD, PODZOL, POLISHED_ANDESITE, POLISHED_ANDESITE_SLAB, POLISHED_ANDESITE_STAIRS, POLISHED_BASALT, POLISHED_BLACKSTONE, POLISHED_BLACKSTONE_BRICKS, POLISHED_BLACKSTONE_BRICK_SLAB, POLISHED_BLACKSTONE_BRICK_STAIRS, POLISHED_BLACKSTONE_BRICK_WALL, POLISHED_BLACKSTONE_BUTTON, POLISHED_BLACKSTONE_PRESSURE_PLATE, POLISHED_BLACKSTONE_SLAB, POLISHED_BLACKSTONE_STAIRS, POLISHED_BLACKSTONE_WALL, POLISHED_DIORITE, POLISHED_DIORITE_SLAB, POLISHED_DIORITE_STAIRS, POLISHED_GRANITE, POLISHED_GRANITE_SLAB, POLISHED_GRANITE_STAIRS, POPPY, POTATOES, POTTED_ACACIA_SAPLING, POTTED_ALLIUM, POTTED_AZURE_BLUET, POTTED_BAMBOO, POTTED_BIRCH_SAPLING, POTTED_BLUE_ORCHID, POTTED_BROWN_MUSHROOM, POTTED_CACTUS, POTTED_CORNFLOWER, POTTED_CRIMSON_FUNGUS, POTTED_CRIMSON_ROOTS, POTTED_DANDELION, POTTED_DARK_OAK_SAPLING, POTTED_DEAD_BUSH, POTTED_FERN, POTTED_JUNGLE_SAPLING, POTTED_LILY_OF_THE_VALLEY, POTTED_OAK_SAPLING, POTTED_ORANGE_TULIP, POTTED_OXEYE_DAISY, POTTED_PINK_TULIP, POTTED_POPPY, POTTED_RED_MUSHROOM, POTTED_RED_TULIP, POTTED_SPRUCE_SAPLING, POTTED_WARPED_FUNGUS, POTTED_WARPED_ROOTS, POTTED_WHITE_TULIP, POTTED_WITHER_ROSE, POWERED_RAIL, PRISMARINE, PRISMARINE_BRICKS, PRISMARINE_BRICK_SLAB, PRISMARINE_BRICK_STAIRS, PRISMARINE_SLAB, PRISMARINE_STAIRS, PRISMARINE_WALL, PUMPKIN, PUMPKIN_STEM, PURPLE_BANNER, PURPLE_BED, PURPLE_CARPET, PURPLE_CONCRETE, PURPLE_CONCRETE_POWDER, PURPLE_GLAZED_TERRACOTTA, PURPLE_SHULKER_BOX, PURPLE_STAINED_GLASS, PURPLE_STAINED_GLASS_PANE, PURPLE_TERRACOTTA, PURPLE_WALL_BANNER, PURPLE_WOOL, PURPUR_BLOCK, PURPUR_PILLAR, PURPUR_SLAB, PURPUR_STAIRS, QUARTZ_BLOCK, QUARTZ_BRICKS, QUARTZ_PILLAR, QUARTZ_SLAB, QUARTZ_STAIRS, RAIL, REDSTONE_BLOCK, REDSTONE_LAMP, REDSTONE_ORE, REDSTONE_TORCH, REDSTONE_WALL_TORCH, REDSTONE_WIRE, RED_BANNER, RED_BED, RED_CARPET, RED_CONCRETE, RED_CONCRETE_POWDER, RED_GLAZED_TERRACOTTA, RED_MUSHROOM, RED_MUSHROOM_BLOCK, RED_NETHER_BRICKS, RED_NETHER_BRICK_SLAB, RED_NETHER_BRICK_STAIRS, RED_NETHER_BRICK_WALL, RED_SAND, RED_SANDSTONE, RED_SANDSTONE_SLAB, RED_SANDSTONE_STAIRS, RED_SANDSTONE_WALL, RED_SHULKER_BOX, RED_STAINED_GLASS, RED_STAINED_GLASS_PANE, RED_TERRACOTTA, RED_TULIP, RED_WALL_BANNER, RED_WOOL, REPEATER, REPEATING_COMMAND_BLOCK, RESPAWN_ANCHOR, ROSE_BUSH, SAND, SANDSTONE, SANDSTONE_SLAB, SANDSTONE_STAIRS, SANDSTONE_WALL, SCAFFOLDING, SEAGRASS, SEA_LANTERN, SEA_PICKLE, SHROOMLIGHT, SHULKER_BOX, SKELETON_SKULL, SKELETON_WALL_SKULL, SLIME_BLOCK, SMITHING_TABLE, SMOKER, SMOOTH_QUARTZ, SMOOTH_QUARTZ_SLAB, SMOOTH_QUARTZ_STAIRS, SMOOTH_RED_SANDSTONE, SMOOTH_RED_SANDSTONE_SLAB, SMOOTH_RED_SANDSTONE_STAIRS, SMOOTH_SANDSTONE, SMOOTH_SANDSTONE_SLAB, SMOOTH_SANDSTONE_STAIRS, SMOOTH_STONE, SMOOTH_STONE_SLAB, SNOW, SNOW_BLOCK, SOUL_CAMPFIRE, SOUL_FIRE, SOUL_LANTERN, SOUL_SAND, SOUL_SOIL, SOUL_TORCH, SOUL_WALL_TORCH, SPAWNER, SPONGE, SPRUCE_BUTTON, SPRUCE_DOOR, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_LEAVES, SPRUCE_LOG, SPRUCE_PLANKS, SPRUCE_PRESSURE_PLATE, SPRUCE_SAPLING, SPRUCE_SIGN, SPRUCE_SLAB, SPRUCE_STAIRS, SPRUCE_TRAPDOOR, SPRUCE_WALL_SIGN, SPRUCE_WOOD, STICKY_PISTON, STONE, STONECUTTER, STONE_BRICKS, STONE_BRICK_SLAB, STONE_BRICK_STAIRS, STONE_BRICK_WALL, STONE_BUTTON, STONE_PRESSURE_PLATE, STONE_SLAB, STONE_STAIRS, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_CRIMSON_HYPHAE, STRIPPED_CRIMSON_STEM, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, STRIPPED_WARPED_HYPHAE, STRIPPED_WARPED_STEM, STRUCTURE_BLOCK, STRUCTURE_VOID, SUGAR_CANE, SUNFLOWER, SWEET_BERRY_BUSH, TALL_GRASS, TALL_SEAGRASS, TARGET, TERRACOTTA, TNT, TORCH, TRAPPED_CHEST, TRIPWIRE, TRIPWIRE_HOOK, TUBE_CORAL, TUBE_CORAL_BLOCK, TUBE_CORAL_FAN, TUBE_CORAL_WALL_FAN, TURTLE_EGG, TWISTING_VINES, TWISTING_VINES_PLANT, VINE, VOID_AIR, WALL_TORCH, WARPED_BUTTON, WARPED_DOOR, WARPED_FENCE, WARPED_FENCE_GATE, WARPED_FUNGUS, WARPED_HYPHAE, WARPED_NYLIUM, WARPED_PLANKS, WARPED_PRESSURE_PLATE, WARPED_ROOTS, WARPED_SIGN, WARPED_SLAB, WARPED_STAIRS, WARPED_STEM, WARPED_TRAPDOOR, WARPED_WALL_SIGN, WARPED_WART_BLOCK, WATER, WEEPING_VINES, WEEPING_VINES_PLANT, WET_SPONGE, WHEAT, WHITE_BANNER, WHITE_BED, WHITE_CARPET, WHITE_CONCRETE, WHITE_CONCRETE_POWDER, WHITE_GLAZED_TERRACOTTA, WHITE_SHULKER_BOX, WHITE_STAINED_GLASS, WHITE_STAINED_GLASS_PANE, WHITE_TERRACOTTA, WHITE_TULIP, WHITE_WALL_BANNER, WHITE_WOOL, WITHER_ROSE, WITHER_SKELETON_SKULL, WITHER_SKELETON_WALL_SKULL, YELLOW_BANNER, YELLOW_BED, YELLOW_CARPET, YELLOW_CONCRETE, YELLOW_CONCRETE_POWDER, YELLOW_GLAZED_TERRACOTTA, YELLOW_SHULKER_BOX, YELLOW_STAINED_GLASS, YELLOW_STAINED_GLASS_PANE, YELLOW_TERRACOTTA, YELLOW_WALL_BANNER, YELLOW_WOOL, ZOMBIE_HEAD, ZOMBIE_WALL_HEAD -> true;
+            default -> 0 <= id && id < 256;
+        };
     }
 
     /**
@@ -4513,83 +3744,13 @@ public enum Material implements Keyed {
      * @return true if this Material is edible.
      */
     public boolean isEdible() {
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isEdible">
-            case APPLE:
-            case BAKED_POTATO:
-            case BEEF:
-            case BEETROOT:
-            case BEETROOT_SOUP:
-            case BREAD:
-            case CARROT:
-            case CHICKEN:
-            case CHORUS_FRUIT:
-            case COD:
-            case COOKED_BEEF:
-            case COOKED_CHICKEN:
-            case COOKED_COD:
-            case COOKED_MUTTON:
-            case COOKED_PORKCHOP:
-            case COOKED_RABBIT:
-            case COOKED_SALMON:
-            case COOKIE:
-            case DRIED_KELP:
-            case ENCHANTED_GOLDEN_APPLE:
-            case GOLDEN_APPLE:
-            case GOLDEN_CARROT:
-            case HONEY_BOTTLE:
-            case MELON_SLICE:
-            case MUSHROOM_STEW:
-            case MUTTON:
-            case POISONOUS_POTATO:
-            case PORKCHOP:
-            case POTATO:
-            case PUFFERFISH:
-            case PUMPKIN_PIE:
-            case RABBIT:
-            case RABBIT_STEW:
-            case ROTTEN_FLESH:
-            case SALMON:
-            case SPIDER_EYE:
-            case SUSPICIOUS_STEW:
-            case SWEET_BERRIES:
-            case TROPICAL_FISH:
-            // ----- Legacy Separator -----
-            case LEGACY_BREAD:
-            case LEGACY_CARROT_ITEM:
-            case LEGACY_BAKED_POTATO:
-            case LEGACY_POTATO_ITEM:
-            case LEGACY_POISONOUS_POTATO:
-            case LEGACY_GOLDEN_CARROT:
-            case LEGACY_PUMPKIN_PIE:
-            case LEGACY_COOKIE:
-            case LEGACY_MELON:
-            case LEGACY_MUSHROOM_SOUP:
-            case LEGACY_RAW_CHICKEN:
-            case LEGACY_COOKED_CHICKEN:
-            case LEGACY_RAW_BEEF:
-            case LEGACY_COOKED_BEEF:
-            case LEGACY_RAW_FISH:
-            case LEGACY_COOKED_FISH:
-            case LEGACY_PORK:
-            case LEGACY_GRILLED_PORK:
-            case LEGACY_APPLE:
-            case LEGACY_GOLDEN_APPLE:
-            case LEGACY_ROTTEN_FLESH:
-            case LEGACY_SPIDER_EYE:
-            case LEGACY_RABBIT:
-            case LEGACY_COOKED_RABBIT:
-            case LEGACY_RABBIT_STEW:
-            case LEGACY_MUTTON:
-            case LEGACY_COOKED_MUTTON:
-            case LEGACY_BEETROOT:
-            case LEGACY_CHORUS_FRUIT:
-            case LEGACY_BEETROOT_SOUP:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isEdible">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case APPLE, BAKED_POTATO, BEEF, BEETROOT, BEETROOT_SOUP, BREAD, CARROT, CHICKEN, CHORUS_FRUIT, COD, COOKED_BEEF, COOKED_CHICKEN, COOKED_COD, COOKED_MUTTON, COOKED_PORKCHOP, COOKED_RABBIT, COOKED_SALMON, COOKIE, DRIED_KELP, ENCHANTED_GOLDEN_APPLE, GOLDEN_APPLE, GOLDEN_CARROT, HONEY_BOTTLE, MELON_SLICE, MUSHROOM_STEW, MUTTON, POISONOUS_POTATO, PORKCHOP, POTATO, PUFFERFISH, PUMPKIN_PIE, RABBIT, RABBIT_STEW, ROTTEN_FLESH, SALMON, SPIDER_EYE, SUSPICIOUS_STEW, SWEET_BERRIES, TROPICAL_FISH, LEGACY_BREAD, LEGACY_CARROT_ITEM, LEGACY_BAKED_POTATO, LEGACY_POTATO_ITEM, LEGACY_POISONOUS_POTATO, LEGACY_GOLDEN_CARROT, LEGACY_PUMPKIN_PIE, LEGACY_COOKIE, LEGACY_MELON, LEGACY_MUSHROOM_SOUP, LEGACY_RAW_CHICKEN, LEGACY_COOKED_CHICKEN, LEGACY_RAW_BEEF, LEGACY_COOKED_BEEF, LEGACY_RAW_FISH, LEGACY_COOKED_FISH, LEGACY_PORK, LEGACY_GRILLED_PORK, LEGACY_APPLE, LEGACY_GOLDEN_APPLE, LEGACY_ROTTEN_FLESH, LEGACY_SPIDER_EYE, LEGACY_RABBIT, LEGACY_COOKED_RABBIT, LEGACY_RABBIT_STEW, LEGACY_MUTTON, LEGACY_COOKED_MUTTON, LEGACY_BEETROOT, LEGACY_CHORUS_FRUIT, LEGACY_BEETROOT_SOUP -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -4688,26 +3849,12 @@ public enum Material implements Keyed {
      * @return True if this material represents a playable music disk.
      */
     public boolean isRecord() {
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isRecord">
-            case MUSIC_DISC_11:
-            case MUSIC_DISC_13:
-            case MUSIC_DISC_BLOCKS:
-            case MUSIC_DISC_CAT:
-            case MUSIC_DISC_CHIRP:
-            case MUSIC_DISC_FAR:
-            case MUSIC_DISC_MALL:
-            case MUSIC_DISC_MELLOHI:
-            case MUSIC_DISC_PIGSTEP:
-            case MUSIC_DISC_STAL:
-            case MUSIC_DISC_STRAD:
-            case MUSIC_DISC_WAIT:
-            case MUSIC_DISC_WARD:
-            //</editor-fold>
-                return true;
-            default:
-                return id >= LEGACY_GOLD_RECORD.id && id <= LEGACY_RECORD_12.id;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isRecord">
+        //</editor-fold>
+        return switch (this) {
+            case MUSIC_DISC_11, MUSIC_DISC_13, MUSIC_DISC_BLOCKS, MUSIC_DISC_CAT, MUSIC_DISC_CHIRP, MUSIC_DISC_FAR, MUSIC_DISC_MALL, MUSIC_DISC_MELLOHI, MUSIC_DISC_PIGSTEP, MUSIC_DISC_STAL, MUSIC_DISC_STRAD, MUSIC_DISC_WAIT, MUSIC_DISC_WARD -> true;
+            default -> id >= LEGACY_GOLD_RECORD.id && id <= LEGACY_RECORD_12.id;
+        };
     }
 
     /**
@@ -4719,799 +3866,13 @@ public enum Material implements Keyed {
         if (!isBlock() || id == 0) {
             return false;
         }
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isSolid">
-            case ACACIA_DOOR:
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_LEAVES:
-            case ACACIA_LOG:
-            case ACACIA_PLANKS:
-            case ACACIA_PRESSURE_PLATE:
-            case ACACIA_SIGN:
-            case ACACIA_SLAB:
-            case ACACIA_STAIRS:
-            case ACACIA_TRAPDOOR:
-            case ACACIA_WALL_SIGN:
-            case ACACIA_WOOD:
-            case ANCIENT_DEBRIS:
-            case ANDESITE:
-            case ANDESITE_SLAB:
-            case ANDESITE_STAIRS:
-            case ANDESITE_WALL:
-            case ANVIL:
-            case BAMBOO:
-            case BARREL:
-            case BARRIER:
-            case BASALT:
-            case BEACON:
-            case BEDROCK:
-            case BEEHIVE:
-            case BEE_NEST:
-            case BELL:
-            case BIRCH_DOOR:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_LEAVES:
-            case BIRCH_LOG:
-            case BIRCH_PLANKS:
-            case BIRCH_PRESSURE_PLATE:
-            case BIRCH_SIGN:
-            case BIRCH_SLAB:
-            case BIRCH_STAIRS:
-            case BIRCH_TRAPDOOR:
-            case BIRCH_WALL_SIGN:
-            case BIRCH_WOOD:
-            case BLACKSTONE:
-            case BLACKSTONE_SLAB:
-            case BLACKSTONE_STAIRS:
-            case BLACKSTONE_WALL:
-            case BLACK_BANNER:
-            case BLACK_BED:
-            case BLACK_CONCRETE:
-            case BLACK_CONCRETE_POWDER:
-            case BLACK_GLAZED_TERRACOTTA:
-            case BLACK_SHULKER_BOX:
-            case BLACK_STAINED_GLASS:
-            case BLACK_STAINED_GLASS_PANE:
-            case BLACK_TERRACOTTA:
-            case BLACK_WALL_BANNER:
-            case BLACK_WOOL:
-            case BLAST_FURNACE:
-            case BLUE_BANNER:
-            case BLUE_BED:
-            case BLUE_CONCRETE:
-            case BLUE_CONCRETE_POWDER:
-            case BLUE_GLAZED_TERRACOTTA:
-            case BLUE_ICE:
-            case BLUE_SHULKER_BOX:
-            case BLUE_STAINED_GLASS:
-            case BLUE_STAINED_GLASS_PANE:
-            case BLUE_TERRACOTTA:
-            case BLUE_WALL_BANNER:
-            case BLUE_WOOL:
-            case BONE_BLOCK:
-            case BOOKSHELF:
-            case BRAIN_CORAL_BLOCK:
-            case BREWING_STAND:
-            case BRICKS:
-            case BRICK_SLAB:
-            case BRICK_STAIRS:
-            case BRICK_WALL:
-            case BROWN_BANNER:
-            case BROWN_BED:
-            case BROWN_CONCRETE:
-            case BROWN_CONCRETE_POWDER:
-            case BROWN_GLAZED_TERRACOTTA:
-            case BROWN_MUSHROOM_BLOCK:
-            case BROWN_SHULKER_BOX:
-            case BROWN_STAINED_GLASS:
-            case BROWN_STAINED_GLASS_PANE:
-            case BROWN_TERRACOTTA:
-            case BROWN_WALL_BANNER:
-            case BROWN_WOOL:
-            case BUBBLE_CORAL_BLOCK:
-            case CACTUS:
-            case CAKE:
-            case CAMPFIRE:
-            case CARTOGRAPHY_TABLE:
-            case CARVED_PUMPKIN:
-            case CAULDRON:
-            case CHAIN:
-            case CHAIN_COMMAND_BLOCK:
-            case CHEST:
-            case CHIPPED_ANVIL:
-            case CHISELED_NETHER_BRICKS:
-            case CHISELED_POLISHED_BLACKSTONE:
-            case CHISELED_QUARTZ_BLOCK:
-            case CHISELED_RED_SANDSTONE:
-            case CHISELED_SANDSTONE:
-            case CHISELED_STONE_BRICKS:
-            case CLAY:
-            case COAL_BLOCK:
-            case COAL_ORE:
-            case COARSE_DIRT:
-            case COBBLESTONE:
-            case COBBLESTONE_SLAB:
-            case COBBLESTONE_STAIRS:
-            case COBBLESTONE_WALL:
-            case COMMAND_BLOCK:
-            case COMPOSTER:
-            case CONDUIT:
-            case CRACKED_NETHER_BRICKS:
-            case CRACKED_POLISHED_BLACKSTONE_BRICKS:
-            case CRACKED_STONE_BRICKS:
-            case CRAFTING_TABLE:
-            case CRIMSON_DOOR:
-            case CRIMSON_FENCE:
-            case CRIMSON_FENCE_GATE:
-            case CRIMSON_HYPHAE:
-            case CRIMSON_NYLIUM:
-            case CRIMSON_PLANKS:
-            case CRIMSON_PRESSURE_PLATE:
-            case CRIMSON_SIGN:
-            case CRIMSON_SLAB:
-            case CRIMSON_STAIRS:
-            case CRIMSON_STEM:
-            case CRIMSON_TRAPDOOR:
-            case CRIMSON_WALL_SIGN:
-            case CRYING_OBSIDIAN:
-            case CUT_RED_SANDSTONE:
-            case CUT_RED_SANDSTONE_SLAB:
-            case CUT_SANDSTONE:
-            case CUT_SANDSTONE_SLAB:
-            case CYAN_BANNER:
-            case CYAN_BED:
-            case CYAN_CONCRETE:
-            case CYAN_CONCRETE_POWDER:
-            case CYAN_GLAZED_TERRACOTTA:
-            case CYAN_SHULKER_BOX:
-            case CYAN_STAINED_GLASS:
-            case CYAN_STAINED_GLASS_PANE:
-            case CYAN_TERRACOTTA:
-            case CYAN_WALL_BANNER:
-            case CYAN_WOOL:
-            case DAMAGED_ANVIL:
-            case DARK_OAK_DOOR:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_LEAVES:
-            case DARK_OAK_LOG:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_PRESSURE_PLATE:
-            case DARK_OAK_SIGN:
-            case DARK_OAK_SLAB:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_TRAPDOOR:
-            case DARK_OAK_WALL_SIGN:
-            case DARK_OAK_WOOD:
-            case DARK_PRISMARINE:
-            case DARK_PRISMARINE_SLAB:
-            case DARK_PRISMARINE_STAIRS:
-            case DAYLIGHT_DETECTOR:
-            case DEAD_BRAIN_CORAL:
-            case DEAD_BRAIN_CORAL_BLOCK:
-            case DEAD_BRAIN_CORAL_FAN:
-            case DEAD_BRAIN_CORAL_WALL_FAN:
-            case DEAD_BUBBLE_CORAL:
-            case DEAD_BUBBLE_CORAL_BLOCK:
-            case DEAD_BUBBLE_CORAL_FAN:
-            case DEAD_BUBBLE_CORAL_WALL_FAN:
-            case DEAD_FIRE_CORAL:
-            case DEAD_FIRE_CORAL_BLOCK:
-            case DEAD_FIRE_CORAL_FAN:
-            case DEAD_FIRE_CORAL_WALL_FAN:
-            case DEAD_HORN_CORAL:
-            case DEAD_HORN_CORAL_BLOCK:
-            case DEAD_HORN_CORAL_FAN:
-            case DEAD_HORN_CORAL_WALL_FAN:
-            case DEAD_TUBE_CORAL:
-            case DEAD_TUBE_CORAL_BLOCK:
-            case DEAD_TUBE_CORAL_FAN:
-            case DEAD_TUBE_CORAL_WALL_FAN:
-            case DIAMOND_BLOCK:
-            case DIAMOND_ORE:
-            case DIORITE:
-            case DIORITE_SLAB:
-            case DIORITE_STAIRS:
-            case DIORITE_WALL:
-            case DIRT:
-            case DISPENSER:
-            case DRAGON_EGG:
-            case DRIED_KELP_BLOCK:
-            case DROPPER:
-            case EMERALD_BLOCK:
-            case EMERALD_ORE:
-            case ENCHANTING_TABLE:
-            case ENDER_CHEST:
-            case END_PORTAL_FRAME:
-            case END_STONE:
-            case END_STONE_BRICKS:
-            case END_STONE_BRICK_SLAB:
-            case END_STONE_BRICK_STAIRS:
-            case END_STONE_BRICK_WALL:
-            case FARMLAND:
-            case FIRE_CORAL_BLOCK:
-            case FLETCHING_TABLE:
-            case FROSTED_ICE:
-            case FURNACE:
-            case GILDED_BLACKSTONE:
-            case GLASS:
-            case GLASS_PANE:
-            case GLOWSTONE:
-            case GOLD_BLOCK:
-            case GOLD_ORE:
-            case GRANITE:
-            case GRANITE_SLAB:
-            case GRANITE_STAIRS:
-            case GRANITE_WALL:
-            case GRASS_BLOCK:
-            case GRASS_PATH:
-            case GRAVEL:
-            case GRAY_BANNER:
-            case GRAY_BED:
-            case GRAY_CONCRETE:
-            case GRAY_CONCRETE_POWDER:
-            case GRAY_GLAZED_TERRACOTTA:
-            case GRAY_SHULKER_BOX:
-            case GRAY_STAINED_GLASS:
-            case GRAY_STAINED_GLASS_PANE:
-            case GRAY_TERRACOTTA:
-            case GRAY_WALL_BANNER:
-            case GRAY_WOOL:
-            case GREEN_BANNER:
-            case GREEN_BED:
-            case GREEN_CONCRETE:
-            case GREEN_CONCRETE_POWDER:
-            case GREEN_GLAZED_TERRACOTTA:
-            case GREEN_SHULKER_BOX:
-            case GREEN_STAINED_GLASS:
-            case GREEN_STAINED_GLASS_PANE:
-            case GREEN_TERRACOTTA:
-            case GREEN_WALL_BANNER:
-            case GREEN_WOOL:
-            case GRINDSTONE:
-            case HAY_BLOCK:
-            case HEAVY_WEIGHTED_PRESSURE_PLATE:
-            case HONEYCOMB_BLOCK:
-            case HONEY_BLOCK:
-            case HOPPER:
-            case HORN_CORAL_BLOCK:
-            case ICE:
-            case INFESTED_CHISELED_STONE_BRICKS:
-            case INFESTED_COBBLESTONE:
-            case INFESTED_CRACKED_STONE_BRICKS:
-            case INFESTED_MOSSY_STONE_BRICKS:
-            case INFESTED_STONE:
-            case INFESTED_STONE_BRICKS:
-            case IRON_BARS:
-            case IRON_BLOCK:
-            case IRON_DOOR:
-            case IRON_ORE:
-            case IRON_TRAPDOOR:
-            case JACK_O_LANTERN:
-            case JIGSAW:
-            case JUKEBOX:
-            case JUNGLE_DOOR:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_LEAVES:
-            case JUNGLE_LOG:
-            case JUNGLE_PLANKS:
-            case JUNGLE_PRESSURE_PLATE:
-            case JUNGLE_SIGN:
-            case JUNGLE_SLAB:
-            case JUNGLE_STAIRS:
-            case JUNGLE_TRAPDOOR:
-            case JUNGLE_WALL_SIGN:
-            case JUNGLE_WOOD:
-            case LANTERN:
-            case LAPIS_BLOCK:
-            case LAPIS_ORE:
-            case LECTERN:
-            case LIGHT_BLUE_BANNER:
-            case LIGHT_BLUE_BED:
-            case LIGHT_BLUE_CONCRETE:
-            case LIGHT_BLUE_CONCRETE_POWDER:
-            case LIGHT_BLUE_GLAZED_TERRACOTTA:
-            case LIGHT_BLUE_SHULKER_BOX:
-            case LIGHT_BLUE_STAINED_GLASS:
-            case LIGHT_BLUE_STAINED_GLASS_PANE:
-            case LIGHT_BLUE_TERRACOTTA:
-            case LIGHT_BLUE_WALL_BANNER:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_BANNER:
-            case LIGHT_GRAY_BED:
-            case LIGHT_GRAY_CONCRETE:
-            case LIGHT_GRAY_CONCRETE_POWDER:
-            case LIGHT_GRAY_GLAZED_TERRACOTTA:
-            case LIGHT_GRAY_SHULKER_BOX:
-            case LIGHT_GRAY_STAINED_GLASS:
-            case LIGHT_GRAY_STAINED_GLASS_PANE:
-            case LIGHT_GRAY_TERRACOTTA:
-            case LIGHT_GRAY_WALL_BANNER:
-            case LIGHT_GRAY_WOOL:
-            case LIGHT_WEIGHTED_PRESSURE_PLATE:
-            case LIME_BANNER:
-            case LIME_BED:
-            case LIME_CONCRETE:
-            case LIME_CONCRETE_POWDER:
-            case LIME_GLAZED_TERRACOTTA:
-            case LIME_SHULKER_BOX:
-            case LIME_STAINED_GLASS:
-            case LIME_STAINED_GLASS_PANE:
-            case LIME_TERRACOTTA:
-            case LIME_WALL_BANNER:
-            case LIME_WOOL:
-            case LODESTONE:
-            case LOOM:
-            case MAGENTA_BANNER:
-            case MAGENTA_BED:
-            case MAGENTA_CONCRETE:
-            case MAGENTA_CONCRETE_POWDER:
-            case MAGENTA_GLAZED_TERRACOTTA:
-            case MAGENTA_SHULKER_BOX:
-            case MAGENTA_STAINED_GLASS:
-            case MAGENTA_STAINED_GLASS_PANE:
-            case MAGENTA_TERRACOTTA:
-            case MAGENTA_WALL_BANNER:
-            case MAGENTA_WOOL:
-            case MAGMA_BLOCK:
-            case MELON:
-            case MOSSY_COBBLESTONE:
-            case MOSSY_COBBLESTONE_SLAB:
-            case MOSSY_COBBLESTONE_STAIRS:
-            case MOSSY_COBBLESTONE_WALL:
-            case MOSSY_STONE_BRICKS:
-            case MOSSY_STONE_BRICK_SLAB:
-            case MOSSY_STONE_BRICK_STAIRS:
-            case MOSSY_STONE_BRICK_WALL:
-            case MOVING_PISTON:
-            case MUSHROOM_STEM:
-            case MYCELIUM:
-            case NETHERITE_BLOCK:
-            case NETHERRACK:
-            case NETHER_BRICKS:
-            case NETHER_BRICK_FENCE:
-            case NETHER_BRICK_SLAB:
-            case NETHER_BRICK_STAIRS:
-            case NETHER_BRICK_WALL:
-            case NETHER_GOLD_ORE:
-            case NETHER_QUARTZ_ORE:
-            case NETHER_WART_BLOCK:
-            case NOTE_BLOCK:
-            case OAK_DOOR:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_LEAVES:
-            case OAK_LOG:
-            case OAK_PLANKS:
-            case OAK_PRESSURE_PLATE:
-            case OAK_SIGN:
-            case OAK_SLAB:
-            case OAK_STAIRS:
-            case OAK_TRAPDOOR:
-            case OAK_WALL_SIGN:
-            case OAK_WOOD:
-            case OBSERVER:
-            case OBSIDIAN:
-            case ORANGE_BANNER:
-            case ORANGE_BED:
-            case ORANGE_CONCRETE:
-            case ORANGE_CONCRETE_POWDER:
-            case ORANGE_GLAZED_TERRACOTTA:
-            case ORANGE_SHULKER_BOX:
-            case ORANGE_STAINED_GLASS:
-            case ORANGE_STAINED_GLASS_PANE:
-            case ORANGE_TERRACOTTA:
-            case ORANGE_WALL_BANNER:
-            case ORANGE_WOOL:
-            case PACKED_ICE:
-            case PETRIFIED_OAK_SLAB:
-            case PINK_BANNER:
-            case PINK_BED:
-            case PINK_CONCRETE:
-            case PINK_CONCRETE_POWDER:
-            case PINK_GLAZED_TERRACOTTA:
-            case PINK_SHULKER_BOX:
-            case PINK_STAINED_GLASS:
-            case PINK_STAINED_GLASS_PANE:
-            case PINK_TERRACOTTA:
-            case PINK_WALL_BANNER:
-            case PINK_WOOL:
-            case PISTON:
-            case PISTON_HEAD:
-            case PODZOL:
-            case POLISHED_ANDESITE:
-            case POLISHED_ANDESITE_SLAB:
-            case POLISHED_ANDESITE_STAIRS:
-            case POLISHED_BASALT:
-            case POLISHED_BLACKSTONE:
-            case POLISHED_BLACKSTONE_BRICKS:
-            case POLISHED_BLACKSTONE_BRICK_SLAB:
-            case POLISHED_BLACKSTONE_BRICK_STAIRS:
-            case POLISHED_BLACKSTONE_BRICK_WALL:
-            case POLISHED_BLACKSTONE_PRESSURE_PLATE:
-            case POLISHED_BLACKSTONE_SLAB:
-            case POLISHED_BLACKSTONE_STAIRS:
-            case POLISHED_BLACKSTONE_WALL:
-            case POLISHED_DIORITE:
-            case POLISHED_DIORITE_SLAB:
-            case POLISHED_DIORITE_STAIRS:
-            case POLISHED_GRANITE:
-            case POLISHED_GRANITE_SLAB:
-            case POLISHED_GRANITE_STAIRS:
-            case PRISMARINE:
-            case PRISMARINE_BRICKS:
-            case PRISMARINE_BRICK_SLAB:
-            case PRISMARINE_BRICK_STAIRS:
-            case PRISMARINE_SLAB:
-            case PRISMARINE_STAIRS:
-            case PRISMARINE_WALL:
-            case PUMPKIN:
-            case PURPLE_BANNER:
-            case PURPLE_BED:
-            case PURPLE_CONCRETE:
-            case PURPLE_CONCRETE_POWDER:
-            case PURPLE_GLAZED_TERRACOTTA:
-            case PURPLE_SHULKER_BOX:
-            case PURPLE_STAINED_GLASS:
-            case PURPLE_STAINED_GLASS_PANE:
-            case PURPLE_TERRACOTTA:
-            case PURPLE_WALL_BANNER:
-            case PURPLE_WOOL:
-            case PURPUR_BLOCK:
-            case PURPUR_PILLAR:
-            case PURPUR_SLAB:
-            case PURPUR_STAIRS:
-            case QUARTZ_BLOCK:
-            case QUARTZ_BRICKS:
-            case QUARTZ_PILLAR:
-            case QUARTZ_SLAB:
-            case QUARTZ_STAIRS:
-            case REDSTONE_BLOCK:
-            case REDSTONE_LAMP:
-            case REDSTONE_ORE:
-            case RED_BANNER:
-            case RED_BED:
-            case RED_CONCRETE:
-            case RED_CONCRETE_POWDER:
-            case RED_GLAZED_TERRACOTTA:
-            case RED_MUSHROOM_BLOCK:
-            case RED_NETHER_BRICKS:
-            case RED_NETHER_BRICK_SLAB:
-            case RED_NETHER_BRICK_STAIRS:
-            case RED_NETHER_BRICK_WALL:
-            case RED_SAND:
-            case RED_SANDSTONE:
-            case RED_SANDSTONE_SLAB:
-            case RED_SANDSTONE_STAIRS:
-            case RED_SANDSTONE_WALL:
-            case RED_SHULKER_BOX:
-            case RED_STAINED_GLASS:
-            case RED_STAINED_GLASS_PANE:
-            case RED_TERRACOTTA:
-            case RED_WALL_BANNER:
-            case RED_WOOL:
-            case REPEATING_COMMAND_BLOCK:
-            case RESPAWN_ANCHOR:
-            case SAND:
-            case SANDSTONE:
-            case SANDSTONE_SLAB:
-            case SANDSTONE_STAIRS:
-            case SANDSTONE_WALL:
-            case SEA_LANTERN:
-            case SHROOMLIGHT:
-            case SHULKER_BOX:
-            case SLIME_BLOCK:
-            case SMITHING_TABLE:
-            case SMOKER:
-            case SMOOTH_QUARTZ:
-            case SMOOTH_QUARTZ_SLAB:
-            case SMOOTH_QUARTZ_STAIRS:
-            case SMOOTH_RED_SANDSTONE:
-            case SMOOTH_RED_SANDSTONE_SLAB:
-            case SMOOTH_RED_SANDSTONE_STAIRS:
-            case SMOOTH_SANDSTONE:
-            case SMOOTH_SANDSTONE_SLAB:
-            case SMOOTH_SANDSTONE_STAIRS:
-            case SMOOTH_STONE:
-            case SMOOTH_STONE_SLAB:
-            case SNOW_BLOCK:
-            case SOUL_CAMPFIRE:
-            case SOUL_LANTERN:
-            case SOUL_SAND:
-            case SOUL_SOIL:
-            case SPAWNER:
-            case SPONGE:
-            case SPRUCE_DOOR:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_LEAVES:
-            case SPRUCE_LOG:
-            case SPRUCE_PLANKS:
-            case SPRUCE_PRESSURE_PLATE:
-            case SPRUCE_SIGN:
-            case SPRUCE_SLAB:
-            case SPRUCE_STAIRS:
-            case SPRUCE_TRAPDOOR:
-            case SPRUCE_WALL_SIGN:
-            case SPRUCE_WOOD:
-            case STICKY_PISTON:
-            case STONE:
-            case STONECUTTER:
-            case STONE_BRICKS:
-            case STONE_BRICK_SLAB:
-            case STONE_BRICK_STAIRS:
-            case STONE_BRICK_WALL:
-            case STONE_PRESSURE_PLATE:
-            case STONE_SLAB:
-            case STONE_STAIRS:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_CRIMSON_HYPHAE:
-            case STRIPPED_CRIMSON_STEM:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case STRIPPED_WARPED_HYPHAE:
-            case STRIPPED_WARPED_STEM:
-            case STRUCTURE_BLOCK:
-            case TARGET:
-            case TERRACOTTA:
-            case TNT:
-            case TRAPPED_CHEST:
-            case TUBE_CORAL_BLOCK:
-            case TURTLE_EGG:
-            case WARPED_DOOR:
-            case WARPED_FENCE:
-            case WARPED_FENCE_GATE:
-            case WARPED_HYPHAE:
-            case WARPED_NYLIUM:
-            case WARPED_PLANKS:
-            case WARPED_PRESSURE_PLATE:
-            case WARPED_SIGN:
-            case WARPED_SLAB:
-            case WARPED_STAIRS:
-            case WARPED_STEM:
-            case WARPED_TRAPDOOR:
-            case WARPED_WALL_SIGN:
-            case WARPED_WART_BLOCK:
-            case WET_SPONGE:
-            case WHITE_BANNER:
-            case WHITE_BED:
-            case WHITE_CONCRETE:
-            case WHITE_CONCRETE_POWDER:
-            case WHITE_GLAZED_TERRACOTTA:
-            case WHITE_SHULKER_BOX:
-            case WHITE_STAINED_GLASS:
-            case WHITE_STAINED_GLASS_PANE:
-            case WHITE_TERRACOTTA:
-            case WHITE_WALL_BANNER:
-            case WHITE_WOOL:
-            case YELLOW_BANNER:
-            case YELLOW_BED:
-            case YELLOW_CONCRETE:
-            case YELLOW_CONCRETE_POWDER:
-            case YELLOW_GLAZED_TERRACOTTA:
-            case YELLOW_SHULKER_BOX:
-            case YELLOW_STAINED_GLASS:
-            case YELLOW_STAINED_GLASS_PANE:
-            case YELLOW_TERRACOTTA:
-            case YELLOW_WALL_BANNER:
-            case YELLOW_WOOL:
-            // ----- Legacy Separator -----
-            case LEGACY_STONE:
-            case LEGACY_GRASS:
-            case LEGACY_DIRT:
-            case LEGACY_COBBLESTONE:
-            case LEGACY_WOOD:
-            case LEGACY_BEDROCK:
-            case LEGACY_SAND:
-            case LEGACY_GRAVEL:
-            case LEGACY_GOLD_ORE:
-            case LEGACY_IRON_ORE:
-            case LEGACY_COAL_ORE:
-            case LEGACY_LOG:
-            case LEGACY_LEAVES:
-            case LEGACY_SPONGE:
-            case LEGACY_GLASS:
-            case LEGACY_LAPIS_ORE:
-            case LEGACY_LAPIS_BLOCK:
-            case LEGACY_DISPENSER:
-            case LEGACY_SANDSTONE:
-            case LEGACY_NOTE_BLOCK:
-            case LEGACY_BED_BLOCK:
-            case LEGACY_PISTON_STICKY_BASE:
-            case LEGACY_PISTON_BASE:
-            case LEGACY_PISTON_EXTENSION:
-            case LEGACY_WOOL:
-            case LEGACY_PISTON_MOVING_PIECE:
-            case LEGACY_GOLD_BLOCK:
-            case LEGACY_IRON_BLOCK:
-            case LEGACY_DOUBLE_STEP:
-            case LEGACY_STEP:
-            case LEGACY_BRICK:
-            case LEGACY_TNT:
-            case LEGACY_BOOKSHELF:
-            case LEGACY_MOSSY_COBBLESTONE:
-            case LEGACY_OBSIDIAN:
-            case LEGACY_MOB_SPAWNER:
-            case LEGACY_WOOD_STAIRS:
-            case LEGACY_CHEST:
-            case LEGACY_DIAMOND_ORE:
-            case LEGACY_DIAMOND_BLOCK:
-            case LEGACY_WORKBENCH:
-            case LEGACY_SOIL:
-            case LEGACY_FURNACE:
-            case LEGACY_BURNING_FURNACE:
-            case LEGACY_SIGN_POST:
-            case LEGACY_WOODEN_DOOR:
-            case LEGACY_COBBLESTONE_STAIRS:
-            case LEGACY_WALL_SIGN:
-            case LEGACY_STONE_PLATE:
-            case LEGACY_IRON_DOOR_BLOCK:
-            case LEGACY_WOOD_PLATE:
-            case LEGACY_REDSTONE_ORE:
-            case LEGACY_GLOWING_REDSTONE_ORE:
-            case LEGACY_ICE:
-            case LEGACY_SNOW_BLOCK:
-            case LEGACY_CACTUS:
-            case LEGACY_CLAY:
-            case LEGACY_JUKEBOX:
-            case LEGACY_FENCE:
-            case LEGACY_PUMPKIN:
-            case LEGACY_NETHERRACK:
-            case LEGACY_SOUL_SAND:
-            case LEGACY_GLOWSTONE:
-            case LEGACY_JACK_O_LANTERN:
-            case LEGACY_CAKE_BLOCK:
-            case LEGACY_STAINED_GLASS:
-            case LEGACY_TRAP_DOOR:
-            case LEGACY_MONSTER_EGGS:
-            case LEGACY_SMOOTH_BRICK:
-            case LEGACY_HUGE_MUSHROOM_1:
-            case LEGACY_HUGE_MUSHROOM_2:
-            case LEGACY_IRON_FENCE:
-            case LEGACY_THIN_GLASS:
-            case LEGACY_MELON_BLOCK:
-            case LEGACY_FENCE_GATE:
-            case LEGACY_BRICK_STAIRS:
-            case LEGACY_SMOOTH_STAIRS:
-            case LEGACY_MYCEL:
-            case LEGACY_NETHER_BRICK:
-            case LEGACY_NETHER_FENCE:
-            case LEGACY_NETHER_BRICK_STAIRS:
-            case LEGACY_ENCHANTMENT_TABLE:
-            case LEGACY_BREWING_STAND:
-            case LEGACY_CAULDRON:
-            case LEGACY_ENDER_PORTAL_FRAME:
-            case LEGACY_ENDER_STONE:
-            case LEGACY_DRAGON_EGG:
-            case LEGACY_REDSTONE_LAMP_OFF:
-            case LEGACY_REDSTONE_LAMP_ON:
-            case LEGACY_WOOD_DOUBLE_STEP:
-            case LEGACY_WOOD_STEP:
-            case LEGACY_SANDSTONE_STAIRS:
-            case LEGACY_EMERALD_ORE:
-            case LEGACY_ENDER_CHEST:
-            case LEGACY_EMERALD_BLOCK:
-            case LEGACY_SPRUCE_WOOD_STAIRS:
-            case LEGACY_BIRCH_WOOD_STAIRS:
-            case LEGACY_JUNGLE_WOOD_STAIRS:
-            case LEGACY_COMMAND:
-            case LEGACY_BEACON:
-            case LEGACY_COBBLE_WALL:
-            case LEGACY_ANVIL:
-            case LEGACY_TRAPPED_CHEST:
-            case LEGACY_GOLD_PLATE:
-            case LEGACY_IRON_PLATE:
-            case LEGACY_DAYLIGHT_DETECTOR:
-            case LEGACY_REDSTONE_BLOCK:
-            case LEGACY_QUARTZ_ORE:
-            case LEGACY_HOPPER:
-            case LEGACY_QUARTZ_BLOCK:
-            case LEGACY_QUARTZ_STAIRS:
-            case LEGACY_DROPPER:
-            case LEGACY_STAINED_CLAY:
-            case LEGACY_HAY_BLOCK:
-            case LEGACY_HARD_CLAY:
-            case LEGACY_COAL_BLOCK:
-            case LEGACY_STAINED_GLASS_PANE:
-            case LEGACY_LEAVES_2:
-            case LEGACY_LOG_2:
-            case LEGACY_ACACIA_STAIRS:
-            case LEGACY_DARK_OAK_STAIRS:
-            case LEGACY_PACKED_ICE:
-            case LEGACY_RED_SANDSTONE:
-            case LEGACY_SLIME_BLOCK:
-            case LEGACY_BARRIER:
-            case LEGACY_IRON_TRAPDOOR:
-            case LEGACY_PRISMARINE:
-            case LEGACY_SEA_LANTERN:
-            case LEGACY_DOUBLE_STONE_SLAB2:
-            case LEGACY_RED_SANDSTONE_STAIRS:
-            case LEGACY_STONE_SLAB2:
-            case LEGACY_SPRUCE_FENCE_GATE:
-            case LEGACY_BIRCH_FENCE_GATE:
-            case LEGACY_JUNGLE_FENCE_GATE:
-            case LEGACY_DARK_OAK_FENCE_GATE:
-            case LEGACY_ACACIA_FENCE_GATE:
-            case LEGACY_SPRUCE_FENCE:
-            case LEGACY_BIRCH_FENCE:
-            case LEGACY_JUNGLE_FENCE:
-            case LEGACY_DARK_OAK_FENCE:
-            case LEGACY_ACACIA_FENCE:
-            case LEGACY_STANDING_BANNER:
-            case LEGACY_WALL_BANNER:
-            case LEGACY_DAYLIGHT_DETECTOR_INVERTED:
-            case LEGACY_SPRUCE_DOOR:
-            case LEGACY_BIRCH_DOOR:
-            case LEGACY_JUNGLE_DOOR:
-            case LEGACY_ACACIA_DOOR:
-            case LEGACY_DARK_OAK_DOOR:
-            case LEGACY_PURPUR_BLOCK:
-            case LEGACY_PURPUR_PILLAR:
-            case LEGACY_PURPUR_STAIRS:
-            case LEGACY_PURPUR_DOUBLE_SLAB:
-            case LEGACY_PURPUR_SLAB:
-            case LEGACY_END_BRICKS:
-            case LEGACY_GRASS_PATH:
-            case LEGACY_STRUCTURE_BLOCK:
-            case LEGACY_COMMAND_REPEATING:
-            case LEGACY_COMMAND_CHAIN:
-            case LEGACY_FROSTED_ICE:
-            case LEGACY_MAGMA:
-            case LEGACY_NETHER_WART_BLOCK:
-            case LEGACY_RED_NETHER_BRICK:
-            case LEGACY_BONE_BLOCK:
-            case LEGACY_OBSERVER:
-            case LEGACY_WHITE_SHULKER_BOX:
-            case LEGACY_ORANGE_SHULKER_BOX:
-            case LEGACY_MAGENTA_SHULKER_BOX:
-            case LEGACY_LIGHT_BLUE_SHULKER_BOX:
-            case LEGACY_YELLOW_SHULKER_BOX:
-            case LEGACY_LIME_SHULKER_BOX:
-            case LEGACY_PINK_SHULKER_BOX:
-            case LEGACY_GRAY_SHULKER_BOX:
-            case LEGACY_SILVER_SHULKER_BOX:
-            case LEGACY_CYAN_SHULKER_BOX:
-            case LEGACY_PURPLE_SHULKER_BOX:
-            case LEGACY_BLUE_SHULKER_BOX:
-            case LEGACY_BROWN_SHULKER_BOX:
-            case LEGACY_GREEN_SHULKER_BOX:
-            case LEGACY_RED_SHULKER_BOX:
-            case LEGACY_BLACK_SHULKER_BOX:
-            case LEGACY_WHITE_GLAZED_TERRACOTTA:
-            case LEGACY_ORANGE_GLAZED_TERRACOTTA:
-            case LEGACY_MAGENTA_GLAZED_TERRACOTTA:
-            case LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA:
-            case LEGACY_YELLOW_GLAZED_TERRACOTTA:
-            case LEGACY_LIME_GLAZED_TERRACOTTA:
-            case LEGACY_PINK_GLAZED_TERRACOTTA:
-            case LEGACY_GRAY_GLAZED_TERRACOTTA:
-            case LEGACY_SILVER_GLAZED_TERRACOTTA:
-            case LEGACY_CYAN_GLAZED_TERRACOTTA:
-            case LEGACY_PURPLE_GLAZED_TERRACOTTA:
-            case LEGACY_BLUE_GLAZED_TERRACOTTA:
-            case LEGACY_BROWN_GLAZED_TERRACOTTA:
-            case LEGACY_GREEN_GLAZED_TERRACOTTA:
-            case LEGACY_RED_GLAZED_TERRACOTTA:
-            case LEGACY_BLACK_GLAZED_TERRACOTTA:
-            case LEGACY_CONCRETE:
-            case LEGACY_CONCRETE_POWDER:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isSolid">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_DOOR, ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_LEAVES, ACACIA_LOG, ACACIA_PLANKS, ACACIA_PRESSURE_PLATE, ACACIA_SIGN, ACACIA_SLAB, ACACIA_STAIRS, ACACIA_TRAPDOOR, ACACIA_WALL_SIGN, ACACIA_WOOD, ANCIENT_DEBRIS, ANDESITE, ANDESITE_SLAB, ANDESITE_STAIRS, ANDESITE_WALL, ANVIL, BAMBOO, BARREL, BARRIER, BASALT, BEACON, BEDROCK, BEEHIVE, BEE_NEST, BELL, BIRCH_DOOR, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_LEAVES, BIRCH_LOG, BIRCH_PLANKS, BIRCH_PRESSURE_PLATE, BIRCH_SIGN, BIRCH_SLAB, BIRCH_STAIRS, BIRCH_TRAPDOOR, BIRCH_WALL_SIGN, BIRCH_WOOD, BLACKSTONE, BLACKSTONE_SLAB, BLACKSTONE_STAIRS, BLACKSTONE_WALL, BLACK_BANNER, BLACK_BED, BLACK_CONCRETE, BLACK_CONCRETE_POWDER, BLACK_GLAZED_TERRACOTTA, BLACK_SHULKER_BOX, BLACK_STAINED_GLASS, BLACK_STAINED_GLASS_PANE, BLACK_TERRACOTTA, BLACK_WALL_BANNER, BLACK_WOOL, BLAST_FURNACE, BLUE_BANNER, BLUE_BED, BLUE_CONCRETE, BLUE_CONCRETE_POWDER, BLUE_GLAZED_TERRACOTTA, BLUE_ICE, BLUE_SHULKER_BOX, BLUE_STAINED_GLASS, BLUE_STAINED_GLASS_PANE, BLUE_TERRACOTTA, BLUE_WALL_BANNER, BLUE_WOOL, BONE_BLOCK, BOOKSHELF, BRAIN_CORAL_BLOCK, BREWING_STAND, BRICKS, BRICK_SLAB, BRICK_STAIRS, BRICK_WALL, BROWN_BANNER, BROWN_BED, BROWN_CONCRETE, BROWN_CONCRETE_POWDER, BROWN_GLAZED_TERRACOTTA, BROWN_MUSHROOM_BLOCK, BROWN_SHULKER_BOX, BROWN_STAINED_GLASS, BROWN_STAINED_GLASS_PANE, BROWN_TERRACOTTA, BROWN_WALL_BANNER, BROWN_WOOL, BUBBLE_CORAL_BLOCK, CACTUS, CAKE, CAMPFIRE, CARTOGRAPHY_TABLE, CARVED_PUMPKIN, CAULDRON, CHAIN, CHAIN_COMMAND_BLOCK, CHEST, CHIPPED_ANVIL, CHISELED_NETHER_BRICKS, CHISELED_POLISHED_BLACKSTONE, CHISELED_QUARTZ_BLOCK, CHISELED_RED_SANDSTONE, CHISELED_SANDSTONE, CHISELED_STONE_BRICKS, CLAY, COAL_BLOCK, COAL_ORE, COARSE_DIRT, COBBLESTONE, COBBLESTONE_SLAB, COBBLESTONE_STAIRS, COBBLESTONE_WALL, COMMAND_BLOCK, COMPOSTER, CONDUIT, CRACKED_NETHER_BRICKS, CRACKED_POLISHED_BLACKSTONE_BRICKS, CRACKED_STONE_BRICKS, CRAFTING_TABLE, CRIMSON_DOOR, CRIMSON_FENCE, CRIMSON_FENCE_GATE, CRIMSON_HYPHAE, CRIMSON_NYLIUM, CRIMSON_PLANKS, CRIMSON_PRESSURE_PLATE, CRIMSON_SIGN, CRIMSON_SLAB, CRIMSON_STAIRS, CRIMSON_STEM, CRIMSON_TRAPDOOR, CRIMSON_WALL_SIGN, CRYING_OBSIDIAN, CUT_RED_SANDSTONE, CUT_RED_SANDSTONE_SLAB, CUT_SANDSTONE, CUT_SANDSTONE_SLAB, CYAN_BANNER, CYAN_BED, CYAN_CONCRETE, CYAN_CONCRETE_POWDER, CYAN_GLAZED_TERRACOTTA, CYAN_SHULKER_BOX, CYAN_STAINED_GLASS, CYAN_STAINED_GLASS_PANE, CYAN_TERRACOTTA, CYAN_WALL_BANNER, CYAN_WOOL, DAMAGED_ANVIL, DARK_OAK_DOOR, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_LEAVES, DARK_OAK_LOG, DARK_OAK_PLANKS, DARK_OAK_PRESSURE_PLATE, DARK_OAK_SIGN, DARK_OAK_SLAB, DARK_OAK_STAIRS, DARK_OAK_TRAPDOOR, DARK_OAK_WALL_SIGN, DARK_OAK_WOOD, DARK_PRISMARINE, DARK_PRISMARINE_SLAB, DARK_PRISMARINE_STAIRS, DAYLIGHT_DETECTOR, DEAD_BRAIN_CORAL, DEAD_BRAIN_CORAL_BLOCK, DEAD_BRAIN_CORAL_FAN, DEAD_BRAIN_CORAL_WALL_FAN, DEAD_BUBBLE_CORAL, DEAD_BUBBLE_CORAL_BLOCK, DEAD_BUBBLE_CORAL_FAN, DEAD_BUBBLE_CORAL_WALL_FAN, DEAD_FIRE_CORAL, DEAD_FIRE_CORAL_BLOCK, DEAD_FIRE_CORAL_FAN, DEAD_FIRE_CORAL_WALL_FAN, DEAD_HORN_CORAL, DEAD_HORN_CORAL_BLOCK, DEAD_HORN_CORAL_FAN, DEAD_HORN_CORAL_WALL_FAN, DEAD_TUBE_CORAL, DEAD_TUBE_CORAL_BLOCK, DEAD_TUBE_CORAL_FAN, DEAD_TUBE_CORAL_WALL_FAN, DIAMOND_BLOCK, DIAMOND_ORE, DIORITE, DIORITE_SLAB, DIORITE_STAIRS, DIORITE_WALL, DIRT, DISPENSER, DRAGON_EGG, DRIED_KELP_BLOCK, DROPPER, EMERALD_BLOCK, EMERALD_ORE, ENCHANTING_TABLE, ENDER_CHEST, END_PORTAL_FRAME, END_STONE, END_STONE_BRICKS, END_STONE_BRICK_SLAB, END_STONE_BRICK_STAIRS, END_STONE_BRICK_WALL, FARMLAND, FIRE_CORAL_BLOCK, FLETCHING_TABLE, FROSTED_ICE, FURNACE, GILDED_BLACKSTONE, GLASS, GLASS_PANE, GLOWSTONE, GOLD_BLOCK, GOLD_ORE, GRANITE, GRANITE_SLAB, GRANITE_STAIRS, GRANITE_WALL, GRASS_BLOCK, GRASS_PATH, GRAVEL, GRAY_BANNER, GRAY_BED, GRAY_CONCRETE, GRAY_CONCRETE_POWDER, GRAY_GLAZED_TERRACOTTA, GRAY_SHULKER_BOX, GRAY_STAINED_GLASS, GRAY_STAINED_GLASS_PANE, GRAY_TERRACOTTA, GRAY_WALL_BANNER, GRAY_WOOL, GREEN_BANNER, GREEN_BED, GREEN_CONCRETE, GREEN_CONCRETE_POWDER, GREEN_GLAZED_TERRACOTTA, GREEN_SHULKER_BOX, GREEN_STAINED_GLASS, GREEN_STAINED_GLASS_PANE, GREEN_TERRACOTTA, GREEN_WALL_BANNER, GREEN_WOOL, GRINDSTONE, HAY_BLOCK, HEAVY_WEIGHTED_PRESSURE_PLATE, HONEYCOMB_BLOCK, HONEY_BLOCK, HOPPER, HORN_CORAL_BLOCK, ICE, INFESTED_CHISELED_STONE_BRICKS, INFESTED_COBBLESTONE, INFESTED_CRACKED_STONE_BRICKS, INFESTED_MOSSY_STONE_BRICKS, INFESTED_STONE, INFESTED_STONE_BRICKS, IRON_BARS, IRON_BLOCK, IRON_DOOR, IRON_ORE, IRON_TRAPDOOR, JACK_O_LANTERN, JIGSAW, JUKEBOX, JUNGLE_DOOR, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_LEAVES, JUNGLE_LOG, JUNGLE_PLANKS, JUNGLE_PRESSURE_PLATE, JUNGLE_SIGN, JUNGLE_SLAB, JUNGLE_STAIRS, JUNGLE_TRAPDOOR, JUNGLE_WALL_SIGN, JUNGLE_WOOD, LANTERN, LAPIS_BLOCK, LAPIS_ORE, LECTERN, LIGHT_BLUE_BANNER, LIGHT_BLUE_BED, LIGHT_BLUE_CONCRETE, LIGHT_BLUE_CONCRETE_POWDER, LIGHT_BLUE_GLAZED_TERRACOTTA, LIGHT_BLUE_SHULKER_BOX, LIGHT_BLUE_STAINED_GLASS, LIGHT_BLUE_STAINED_GLASS_PANE, LIGHT_BLUE_TERRACOTTA, LIGHT_BLUE_WALL_BANNER, LIGHT_BLUE_WOOL, LIGHT_GRAY_BANNER, LIGHT_GRAY_BED, LIGHT_GRAY_CONCRETE, LIGHT_GRAY_CONCRETE_POWDER, LIGHT_GRAY_GLAZED_TERRACOTTA, LIGHT_GRAY_SHULKER_BOX, LIGHT_GRAY_STAINED_GLASS, LIGHT_GRAY_STAINED_GLASS_PANE, LIGHT_GRAY_TERRACOTTA, LIGHT_GRAY_WALL_BANNER, LIGHT_GRAY_WOOL, LIGHT_WEIGHTED_PRESSURE_PLATE, LIME_BANNER, LIME_BED, LIME_CONCRETE, LIME_CONCRETE_POWDER, LIME_GLAZED_TERRACOTTA, LIME_SHULKER_BOX, LIME_STAINED_GLASS, LIME_STAINED_GLASS_PANE, LIME_TERRACOTTA, LIME_WALL_BANNER, LIME_WOOL, LODESTONE, LOOM, MAGENTA_BANNER, MAGENTA_BED, MAGENTA_CONCRETE, MAGENTA_CONCRETE_POWDER, MAGENTA_GLAZED_TERRACOTTA, MAGENTA_SHULKER_BOX, MAGENTA_STAINED_GLASS, MAGENTA_STAINED_GLASS_PANE, MAGENTA_TERRACOTTA, MAGENTA_WALL_BANNER, MAGENTA_WOOL, MAGMA_BLOCK, MELON, MOSSY_COBBLESTONE, MOSSY_COBBLESTONE_SLAB, MOSSY_COBBLESTONE_STAIRS, MOSSY_COBBLESTONE_WALL, MOSSY_STONE_BRICKS, MOSSY_STONE_BRICK_SLAB, MOSSY_STONE_BRICK_STAIRS, MOSSY_STONE_BRICK_WALL, MOVING_PISTON, MUSHROOM_STEM, MYCELIUM, NETHERITE_BLOCK, NETHERRACK, NETHER_BRICKS, NETHER_BRICK_FENCE, NETHER_BRICK_SLAB, NETHER_BRICK_STAIRS, NETHER_BRICK_WALL, NETHER_GOLD_ORE, NETHER_QUARTZ_ORE, NETHER_WART_BLOCK, NOTE_BLOCK, OAK_DOOR, OAK_FENCE, OAK_FENCE_GATE, OAK_LEAVES, OAK_LOG, OAK_PLANKS, OAK_PRESSURE_PLATE, OAK_SIGN, OAK_SLAB, OAK_STAIRS, OAK_TRAPDOOR, OAK_WALL_SIGN, OAK_WOOD, OBSERVER, OBSIDIAN, ORANGE_BANNER, ORANGE_BED, ORANGE_CONCRETE, ORANGE_CONCRETE_POWDER, ORANGE_GLAZED_TERRACOTTA, ORANGE_SHULKER_BOX, ORANGE_STAINED_GLASS, ORANGE_STAINED_GLASS_PANE, ORANGE_TERRACOTTA, ORANGE_WALL_BANNER, ORANGE_WOOL, PACKED_ICE, PETRIFIED_OAK_SLAB, PINK_BANNER, PINK_BED, PINK_CONCRETE, PINK_CONCRETE_POWDER, PINK_GLAZED_TERRACOTTA, PINK_SHULKER_BOX, PINK_STAINED_GLASS, PINK_STAINED_GLASS_PANE, PINK_TERRACOTTA, PINK_WALL_BANNER, PINK_WOOL, PISTON, PISTON_HEAD, PODZOL, POLISHED_ANDESITE, POLISHED_ANDESITE_SLAB, POLISHED_ANDESITE_STAIRS, POLISHED_BASALT, POLISHED_BLACKSTONE, POLISHED_BLACKSTONE_BRICKS, POLISHED_BLACKSTONE_BRICK_SLAB, POLISHED_BLACKSTONE_BRICK_STAIRS, POLISHED_BLACKSTONE_BRICK_WALL, POLISHED_BLACKSTONE_PRESSURE_PLATE, POLISHED_BLACKSTONE_SLAB, POLISHED_BLACKSTONE_STAIRS, POLISHED_BLACKSTONE_WALL, POLISHED_DIORITE, POLISHED_DIORITE_SLAB, POLISHED_DIORITE_STAIRS, POLISHED_GRANITE, POLISHED_GRANITE_SLAB, POLISHED_GRANITE_STAIRS, PRISMARINE, PRISMARINE_BRICKS, PRISMARINE_BRICK_SLAB, PRISMARINE_BRICK_STAIRS, PRISMARINE_SLAB, PRISMARINE_STAIRS, PRISMARINE_WALL, PUMPKIN, PURPLE_BANNER, PURPLE_BED, PURPLE_CONCRETE, PURPLE_CONCRETE_POWDER, PURPLE_GLAZED_TERRACOTTA, PURPLE_SHULKER_BOX, PURPLE_STAINED_GLASS, PURPLE_STAINED_GLASS_PANE, PURPLE_TERRACOTTA, PURPLE_WALL_BANNER, PURPLE_WOOL, PURPUR_BLOCK, PURPUR_PILLAR, PURPUR_SLAB, PURPUR_STAIRS, QUARTZ_BLOCK, QUARTZ_BRICKS, QUARTZ_PILLAR, QUARTZ_SLAB, QUARTZ_STAIRS, REDSTONE_BLOCK, REDSTONE_LAMP, REDSTONE_ORE, RED_BANNER, RED_BED, RED_CONCRETE, RED_CONCRETE_POWDER, RED_GLAZED_TERRACOTTA, RED_MUSHROOM_BLOCK, RED_NETHER_BRICKS, RED_NETHER_BRICK_SLAB, RED_NETHER_BRICK_STAIRS, RED_NETHER_BRICK_WALL, RED_SAND, RED_SANDSTONE, RED_SANDSTONE_SLAB, RED_SANDSTONE_STAIRS, RED_SANDSTONE_WALL, RED_SHULKER_BOX, RED_STAINED_GLASS, RED_STAINED_GLASS_PANE, RED_TERRACOTTA, RED_WALL_BANNER, RED_WOOL, REPEATING_COMMAND_BLOCK, RESPAWN_ANCHOR, SAND, SANDSTONE, SANDSTONE_SLAB, SANDSTONE_STAIRS, SANDSTONE_WALL, SEA_LANTERN, SHROOMLIGHT, SHULKER_BOX, SLIME_BLOCK, SMITHING_TABLE, SMOKER, SMOOTH_QUARTZ, SMOOTH_QUARTZ_SLAB, SMOOTH_QUARTZ_STAIRS, SMOOTH_RED_SANDSTONE, SMOOTH_RED_SANDSTONE_SLAB, SMOOTH_RED_SANDSTONE_STAIRS, SMOOTH_SANDSTONE, SMOOTH_SANDSTONE_SLAB, SMOOTH_SANDSTONE_STAIRS, SMOOTH_STONE, SMOOTH_STONE_SLAB, SNOW_BLOCK, SOUL_CAMPFIRE, SOUL_LANTERN, SOUL_SAND, SOUL_SOIL, SPAWNER, SPONGE, SPRUCE_DOOR, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_LEAVES, SPRUCE_LOG, SPRUCE_PLANKS, SPRUCE_PRESSURE_PLATE, SPRUCE_SIGN, SPRUCE_SLAB, SPRUCE_STAIRS, SPRUCE_TRAPDOOR, SPRUCE_WALL_SIGN, SPRUCE_WOOD, STICKY_PISTON, STONE, STONECUTTER, STONE_BRICKS, STONE_BRICK_SLAB, STONE_BRICK_STAIRS, STONE_BRICK_WALL, STONE_PRESSURE_PLATE, STONE_SLAB, STONE_STAIRS, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_CRIMSON_HYPHAE, STRIPPED_CRIMSON_STEM, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, STRIPPED_WARPED_HYPHAE, STRIPPED_WARPED_STEM, STRUCTURE_BLOCK, TARGET, TERRACOTTA, TNT, TRAPPED_CHEST, TUBE_CORAL_BLOCK, TURTLE_EGG, WARPED_DOOR, WARPED_FENCE, WARPED_FENCE_GATE, WARPED_HYPHAE, WARPED_NYLIUM, WARPED_PLANKS, WARPED_PRESSURE_PLATE, WARPED_SIGN, WARPED_SLAB, WARPED_STAIRS, WARPED_STEM, WARPED_TRAPDOOR, WARPED_WALL_SIGN, WARPED_WART_BLOCK, WET_SPONGE, WHITE_BANNER, WHITE_BED, WHITE_CONCRETE, WHITE_CONCRETE_POWDER, WHITE_GLAZED_TERRACOTTA, WHITE_SHULKER_BOX, WHITE_STAINED_GLASS, WHITE_STAINED_GLASS_PANE, WHITE_TERRACOTTA, WHITE_WALL_BANNER, WHITE_WOOL, YELLOW_BANNER, YELLOW_BED, YELLOW_CONCRETE, YELLOW_CONCRETE_POWDER, YELLOW_GLAZED_TERRACOTTA, YELLOW_SHULKER_BOX, YELLOW_STAINED_GLASS, YELLOW_STAINED_GLASS_PANE, YELLOW_TERRACOTTA, YELLOW_WALL_BANNER, YELLOW_WOOL, LEGACY_STONE, LEGACY_GRASS, LEGACY_DIRT, LEGACY_COBBLESTONE, LEGACY_WOOD, LEGACY_BEDROCK, LEGACY_SAND, LEGACY_GRAVEL, LEGACY_GOLD_ORE, LEGACY_IRON_ORE, LEGACY_COAL_ORE, LEGACY_LOG, LEGACY_LEAVES, LEGACY_SPONGE, LEGACY_GLASS, LEGACY_LAPIS_ORE, LEGACY_LAPIS_BLOCK, LEGACY_DISPENSER, LEGACY_SANDSTONE, LEGACY_NOTE_BLOCK, LEGACY_BED_BLOCK, LEGACY_PISTON_STICKY_BASE, LEGACY_PISTON_BASE, LEGACY_PISTON_EXTENSION, LEGACY_WOOL, LEGACY_PISTON_MOVING_PIECE, LEGACY_GOLD_BLOCK, LEGACY_IRON_BLOCK, LEGACY_DOUBLE_STEP, LEGACY_STEP, LEGACY_BRICK, LEGACY_TNT, LEGACY_BOOKSHELF, LEGACY_MOSSY_COBBLESTONE, LEGACY_OBSIDIAN, LEGACY_MOB_SPAWNER, LEGACY_WOOD_STAIRS, LEGACY_CHEST, LEGACY_DIAMOND_ORE, LEGACY_DIAMOND_BLOCK, LEGACY_WORKBENCH, LEGACY_SOIL, LEGACY_FURNACE, LEGACY_BURNING_FURNACE, LEGACY_SIGN_POST, LEGACY_WOODEN_DOOR, LEGACY_COBBLESTONE_STAIRS, LEGACY_WALL_SIGN, LEGACY_STONE_PLATE, LEGACY_IRON_DOOR_BLOCK, LEGACY_WOOD_PLATE, LEGACY_REDSTONE_ORE, LEGACY_GLOWING_REDSTONE_ORE, LEGACY_ICE, LEGACY_SNOW_BLOCK, LEGACY_CACTUS, LEGACY_CLAY, LEGACY_JUKEBOX, LEGACY_FENCE, LEGACY_PUMPKIN, LEGACY_NETHERRACK, LEGACY_SOUL_SAND, LEGACY_GLOWSTONE, LEGACY_JACK_O_LANTERN, LEGACY_CAKE_BLOCK, LEGACY_STAINED_GLASS, LEGACY_TRAP_DOOR, LEGACY_MONSTER_EGGS, LEGACY_SMOOTH_BRICK, LEGACY_HUGE_MUSHROOM_1, LEGACY_HUGE_MUSHROOM_2, LEGACY_IRON_FENCE, LEGACY_THIN_GLASS, LEGACY_MELON_BLOCK, LEGACY_FENCE_GATE, LEGACY_BRICK_STAIRS, LEGACY_SMOOTH_STAIRS, LEGACY_MYCEL, LEGACY_NETHER_BRICK, LEGACY_NETHER_FENCE, LEGACY_NETHER_BRICK_STAIRS, LEGACY_ENCHANTMENT_TABLE, LEGACY_BREWING_STAND, LEGACY_CAULDRON, LEGACY_ENDER_PORTAL_FRAME, LEGACY_ENDER_STONE, LEGACY_DRAGON_EGG, LEGACY_REDSTONE_LAMP_OFF, LEGACY_REDSTONE_LAMP_ON, LEGACY_WOOD_DOUBLE_STEP, LEGACY_WOOD_STEP, LEGACY_SANDSTONE_STAIRS, LEGACY_EMERALD_ORE, LEGACY_ENDER_CHEST, LEGACY_EMERALD_BLOCK, LEGACY_SPRUCE_WOOD_STAIRS, LEGACY_BIRCH_WOOD_STAIRS, LEGACY_JUNGLE_WOOD_STAIRS, LEGACY_COMMAND, LEGACY_BEACON, LEGACY_COBBLE_WALL, LEGACY_ANVIL, LEGACY_TRAPPED_CHEST, LEGACY_GOLD_PLATE, LEGACY_IRON_PLATE, LEGACY_DAYLIGHT_DETECTOR, LEGACY_REDSTONE_BLOCK, LEGACY_QUARTZ_ORE, LEGACY_HOPPER, LEGACY_QUARTZ_BLOCK, LEGACY_QUARTZ_STAIRS, LEGACY_DROPPER, LEGACY_STAINED_CLAY, LEGACY_HAY_BLOCK, LEGACY_HARD_CLAY, LEGACY_COAL_BLOCK, LEGACY_STAINED_GLASS_PANE, LEGACY_LEAVES_2, LEGACY_LOG_2, LEGACY_ACACIA_STAIRS, LEGACY_DARK_OAK_STAIRS, LEGACY_PACKED_ICE, LEGACY_RED_SANDSTONE, LEGACY_SLIME_BLOCK, LEGACY_BARRIER, LEGACY_IRON_TRAPDOOR, LEGACY_PRISMARINE, LEGACY_SEA_LANTERN, LEGACY_DOUBLE_STONE_SLAB2, LEGACY_RED_SANDSTONE_STAIRS, LEGACY_STONE_SLAB2, LEGACY_SPRUCE_FENCE_GATE, LEGACY_BIRCH_FENCE_GATE, LEGACY_JUNGLE_FENCE_GATE, LEGACY_DARK_OAK_FENCE_GATE, LEGACY_ACACIA_FENCE_GATE, LEGACY_SPRUCE_FENCE, LEGACY_BIRCH_FENCE, LEGACY_JUNGLE_FENCE, LEGACY_DARK_OAK_FENCE, LEGACY_ACACIA_FENCE, LEGACY_STANDING_BANNER, LEGACY_WALL_BANNER, LEGACY_DAYLIGHT_DETECTOR_INVERTED, LEGACY_SPRUCE_DOOR, LEGACY_BIRCH_DOOR, LEGACY_JUNGLE_DOOR, LEGACY_ACACIA_DOOR, LEGACY_DARK_OAK_DOOR, LEGACY_PURPUR_BLOCK, LEGACY_PURPUR_PILLAR, LEGACY_PURPUR_STAIRS, LEGACY_PURPUR_DOUBLE_SLAB, LEGACY_PURPUR_SLAB, LEGACY_END_BRICKS, LEGACY_GRASS_PATH, LEGACY_STRUCTURE_BLOCK, LEGACY_COMMAND_REPEATING, LEGACY_COMMAND_CHAIN, LEGACY_FROSTED_ICE, LEGACY_MAGMA, LEGACY_NETHER_WART_BLOCK, LEGACY_RED_NETHER_BRICK, LEGACY_BONE_BLOCK, LEGACY_OBSERVER, LEGACY_WHITE_SHULKER_BOX, LEGACY_ORANGE_SHULKER_BOX, LEGACY_MAGENTA_SHULKER_BOX, LEGACY_LIGHT_BLUE_SHULKER_BOX, LEGACY_YELLOW_SHULKER_BOX, LEGACY_LIME_SHULKER_BOX, LEGACY_PINK_SHULKER_BOX, LEGACY_GRAY_SHULKER_BOX, LEGACY_SILVER_SHULKER_BOX, LEGACY_CYAN_SHULKER_BOX, LEGACY_PURPLE_SHULKER_BOX, LEGACY_BLUE_SHULKER_BOX, LEGACY_BROWN_SHULKER_BOX, LEGACY_GREEN_SHULKER_BOX, LEGACY_RED_SHULKER_BOX, LEGACY_BLACK_SHULKER_BOX, LEGACY_WHITE_GLAZED_TERRACOTTA, LEGACY_ORANGE_GLAZED_TERRACOTTA, LEGACY_MAGENTA_GLAZED_TERRACOTTA, LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA, LEGACY_YELLOW_GLAZED_TERRACOTTA, LEGACY_LIME_GLAZED_TERRACOTTA, LEGACY_PINK_GLAZED_TERRACOTTA, LEGACY_GRAY_GLAZED_TERRACOTTA, LEGACY_SILVER_GLAZED_TERRACOTTA, LEGACY_CYAN_GLAZED_TERRACOTTA, LEGACY_PURPLE_GLAZED_TERRACOTTA, LEGACY_BLUE_GLAZED_TERRACOTTA, LEGACY_BROWN_GLAZED_TERRACOTTA, LEGACY_GREEN_GLAZED_TERRACOTTA, LEGACY_RED_GLAZED_TERRACOTTA, LEGACY_BLACK_GLAZED_TERRACOTTA, LEGACY_CONCRETE, LEGACY_CONCRETE_POWDER -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -5520,18 +3881,13 @@ public enum Material implements Keyed {
      * @return True if this material is an air block.
      */
     public boolean isAir() {
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isAir">
-            case AIR:
-            case CAVE_AIR:
-            case VOID_AIR:
-            // ----- Legacy Separator -----
-            case LEGACY_AIR:
-                //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isAir">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case AIR, CAVE_AIR, VOID_AIR, LEGACY_AIR -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -5546,189 +3902,13 @@ public enum Material implements Keyed {
         if (!isBlock()) {
             return false;
         }
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isTransparent">
-            case ACACIA_BUTTON:
-            case ACACIA_SAPLING:
-            case ACTIVATOR_RAIL:
-            case AIR:
-            case ALLIUM:
-            case ATTACHED_MELON_STEM:
-            case ATTACHED_PUMPKIN_STEM:
-            case AZURE_BLUET:
-            case BARRIER:
-            case BEETROOTS:
-            case BIRCH_BUTTON:
-            case BIRCH_SAPLING:
-            case BLACK_CARPET:
-            case BLUE_CARPET:
-            case BLUE_ORCHID:
-            case BROWN_CARPET:
-            case BROWN_MUSHROOM:
-            case CARROTS:
-            case CAVE_AIR:
-            case CHORUS_FLOWER:
-            case CHORUS_PLANT:
-            case COCOA:
-            case COMPARATOR:
-            case CREEPER_HEAD:
-            case CREEPER_WALL_HEAD:
-            case CYAN_CARPET:
-            case DANDELION:
-            case DARK_OAK_BUTTON:
-            case DARK_OAK_SAPLING:
-            case DEAD_BUSH:
-            case DETECTOR_RAIL:
-            case DRAGON_HEAD:
-            case DRAGON_WALL_HEAD:
-            case END_GATEWAY:
-            case END_PORTAL:
-            case END_ROD:
-            case FERN:
-            case FIRE:
-            case FLOWER_POT:
-            case GRASS:
-            case GRAY_CARPET:
-            case GREEN_CARPET:
-            case JUNGLE_BUTTON:
-            case JUNGLE_SAPLING:
-            case LADDER:
-            case LARGE_FERN:
-            case LEVER:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_GRAY_CARPET:
-            case LILAC:
-            case LILY_PAD:
-            case LIME_CARPET:
-            case MAGENTA_CARPET:
-            case MELON_STEM:
-            case NETHER_PORTAL:
-            case NETHER_WART:
-            case OAK_BUTTON:
-            case OAK_SAPLING:
-            case ORANGE_CARPET:
-            case ORANGE_TULIP:
-            case OXEYE_DAISY:
-            case PEONY:
-            case PINK_CARPET:
-            case PINK_TULIP:
-            case PLAYER_HEAD:
-            case PLAYER_WALL_HEAD:
-            case POPPY:
-            case POTATOES:
-            case POTTED_ACACIA_SAPLING:
-            case POTTED_ALLIUM:
-            case POTTED_AZURE_BLUET:
-            case POTTED_BIRCH_SAPLING:
-            case POTTED_BLUE_ORCHID:
-            case POTTED_BROWN_MUSHROOM:
-            case POTTED_CACTUS:
-            case POTTED_DANDELION:
-            case POTTED_DARK_OAK_SAPLING:
-            case POTTED_DEAD_BUSH:
-            case POTTED_FERN:
-            case POTTED_JUNGLE_SAPLING:
-            case POTTED_OAK_SAPLING:
-            case POTTED_ORANGE_TULIP:
-            case POTTED_OXEYE_DAISY:
-            case POTTED_PINK_TULIP:
-            case POTTED_POPPY:
-            case POTTED_RED_MUSHROOM:
-            case POTTED_RED_TULIP:
-            case POTTED_SPRUCE_SAPLING:
-            case POTTED_WHITE_TULIP:
-            case POWERED_RAIL:
-            case PUMPKIN_STEM:
-            case PURPLE_CARPET:
-            case RAIL:
-            case REDSTONE_TORCH:
-            case REDSTONE_WALL_TORCH:
-            case REDSTONE_WIRE:
-            case RED_CARPET:
-            case RED_MUSHROOM:
-            case RED_TULIP:
-            case REPEATER:
-            case ROSE_BUSH:
-            case SKELETON_SKULL:
-            case SKELETON_WALL_SKULL:
-            case SNOW:
-            case SPRUCE_BUTTON:
-            case SPRUCE_SAPLING:
-            case STONE_BUTTON:
-            case STRUCTURE_VOID:
-            case SUGAR_CANE:
-            case SUNFLOWER:
-            case TALL_GRASS:
-            case TORCH:
-            case TRIPWIRE:
-            case TRIPWIRE_HOOK:
-            case VINE:
-            case VOID_AIR:
-            case WALL_TORCH:
-            case WHEAT:
-            case WHITE_CARPET:
-            case WHITE_TULIP:
-            case WITHER_SKELETON_SKULL:
-            case WITHER_SKELETON_WALL_SKULL:
-            case YELLOW_CARPET:
-            case ZOMBIE_HEAD:
-            case ZOMBIE_WALL_HEAD:
-            // ----- Legacy Separator -----
-            case LEGACY_AIR:
-            case LEGACY_SAPLING:
-            case LEGACY_POWERED_RAIL:
-            case LEGACY_DETECTOR_RAIL:
-            case LEGACY_LONG_GRASS:
-            case LEGACY_DEAD_BUSH:
-            case LEGACY_YELLOW_FLOWER:
-            case LEGACY_RED_ROSE:
-            case LEGACY_BROWN_MUSHROOM:
-            case LEGACY_RED_MUSHROOM:
-            case LEGACY_TORCH:
-            case LEGACY_FIRE:
-            case LEGACY_REDSTONE_WIRE:
-            case LEGACY_CROPS:
-            case LEGACY_LADDER:
-            case LEGACY_RAILS:
-            case LEGACY_LEVER:
-            case LEGACY_REDSTONE_TORCH_OFF:
-            case LEGACY_REDSTONE_TORCH_ON:
-            case LEGACY_STONE_BUTTON:
-            case LEGACY_SNOW:
-            case LEGACY_SUGAR_CANE_BLOCK:
-            case LEGACY_PORTAL:
-            case LEGACY_DIODE_BLOCK_OFF:
-            case LEGACY_DIODE_BLOCK_ON:
-            case LEGACY_PUMPKIN_STEM:
-            case LEGACY_MELON_STEM:
-            case LEGACY_VINE:
-            case LEGACY_WATER_LILY:
-            case LEGACY_NETHER_WARTS:
-            case LEGACY_ENDER_PORTAL:
-            case LEGACY_COCOA:
-            case LEGACY_TRIPWIRE_HOOK:
-            case LEGACY_TRIPWIRE:
-            case LEGACY_FLOWER_POT:
-            case LEGACY_CARROT:
-            case LEGACY_POTATO:
-            case LEGACY_WOOD_BUTTON:
-            case LEGACY_SKULL:
-            case LEGACY_REDSTONE_COMPARATOR_OFF:
-            case LEGACY_REDSTONE_COMPARATOR_ON:
-            case LEGACY_ACTIVATOR_RAIL:
-            case LEGACY_CARPET:
-            case LEGACY_DOUBLE_PLANT:
-            case LEGACY_END_ROD:
-            case LEGACY_CHORUS_PLANT:
-            case LEGACY_CHORUS_FLOWER:
-            case LEGACY_BEETROOT_BLOCK:
-            case LEGACY_END_GATEWAY:
-            case LEGACY_STRUCTURE_VOID:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isTransparent">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_BUTTON, ACACIA_SAPLING, ACTIVATOR_RAIL, AIR, ALLIUM, ATTACHED_MELON_STEM, ATTACHED_PUMPKIN_STEM, AZURE_BLUET, BARRIER, BEETROOTS, BIRCH_BUTTON, BIRCH_SAPLING, BLACK_CARPET, BLUE_CARPET, BLUE_ORCHID, BROWN_CARPET, BROWN_MUSHROOM, CARROTS, CAVE_AIR, CHORUS_FLOWER, CHORUS_PLANT, COCOA, COMPARATOR, CREEPER_HEAD, CREEPER_WALL_HEAD, CYAN_CARPET, DANDELION, DARK_OAK_BUTTON, DARK_OAK_SAPLING, DEAD_BUSH, DETECTOR_RAIL, DRAGON_HEAD, DRAGON_WALL_HEAD, END_GATEWAY, END_PORTAL, END_ROD, FERN, FIRE, FLOWER_POT, GRASS, GRAY_CARPET, GREEN_CARPET, JUNGLE_BUTTON, JUNGLE_SAPLING, LADDER, LARGE_FERN, LEVER, LIGHT_BLUE_CARPET, LIGHT_GRAY_CARPET, LILAC, LILY_PAD, LIME_CARPET, MAGENTA_CARPET, MELON_STEM, NETHER_PORTAL, NETHER_WART, OAK_BUTTON, OAK_SAPLING, ORANGE_CARPET, ORANGE_TULIP, OXEYE_DAISY, PEONY, PINK_CARPET, PINK_TULIP, PLAYER_HEAD, PLAYER_WALL_HEAD, POPPY, POTATOES, POTTED_ACACIA_SAPLING, POTTED_ALLIUM, POTTED_AZURE_BLUET, POTTED_BIRCH_SAPLING, POTTED_BLUE_ORCHID, POTTED_BROWN_MUSHROOM, POTTED_CACTUS, POTTED_DANDELION, POTTED_DARK_OAK_SAPLING, POTTED_DEAD_BUSH, POTTED_FERN, POTTED_JUNGLE_SAPLING, POTTED_OAK_SAPLING, POTTED_ORANGE_TULIP, POTTED_OXEYE_DAISY, POTTED_PINK_TULIP, POTTED_POPPY, POTTED_RED_MUSHROOM, POTTED_RED_TULIP, POTTED_SPRUCE_SAPLING, POTTED_WHITE_TULIP, POWERED_RAIL, PUMPKIN_STEM, PURPLE_CARPET, RAIL, REDSTONE_TORCH, REDSTONE_WALL_TORCH, REDSTONE_WIRE, RED_CARPET, RED_MUSHROOM, RED_TULIP, REPEATER, ROSE_BUSH, SKELETON_SKULL, SKELETON_WALL_SKULL, SNOW, SPRUCE_BUTTON, SPRUCE_SAPLING, STONE_BUTTON, STRUCTURE_VOID, SUGAR_CANE, SUNFLOWER, TALL_GRASS, TORCH, TRIPWIRE, TRIPWIRE_HOOK, VINE, VOID_AIR, WALL_TORCH, WHEAT, WHITE_CARPET, WHITE_TULIP, WITHER_SKELETON_SKULL, WITHER_SKELETON_WALL_SKULL, YELLOW_CARPET, ZOMBIE_HEAD, ZOMBIE_WALL_HEAD, LEGACY_AIR, LEGACY_SAPLING, LEGACY_POWERED_RAIL, LEGACY_DETECTOR_RAIL, LEGACY_LONG_GRASS, LEGACY_DEAD_BUSH, LEGACY_YELLOW_FLOWER, LEGACY_RED_ROSE, LEGACY_BROWN_MUSHROOM, LEGACY_RED_MUSHROOM, LEGACY_TORCH, LEGACY_FIRE, LEGACY_REDSTONE_WIRE, LEGACY_CROPS, LEGACY_LADDER, LEGACY_RAILS, LEGACY_LEVER, LEGACY_REDSTONE_TORCH_OFF, LEGACY_REDSTONE_TORCH_ON, LEGACY_STONE_BUTTON, LEGACY_SNOW, LEGACY_SUGAR_CANE_BLOCK, LEGACY_PORTAL, LEGACY_DIODE_BLOCK_OFF, LEGACY_DIODE_BLOCK_ON, LEGACY_PUMPKIN_STEM, LEGACY_MELON_STEM, LEGACY_VINE, LEGACY_WATER_LILY, LEGACY_NETHER_WARTS, LEGACY_ENDER_PORTAL, LEGACY_COCOA, LEGACY_TRIPWIRE_HOOK, LEGACY_TRIPWIRE, LEGACY_FLOWER_POT, LEGACY_CARROT, LEGACY_POTATO, LEGACY_WOOD_BUTTON, LEGACY_SKULL, LEGACY_REDSTONE_COMPARATOR_OFF, LEGACY_REDSTONE_COMPARATOR_ON, LEGACY_ACTIVATOR_RAIL, LEGACY_CARPET, LEGACY_DOUBLE_PLANT, LEGACY_END_ROD, LEGACY_CHORUS_PLANT, LEGACY_CHORUS_FLOWER, LEGACY_BEETROOT_BLOCK, LEGACY_END_GATEWAY, LEGACY_STRUCTURE_VOID -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -5740,273 +3920,13 @@ public enum Material implements Keyed {
         if (!isBlock()) {
             return false;
         }
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isFlammable">
-            case ACACIA_DOOR:
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_LEAVES:
-            case ACACIA_LOG:
-            case ACACIA_PLANKS:
-            case ACACIA_PRESSURE_PLATE:
-            case ACACIA_SIGN:
-            case ACACIA_SLAB:
-            case ACACIA_STAIRS:
-            case ACACIA_TRAPDOOR:
-            case ACACIA_WALL_SIGN:
-            case ACACIA_WOOD:
-            case BAMBOO:
-            case BAMBOO_SAPLING:
-            case BARREL:
-            case BEEHIVE:
-            case BEE_NEST:
-            case BIRCH_DOOR:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_LEAVES:
-            case BIRCH_LOG:
-            case BIRCH_PLANKS:
-            case BIRCH_PRESSURE_PLATE:
-            case BIRCH_SIGN:
-            case BIRCH_SLAB:
-            case BIRCH_STAIRS:
-            case BIRCH_TRAPDOOR:
-            case BIRCH_WALL_SIGN:
-            case BIRCH_WOOD:
-            case BLACK_BANNER:
-            case BLACK_BED:
-            case BLACK_CARPET:
-            case BLACK_WALL_BANNER:
-            case BLACK_WOOL:
-            case BLUE_BANNER:
-            case BLUE_BED:
-            case BLUE_CARPET:
-            case BLUE_WALL_BANNER:
-            case BLUE_WOOL:
-            case BOOKSHELF:
-            case BROWN_BANNER:
-            case BROWN_BED:
-            case BROWN_CARPET:
-            case BROWN_MUSHROOM_BLOCK:
-            case BROWN_WALL_BANNER:
-            case BROWN_WOOL:
-            case CAMPFIRE:
-            case CARTOGRAPHY_TABLE:
-            case CHEST:
-            case COMPOSTER:
-            case CRAFTING_TABLE:
-            case CYAN_BANNER:
-            case CYAN_BED:
-            case CYAN_CARPET:
-            case CYAN_WALL_BANNER:
-            case CYAN_WOOL:
-            case DARK_OAK_DOOR:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_LEAVES:
-            case DARK_OAK_LOG:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_PRESSURE_PLATE:
-            case DARK_OAK_SIGN:
-            case DARK_OAK_SLAB:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_TRAPDOOR:
-            case DARK_OAK_WALL_SIGN:
-            case DARK_OAK_WOOD:
-            case DAYLIGHT_DETECTOR:
-            case DEAD_BUSH:
-            case FERN:
-            case FLETCHING_TABLE:
-            case GRASS:
-            case GRAY_BANNER:
-            case GRAY_BED:
-            case GRAY_CARPET:
-            case GRAY_WALL_BANNER:
-            case GRAY_WOOL:
-            case GREEN_BANNER:
-            case GREEN_BED:
-            case GREEN_CARPET:
-            case GREEN_WALL_BANNER:
-            case GREEN_WOOL:
-            case JUKEBOX:
-            case JUNGLE_DOOR:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_LEAVES:
-            case JUNGLE_LOG:
-            case JUNGLE_PLANKS:
-            case JUNGLE_PRESSURE_PLATE:
-            case JUNGLE_SIGN:
-            case JUNGLE_SLAB:
-            case JUNGLE_STAIRS:
-            case JUNGLE_TRAPDOOR:
-            case JUNGLE_WALL_SIGN:
-            case JUNGLE_WOOD:
-            case LARGE_FERN:
-            case LECTERN:
-            case LIGHT_BLUE_BANNER:
-            case LIGHT_BLUE_BED:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_BLUE_WALL_BANNER:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_BANNER:
-            case LIGHT_GRAY_BED:
-            case LIGHT_GRAY_CARPET:
-            case LIGHT_GRAY_WALL_BANNER:
-            case LIGHT_GRAY_WOOL:
-            case LILAC:
-            case LIME_BANNER:
-            case LIME_BED:
-            case LIME_CARPET:
-            case LIME_WALL_BANNER:
-            case LIME_WOOL:
-            case LOOM:
-            case MAGENTA_BANNER:
-            case MAGENTA_BED:
-            case MAGENTA_CARPET:
-            case MAGENTA_WALL_BANNER:
-            case MAGENTA_WOOL:
-            case MUSHROOM_STEM:
-            case NOTE_BLOCK:
-            case OAK_DOOR:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_LEAVES:
-            case OAK_LOG:
-            case OAK_PLANKS:
-            case OAK_PRESSURE_PLATE:
-            case OAK_SIGN:
-            case OAK_SLAB:
-            case OAK_STAIRS:
-            case OAK_TRAPDOOR:
-            case OAK_WALL_SIGN:
-            case OAK_WOOD:
-            case ORANGE_BANNER:
-            case ORANGE_BED:
-            case ORANGE_CARPET:
-            case ORANGE_WALL_BANNER:
-            case ORANGE_WOOL:
-            case PEONY:
-            case PINK_BANNER:
-            case PINK_BED:
-            case PINK_CARPET:
-            case PINK_WALL_BANNER:
-            case PINK_WOOL:
-            case PURPLE_BANNER:
-            case PURPLE_BED:
-            case PURPLE_CARPET:
-            case PURPLE_WALL_BANNER:
-            case PURPLE_WOOL:
-            case RED_BANNER:
-            case RED_BED:
-            case RED_CARPET:
-            case RED_MUSHROOM_BLOCK:
-            case RED_WALL_BANNER:
-            case RED_WOOL:
-            case ROSE_BUSH:
-            case SMITHING_TABLE:
-            case SOUL_CAMPFIRE:
-            case SPRUCE_DOOR:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_LEAVES:
-            case SPRUCE_LOG:
-            case SPRUCE_PLANKS:
-            case SPRUCE_PRESSURE_PLATE:
-            case SPRUCE_SIGN:
-            case SPRUCE_SLAB:
-            case SPRUCE_STAIRS:
-            case SPRUCE_TRAPDOOR:
-            case SPRUCE_WALL_SIGN:
-            case SPRUCE_WOOD:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case SUNFLOWER:
-            case TALL_GRASS:
-            case TNT:
-            case TRAPPED_CHEST:
-            case VINE:
-            case WHITE_BANNER:
-            case WHITE_BED:
-            case WHITE_CARPET:
-            case WHITE_WALL_BANNER:
-            case WHITE_WOOL:
-            case YELLOW_BANNER:
-            case YELLOW_BED:
-            case YELLOW_CARPET:
-            case YELLOW_WALL_BANNER:
-            case YELLOW_WOOL:
-            // ----- Legacy Separator -----
-            case LEGACY_WOOD:
-            case LEGACY_LOG:
-            case LEGACY_LEAVES:
-            case LEGACY_NOTE_BLOCK:
-            case LEGACY_BED_BLOCK:
-            case LEGACY_LONG_GRASS:
-            case LEGACY_DEAD_BUSH:
-            case LEGACY_WOOL:
-            case LEGACY_TNT:
-            case LEGACY_BOOKSHELF:
-            case LEGACY_WOOD_STAIRS:
-            case LEGACY_CHEST:
-            case LEGACY_WORKBENCH:
-            case LEGACY_SIGN_POST:
-            case LEGACY_WOODEN_DOOR:
-            case LEGACY_WALL_SIGN:
-            case LEGACY_WOOD_PLATE:
-            case LEGACY_JUKEBOX:
-            case LEGACY_FENCE:
-            case LEGACY_TRAP_DOOR:
-            case LEGACY_HUGE_MUSHROOM_1:
-            case LEGACY_HUGE_MUSHROOM_2:
-            case LEGACY_VINE:
-            case LEGACY_FENCE_GATE:
-            case LEGACY_WOOD_DOUBLE_STEP:
-            case LEGACY_WOOD_STEP:
-            case LEGACY_SPRUCE_WOOD_STAIRS:
-            case LEGACY_BIRCH_WOOD_STAIRS:
-            case LEGACY_JUNGLE_WOOD_STAIRS:
-            case LEGACY_TRAPPED_CHEST:
-            case LEGACY_DAYLIGHT_DETECTOR:
-            case LEGACY_CARPET:
-            case LEGACY_LEAVES_2:
-            case LEGACY_LOG_2:
-            case LEGACY_ACACIA_STAIRS:
-            case LEGACY_DARK_OAK_STAIRS:
-            case LEGACY_DOUBLE_PLANT:
-            case LEGACY_SPRUCE_FENCE_GATE:
-            case LEGACY_BIRCH_FENCE_GATE:
-            case LEGACY_JUNGLE_FENCE_GATE:
-            case LEGACY_DARK_OAK_FENCE_GATE:
-            case LEGACY_ACACIA_FENCE_GATE:
-            case LEGACY_SPRUCE_FENCE:
-            case LEGACY_BIRCH_FENCE:
-            case LEGACY_JUNGLE_FENCE:
-            case LEGACY_DARK_OAK_FENCE:
-            case LEGACY_ACACIA_FENCE:
-            case LEGACY_STANDING_BANNER:
-            case LEGACY_WALL_BANNER:
-            case LEGACY_DAYLIGHT_DETECTOR_INVERTED:
-            case LEGACY_SPRUCE_DOOR:
-            case LEGACY_BIRCH_DOOR:
-            case LEGACY_JUNGLE_DOOR:
-            case LEGACY_ACACIA_DOOR:
-            case LEGACY_DARK_OAK_DOOR:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isFlammable">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_DOOR, ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_LEAVES, ACACIA_LOG, ACACIA_PLANKS, ACACIA_PRESSURE_PLATE, ACACIA_SIGN, ACACIA_SLAB, ACACIA_STAIRS, ACACIA_TRAPDOOR, ACACIA_WALL_SIGN, ACACIA_WOOD, BAMBOO, BAMBOO_SAPLING, BARREL, BEEHIVE, BEE_NEST, BIRCH_DOOR, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_LEAVES, BIRCH_LOG, BIRCH_PLANKS, BIRCH_PRESSURE_PLATE, BIRCH_SIGN, BIRCH_SLAB, BIRCH_STAIRS, BIRCH_TRAPDOOR, BIRCH_WALL_SIGN, BIRCH_WOOD, BLACK_BANNER, BLACK_BED, BLACK_CARPET, BLACK_WALL_BANNER, BLACK_WOOL, BLUE_BANNER, BLUE_BED, BLUE_CARPET, BLUE_WALL_BANNER, BLUE_WOOL, BOOKSHELF, BROWN_BANNER, BROWN_BED, BROWN_CARPET, BROWN_MUSHROOM_BLOCK, BROWN_WALL_BANNER, BROWN_WOOL, CAMPFIRE, CARTOGRAPHY_TABLE, CHEST, COMPOSTER, CRAFTING_TABLE, CYAN_BANNER, CYAN_BED, CYAN_CARPET, CYAN_WALL_BANNER, CYAN_WOOL, DARK_OAK_DOOR, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_LEAVES, DARK_OAK_LOG, DARK_OAK_PLANKS, DARK_OAK_PRESSURE_PLATE, DARK_OAK_SIGN, DARK_OAK_SLAB, DARK_OAK_STAIRS, DARK_OAK_TRAPDOOR, DARK_OAK_WALL_SIGN, DARK_OAK_WOOD, DAYLIGHT_DETECTOR, DEAD_BUSH, FERN, FLETCHING_TABLE, GRASS, GRAY_BANNER, GRAY_BED, GRAY_CARPET, GRAY_WALL_BANNER, GRAY_WOOL, GREEN_BANNER, GREEN_BED, GREEN_CARPET, GREEN_WALL_BANNER, GREEN_WOOL, JUKEBOX, JUNGLE_DOOR, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_LEAVES, JUNGLE_LOG, JUNGLE_PLANKS, JUNGLE_PRESSURE_PLATE, JUNGLE_SIGN, JUNGLE_SLAB, JUNGLE_STAIRS, JUNGLE_TRAPDOOR, JUNGLE_WALL_SIGN, JUNGLE_WOOD, LARGE_FERN, LECTERN, LIGHT_BLUE_BANNER, LIGHT_BLUE_BED, LIGHT_BLUE_CARPET, LIGHT_BLUE_WALL_BANNER, LIGHT_BLUE_WOOL, LIGHT_GRAY_BANNER, LIGHT_GRAY_BED, LIGHT_GRAY_CARPET, LIGHT_GRAY_WALL_BANNER, LIGHT_GRAY_WOOL, LILAC, LIME_BANNER, LIME_BED, LIME_CARPET, LIME_WALL_BANNER, LIME_WOOL, LOOM, MAGENTA_BANNER, MAGENTA_BED, MAGENTA_CARPET, MAGENTA_WALL_BANNER, MAGENTA_WOOL, MUSHROOM_STEM, NOTE_BLOCK, OAK_DOOR, OAK_FENCE, OAK_FENCE_GATE, OAK_LEAVES, OAK_LOG, OAK_PLANKS, OAK_PRESSURE_PLATE, OAK_SIGN, OAK_SLAB, OAK_STAIRS, OAK_TRAPDOOR, OAK_WALL_SIGN, OAK_WOOD, ORANGE_BANNER, ORANGE_BED, ORANGE_CARPET, ORANGE_WALL_BANNER, ORANGE_WOOL, PEONY, PINK_BANNER, PINK_BED, PINK_CARPET, PINK_WALL_BANNER, PINK_WOOL, PURPLE_BANNER, PURPLE_BED, PURPLE_CARPET, PURPLE_WALL_BANNER, PURPLE_WOOL, RED_BANNER, RED_BED, RED_CARPET, RED_MUSHROOM_BLOCK, RED_WALL_BANNER, RED_WOOL, ROSE_BUSH, SMITHING_TABLE, SOUL_CAMPFIRE, SPRUCE_DOOR, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_LEAVES, SPRUCE_LOG, SPRUCE_PLANKS, SPRUCE_PRESSURE_PLATE, SPRUCE_SIGN, SPRUCE_SLAB, SPRUCE_STAIRS, SPRUCE_TRAPDOOR, SPRUCE_WALL_SIGN, SPRUCE_WOOD, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, SUNFLOWER, TALL_GRASS, TNT, TRAPPED_CHEST, VINE, WHITE_BANNER, WHITE_BED, WHITE_CARPET, WHITE_WALL_BANNER, WHITE_WOOL, YELLOW_BANNER, YELLOW_BED, YELLOW_CARPET, YELLOW_WALL_BANNER, YELLOW_WOOL, LEGACY_WOOD, LEGACY_LOG, LEGACY_LEAVES, LEGACY_NOTE_BLOCK, LEGACY_BED_BLOCK, LEGACY_LONG_GRASS, LEGACY_DEAD_BUSH, LEGACY_WOOL, LEGACY_TNT, LEGACY_BOOKSHELF, LEGACY_WOOD_STAIRS, LEGACY_CHEST, LEGACY_WORKBENCH, LEGACY_SIGN_POST, LEGACY_WOODEN_DOOR, LEGACY_WALL_SIGN, LEGACY_WOOD_PLATE, LEGACY_JUKEBOX, LEGACY_FENCE, LEGACY_TRAP_DOOR, LEGACY_HUGE_MUSHROOM_1, LEGACY_HUGE_MUSHROOM_2, LEGACY_VINE, LEGACY_FENCE_GATE, LEGACY_WOOD_DOUBLE_STEP, LEGACY_WOOD_STEP, LEGACY_SPRUCE_WOOD_STAIRS, LEGACY_BIRCH_WOOD_STAIRS, LEGACY_JUNGLE_WOOD_STAIRS, LEGACY_TRAPPED_CHEST, LEGACY_DAYLIGHT_DETECTOR, LEGACY_CARPET, LEGACY_LEAVES_2, LEGACY_LOG_2, LEGACY_ACACIA_STAIRS, LEGACY_DARK_OAK_STAIRS, LEGACY_DOUBLE_PLANT, LEGACY_SPRUCE_FENCE_GATE, LEGACY_BIRCH_FENCE_GATE, LEGACY_JUNGLE_FENCE_GATE, LEGACY_DARK_OAK_FENCE_GATE, LEGACY_ACACIA_FENCE_GATE, LEGACY_SPRUCE_FENCE, LEGACY_BIRCH_FENCE, LEGACY_JUNGLE_FENCE, LEGACY_DARK_OAK_FENCE, LEGACY_ACACIA_FENCE, LEGACY_STANDING_BANNER, LEGACY_WALL_BANNER, LEGACY_DAYLIGHT_DETECTOR_INVERTED, LEGACY_SPRUCE_DOOR, LEGACY_BIRCH_DOOR, LEGACY_JUNGLE_DOOR, LEGACY_ACACIA_DOOR, LEGACY_DARK_OAK_DOOR -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -6018,179 +3938,13 @@ public enum Material implements Keyed {
         if (!isBlock()) {
             return false;
         }
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isBurnable">
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_LEAVES:
-            case ACACIA_LOG:
-            case ACACIA_PLANKS:
-            case ACACIA_SLAB:
-            case ACACIA_STAIRS:
-            case ACACIA_WOOD:
-            case ALLIUM:
-            case AZURE_BLUET:
-            case BAMBOO:
-            case BEEHIVE:
-            case BEE_NEST:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_LEAVES:
-            case BIRCH_LOG:
-            case BIRCH_PLANKS:
-            case BIRCH_SLAB:
-            case BIRCH_STAIRS:
-            case BIRCH_WOOD:
-            case BLACK_CARPET:
-            case BLACK_WOOL:
-            case BLUE_CARPET:
-            case BLUE_ORCHID:
-            case BLUE_WOOL:
-            case BOOKSHELF:
-            case BROWN_CARPET:
-            case BROWN_WOOL:
-            case COAL_BLOCK:
-            case COMPOSTER:
-            case CORNFLOWER:
-            case CYAN_CARPET:
-            case CYAN_WOOL:
-            case DANDELION:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_LEAVES:
-            case DARK_OAK_LOG:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_SLAB:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_WOOD:
-            case DEAD_BUSH:
-            case DRIED_KELP_BLOCK:
-            case FERN:
-            case GRASS:
-            case GRAY_CARPET:
-            case GRAY_WOOL:
-            case GREEN_CARPET:
-            case GREEN_WOOL:
-            case HAY_BLOCK:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_LEAVES:
-            case JUNGLE_LOG:
-            case JUNGLE_PLANKS:
-            case JUNGLE_SLAB:
-            case JUNGLE_STAIRS:
-            case JUNGLE_WOOD:
-            case LARGE_FERN:
-            case LECTERN:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_CARPET:
-            case LIGHT_GRAY_WOOL:
-            case LILAC:
-            case LILY_OF_THE_VALLEY:
-            case LIME_CARPET:
-            case LIME_WOOL:
-            case MAGENTA_CARPET:
-            case MAGENTA_WOOL:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_LEAVES:
-            case OAK_LOG:
-            case OAK_PLANKS:
-            case OAK_SLAB:
-            case OAK_STAIRS:
-            case OAK_WOOD:
-            case ORANGE_CARPET:
-            case ORANGE_TULIP:
-            case ORANGE_WOOL:
-            case OXEYE_DAISY:
-            case PEONY:
-            case PINK_CARPET:
-            case PINK_TULIP:
-            case PINK_WOOL:
-            case POPPY:
-            case PURPLE_CARPET:
-            case PURPLE_WOOL:
-            case RED_CARPET:
-            case RED_TULIP:
-            case RED_WOOL:
-            case ROSE_BUSH:
-            case SCAFFOLDING:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_LEAVES:
-            case SPRUCE_LOG:
-            case SPRUCE_PLANKS:
-            case SPRUCE_SLAB:
-            case SPRUCE_STAIRS:
-            case SPRUCE_WOOD:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case SUNFLOWER:
-            case SWEET_BERRY_BUSH:
-            case TALL_GRASS:
-            case TARGET:
-            case TNT:
-            case VINE:
-            case WHITE_CARPET:
-            case WHITE_TULIP:
-            case WHITE_WOOL:
-            case WITHER_ROSE:
-            case YELLOW_CARPET:
-            case YELLOW_WOOL:
-            // ----- Legacy Separator -----
-            case LEGACY_WOOD:
-            case LEGACY_LOG:
-            case LEGACY_LEAVES:
-            case LEGACY_LONG_GRASS:
-            case LEGACY_WOOL:
-            case LEGACY_YELLOW_FLOWER:
-            case LEGACY_RED_ROSE:
-            case LEGACY_TNT:
-            case LEGACY_BOOKSHELF:
-            case LEGACY_WOOD_STAIRS:
-            case LEGACY_FENCE:
-            case LEGACY_VINE:
-            case LEGACY_WOOD_DOUBLE_STEP:
-            case LEGACY_WOOD_STEP:
-            case LEGACY_SPRUCE_WOOD_STAIRS:
-            case LEGACY_BIRCH_WOOD_STAIRS:
-            case LEGACY_JUNGLE_WOOD_STAIRS:
-            case LEGACY_HAY_BLOCK:
-            case LEGACY_COAL_BLOCK:
-            case LEGACY_LEAVES_2:
-            case LEGACY_LOG_2:
-            case LEGACY_CARPET:
-            case LEGACY_DOUBLE_PLANT:
-            case LEGACY_DEAD_BUSH:
-            case LEGACY_FENCE_GATE:
-            case LEGACY_SPRUCE_FENCE_GATE:
-            case LEGACY_BIRCH_FENCE_GATE:
-            case LEGACY_JUNGLE_FENCE_GATE:
-            case LEGACY_DARK_OAK_FENCE_GATE:
-            case LEGACY_ACACIA_FENCE_GATE:
-            case LEGACY_SPRUCE_FENCE:
-            case LEGACY_BIRCH_FENCE:
-            case LEGACY_JUNGLE_FENCE:
-            case LEGACY_DARK_OAK_FENCE:
-            case LEGACY_ACACIA_FENCE:
-            case LEGACY_ACACIA_STAIRS:
-            case LEGACY_DARK_OAK_STAIRS:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isBurnable">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_LEAVES, ACACIA_LOG, ACACIA_PLANKS, ACACIA_SLAB, ACACIA_STAIRS, ACACIA_WOOD, ALLIUM, AZURE_BLUET, BAMBOO, BEEHIVE, BEE_NEST, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_LEAVES, BIRCH_LOG, BIRCH_PLANKS, BIRCH_SLAB, BIRCH_STAIRS, BIRCH_WOOD, BLACK_CARPET, BLACK_WOOL, BLUE_CARPET, BLUE_ORCHID, BLUE_WOOL, BOOKSHELF, BROWN_CARPET, BROWN_WOOL, COAL_BLOCK, COMPOSTER, CORNFLOWER, CYAN_CARPET, CYAN_WOOL, DANDELION, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_LEAVES, DARK_OAK_LOG, DARK_OAK_PLANKS, DARK_OAK_SLAB, DARK_OAK_STAIRS, DARK_OAK_WOOD, DEAD_BUSH, DRIED_KELP_BLOCK, FERN, GRASS, GRAY_CARPET, GRAY_WOOL, GREEN_CARPET, GREEN_WOOL, HAY_BLOCK, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_LEAVES, JUNGLE_LOG, JUNGLE_PLANKS, JUNGLE_SLAB, JUNGLE_STAIRS, JUNGLE_WOOD, LARGE_FERN, LECTERN, LIGHT_BLUE_CARPET, LIGHT_BLUE_WOOL, LIGHT_GRAY_CARPET, LIGHT_GRAY_WOOL, LILAC, LILY_OF_THE_VALLEY, LIME_CARPET, LIME_WOOL, MAGENTA_CARPET, MAGENTA_WOOL, OAK_FENCE, OAK_FENCE_GATE, OAK_LEAVES, OAK_LOG, OAK_PLANKS, OAK_SLAB, OAK_STAIRS, OAK_WOOD, ORANGE_CARPET, ORANGE_TULIP, ORANGE_WOOL, OXEYE_DAISY, PEONY, PINK_CARPET, PINK_TULIP, PINK_WOOL, POPPY, PURPLE_CARPET, PURPLE_WOOL, RED_CARPET, RED_TULIP, RED_WOOL, ROSE_BUSH, SCAFFOLDING, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_LEAVES, SPRUCE_LOG, SPRUCE_PLANKS, SPRUCE_SLAB, SPRUCE_STAIRS, SPRUCE_WOOD, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, SUNFLOWER, SWEET_BERRY_BUSH, TALL_GRASS, TARGET, TNT, VINE, WHITE_CARPET, WHITE_TULIP, WHITE_WOOL, WITHER_ROSE, YELLOW_CARPET, YELLOW_WOOL, LEGACY_WOOD, LEGACY_LOG, LEGACY_LEAVES, LEGACY_LONG_GRASS, LEGACY_WOOL, LEGACY_YELLOW_FLOWER, LEGACY_RED_ROSE, LEGACY_TNT, LEGACY_BOOKSHELF, LEGACY_WOOD_STAIRS, LEGACY_FENCE, LEGACY_VINE, LEGACY_WOOD_DOUBLE_STEP, LEGACY_WOOD_STEP, LEGACY_SPRUCE_WOOD_STAIRS, LEGACY_BIRCH_WOOD_STAIRS, LEGACY_JUNGLE_WOOD_STAIRS, LEGACY_HAY_BLOCK, LEGACY_COAL_BLOCK, LEGACY_LEAVES_2, LEGACY_LOG_2, LEGACY_CARPET, LEGACY_DOUBLE_PLANT, LEGACY_DEAD_BUSH, LEGACY_FENCE_GATE, LEGACY_SPRUCE_FENCE_GATE, LEGACY_BIRCH_FENCE_GATE, LEGACY_JUNGLE_FENCE_GATE, LEGACY_DARK_OAK_FENCE_GATE, LEGACY_ACACIA_FENCE_GATE, LEGACY_SPRUCE_FENCE, LEGACY_BIRCH_FENCE, LEGACY_JUNGLE_FENCE, LEGACY_DARK_OAK_FENCE, LEGACY_ACACIA_FENCE, LEGACY_ACACIA_STAIRS, LEGACY_DARK_OAK_STAIRS -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -6199,255 +3953,13 @@ public enum Material implements Keyed {
      * @return true if this Material can be used as fuel.
      */
     public boolean isFuel() {
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isFuel">
-            case ACACIA_BOAT:
-            case ACACIA_BUTTON:
-            case ACACIA_DOOR:
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_LOG:
-            case ACACIA_PLANKS:
-            case ACACIA_PRESSURE_PLATE:
-            case ACACIA_SAPLING:
-            case ACACIA_SIGN:
-            case ACACIA_SLAB:
-            case ACACIA_STAIRS:
-            case ACACIA_TRAPDOOR:
-            case ACACIA_WOOD:
-            case BAMBOO:
-            case BARREL:
-            case BIRCH_BOAT:
-            case BIRCH_BUTTON:
-            case BIRCH_DOOR:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_LOG:
-            case BIRCH_PLANKS:
-            case BIRCH_PRESSURE_PLATE:
-            case BIRCH_SAPLING:
-            case BIRCH_SIGN:
-            case BIRCH_SLAB:
-            case BIRCH_STAIRS:
-            case BIRCH_TRAPDOOR:
-            case BIRCH_WOOD:
-            case BLACK_BANNER:
-            case BLACK_CARPET:
-            case BLACK_WOOL:
-            case BLAZE_ROD:
-            case BLUE_BANNER:
-            case BLUE_CARPET:
-            case BLUE_WOOL:
-            case BOOKSHELF:
-            case BOW:
-            case BOWL:
-            case BROWN_BANNER:
-            case BROWN_CARPET:
-            case BROWN_WOOL:
-            case CARTOGRAPHY_TABLE:
-            case CHARCOAL:
-            case CHEST:
-            case COAL:
-            case COAL_BLOCK:
-            case COMPOSTER:
-            case CRAFTING_TABLE:
-            case CROSSBOW:
-            case CYAN_BANNER:
-            case CYAN_CARPET:
-            case CYAN_WOOL:
-            case DARK_OAK_BOAT:
-            case DARK_OAK_BUTTON:
-            case DARK_OAK_DOOR:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_LOG:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_PRESSURE_PLATE:
-            case DARK_OAK_SAPLING:
-            case DARK_OAK_SIGN:
-            case DARK_OAK_SLAB:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_TRAPDOOR:
-            case DARK_OAK_WOOD:
-            case DAYLIGHT_DETECTOR:
-            case DEAD_BUSH:
-            case DRIED_KELP_BLOCK:
-            case FISHING_ROD:
-            case FLETCHING_TABLE:
-            case GRAY_BANNER:
-            case GRAY_CARPET:
-            case GRAY_WOOL:
-            case GREEN_BANNER:
-            case GREEN_CARPET:
-            case GREEN_WOOL:
-            case JUKEBOX:
-            case JUNGLE_BOAT:
-            case JUNGLE_BUTTON:
-            case JUNGLE_DOOR:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_LOG:
-            case JUNGLE_PLANKS:
-            case JUNGLE_PRESSURE_PLATE:
-            case JUNGLE_SAPLING:
-            case JUNGLE_SIGN:
-            case JUNGLE_SLAB:
-            case JUNGLE_STAIRS:
-            case JUNGLE_TRAPDOOR:
-            case JUNGLE_WOOD:
-            case LADDER:
-            case LAVA_BUCKET:
-            case LECTERN:
-            case LIGHT_BLUE_BANNER:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_BANNER:
-            case LIGHT_GRAY_CARPET:
-            case LIGHT_GRAY_WOOL:
-            case LIME_BANNER:
-            case LIME_CARPET:
-            case LIME_WOOL:
-            case LOOM:
-            case MAGENTA_BANNER:
-            case MAGENTA_CARPET:
-            case MAGENTA_WOOL:
-            case NOTE_BLOCK:
-            case OAK_BOAT:
-            case OAK_BUTTON:
-            case OAK_DOOR:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_LOG:
-            case OAK_PLANKS:
-            case OAK_PRESSURE_PLATE:
-            case OAK_SAPLING:
-            case OAK_SIGN:
-            case OAK_SLAB:
-            case OAK_STAIRS:
-            case OAK_TRAPDOOR:
-            case OAK_WOOD:
-            case ORANGE_BANNER:
-            case ORANGE_CARPET:
-            case ORANGE_WOOL:
-            case PINK_BANNER:
-            case PINK_CARPET:
-            case PINK_WOOL:
-            case PURPLE_BANNER:
-            case PURPLE_CARPET:
-            case PURPLE_WOOL:
-            case RED_BANNER:
-            case RED_CARPET:
-            case RED_WOOL:
-            case SCAFFOLDING:
-            case SMITHING_TABLE:
-            case SPRUCE_BOAT:
-            case SPRUCE_BUTTON:
-            case SPRUCE_DOOR:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_LOG:
-            case SPRUCE_PLANKS:
-            case SPRUCE_PRESSURE_PLATE:
-            case SPRUCE_SAPLING:
-            case SPRUCE_SIGN:
-            case SPRUCE_SLAB:
-            case SPRUCE_STAIRS:
-            case SPRUCE_TRAPDOOR:
-            case SPRUCE_WOOD:
-            case STICK:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case TRAPPED_CHEST:
-            case WHITE_BANNER:
-            case WHITE_CARPET:
-            case WHITE_WOOL:
-            case WOODEN_AXE:
-            case WOODEN_HOE:
-            case WOODEN_PICKAXE:
-            case WOODEN_SHOVEL:
-            case WOODEN_SWORD:
-            case YELLOW_BANNER:
-            case YELLOW_CARPET:
-            case YELLOW_WOOL:
-            // ----- Legacy Separator -----
-            case LEGACY_LAVA_BUCKET:
-            case LEGACY_COAL_BLOCK:
-            case LEGACY_BLAZE_ROD:
-            case LEGACY_COAL:
-            case LEGACY_BOAT:
-            case LEGACY_BOAT_ACACIA:
-            case LEGACY_BOAT_BIRCH:
-            case LEGACY_BOAT_DARK_OAK:
-            case LEGACY_BOAT_JUNGLE:
-            case LEGACY_BOAT_SPRUCE:
-            case LEGACY_LOG:
-            case LEGACY_LOG_2:
-            case LEGACY_WOOD:
-            case LEGACY_WOOD_PLATE:
-            case LEGACY_FENCE:
-            case LEGACY_ACACIA_FENCE:
-            case LEGACY_BIRCH_FENCE:
-            case LEGACY_DARK_OAK_FENCE:
-            case LEGACY_JUNGLE_FENCE:
-            case LEGACY_SPRUCE_FENCE:
-            case LEGACY_FENCE_GATE:
-            case LEGACY_ACACIA_FENCE_GATE:
-            case LEGACY_BIRCH_FENCE_GATE:
-            case LEGACY_DARK_OAK_FENCE_GATE:
-            case LEGACY_JUNGLE_FENCE_GATE:
-            case LEGACY_SPRUCE_FENCE_GATE:
-            case LEGACY_WOOD_STAIRS:
-            case LEGACY_ACACIA_STAIRS:
-            case LEGACY_BIRCH_WOOD_STAIRS:
-            case LEGACY_DARK_OAK_STAIRS:
-            case LEGACY_JUNGLE_WOOD_STAIRS:
-            case LEGACY_SPRUCE_WOOD_STAIRS:
-            case LEGACY_TRAP_DOOR:
-            case LEGACY_WORKBENCH:
-            case LEGACY_BOOKSHELF:
-            case LEGACY_CHEST:
-            case LEGACY_TRAPPED_CHEST:
-            case LEGACY_DAYLIGHT_DETECTOR:
-            case LEGACY_JUKEBOX:
-            case LEGACY_NOTE_BLOCK:
-            case LEGACY_BANNER:
-            case LEGACY_FISHING_ROD:
-            case LEGACY_LADDER:
-            case LEGACY_WOOD_SWORD:
-            case LEGACY_WOOD_PICKAXE:
-            case LEGACY_WOOD_AXE:
-            case LEGACY_WOOD_SPADE:
-            case LEGACY_WOOD_HOE:
-            case LEGACY_BOW:
-            case LEGACY_SIGN:
-            case LEGACY_WOOD_DOOR:
-            case LEGACY_ACACIA_DOOR_ITEM:
-            case LEGACY_BIRCH_DOOR_ITEM:
-            case LEGACY_DARK_OAK_DOOR_ITEM:
-            case LEGACY_JUNGLE_DOOR_ITEM:
-            case LEGACY_SPRUCE_DOOR_ITEM:
-            case LEGACY_WOOD_STEP:
-            case LEGACY_SAPLING:
-            case LEGACY_STICK:
-            case LEGACY_WOOD_BUTTON:
-            case LEGACY_WOOL:
-            case LEGACY_CARPET:
-            case LEGACY_BOWL:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isFuel">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_BOAT, ACACIA_BUTTON, ACACIA_DOOR, ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_LOG, ACACIA_PLANKS, ACACIA_PRESSURE_PLATE, ACACIA_SAPLING, ACACIA_SIGN, ACACIA_SLAB, ACACIA_STAIRS, ACACIA_TRAPDOOR, ACACIA_WOOD, BAMBOO, BARREL, BIRCH_BOAT, BIRCH_BUTTON, BIRCH_DOOR, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_LOG, BIRCH_PLANKS, BIRCH_PRESSURE_PLATE, BIRCH_SAPLING, BIRCH_SIGN, BIRCH_SLAB, BIRCH_STAIRS, BIRCH_TRAPDOOR, BIRCH_WOOD, BLACK_BANNER, BLACK_CARPET, BLACK_WOOL, BLAZE_ROD, BLUE_BANNER, BLUE_CARPET, BLUE_WOOL, BOOKSHELF, BOW, BOWL, BROWN_BANNER, BROWN_CARPET, BROWN_WOOL, CARTOGRAPHY_TABLE, CHARCOAL, CHEST, COAL, COAL_BLOCK, COMPOSTER, CRAFTING_TABLE, CROSSBOW, CYAN_BANNER, CYAN_CARPET, CYAN_WOOL, DARK_OAK_BOAT, DARK_OAK_BUTTON, DARK_OAK_DOOR, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_LOG, DARK_OAK_PLANKS, DARK_OAK_PRESSURE_PLATE, DARK_OAK_SAPLING, DARK_OAK_SIGN, DARK_OAK_SLAB, DARK_OAK_STAIRS, DARK_OAK_TRAPDOOR, DARK_OAK_WOOD, DAYLIGHT_DETECTOR, DEAD_BUSH, DRIED_KELP_BLOCK, FISHING_ROD, FLETCHING_TABLE, GRAY_BANNER, GRAY_CARPET, GRAY_WOOL, GREEN_BANNER, GREEN_CARPET, GREEN_WOOL, JUKEBOX, JUNGLE_BOAT, JUNGLE_BUTTON, JUNGLE_DOOR, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_LOG, JUNGLE_PLANKS, JUNGLE_PRESSURE_PLATE, JUNGLE_SAPLING, JUNGLE_SIGN, JUNGLE_SLAB, JUNGLE_STAIRS, JUNGLE_TRAPDOOR, JUNGLE_WOOD, LADDER, LAVA_BUCKET, LECTERN, LIGHT_BLUE_BANNER, LIGHT_BLUE_CARPET, LIGHT_BLUE_WOOL, LIGHT_GRAY_BANNER, LIGHT_GRAY_CARPET, LIGHT_GRAY_WOOL, LIME_BANNER, LIME_CARPET, LIME_WOOL, LOOM, MAGENTA_BANNER, MAGENTA_CARPET, MAGENTA_WOOL, NOTE_BLOCK, OAK_BOAT, OAK_BUTTON, OAK_DOOR, OAK_FENCE, OAK_FENCE_GATE, OAK_LOG, OAK_PLANKS, OAK_PRESSURE_PLATE, OAK_SAPLING, OAK_SIGN, OAK_SLAB, OAK_STAIRS, OAK_TRAPDOOR, OAK_WOOD, ORANGE_BANNER, ORANGE_CARPET, ORANGE_WOOL, PINK_BANNER, PINK_CARPET, PINK_WOOL, PURPLE_BANNER, PURPLE_CARPET, PURPLE_WOOL, RED_BANNER, RED_CARPET, RED_WOOL, SCAFFOLDING, SMITHING_TABLE, SPRUCE_BOAT, SPRUCE_BUTTON, SPRUCE_DOOR, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_LOG, SPRUCE_PLANKS, SPRUCE_PRESSURE_PLATE, SPRUCE_SAPLING, SPRUCE_SIGN, SPRUCE_SLAB, SPRUCE_STAIRS, SPRUCE_TRAPDOOR, SPRUCE_WOOD, STICK, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, TRAPPED_CHEST, WHITE_BANNER, WHITE_CARPET, WHITE_WOOL, WOODEN_AXE, WOODEN_HOE, WOODEN_PICKAXE, WOODEN_SHOVEL, WOODEN_SWORD, YELLOW_BANNER, YELLOW_CARPET, YELLOW_WOOL, LEGACY_LAVA_BUCKET, LEGACY_COAL_BLOCK, LEGACY_BLAZE_ROD, LEGACY_COAL, LEGACY_BOAT, LEGACY_BOAT_ACACIA, LEGACY_BOAT_BIRCH, LEGACY_BOAT_DARK_OAK, LEGACY_BOAT_JUNGLE, LEGACY_BOAT_SPRUCE, LEGACY_LOG, LEGACY_LOG_2, LEGACY_WOOD, LEGACY_WOOD_PLATE, LEGACY_FENCE, LEGACY_ACACIA_FENCE, LEGACY_BIRCH_FENCE, LEGACY_DARK_OAK_FENCE, LEGACY_JUNGLE_FENCE, LEGACY_SPRUCE_FENCE, LEGACY_FENCE_GATE, LEGACY_ACACIA_FENCE_GATE, LEGACY_BIRCH_FENCE_GATE, LEGACY_DARK_OAK_FENCE_GATE, LEGACY_JUNGLE_FENCE_GATE, LEGACY_SPRUCE_FENCE_GATE, LEGACY_WOOD_STAIRS, LEGACY_ACACIA_STAIRS, LEGACY_BIRCH_WOOD_STAIRS, LEGACY_DARK_OAK_STAIRS, LEGACY_JUNGLE_WOOD_STAIRS, LEGACY_SPRUCE_WOOD_STAIRS, LEGACY_TRAP_DOOR, LEGACY_WORKBENCH, LEGACY_BOOKSHELF, LEGACY_CHEST, LEGACY_TRAPPED_CHEST, LEGACY_DAYLIGHT_DETECTOR, LEGACY_JUKEBOX, LEGACY_NOTE_BLOCK, LEGACY_BANNER, LEGACY_FISHING_ROD, LEGACY_LADDER, LEGACY_WOOD_SWORD, LEGACY_WOOD_PICKAXE, LEGACY_WOOD_AXE, LEGACY_WOOD_SPADE, LEGACY_WOOD_HOE, LEGACY_BOW, LEGACY_SIGN, LEGACY_WOOD_DOOR, LEGACY_ACACIA_DOOR_ITEM, LEGACY_BIRCH_DOOR_ITEM, LEGACY_DARK_OAK_DOOR_ITEM, LEGACY_JUNGLE_DOOR_ITEM, LEGACY_SPRUCE_DOOR_ITEM, LEGACY_WOOD_STEP, LEGACY_SAPLING, LEGACY_STICK, LEGACY_WOOD_BUTTON, LEGACY_WOOL, LEGACY_CARPET, LEGACY_BOWL -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -6459,395 +3971,13 @@ public enum Material implements Keyed {
         if (!isBlock()) {
             return false;
         }
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isOccluding">
-            case ACACIA_LOG:
-            case ACACIA_PLANKS:
-            case ACACIA_WOOD:
-            case ANCIENT_DEBRIS:
-            case ANDESITE:
-            case BARREL:
-            case BARRIER:
-            case BASALT:
-            case BEDROCK:
-            case BEEHIVE:
-            case BEE_NEST:
-            case BIRCH_LOG:
-            case BIRCH_PLANKS:
-            case BIRCH_WOOD:
-            case BLACKSTONE:
-            case BLACK_CONCRETE:
-            case BLACK_CONCRETE_POWDER:
-            case BLACK_GLAZED_TERRACOTTA:
-            case BLACK_SHULKER_BOX:
-            case BLACK_TERRACOTTA:
-            case BLACK_WOOL:
-            case BLAST_FURNACE:
-            case BLUE_CONCRETE:
-            case BLUE_CONCRETE_POWDER:
-            case BLUE_GLAZED_TERRACOTTA:
-            case BLUE_ICE:
-            case BLUE_SHULKER_BOX:
-            case BLUE_TERRACOTTA:
-            case BLUE_WOOL:
-            case BONE_BLOCK:
-            case BOOKSHELF:
-            case BRAIN_CORAL_BLOCK:
-            case BRICKS:
-            case BROWN_CONCRETE:
-            case BROWN_CONCRETE_POWDER:
-            case BROWN_GLAZED_TERRACOTTA:
-            case BROWN_MUSHROOM_BLOCK:
-            case BROWN_SHULKER_BOX:
-            case BROWN_TERRACOTTA:
-            case BROWN_WOOL:
-            case BUBBLE_CORAL_BLOCK:
-            case CARTOGRAPHY_TABLE:
-            case CARVED_PUMPKIN:
-            case CHAIN_COMMAND_BLOCK:
-            case CHISELED_NETHER_BRICKS:
-            case CHISELED_POLISHED_BLACKSTONE:
-            case CHISELED_QUARTZ_BLOCK:
-            case CHISELED_RED_SANDSTONE:
-            case CHISELED_SANDSTONE:
-            case CHISELED_STONE_BRICKS:
-            case CLAY:
-            case COAL_BLOCK:
-            case COAL_ORE:
-            case COARSE_DIRT:
-            case COBBLESTONE:
-            case COMMAND_BLOCK:
-            case CRACKED_NETHER_BRICKS:
-            case CRACKED_POLISHED_BLACKSTONE_BRICKS:
-            case CRACKED_STONE_BRICKS:
-            case CRAFTING_TABLE:
-            case CRIMSON_HYPHAE:
-            case CRIMSON_NYLIUM:
-            case CRIMSON_PLANKS:
-            case CRIMSON_STEM:
-            case CRYING_OBSIDIAN:
-            case CUT_RED_SANDSTONE:
-            case CUT_SANDSTONE:
-            case CYAN_CONCRETE:
-            case CYAN_CONCRETE_POWDER:
-            case CYAN_GLAZED_TERRACOTTA:
-            case CYAN_SHULKER_BOX:
-            case CYAN_TERRACOTTA:
-            case CYAN_WOOL:
-            case DARK_OAK_LOG:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_WOOD:
-            case DARK_PRISMARINE:
-            case DEAD_BRAIN_CORAL_BLOCK:
-            case DEAD_BUBBLE_CORAL_BLOCK:
-            case DEAD_FIRE_CORAL_BLOCK:
-            case DEAD_HORN_CORAL_BLOCK:
-            case DEAD_TUBE_CORAL_BLOCK:
-            case DIAMOND_BLOCK:
-            case DIAMOND_ORE:
-            case DIORITE:
-            case DIRT:
-            case DISPENSER:
-            case DRIED_KELP_BLOCK:
-            case DROPPER:
-            case EMERALD_BLOCK:
-            case EMERALD_ORE:
-            case END_STONE:
-            case END_STONE_BRICKS:
-            case FIRE_CORAL_BLOCK:
-            case FLETCHING_TABLE:
-            case FURNACE:
-            case GILDED_BLACKSTONE:
-            case GOLD_BLOCK:
-            case GOLD_ORE:
-            case GRANITE:
-            case GRASS_BLOCK:
-            case GRAVEL:
-            case GRAY_CONCRETE:
-            case GRAY_CONCRETE_POWDER:
-            case GRAY_GLAZED_TERRACOTTA:
-            case GRAY_SHULKER_BOX:
-            case GRAY_TERRACOTTA:
-            case GRAY_WOOL:
-            case GREEN_CONCRETE:
-            case GREEN_CONCRETE_POWDER:
-            case GREEN_GLAZED_TERRACOTTA:
-            case GREEN_SHULKER_BOX:
-            case GREEN_TERRACOTTA:
-            case GREEN_WOOL:
-            case HAY_BLOCK:
-            case HONEYCOMB_BLOCK:
-            case HORN_CORAL_BLOCK:
-            case INFESTED_CHISELED_STONE_BRICKS:
-            case INFESTED_COBBLESTONE:
-            case INFESTED_CRACKED_STONE_BRICKS:
-            case INFESTED_MOSSY_STONE_BRICKS:
-            case INFESTED_STONE:
-            case INFESTED_STONE_BRICKS:
-            case IRON_BLOCK:
-            case IRON_ORE:
-            case JACK_O_LANTERN:
-            case JIGSAW:
-            case JUKEBOX:
-            case JUNGLE_LOG:
-            case JUNGLE_PLANKS:
-            case JUNGLE_WOOD:
-            case LAPIS_BLOCK:
-            case LAPIS_ORE:
-            case LIGHT_BLUE_CONCRETE:
-            case LIGHT_BLUE_CONCRETE_POWDER:
-            case LIGHT_BLUE_GLAZED_TERRACOTTA:
-            case LIGHT_BLUE_SHULKER_BOX:
-            case LIGHT_BLUE_TERRACOTTA:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_CONCRETE:
-            case LIGHT_GRAY_CONCRETE_POWDER:
-            case LIGHT_GRAY_GLAZED_TERRACOTTA:
-            case LIGHT_GRAY_SHULKER_BOX:
-            case LIGHT_GRAY_TERRACOTTA:
-            case LIGHT_GRAY_WOOL:
-            case LIME_CONCRETE:
-            case LIME_CONCRETE_POWDER:
-            case LIME_GLAZED_TERRACOTTA:
-            case LIME_SHULKER_BOX:
-            case LIME_TERRACOTTA:
-            case LIME_WOOL:
-            case LODESTONE:
-            case LOOM:
-            case MAGENTA_CONCRETE:
-            case MAGENTA_CONCRETE_POWDER:
-            case MAGENTA_GLAZED_TERRACOTTA:
-            case MAGENTA_SHULKER_BOX:
-            case MAGENTA_TERRACOTTA:
-            case MAGENTA_WOOL:
-            case MAGMA_BLOCK:
-            case MELON:
-            case MOSSY_COBBLESTONE:
-            case MOSSY_STONE_BRICKS:
-            case MUSHROOM_STEM:
-            case MYCELIUM:
-            case NETHERITE_BLOCK:
-            case NETHERRACK:
-            case NETHER_BRICKS:
-            case NETHER_GOLD_ORE:
-            case NETHER_QUARTZ_ORE:
-            case NETHER_WART_BLOCK:
-            case NOTE_BLOCK:
-            case OAK_LOG:
-            case OAK_PLANKS:
-            case OAK_WOOD:
-            case OBSIDIAN:
-            case ORANGE_CONCRETE:
-            case ORANGE_CONCRETE_POWDER:
-            case ORANGE_GLAZED_TERRACOTTA:
-            case ORANGE_SHULKER_BOX:
-            case ORANGE_TERRACOTTA:
-            case ORANGE_WOOL:
-            case PACKED_ICE:
-            case PINK_CONCRETE:
-            case PINK_CONCRETE_POWDER:
-            case PINK_GLAZED_TERRACOTTA:
-            case PINK_SHULKER_BOX:
-            case PINK_TERRACOTTA:
-            case PINK_WOOL:
-            case PODZOL:
-            case POLISHED_ANDESITE:
-            case POLISHED_BASALT:
-            case POLISHED_BLACKSTONE:
-            case POLISHED_BLACKSTONE_BRICKS:
-            case POLISHED_DIORITE:
-            case POLISHED_GRANITE:
-            case PRISMARINE:
-            case PRISMARINE_BRICKS:
-            case PUMPKIN:
-            case PURPLE_CONCRETE:
-            case PURPLE_CONCRETE_POWDER:
-            case PURPLE_GLAZED_TERRACOTTA:
-            case PURPLE_SHULKER_BOX:
-            case PURPLE_TERRACOTTA:
-            case PURPLE_WOOL:
-            case PURPUR_BLOCK:
-            case PURPUR_PILLAR:
-            case QUARTZ_BLOCK:
-            case QUARTZ_BRICKS:
-            case QUARTZ_PILLAR:
-            case REDSTONE_LAMP:
-            case REDSTONE_ORE:
-            case RED_CONCRETE:
-            case RED_CONCRETE_POWDER:
-            case RED_GLAZED_TERRACOTTA:
-            case RED_MUSHROOM_BLOCK:
-            case RED_NETHER_BRICKS:
-            case RED_SAND:
-            case RED_SANDSTONE:
-            case RED_SHULKER_BOX:
-            case RED_TERRACOTTA:
-            case RED_WOOL:
-            case REPEATING_COMMAND_BLOCK:
-            case RESPAWN_ANCHOR:
-            case SAND:
-            case SANDSTONE:
-            case SHROOMLIGHT:
-            case SHULKER_BOX:
-            case SLIME_BLOCK:
-            case SMITHING_TABLE:
-            case SMOKER:
-            case SMOOTH_QUARTZ:
-            case SMOOTH_RED_SANDSTONE:
-            case SMOOTH_SANDSTONE:
-            case SMOOTH_STONE:
-            case SNOW_BLOCK:
-            case SOUL_SAND:
-            case SOUL_SOIL:
-            case SPAWNER:
-            case SPONGE:
-            case SPRUCE_LOG:
-            case SPRUCE_PLANKS:
-            case SPRUCE_WOOD:
-            case STONE:
-            case STONE_BRICKS:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_CRIMSON_HYPHAE:
-            case STRIPPED_CRIMSON_STEM:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case STRIPPED_WARPED_HYPHAE:
-            case STRIPPED_WARPED_STEM:
-            case STRUCTURE_BLOCK:
-            case TARGET:
-            case TERRACOTTA:
-            case TUBE_CORAL_BLOCK:
-            case WARPED_HYPHAE:
-            case WARPED_NYLIUM:
-            case WARPED_PLANKS:
-            case WARPED_STEM:
-            case WARPED_WART_BLOCK:
-            case WET_SPONGE:
-            case WHITE_CONCRETE:
-            case WHITE_CONCRETE_POWDER:
-            case WHITE_GLAZED_TERRACOTTA:
-            case WHITE_SHULKER_BOX:
-            case WHITE_TERRACOTTA:
-            case WHITE_WOOL:
-            case YELLOW_CONCRETE:
-            case YELLOW_CONCRETE_POWDER:
-            case YELLOW_GLAZED_TERRACOTTA:
-            case YELLOW_SHULKER_BOX:
-            case YELLOW_TERRACOTTA:
-            case YELLOW_WOOL:
-            // ----- Legacy Separator -----
-            case LEGACY_STONE:
-            case LEGACY_GRASS:
-            case LEGACY_DIRT:
-            case LEGACY_COBBLESTONE:
-            case LEGACY_WOOD:
-            case LEGACY_BEDROCK:
-            case LEGACY_SAND:
-            case LEGACY_GRAVEL:
-            case LEGACY_GOLD_ORE:
-            case LEGACY_IRON_ORE:
-            case LEGACY_COAL_ORE:
-            case LEGACY_LOG:
-            case LEGACY_SPONGE:
-            case LEGACY_LAPIS_ORE:
-            case LEGACY_LAPIS_BLOCK:
-            case LEGACY_DISPENSER:
-            case LEGACY_SANDSTONE:
-            case LEGACY_NOTE_BLOCK:
-            case LEGACY_WOOL:
-            case LEGACY_GOLD_BLOCK:
-            case LEGACY_IRON_BLOCK:
-            case LEGACY_DOUBLE_STEP:
-            case LEGACY_BRICK:
-            case LEGACY_BOOKSHELF:
-            case LEGACY_MOSSY_COBBLESTONE:
-            case LEGACY_OBSIDIAN:
-            case LEGACY_MOB_SPAWNER:
-            case LEGACY_DIAMOND_ORE:
-            case LEGACY_DIAMOND_BLOCK:
-            case LEGACY_WORKBENCH:
-            case LEGACY_FURNACE:
-            case LEGACY_BURNING_FURNACE:
-            case LEGACY_REDSTONE_ORE:
-            case LEGACY_GLOWING_REDSTONE_ORE:
-            case LEGACY_SNOW_BLOCK:
-            case LEGACY_CLAY:
-            case LEGACY_JUKEBOX:
-            case LEGACY_PUMPKIN:
-            case LEGACY_NETHERRACK:
-            case LEGACY_SOUL_SAND:
-            case LEGACY_JACK_O_LANTERN:
-            case LEGACY_MONSTER_EGGS:
-            case LEGACY_SMOOTH_BRICK:
-            case LEGACY_HUGE_MUSHROOM_1:
-            case LEGACY_HUGE_MUSHROOM_2:
-            case LEGACY_MELON_BLOCK:
-            case LEGACY_MYCEL:
-            case LEGACY_NETHER_BRICK:
-            case LEGACY_ENDER_STONE:
-            case LEGACY_REDSTONE_LAMP_OFF:
-            case LEGACY_REDSTONE_LAMP_ON:
-            case LEGACY_WOOD_DOUBLE_STEP:
-            case LEGACY_EMERALD_ORE:
-            case LEGACY_EMERALD_BLOCK:
-            case LEGACY_COMMAND:
-            case LEGACY_QUARTZ_ORE:
-            case LEGACY_QUARTZ_BLOCK:
-            case LEGACY_DROPPER:
-            case LEGACY_STAINED_CLAY:
-            case LEGACY_HAY_BLOCK:
-            case LEGACY_HARD_CLAY:
-            case LEGACY_COAL_BLOCK:
-            case LEGACY_LOG_2:
-            case LEGACY_PACKED_ICE:
-            case LEGACY_SLIME_BLOCK:
-            case LEGACY_BARRIER:
-            case LEGACY_PRISMARINE:
-            case LEGACY_RED_SANDSTONE:
-            case LEGACY_DOUBLE_STONE_SLAB2:
-            case LEGACY_PURPUR_BLOCK:
-            case LEGACY_PURPUR_PILLAR:
-            case LEGACY_PURPUR_DOUBLE_SLAB:
-            case LEGACY_END_BRICKS:
-            case LEGACY_STRUCTURE_BLOCK:
-            case LEGACY_COMMAND_REPEATING:
-            case LEGACY_COMMAND_CHAIN:
-            case LEGACY_MAGMA:
-            case LEGACY_NETHER_WART_BLOCK:
-            case LEGACY_RED_NETHER_BRICK:
-            case LEGACY_BONE_BLOCK:
-            case LEGACY_WHITE_GLAZED_TERRACOTTA:
-            case LEGACY_ORANGE_GLAZED_TERRACOTTA:
-            case LEGACY_MAGENTA_GLAZED_TERRACOTTA:
-            case LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA:
-            case LEGACY_YELLOW_GLAZED_TERRACOTTA:
-            case LEGACY_LIME_GLAZED_TERRACOTTA:
-            case LEGACY_PINK_GLAZED_TERRACOTTA:
-            case LEGACY_GRAY_GLAZED_TERRACOTTA:
-            case LEGACY_SILVER_GLAZED_TERRACOTTA:
-            case LEGACY_CYAN_GLAZED_TERRACOTTA:
-            case LEGACY_PURPLE_GLAZED_TERRACOTTA:
-            case LEGACY_BLUE_GLAZED_TERRACOTTA:
-            case LEGACY_BROWN_GLAZED_TERRACOTTA:
-            case LEGACY_GREEN_GLAZED_TERRACOTTA:
-            case LEGACY_RED_GLAZED_TERRACOTTA:
-            case LEGACY_BLACK_GLAZED_TERRACOTTA:
-            case LEGACY_CONCRETE:
-            case LEGACY_CONCRETE_POWDER:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isOccluding">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_LOG, ACACIA_PLANKS, ACACIA_WOOD, ANCIENT_DEBRIS, ANDESITE, BARREL, BARRIER, BASALT, BEDROCK, BEEHIVE, BEE_NEST, BIRCH_LOG, BIRCH_PLANKS, BIRCH_WOOD, BLACKSTONE, BLACK_CONCRETE, BLACK_CONCRETE_POWDER, BLACK_GLAZED_TERRACOTTA, BLACK_SHULKER_BOX, BLACK_TERRACOTTA, BLACK_WOOL, BLAST_FURNACE, BLUE_CONCRETE, BLUE_CONCRETE_POWDER, BLUE_GLAZED_TERRACOTTA, BLUE_ICE, BLUE_SHULKER_BOX, BLUE_TERRACOTTA, BLUE_WOOL, BONE_BLOCK, BOOKSHELF, BRAIN_CORAL_BLOCK, BRICKS, BROWN_CONCRETE, BROWN_CONCRETE_POWDER, BROWN_GLAZED_TERRACOTTA, BROWN_MUSHROOM_BLOCK, BROWN_SHULKER_BOX, BROWN_TERRACOTTA, BROWN_WOOL, BUBBLE_CORAL_BLOCK, CARTOGRAPHY_TABLE, CARVED_PUMPKIN, CHAIN_COMMAND_BLOCK, CHISELED_NETHER_BRICKS, CHISELED_POLISHED_BLACKSTONE, CHISELED_QUARTZ_BLOCK, CHISELED_RED_SANDSTONE, CHISELED_SANDSTONE, CHISELED_STONE_BRICKS, CLAY, COAL_BLOCK, COAL_ORE, COARSE_DIRT, COBBLESTONE, COMMAND_BLOCK, CRACKED_NETHER_BRICKS, CRACKED_POLISHED_BLACKSTONE_BRICKS, CRACKED_STONE_BRICKS, CRAFTING_TABLE, CRIMSON_HYPHAE, CRIMSON_NYLIUM, CRIMSON_PLANKS, CRIMSON_STEM, CRYING_OBSIDIAN, CUT_RED_SANDSTONE, CUT_SANDSTONE, CYAN_CONCRETE, CYAN_CONCRETE_POWDER, CYAN_GLAZED_TERRACOTTA, CYAN_SHULKER_BOX, CYAN_TERRACOTTA, CYAN_WOOL, DARK_OAK_LOG, DARK_OAK_PLANKS, DARK_OAK_WOOD, DARK_PRISMARINE, DEAD_BRAIN_CORAL_BLOCK, DEAD_BUBBLE_CORAL_BLOCK, DEAD_FIRE_CORAL_BLOCK, DEAD_HORN_CORAL_BLOCK, DEAD_TUBE_CORAL_BLOCK, DIAMOND_BLOCK, DIAMOND_ORE, DIORITE, DIRT, DISPENSER, DRIED_KELP_BLOCK, DROPPER, EMERALD_BLOCK, EMERALD_ORE, END_STONE, END_STONE_BRICKS, FIRE_CORAL_BLOCK, FLETCHING_TABLE, FURNACE, GILDED_BLACKSTONE, GOLD_BLOCK, GOLD_ORE, GRANITE, GRASS_BLOCK, GRAVEL, GRAY_CONCRETE, GRAY_CONCRETE_POWDER, GRAY_GLAZED_TERRACOTTA, GRAY_SHULKER_BOX, GRAY_TERRACOTTA, GRAY_WOOL, GREEN_CONCRETE, GREEN_CONCRETE_POWDER, GREEN_GLAZED_TERRACOTTA, GREEN_SHULKER_BOX, GREEN_TERRACOTTA, GREEN_WOOL, HAY_BLOCK, HONEYCOMB_BLOCK, HORN_CORAL_BLOCK, INFESTED_CHISELED_STONE_BRICKS, INFESTED_COBBLESTONE, INFESTED_CRACKED_STONE_BRICKS, INFESTED_MOSSY_STONE_BRICKS, INFESTED_STONE, INFESTED_STONE_BRICKS, IRON_BLOCK, IRON_ORE, JACK_O_LANTERN, JIGSAW, JUKEBOX, JUNGLE_LOG, JUNGLE_PLANKS, JUNGLE_WOOD, LAPIS_BLOCK, LAPIS_ORE, LIGHT_BLUE_CONCRETE, LIGHT_BLUE_CONCRETE_POWDER, LIGHT_BLUE_GLAZED_TERRACOTTA, LIGHT_BLUE_SHULKER_BOX, LIGHT_BLUE_TERRACOTTA, LIGHT_BLUE_WOOL, LIGHT_GRAY_CONCRETE, LIGHT_GRAY_CONCRETE_POWDER, LIGHT_GRAY_GLAZED_TERRACOTTA, LIGHT_GRAY_SHULKER_BOX, LIGHT_GRAY_TERRACOTTA, LIGHT_GRAY_WOOL, LIME_CONCRETE, LIME_CONCRETE_POWDER, LIME_GLAZED_TERRACOTTA, LIME_SHULKER_BOX, LIME_TERRACOTTA, LIME_WOOL, LODESTONE, LOOM, MAGENTA_CONCRETE, MAGENTA_CONCRETE_POWDER, MAGENTA_GLAZED_TERRACOTTA, MAGENTA_SHULKER_BOX, MAGENTA_TERRACOTTA, MAGENTA_WOOL, MAGMA_BLOCK, MELON, MOSSY_COBBLESTONE, MOSSY_STONE_BRICKS, MUSHROOM_STEM, MYCELIUM, NETHERITE_BLOCK, NETHERRACK, NETHER_BRICKS, NETHER_GOLD_ORE, NETHER_QUARTZ_ORE, NETHER_WART_BLOCK, NOTE_BLOCK, OAK_LOG, OAK_PLANKS, OAK_WOOD, OBSIDIAN, ORANGE_CONCRETE, ORANGE_CONCRETE_POWDER, ORANGE_GLAZED_TERRACOTTA, ORANGE_SHULKER_BOX, ORANGE_TERRACOTTA, ORANGE_WOOL, PACKED_ICE, PINK_CONCRETE, PINK_CONCRETE_POWDER, PINK_GLAZED_TERRACOTTA, PINK_SHULKER_BOX, PINK_TERRACOTTA, PINK_WOOL, PODZOL, POLISHED_ANDESITE, POLISHED_BASALT, POLISHED_BLACKSTONE, POLISHED_BLACKSTONE_BRICKS, POLISHED_DIORITE, POLISHED_GRANITE, PRISMARINE, PRISMARINE_BRICKS, PUMPKIN, PURPLE_CONCRETE, PURPLE_CONCRETE_POWDER, PURPLE_GLAZED_TERRACOTTA, PURPLE_SHULKER_BOX, PURPLE_TERRACOTTA, PURPLE_WOOL, PURPUR_BLOCK, PURPUR_PILLAR, QUARTZ_BLOCK, QUARTZ_BRICKS, QUARTZ_PILLAR, REDSTONE_LAMP, REDSTONE_ORE, RED_CONCRETE, RED_CONCRETE_POWDER, RED_GLAZED_TERRACOTTA, RED_MUSHROOM_BLOCK, RED_NETHER_BRICKS, RED_SAND, RED_SANDSTONE, RED_SHULKER_BOX, RED_TERRACOTTA, RED_WOOL, REPEATING_COMMAND_BLOCK, RESPAWN_ANCHOR, SAND, SANDSTONE, SHROOMLIGHT, SHULKER_BOX, SLIME_BLOCK, SMITHING_TABLE, SMOKER, SMOOTH_QUARTZ, SMOOTH_RED_SANDSTONE, SMOOTH_SANDSTONE, SMOOTH_STONE, SNOW_BLOCK, SOUL_SAND, SOUL_SOIL, SPAWNER, SPONGE, SPRUCE_LOG, SPRUCE_PLANKS, SPRUCE_WOOD, STONE, STONE_BRICKS, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_CRIMSON_HYPHAE, STRIPPED_CRIMSON_STEM, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, STRIPPED_WARPED_HYPHAE, STRIPPED_WARPED_STEM, STRUCTURE_BLOCK, TARGET, TERRACOTTA, TUBE_CORAL_BLOCK, WARPED_HYPHAE, WARPED_NYLIUM, WARPED_PLANKS, WARPED_STEM, WARPED_WART_BLOCK, WET_SPONGE, WHITE_CONCRETE, WHITE_CONCRETE_POWDER, WHITE_GLAZED_TERRACOTTA, WHITE_SHULKER_BOX, WHITE_TERRACOTTA, WHITE_WOOL, YELLOW_CONCRETE, YELLOW_CONCRETE_POWDER, YELLOW_GLAZED_TERRACOTTA, YELLOW_SHULKER_BOX, YELLOW_TERRACOTTA, YELLOW_WOOL, LEGACY_STONE, LEGACY_GRASS, LEGACY_DIRT, LEGACY_COBBLESTONE, LEGACY_WOOD, LEGACY_BEDROCK, LEGACY_SAND, LEGACY_GRAVEL, LEGACY_GOLD_ORE, LEGACY_IRON_ORE, LEGACY_COAL_ORE, LEGACY_LOG, LEGACY_SPONGE, LEGACY_LAPIS_ORE, LEGACY_LAPIS_BLOCK, LEGACY_DISPENSER, LEGACY_SANDSTONE, LEGACY_NOTE_BLOCK, LEGACY_WOOL, LEGACY_GOLD_BLOCK, LEGACY_IRON_BLOCK, LEGACY_DOUBLE_STEP, LEGACY_BRICK, LEGACY_BOOKSHELF, LEGACY_MOSSY_COBBLESTONE, LEGACY_OBSIDIAN, LEGACY_MOB_SPAWNER, LEGACY_DIAMOND_ORE, LEGACY_DIAMOND_BLOCK, LEGACY_WORKBENCH, LEGACY_FURNACE, LEGACY_BURNING_FURNACE, LEGACY_REDSTONE_ORE, LEGACY_GLOWING_REDSTONE_ORE, LEGACY_SNOW_BLOCK, LEGACY_CLAY, LEGACY_JUKEBOX, LEGACY_PUMPKIN, LEGACY_NETHERRACK, LEGACY_SOUL_SAND, LEGACY_JACK_O_LANTERN, LEGACY_MONSTER_EGGS, LEGACY_SMOOTH_BRICK, LEGACY_HUGE_MUSHROOM_1, LEGACY_HUGE_MUSHROOM_2, LEGACY_MELON_BLOCK, LEGACY_MYCEL, LEGACY_NETHER_BRICK, LEGACY_ENDER_STONE, LEGACY_REDSTONE_LAMP_OFF, LEGACY_REDSTONE_LAMP_ON, LEGACY_WOOD_DOUBLE_STEP, LEGACY_EMERALD_ORE, LEGACY_EMERALD_BLOCK, LEGACY_COMMAND, LEGACY_QUARTZ_ORE, LEGACY_QUARTZ_BLOCK, LEGACY_DROPPER, LEGACY_STAINED_CLAY, LEGACY_HAY_BLOCK, LEGACY_HARD_CLAY, LEGACY_COAL_BLOCK, LEGACY_LOG_2, LEGACY_PACKED_ICE, LEGACY_SLIME_BLOCK, LEGACY_BARRIER, LEGACY_PRISMARINE, LEGACY_RED_SANDSTONE, LEGACY_DOUBLE_STONE_SLAB2, LEGACY_PURPUR_BLOCK, LEGACY_PURPUR_PILLAR, LEGACY_PURPUR_DOUBLE_SLAB, LEGACY_END_BRICKS, LEGACY_STRUCTURE_BLOCK, LEGACY_COMMAND_REPEATING, LEGACY_COMMAND_CHAIN, LEGACY_MAGMA, LEGACY_NETHER_WART_BLOCK, LEGACY_RED_NETHER_BRICK, LEGACY_BONE_BLOCK, LEGACY_WHITE_GLAZED_TERRACOTTA, LEGACY_ORANGE_GLAZED_TERRACOTTA, LEGACY_MAGENTA_GLAZED_TERRACOTTA, LEGACY_LIGHT_BLUE_GLAZED_TERRACOTTA, LEGACY_YELLOW_GLAZED_TERRACOTTA, LEGACY_LIME_GLAZED_TERRACOTTA, LEGACY_PINK_GLAZED_TERRACOTTA, LEGACY_GRAY_GLAZED_TERRACOTTA, LEGACY_SILVER_GLAZED_TERRACOTTA, LEGACY_CYAN_GLAZED_TERRACOTTA, LEGACY_PURPLE_GLAZED_TERRACOTTA, LEGACY_BLUE_GLAZED_TERRACOTTA, LEGACY_BROWN_GLAZED_TERRACOTTA, LEGACY_GREEN_GLAZED_TERRACOTTA, LEGACY_RED_GLAZED_TERRACOTTA, LEGACY_BLACK_GLAZED_TERRACOTTA, LEGACY_CONCRETE, LEGACY_CONCRETE_POWDER -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -6857,41 +3987,13 @@ public enum Material implements Keyed {
         if (!isBlock()) {
             return false;
         }
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="hasGravity">
-            case ANVIL:
-            case BLACK_CONCRETE_POWDER:
-            case BLUE_CONCRETE_POWDER:
-            case BROWN_CONCRETE_POWDER:
-            case CHIPPED_ANVIL:
-            case CYAN_CONCRETE_POWDER:
-            case DAMAGED_ANVIL:
-            case DRAGON_EGG:
-            case GRAVEL:
-            case GRAY_CONCRETE_POWDER:
-            case GREEN_CONCRETE_POWDER:
-            case LIGHT_BLUE_CONCRETE_POWDER:
-            case LIGHT_GRAY_CONCRETE_POWDER:
-            case LIME_CONCRETE_POWDER:
-            case MAGENTA_CONCRETE_POWDER:
-            case ORANGE_CONCRETE_POWDER:
-            case PINK_CONCRETE_POWDER:
-            case PURPLE_CONCRETE_POWDER:
-            case RED_CONCRETE_POWDER:
-            case RED_SAND:
-            case SAND:
-            case WHITE_CONCRETE_POWDER:
-            case YELLOW_CONCRETE_POWDER:
-            // ----- Legacy Separator -----
-            case LEGACY_SAND:
-            case LEGACY_GRAVEL:
-            case LEGACY_ANVIL:
-            case LEGACY_CONCRETE_POWDER:
-            //</editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        //<editor-fold defaultstate="collapsed" desc="hasGravity">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ANVIL, BLACK_CONCRETE_POWDER, BLUE_CONCRETE_POWDER, BROWN_CONCRETE_POWDER, CHIPPED_ANVIL, CYAN_CONCRETE_POWDER, DAMAGED_ANVIL, DRAGON_EGG, GRAVEL, GRAY_CONCRETE_POWDER, GREEN_CONCRETE_POWDER, LIGHT_BLUE_CONCRETE_POWDER, LIGHT_GRAY_CONCRETE_POWDER, LIME_CONCRETE_POWDER, MAGENTA_CONCRETE_POWDER, ORANGE_CONCRETE_POWDER, PINK_CONCRETE_POWDER, PURPLE_CONCRETE_POWDER, RED_CONCRETE_POWDER, RED_SAND, SAND, WHITE_CONCRETE_POWDER, YELLOW_CONCRETE_POWDER, LEGACY_SAND, LEGACY_GRAVEL, LEGACY_ANVIL, LEGACY_CONCRETE_POWDER -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -6900,167 +4002,13 @@ public enum Material implements Keyed {
      * @return true if this material is an item
      */
     public boolean isItem() {
-        switch (this) {
-            //<editor-fold defaultstate="collapsed" desc="isItem">
-            case ACACIA_WALL_SIGN:
-            case ATTACHED_MELON_STEM:
-            case ATTACHED_PUMPKIN_STEM:
-            case BAMBOO_SAPLING:
-            case BEETROOTS:
-            case BIRCH_WALL_SIGN:
-            case BLACK_WALL_BANNER:
-            case BLUE_WALL_BANNER:
-            case BRAIN_CORAL_WALL_FAN:
-            case BROWN_WALL_BANNER:
-            case BUBBLE_COLUMN:
-            case BUBBLE_CORAL_WALL_FAN:
-            case CARROTS:
-            case CAVE_AIR:
-            case COCOA:
-            case CREEPER_WALL_HEAD:
-            case CRIMSON_WALL_SIGN:
-            case CYAN_WALL_BANNER:
-            case DARK_OAK_WALL_SIGN:
-            case DEAD_BRAIN_CORAL_WALL_FAN:
-            case DEAD_BUBBLE_CORAL_WALL_FAN:
-            case DEAD_FIRE_CORAL_WALL_FAN:
-            case DEAD_HORN_CORAL_WALL_FAN:
-            case DEAD_TUBE_CORAL_WALL_FAN:
-            case DRAGON_WALL_HEAD:
-            case END_GATEWAY:
-            case END_PORTAL:
-            case FIRE:
-            case FIRE_CORAL_WALL_FAN:
-            case FROSTED_ICE:
-            case GRAY_WALL_BANNER:
-            case GREEN_WALL_BANNER:
-            case HORN_CORAL_WALL_FAN:
-            case JUNGLE_WALL_SIGN:
-            case KELP_PLANT:
-            case LAVA:
-            case LIGHT_BLUE_WALL_BANNER:
-            case LIGHT_GRAY_WALL_BANNER:
-            case LIME_WALL_BANNER:
-            case MAGENTA_WALL_BANNER:
-            case MELON_STEM:
-            case MOVING_PISTON:
-            case NETHER_PORTAL:
-            case OAK_WALL_SIGN:
-            case ORANGE_WALL_BANNER:
-            case PINK_WALL_BANNER:
-            case PISTON_HEAD:
-            case PLAYER_WALL_HEAD:
-            case POTATOES:
-            case POTTED_ACACIA_SAPLING:
-            case POTTED_ALLIUM:
-            case POTTED_AZURE_BLUET:
-            case POTTED_BAMBOO:
-            case POTTED_BIRCH_SAPLING:
-            case POTTED_BLUE_ORCHID:
-            case POTTED_BROWN_MUSHROOM:
-            case POTTED_CACTUS:
-            case POTTED_CORNFLOWER:
-            case POTTED_CRIMSON_FUNGUS:
-            case POTTED_CRIMSON_ROOTS:
-            case POTTED_DANDELION:
-            case POTTED_DARK_OAK_SAPLING:
-            case POTTED_DEAD_BUSH:
-            case POTTED_FERN:
-            case POTTED_JUNGLE_SAPLING:
-            case POTTED_LILY_OF_THE_VALLEY:
-            case POTTED_OAK_SAPLING:
-            case POTTED_ORANGE_TULIP:
-            case POTTED_OXEYE_DAISY:
-            case POTTED_PINK_TULIP:
-            case POTTED_POPPY:
-            case POTTED_RED_MUSHROOM:
-            case POTTED_RED_TULIP:
-            case POTTED_SPRUCE_SAPLING:
-            case POTTED_WARPED_FUNGUS:
-            case POTTED_WARPED_ROOTS:
-            case POTTED_WHITE_TULIP:
-            case POTTED_WITHER_ROSE:
-            case PUMPKIN_STEM:
-            case PURPLE_WALL_BANNER:
-            case REDSTONE_WALL_TORCH:
-            case REDSTONE_WIRE:
-            case RED_WALL_BANNER:
-            case SKELETON_WALL_SKULL:
-            case SOUL_FIRE:
-            case SOUL_WALL_TORCH:
-            case SPRUCE_WALL_SIGN:
-            case SWEET_BERRY_BUSH:
-            case TALL_SEAGRASS:
-            case TRIPWIRE:
-            case TUBE_CORAL_WALL_FAN:
-            case TWISTING_VINES_PLANT:
-            case VOID_AIR:
-            case WALL_TORCH:
-            case WARPED_WALL_SIGN:
-            case WATER:
-            case WEEPING_VINES_PLANT:
-            case WHITE_WALL_BANNER:
-            case WITHER_SKELETON_WALL_SKULL:
-            case YELLOW_WALL_BANNER:
-            case ZOMBIE_WALL_HEAD:
-            // ----- Legacy Separator -----
-            case LEGACY_ACACIA_DOOR:
-            case LEGACY_BED_BLOCK:
-            case LEGACY_BEETROOT_BLOCK:
-            case LEGACY_BIRCH_DOOR:
-            case LEGACY_BREWING_STAND:
-            case LEGACY_BURNING_FURNACE:
-            case LEGACY_CAKE_BLOCK:
-            case LEGACY_CARROT:
-            case LEGACY_CAULDRON:
-            case LEGACY_COCOA:
-            case LEGACY_CROPS:
-            case LEGACY_DARK_OAK_DOOR:
-            case LEGACY_DAYLIGHT_DETECTOR_INVERTED:
-            case LEGACY_DIODE_BLOCK_OFF:
-            case LEGACY_DIODE_BLOCK_ON:
-            case LEGACY_DOUBLE_STEP:
-            case LEGACY_DOUBLE_STONE_SLAB2:
-            case LEGACY_ENDER_PORTAL:
-            case LEGACY_END_GATEWAY:
-            case LEGACY_FIRE:
-            case LEGACY_FLOWER_POT:
-            case LEGACY_FROSTED_ICE:
-            case LEGACY_GLOWING_REDSTONE_ORE:
-            case LEGACY_IRON_DOOR_BLOCK:
-            case LEGACY_JUNGLE_DOOR:
-            case LEGACY_LAVA:
-            case LEGACY_MELON_STEM:
-            case LEGACY_NETHER_WARTS:
-            case LEGACY_PISTON_EXTENSION:
-            case LEGACY_PISTON_MOVING_PIECE:
-            case LEGACY_PORTAL:
-            case LEGACY_POTATO:
-            case LEGACY_PUMPKIN_STEM:
-            case LEGACY_PURPUR_DOUBLE_SLAB:
-            case LEGACY_REDSTONE_COMPARATOR_OFF:
-            case LEGACY_REDSTONE_COMPARATOR_ON:
-            case LEGACY_REDSTONE_LAMP_ON:
-            case LEGACY_REDSTONE_TORCH_OFF:
-            case LEGACY_REDSTONE_WIRE:
-            case LEGACY_SIGN_POST:
-            case LEGACY_SKULL:
-            case LEGACY_SPRUCE_DOOR:
-            case LEGACY_STANDING_BANNER:
-            case LEGACY_STATIONARY_LAVA:
-            case LEGACY_STATIONARY_WATER:
-            case LEGACY_SUGAR_CANE_BLOCK:
-            case LEGACY_TRIPWIRE:
-            case LEGACY_WALL_BANNER:
-            case LEGACY_WALL_SIGN:
-            case LEGACY_WATER:
-            case LEGACY_WOODEN_DOOR:
-            case LEGACY_WOOD_DOUBLE_STEP:
-            //</editor-fold>
-                return false;
-            default:
-                return true;
-        }
+        //<editor-fold defaultstate="collapsed" desc="isItem">
+        // ----- Legacy Separator -----
+        //</editor-fold>
+        return switch (this) {
+            case ACACIA_WALL_SIGN, ATTACHED_MELON_STEM, ATTACHED_PUMPKIN_STEM, BAMBOO_SAPLING, BEETROOTS, BIRCH_WALL_SIGN, BLACK_WALL_BANNER, BLUE_WALL_BANNER, BRAIN_CORAL_WALL_FAN, BROWN_WALL_BANNER, BUBBLE_COLUMN, BUBBLE_CORAL_WALL_FAN, CARROTS, CAVE_AIR, COCOA, CREEPER_WALL_HEAD, CRIMSON_WALL_SIGN, CYAN_WALL_BANNER, DARK_OAK_WALL_SIGN, DEAD_BRAIN_CORAL_WALL_FAN, DEAD_BUBBLE_CORAL_WALL_FAN, DEAD_FIRE_CORAL_WALL_FAN, DEAD_HORN_CORAL_WALL_FAN, DEAD_TUBE_CORAL_WALL_FAN, DRAGON_WALL_HEAD, END_GATEWAY, END_PORTAL, FIRE, FIRE_CORAL_WALL_FAN, FROSTED_ICE, GRAY_WALL_BANNER, GREEN_WALL_BANNER, HORN_CORAL_WALL_FAN, JUNGLE_WALL_SIGN, KELP_PLANT, LAVA, LIGHT_BLUE_WALL_BANNER, LIGHT_GRAY_WALL_BANNER, LIME_WALL_BANNER, MAGENTA_WALL_BANNER, MELON_STEM, MOVING_PISTON, NETHER_PORTAL, OAK_WALL_SIGN, ORANGE_WALL_BANNER, PINK_WALL_BANNER, PISTON_HEAD, PLAYER_WALL_HEAD, POTATOES, POTTED_ACACIA_SAPLING, POTTED_ALLIUM, POTTED_AZURE_BLUET, POTTED_BAMBOO, POTTED_BIRCH_SAPLING, POTTED_BLUE_ORCHID, POTTED_BROWN_MUSHROOM, POTTED_CACTUS, POTTED_CORNFLOWER, POTTED_CRIMSON_FUNGUS, POTTED_CRIMSON_ROOTS, POTTED_DANDELION, POTTED_DARK_OAK_SAPLING, POTTED_DEAD_BUSH, POTTED_FERN, POTTED_JUNGLE_SAPLING, POTTED_LILY_OF_THE_VALLEY, POTTED_OAK_SAPLING, POTTED_ORANGE_TULIP, POTTED_OXEYE_DAISY, POTTED_PINK_TULIP, POTTED_POPPY, POTTED_RED_MUSHROOM, POTTED_RED_TULIP, POTTED_SPRUCE_SAPLING, POTTED_WARPED_FUNGUS, POTTED_WARPED_ROOTS, POTTED_WHITE_TULIP, POTTED_WITHER_ROSE, PUMPKIN_STEM, PURPLE_WALL_BANNER, REDSTONE_WALL_TORCH, REDSTONE_WIRE, RED_WALL_BANNER, SKELETON_WALL_SKULL, SOUL_FIRE, SOUL_WALL_TORCH, SPRUCE_WALL_SIGN, SWEET_BERRY_BUSH, TALL_SEAGRASS, TRIPWIRE, TUBE_CORAL_WALL_FAN, TWISTING_VINES_PLANT, VOID_AIR, WALL_TORCH, WARPED_WALL_SIGN, WATER, WEEPING_VINES_PLANT, WHITE_WALL_BANNER, WITHER_SKELETON_WALL_SKULL, YELLOW_WALL_BANNER, ZOMBIE_WALL_HEAD, LEGACY_ACACIA_DOOR, LEGACY_BED_BLOCK, LEGACY_BEETROOT_BLOCK, LEGACY_BIRCH_DOOR, LEGACY_BREWING_STAND, LEGACY_BURNING_FURNACE, LEGACY_CAKE_BLOCK, LEGACY_CARROT, LEGACY_CAULDRON, LEGACY_COCOA, LEGACY_CROPS, LEGACY_DARK_OAK_DOOR, LEGACY_DAYLIGHT_DETECTOR_INVERTED, LEGACY_DIODE_BLOCK_OFF, LEGACY_DIODE_BLOCK_ON, LEGACY_DOUBLE_STEP, LEGACY_DOUBLE_STONE_SLAB2, LEGACY_ENDER_PORTAL, LEGACY_END_GATEWAY, LEGACY_FIRE, LEGACY_FLOWER_POT, LEGACY_FROSTED_ICE, LEGACY_GLOWING_REDSTONE_ORE, LEGACY_IRON_DOOR_BLOCK, LEGACY_JUNGLE_DOOR, LEGACY_LAVA, LEGACY_MELON_STEM, LEGACY_NETHER_WARTS, LEGACY_PISTON_EXTENSION, LEGACY_PISTON_MOVING_PIECE, LEGACY_PORTAL, LEGACY_POTATO, LEGACY_PUMPKIN_STEM, LEGACY_PURPUR_DOUBLE_SLAB, LEGACY_REDSTONE_COMPARATOR_OFF, LEGACY_REDSTONE_COMPARATOR_ON, LEGACY_REDSTONE_LAMP_ON, LEGACY_REDSTONE_TORCH_OFF, LEGACY_REDSTONE_WIRE, LEGACY_SIGN_POST, LEGACY_SKULL, LEGACY_SPRUCE_DOOR, LEGACY_STANDING_BANNER, LEGACY_STATIONARY_LAVA, LEGACY_STATIONARY_WATER, LEGACY_SUGAR_CANE_BLOCK, LEGACY_TRIPWIRE, LEGACY_WALL_BANNER, LEGACY_WALL_SIGN, LEGACY_WATER, LEGACY_WOODEN_DOOR, LEGACY_WOOD_DOUBLE_STEP -> false;
+            default -> true;
+        };
     }
 
     /**
@@ -7080,224 +4028,12 @@ public enum Material implements Keyed {
      * @return true if this material can be interacted with.
      */
     public boolean isInteractable() {
-        switch (this) {
-            // <editor-fold defaultstate="collapsed" desc="isInteractable">
-            case ACACIA_BUTTON:
-            case ACACIA_DOOR:
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_SIGN:
-            case ACACIA_STAIRS:
-            case ACACIA_TRAPDOOR:
-            case ACACIA_WALL_SIGN:
-            case ANDESITE_STAIRS:
-            case ANVIL:
-            case BARREL:
-            case BEACON:
-            case BEEHIVE:
-            case BEE_NEST:
-            case BELL:
-            case BIRCH_BUTTON:
-            case BIRCH_DOOR:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_SIGN:
-            case BIRCH_STAIRS:
-            case BIRCH_TRAPDOOR:
-            case BIRCH_WALL_SIGN:
-            case BLACKSTONE_STAIRS:
-            case BLACK_BED:
-            case BLACK_SHULKER_BOX:
-            case BLAST_FURNACE:
-            case BLUE_BED:
-            case BLUE_SHULKER_BOX:
-            case BREWING_STAND:
-            case BRICK_STAIRS:
-            case BROWN_BED:
-            case BROWN_SHULKER_BOX:
-            case CAKE:
-            case CAMPFIRE:
-            case CARTOGRAPHY_TABLE:
-            case CAULDRON:
-            case CHAIN_COMMAND_BLOCK:
-            case CHEST:
-            case CHIPPED_ANVIL:
-            case COBBLESTONE_STAIRS:
-            case COMMAND_BLOCK:
-            case COMPARATOR:
-            case COMPOSTER:
-            case CRAFTING_TABLE:
-            case CRIMSON_BUTTON:
-            case CRIMSON_DOOR:
-            case CRIMSON_FENCE:
-            case CRIMSON_FENCE_GATE:
-            case CRIMSON_SIGN:
-            case CRIMSON_STAIRS:
-            case CRIMSON_TRAPDOOR:
-            case CRIMSON_WALL_SIGN:
-            case CYAN_BED:
-            case CYAN_SHULKER_BOX:
-            case DAMAGED_ANVIL:
-            case DARK_OAK_BUTTON:
-            case DARK_OAK_DOOR:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_SIGN:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_TRAPDOOR:
-            case DARK_OAK_WALL_SIGN:
-            case DARK_PRISMARINE_STAIRS:
-            case DAYLIGHT_DETECTOR:
-            case DIORITE_STAIRS:
-            case DISPENSER:
-            case DRAGON_EGG:
-            case DROPPER:
-            case ENCHANTING_TABLE:
-            case ENDER_CHEST:
-            case END_STONE_BRICK_STAIRS:
-            case FLETCHING_TABLE:
-            case FLOWER_POT:
-            case FURNACE:
-            case GRANITE_STAIRS:
-            case GRAY_BED:
-            case GRAY_SHULKER_BOX:
-            case GREEN_BED:
-            case GREEN_SHULKER_BOX:
-            case GRINDSTONE:
-            case HOPPER:
-            case IRON_DOOR:
-            case IRON_TRAPDOOR:
-            case JIGSAW:
-            case JUKEBOX:
-            case JUNGLE_BUTTON:
-            case JUNGLE_DOOR:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_SIGN:
-            case JUNGLE_STAIRS:
-            case JUNGLE_TRAPDOOR:
-            case JUNGLE_WALL_SIGN:
-            case LECTERN:
-            case LEVER:
-            case LIGHT_BLUE_BED:
-            case LIGHT_BLUE_SHULKER_BOX:
-            case LIGHT_GRAY_BED:
-            case LIGHT_GRAY_SHULKER_BOX:
-            case LIME_BED:
-            case LIME_SHULKER_BOX:
-            case LOOM:
-            case MAGENTA_BED:
-            case MAGENTA_SHULKER_BOX:
-            case MOSSY_COBBLESTONE_STAIRS:
-            case MOSSY_STONE_BRICK_STAIRS:
-            case MOVING_PISTON:
-            case NETHER_BRICK_FENCE:
-            case NETHER_BRICK_STAIRS:
-            case NOTE_BLOCK:
-            case OAK_BUTTON:
-            case OAK_DOOR:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_SIGN:
-            case OAK_STAIRS:
-            case OAK_TRAPDOOR:
-            case OAK_WALL_SIGN:
-            case ORANGE_BED:
-            case ORANGE_SHULKER_BOX:
-            case PINK_BED:
-            case PINK_SHULKER_BOX:
-            case POLISHED_ANDESITE_STAIRS:
-            case POLISHED_BLACKSTONE_BRICK_STAIRS:
-            case POLISHED_BLACKSTONE_BUTTON:
-            case POLISHED_BLACKSTONE_STAIRS:
-            case POLISHED_DIORITE_STAIRS:
-            case POLISHED_GRANITE_STAIRS:
-            case POTTED_ACACIA_SAPLING:
-            case POTTED_ALLIUM:
-            case POTTED_AZURE_BLUET:
-            case POTTED_BAMBOO:
-            case POTTED_BIRCH_SAPLING:
-            case POTTED_BLUE_ORCHID:
-            case POTTED_BROWN_MUSHROOM:
-            case POTTED_CACTUS:
-            case POTTED_CORNFLOWER:
-            case POTTED_CRIMSON_FUNGUS:
-            case POTTED_CRIMSON_ROOTS:
-            case POTTED_DANDELION:
-            case POTTED_DARK_OAK_SAPLING:
-            case POTTED_DEAD_BUSH:
-            case POTTED_FERN:
-            case POTTED_JUNGLE_SAPLING:
-            case POTTED_LILY_OF_THE_VALLEY:
-            case POTTED_OAK_SAPLING:
-            case POTTED_ORANGE_TULIP:
-            case POTTED_OXEYE_DAISY:
-            case POTTED_PINK_TULIP:
-            case POTTED_POPPY:
-            case POTTED_RED_MUSHROOM:
-            case POTTED_RED_TULIP:
-            case POTTED_SPRUCE_SAPLING:
-            case POTTED_WARPED_FUNGUS:
-            case POTTED_WARPED_ROOTS:
-            case POTTED_WHITE_TULIP:
-            case POTTED_WITHER_ROSE:
-            case PRISMARINE_BRICK_STAIRS:
-            case PRISMARINE_STAIRS:
-            case PUMPKIN:
-            case PURPLE_BED:
-            case PURPLE_SHULKER_BOX:
-            case PURPUR_STAIRS:
-            case QUARTZ_STAIRS:
-            case REDSTONE_ORE:
-            case REDSTONE_WIRE:
-            case RED_BED:
-            case RED_NETHER_BRICK_STAIRS:
-            case RED_SANDSTONE_STAIRS:
-            case RED_SHULKER_BOX:
-            case REPEATER:
-            case REPEATING_COMMAND_BLOCK:
-            case RESPAWN_ANCHOR:
-            case SANDSTONE_STAIRS:
-            case SHULKER_BOX:
-            case SMITHING_TABLE:
-            case SMOKER:
-            case SMOOTH_QUARTZ_STAIRS:
-            case SMOOTH_RED_SANDSTONE_STAIRS:
-            case SMOOTH_SANDSTONE_STAIRS:
-            case SOUL_CAMPFIRE:
-            case SPRUCE_BUTTON:
-            case SPRUCE_DOOR:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_SIGN:
-            case SPRUCE_STAIRS:
-            case SPRUCE_TRAPDOOR:
-            case SPRUCE_WALL_SIGN:
-            case STONECUTTER:
-            case STONE_BRICK_STAIRS:
-            case STONE_BUTTON:
-            case STONE_STAIRS:
-            case STRUCTURE_BLOCK:
-            case SWEET_BERRY_BUSH:
-            case TNT:
-            case TRAPPED_CHEST:
-            case WARPED_BUTTON:
-            case WARPED_DOOR:
-            case WARPED_FENCE:
-            case WARPED_FENCE_GATE:
-            case WARPED_SIGN:
-            case WARPED_STAIRS:
-            case WARPED_TRAPDOOR:
-            case WARPED_WALL_SIGN:
-            case WHITE_BED:
-            case WHITE_SHULKER_BOX:
-            case YELLOW_BED:
-            case YELLOW_SHULKER_BOX:
-                // </editor-fold>
-                return true;
-            default:
-                return false;
-        }
+        // <editor-fold defaultstate="collapsed" desc="isInteractable">
+        // </editor-fold>
+        return switch (this) {
+            case ACACIA_BUTTON, ACACIA_DOOR, ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_SIGN, ACACIA_STAIRS, ACACIA_TRAPDOOR, ACACIA_WALL_SIGN, ANDESITE_STAIRS, ANVIL, BARREL, BEACON, BEEHIVE, BEE_NEST, BELL, BIRCH_BUTTON, BIRCH_DOOR, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_SIGN, BIRCH_STAIRS, BIRCH_TRAPDOOR, BIRCH_WALL_SIGN, BLACKSTONE_STAIRS, BLACK_BED, BLACK_SHULKER_BOX, BLAST_FURNACE, BLUE_BED, BLUE_SHULKER_BOX, BREWING_STAND, BRICK_STAIRS, BROWN_BED, BROWN_SHULKER_BOX, CAKE, CAMPFIRE, CARTOGRAPHY_TABLE, CAULDRON, CHAIN_COMMAND_BLOCK, CHEST, CHIPPED_ANVIL, COBBLESTONE_STAIRS, COMMAND_BLOCK, COMPARATOR, COMPOSTER, CRAFTING_TABLE, CRIMSON_BUTTON, CRIMSON_DOOR, CRIMSON_FENCE, CRIMSON_FENCE_GATE, CRIMSON_SIGN, CRIMSON_STAIRS, CRIMSON_TRAPDOOR, CRIMSON_WALL_SIGN, CYAN_BED, CYAN_SHULKER_BOX, DAMAGED_ANVIL, DARK_OAK_BUTTON, DARK_OAK_DOOR, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_SIGN, DARK_OAK_STAIRS, DARK_OAK_TRAPDOOR, DARK_OAK_WALL_SIGN, DARK_PRISMARINE_STAIRS, DAYLIGHT_DETECTOR, DIORITE_STAIRS, DISPENSER, DRAGON_EGG, DROPPER, ENCHANTING_TABLE, ENDER_CHEST, END_STONE_BRICK_STAIRS, FLETCHING_TABLE, FLOWER_POT, FURNACE, GRANITE_STAIRS, GRAY_BED, GRAY_SHULKER_BOX, GREEN_BED, GREEN_SHULKER_BOX, GRINDSTONE, HOPPER, IRON_DOOR, IRON_TRAPDOOR, JIGSAW, JUKEBOX, JUNGLE_BUTTON, JUNGLE_DOOR, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_SIGN, JUNGLE_STAIRS, JUNGLE_TRAPDOOR, JUNGLE_WALL_SIGN, LECTERN, LEVER, LIGHT_BLUE_BED, LIGHT_BLUE_SHULKER_BOX, LIGHT_GRAY_BED, LIGHT_GRAY_SHULKER_BOX, LIME_BED, LIME_SHULKER_BOX, LOOM, MAGENTA_BED, MAGENTA_SHULKER_BOX, MOSSY_COBBLESTONE_STAIRS, MOSSY_STONE_BRICK_STAIRS, MOVING_PISTON, NETHER_BRICK_FENCE, NETHER_BRICK_STAIRS, NOTE_BLOCK, OAK_BUTTON, OAK_DOOR, OAK_FENCE, OAK_FENCE_GATE, OAK_SIGN, OAK_STAIRS, OAK_TRAPDOOR, OAK_WALL_SIGN, ORANGE_BED, ORANGE_SHULKER_BOX, PINK_BED, PINK_SHULKER_BOX, POLISHED_ANDESITE_STAIRS, POLISHED_BLACKSTONE_BRICK_STAIRS, POLISHED_BLACKSTONE_BUTTON, POLISHED_BLACKSTONE_STAIRS, POLISHED_DIORITE_STAIRS, POLISHED_GRANITE_STAIRS, POTTED_ACACIA_SAPLING, POTTED_ALLIUM, POTTED_AZURE_BLUET, POTTED_BAMBOO, POTTED_BIRCH_SAPLING, POTTED_BLUE_ORCHID, POTTED_BROWN_MUSHROOM, POTTED_CACTUS, POTTED_CORNFLOWER, POTTED_CRIMSON_FUNGUS, POTTED_CRIMSON_ROOTS, POTTED_DANDELION, POTTED_DARK_OAK_SAPLING, POTTED_DEAD_BUSH, POTTED_FERN, POTTED_JUNGLE_SAPLING, POTTED_LILY_OF_THE_VALLEY, POTTED_OAK_SAPLING, POTTED_ORANGE_TULIP, POTTED_OXEYE_DAISY, POTTED_PINK_TULIP, POTTED_POPPY, POTTED_RED_MUSHROOM, POTTED_RED_TULIP, POTTED_SPRUCE_SAPLING, POTTED_WARPED_FUNGUS, POTTED_WARPED_ROOTS, POTTED_WHITE_TULIP, POTTED_WITHER_ROSE, PRISMARINE_BRICK_STAIRS, PRISMARINE_STAIRS, PUMPKIN, PURPLE_BED, PURPLE_SHULKER_BOX, PURPUR_STAIRS, QUARTZ_STAIRS, REDSTONE_ORE, REDSTONE_WIRE, RED_BED, RED_NETHER_BRICK_STAIRS, RED_SANDSTONE_STAIRS, RED_SHULKER_BOX, REPEATER, REPEATING_COMMAND_BLOCK, RESPAWN_ANCHOR, SANDSTONE_STAIRS, SHULKER_BOX, SMITHING_TABLE, SMOKER, SMOOTH_QUARTZ_STAIRS, SMOOTH_RED_SANDSTONE_STAIRS, SMOOTH_SANDSTONE_STAIRS, SOUL_CAMPFIRE, SPRUCE_BUTTON, SPRUCE_DOOR, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_SIGN, SPRUCE_STAIRS, SPRUCE_TRAPDOOR, SPRUCE_WALL_SIGN, STONECUTTER, STONE_BRICK_STAIRS, STONE_BUTTON, STONE_STAIRS, STRUCTURE_BLOCK, SWEET_BERRY_BUSH, TNT, TRAPPED_CHEST, WARPED_BUTTON, WARPED_DOOR, WARPED_FENCE, WARPED_FENCE_GATE, WARPED_SIGN, WARPED_STAIRS, WARPED_TRAPDOOR, WARPED_WALL_SIGN, WHITE_BED, WHITE_SHULKER_BOX, YELLOW_BED, YELLOW_SHULKER_BOX -> true;
+            default -> false;
+        };
     }
 
     /**
@@ -7311,656 +4047,37 @@ public enum Material implements Keyed {
      */
     public float getHardness() {
         Validate.isTrue(isBlock(), "The Material is not a block!");
-        switch (this) {
-            // <editor-fold defaultstate="collapsed" desc="getBlockHardness">
-            case BARRIER:
-            case BEDROCK:
-            case CHAIN_COMMAND_BLOCK:
-            case COMMAND_BLOCK:
-            case END_GATEWAY:
-            case END_PORTAL:
-            case END_PORTAL_FRAME:
-            case JIGSAW:
-            case MOVING_PISTON:
-            case NETHER_PORTAL:
-            case REPEATING_COMMAND_BLOCK:
-            case STRUCTURE_BLOCK:
-                return -1.0F;
-            case BLACK_CARPET:
-            case BLUE_CARPET:
-            case BROWN_CARPET:
-            case CYAN_CARPET:
-            case GRAY_CARPET:
-            case GREEN_CARPET:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_GRAY_CARPET:
-            case LIME_CARPET:
-            case MAGENTA_CARPET:
-            case ORANGE_CARPET:
-            case PINK_CARPET:
-            case PURPLE_CARPET:
-            case RED_CARPET:
-            case SNOW:
-            case WHITE_CARPET:
-            case YELLOW_CARPET:
-                return 0.1F;
-            case ACACIA_LEAVES:
-            case BIRCH_LEAVES:
-            case BLACK_BED:
-            case BLUE_BED:
-            case BROWN_BED:
-            case BROWN_MUSHROOM_BLOCK:
-            case COCOA:
-            case CYAN_BED:
-            case DARK_OAK_LEAVES:
-            case DAYLIGHT_DETECTOR:
-            case GRAY_BED:
-            case GREEN_BED:
-            case JUNGLE_LEAVES:
-            case LIGHT_BLUE_BED:
-            case LIGHT_GRAY_BED:
-            case LIME_BED:
-            case MAGENTA_BED:
-            case MUSHROOM_STEM:
-            case OAK_LEAVES:
-            case ORANGE_BED:
-            case PINK_BED:
-            case PURPLE_BED:
-            case RED_BED:
-            case RED_MUSHROOM_BLOCK:
-            case SNOW_BLOCK:
-            case SPRUCE_LEAVES:
-            case VINE:
-            case WHITE_BED:
-            case YELLOW_BED:
-                return 0.2F;
-            case BEE_NEST:
-            case BLACK_STAINED_GLASS:
-            case BLACK_STAINED_GLASS_PANE:
-            case BLUE_STAINED_GLASS:
-            case BLUE_STAINED_GLASS_PANE:
-            case BROWN_STAINED_GLASS:
-            case BROWN_STAINED_GLASS_PANE:
-            case CYAN_STAINED_GLASS:
-            case CYAN_STAINED_GLASS_PANE:
-            case GLASS:
-            case GLASS_PANE:
-            case GLOWSTONE:
-            case GRAY_STAINED_GLASS:
-            case GRAY_STAINED_GLASS_PANE:
-            case GREEN_STAINED_GLASS:
-            case GREEN_STAINED_GLASS_PANE:
-            case LIGHT_BLUE_STAINED_GLASS:
-            case LIGHT_BLUE_STAINED_GLASS_PANE:
-            case LIGHT_GRAY_STAINED_GLASS:
-            case LIGHT_GRAY_STAINED_GLASS_PANE:
-            case LIME_STAINED_GLASS:
-            case LIME_STAINED_GLASS_PANE:
-            case MAGENTA_STAINED_GLASS:
-            case MAGENTA_STAINED_GLASS_PANE:
-            case ORANGE_STAINED_GLASS:
-            case ORANGE_STAINED_GLASS_PANE:
-            case PINK_STAINED_GLASS:
-            case PINK_STAINED_GLASS_PANE:
-            case PURPLE_STAINED_GLASS:
-            case PURPLE_STAINED_GLASS_PANE:
-            case REDSTONE_LAMP:
-            case RED_STAINED_GLASS:
-            case RED_STAINED_GLASS_PANE:
-            case SEA_LANTERN:
-            case WHITE_STAINED_GLASS:
-            case WHITE_STAINED_GLASS_PANE:
-            case YELLOW_STAINED_GLASS:
-            case YELLOW_STAINED_GLASS_PANE:
-                return 0.3F;
-            case CACTUS:
-            case CHORUS_FLOWER:
-            case CHORUS_PLANT:
-            case CRIMSON_NYLIUM:
-            case LADDER:
-            case NETHERRACK:
-            case WARPED_NYLIUM:
-                return 0.4F;
-            case ACACIA_BUTTON:
-            case ACACIA_PRESSURE_PLATE:
-            case BIRCH_BUTTON:
-            case BIRCH_PRESSURE_PLATE:
-            case BLACK_CONCRETE_POWDER:
-            case BLUE_CONCRETE_POWDER:
-            case BREWING_STAND:
-            case BROWN_CONCRETE_POWDER:
-            case CAKE:
-            case COARSE_DIRT:
-            case CRIMSON_BUTTON:
-            case CRIMSON_PRESSURE_PLATE:
-            case CYAN_CONCRETE_POWDER:
-            case DARK_OAK_BUTTON:
-            case DARK_OAK_PRESSURE_PLATE:
-            case DIRT:
-            case DRIED_KELP_BLOCK:
-            case FROSTED_ICE:
-            case GRAY_CONCRETE_POWDER:
-            case GREEN_CONCRETE_POWDER:
-            case HAY_BLOCK:
-            case HEAVY_WEIGHTED_PRESSURE_PLATE:
-            case ICE:
-            case JUNGLE_BUTTON:
-            case JUNGLE_PRESSURE_PLATE:
-            case LEVER:
-            case LIGHT_BLUE_CONCRETE_POWDER:
-            case LIGHT_GRAY_CONCRETE_POWDER:
-            case LIGHT_WEIGHTED_PRESSURE_PLATE:
-            case LIME_CONCRETE_POWDER:
-            case MAGENTA_CONCRETE_POWDER:
-            case MAGMA_BLOCK:
-            case OAK_BUTTON:
-            case OAK_PRESSURE_PLATE:
-            case ORANGE_CONCRETE_POWDER:
-            case PACKED_ICE:
-            case PINK_CONCRETE_POWDER:
-            case PODZOL:
-            case POLISHED_BLACKSTONE_BUTTON:
-            case POLISHED_BLACKSTONE_PRESSURE_PLATE:
-            case PURPLE_CONCRETE_POWDER:
-            case RED_CONCRETE_POWDER:
-            case RED_SAND:
-            case SAND:
-            case SOUL_SAND:
-            case SOUL_SOIL:
-            case SPRUCE_BUTTON:
-            case SPRUCE_PRESSURE_PLATE:
-            case STONE_BUTTON:
-            case STONE_PRESSURE_PLATE:
-            case TARGET:
-            case TURTLE_EGG:
-            case WARPED_BUTTON:
-            case WARPED_PRESSURE_PLATE:
-            case WHITE_CONCRETE_POWDER:
-            case YELLOW_CONCRETE_POWDER:
-                return 0.5F;
-            case BEEHIVE:
-            case CLAY:
-            case COMPOSTER:
-            case FARMLAND:
-            case GRASS_BLOCK:
-            case GRAVEL:
-            case HONEYCOMB_BLOCK:
-            case MYCELIUM:
-            case SPONGE:
-            case WET_SPONGE:
-                return 0.6F;
-            case GRASS_PATH:
-                return 0.65F;
-            case ACTIVATOR_RAIL:
-            case DETECTOR_RAIL:
-            case POWERED_RAIL:
-            case RAIL:
-                return 0.7F;
-            case BLACK_WOOL:
-            case BLUE_WOOL:
-            case BROWN_WOOL:
-            case CHISELED_QUARTZ_BLOCK:
-            case CHISELED_RED_SANDSTONE:
-            case CHISELED_SANDSTONE:
-            case CUT_RED_SANDSTONE:
-            case CUT_SANDSTONE:
-            case CYAN_WOOL:
-            case GRAY_WOOL:
-            case GREEN_WOOL:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_WOOL:
-            case LIME_WOOL:
-            case MAGENTA_WOOL:
-            case NOTE_BLOCK:
-            case ORANGE_WOOL:
-            case PINK_WOOL:
-            case PURPLE_WOOL:
-            case QUARTZ_BLOCK:
-            case QUARTZ_BRICKS:
-            case QUARTZ_PILLAR:
-            case QUARTZ_STAIRS:
-            case RED_SANDSTONE:
-            case RED_SANDSTONE_STAIRS:
-            case RED_SANDSTONE_WALL:
-            case RED_WOOL:
-            case SANDSTONE:
-            case SANDSTONE_STAIRS:
-            case SANDSTONE_WALL:
-            case WHITE_WOOL:
-            case YELLOW_WOOL:
-                return 0.8F;
-            case ACACIA_SIGN:
-            case ACACIA_WALL_SIGN:
-            case BAMBOO:
-            case BAMBOO_SAPLING:
-            case BIRCH_SIGN:
-            case BIRCH_WALL_SIGN:
-            case BLACK_BANNER:
-            case BLACK_WALL_BANNER:
-            case BLUE_BANNER:
-            case BLUE_WALL_BANNER:
-            case BROWN_BANNER:
-            case BROWN_WALL_BANNER:
-            case CARVED_PUMPKIN:
-            case CREEPER_HEAD:
-            case CREEPER_WALL_HEAD:
-            case CRIMSON_SIGN:
-            case CRIMSON_WALL_SIGN:
-            case CYAN_BANNER:
-            case CYAN_WALL_BANNER:
-            case DARK_OAK_SIGN:
-            case DARK_OAK_WALL_SIGN:
-            case DRAGON_HEAD:
-            case DRAGON_WALL_HEAD:
-            case GRAY_BANNER:
-            case GRAY_WALL_BANNER:
-            case GREEN_BANNER:
-            case GREEN_WALL_BANNER:
-            case JACK_O_LANTERN:
-            case JUNGLE_SIGN:
-            case JUNGLE_WALL_SIGN:
-            case LIGHT_BLUE_BANNER:
-            case LIGHT_BLUE_WALL_BANNER:
-            case LIGHT_GRAY_BANNER:
-            case LIGHT_GRAY_WALL_BANNER:
-            case LIME_BANNER:
-            case LIME_WALL_BANNER:
-            case MAGENTA_BANNER:
-            case MAGENTA_WALL_BANNER:
-            case MELON:
-            case NETHER_WART_BLOCK:
-            case OAK_SIGN:
-            case OAK_WALL_SIGN:
-            case ORANGE_BANNER:
-            case ORANGE_WALL_BANNER:
-            case PINK_BANNER:
-            case PINK_WALL_BANNER:
-            case PLAYER_HEAD:
-            case PLAYER_WALL_HEAD:
-            case PUMPKIN:
-            case PURPLE_BANNER:
-            case PURPLE_WALL_BANNER:
-            case RED_BANNER:
-            case RED_WALL_BANNER:
-            case SHROOMLIGHT:
-            case SKELETON_SKULL:
-            case SKELETON_WALL_SKULL:
-            case SPRUCE_SIGN:
-            case SPRUCE_WALL_SIGN:
-            case WARPED_SIGN:
-            case WARPED_WALL_SIGN:
-            case WARPED_WART_BLOCK:
-            case WHITE_BANNER:
-            case WHITE_WALL_BANNER:
-            case WITHER_SKELETON_SKULL:
-            case WITHER_SKELETON_WALL_SKULL:
-            case YELLOW_BANNER:
-            case YELLOW_WALL_BANNER:
-            case ZOMBIE_HEAD:
-            case ZOMBIE_WALL_HEAD:
-                return 1.0F;
-            case BASALT:
-            case BLACK_TERRACOTTA:
-            case BLUE_TERRACOTTA:
-            case BROWN_TERRACOTTA:
-            case CYAN_TERRACOTTA:
-            case GRAY_TERRACOTTA:
-            case GREEN_TERRACOTTA:
-            case LIGHT_BLUE_TERRACOTTA:
-            case LIGHT_GRAY_TERRACOTTA:
-            case LIME_TERRACOTTA:
-            case MAGENTA_TERRACOTTA:
-            case ORANGE_TERRACOTTA:
-            case PINK_TERRACOTTA:
-            case POLISHED_BASALT:
-            case PURPLE_TERRACOTTA:
-            case RED_TERRACOTTA:
-            case TERRACOTTA:
-            case WHITE_TERRACOTTA:
-            case YELLOW_TERRACOTTA:
-                return 1.25F;
-            case BLACK_GLAZED_TERRACOTTA:
-            case BLUE_GLAZED_TERRACOTTA:
-            case BROWN_GLAZED_TERRACOTTA:
-            case CYAN_GLAZED_TERRACOTTA:
-            case GRAY_GLAZED_TERRACOTTA:
-            case GREEN_GLAZED_TERRACOTTA:
-            case LIGHT_BLUE_GLAZED_TERRACOTTA:
-            case LIGHT_GRAY_GLAZED_TERRACOTTA:
-            case LIME_GLAZED_TERRACOTTA:
-            case MAGENTA_GLAZED_TERRACOTTA:
-            case ORANGE_GLAZED_TERRACOTTA:
-            case PINK_GLAZED_TERRACOTTA:
-            case PURPLE_GLAZED_TERRACOTTA:
-            case RED_GLAZED_TERRACOTTA:
-            case WHITE_GLAZED_TERRACOTTA:
-            case YELLOW_GLAZED_TERRACOTTA:
-                return 1.4F;
-            case ANDESITE:
-            case ANDESITE_SLAB:
-            case ANDESITE_STAIRS:
-            case ANDESITE_WALL:
-            case BLACKSTONE:
-            case BLACKSTONE_STAIRS:
-            case BLACKSTONE_WALL:
-            case BOOKSHELF:
-            case BRAIN_CORAL_BLOCK:
-            case BUBBLE_CORAL_BLOCK:
-            case CHISELED_POLISHED_BLACKSTONE:
-            case CHISELED_STONE_BRICKS:
-            case CRACKED_POLISHED_BLACKSTONE_BRICKS:
-            case CRACKED_STONE_BRICKS:
-            case DARK_PRISMARINE:
-            case DARK_PRISMARINE_SLAB:
-            case DARK_PRISMARINE_STAIRS:
-            case DEAD_BRAIN_CORAL_BLOCK:
-            case DEAD_BUBBLE_CORAL_BLOCK:
-            case DEAD_FIRE_CORAL_BLOCK:
-            case DEAD_HORN_CORAL_BLOCK:
-            case DEAD_TUBE_CORAL_BLOCK:
-            case DIORITE:
-            case DIORITE_SLAB:
-            case DIORITE_STAIRS:
-            case DIORITE_WALL:
-            case FIRE_CORAL_BLOCK:
-            case GILDED_BLACKSTONE:
-            case GRANITE:
-            case GRANITE_SLAB:
-            case GRANITE_STAIRS:
-            case GRANITE_WALL:
-            case HORN_CORAL_BLOCK:
-            case MOSSY_STONE_BRICKS:
-            case MOSSY_STONE_BRICK_SLAB:
-            case MOSSY_STONE_BRICK_STAIRS:
-            case MOSSY_STONE_BRICK_WALL:
-            case PISTON:
-            case PISTON_HEAD:
-            case POLISHED_ANDESITE:
-            case POLISHED_ANDESITE_SLAB:
-            case POLISHED_ANDESITE_STAIRS:
-            case POLISHED_BLACKSTONE_BRICKS:
-            case POLISHED_BLACKSTONE_BRICK_STAIRS:
-            case POLISHED_BLACKSTONE_BRICK_WALL:
-            case POLISHED_DIORITE:
-            case POLISHED_DIORITE_SLAB:
-            case POLISHED_DIORITE_STAIRS:
-            case POLISHED_GRANITE:
-            case POLISHED_GRANITE_SLAB:
-            case POLISHED_GRANITE_STAIRS:
-            case PRISMARINE:
-            case PRISMARINE_BRICKS:
-            case PRISMARINE_BRICK_SLAB:
-            case PRISMARINE_BRICK_STAIRS:
-            case PRISMARINE_SLAB:
-            case PRISMARINE_STAIRS:
-            case PRISMARINE_WALL:
-            case PURPUR_BLOCK:
-            case PURPUR_PILLAR:
-            case PURPUR_STAIRS:
-            case STICKY_PISTON:
-            case STONE:
-            case STONE_BRICKS:
-            case STONE_BRICK_STAIRS:
-            case STONE_BRICK_WALL:
-            case STONE_STAIRS:
-            case TUBE_CORAL_BLOCK:
-                return 1.5F;
-            case BLACK_CONCRETE:
-            case BLUE_CONCRETE:
-            case BROWN_CONCRETE:
-            case CYAN_CONCRETE:
-            case GRAY_CONCRETE:
-            case GREEN_CONCRETE:
-            case LIGHT_BLUE_CONCRETE:
-            case LIGHT_GRAY_CONCRETE:
-            case LIME_CONCRETE:
-            case MAGENTA_CONCRETE:
-            case ORANGE_CONCRETE:
-            case PINK_CONCRETE:
-            case PURPLE_CONCRETE:
-            case RED_CONCRETE:
-            case WHITE_CONCRETE:
-            case YELLOW_CONCRETE:
-                return 1.8F;
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_LOG:
-            case ACACIA_PLANKS:
-            case ACACIA_SLAB:
-            case ACACIA_STAIRS:
-            case ACACIA_WOOD:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_LOG:
-            case BIRCH_PLANKS:
-            case BIRCH_SLAB:
-            case BIRCH_STAIRS:
-            case BIRCH_WOOD:
-            case BLACKSTONE_SLAB:
-            case BLACK_SHULKER_BOX:
-            case BLUE_SHULKER_BOX:
-            case BONE_BLOCK:
-            case BRICKS:
-            case BRICK_SLAB:
-            case BRICK_STAIRS:
-            case BRICK_WALL:
-            case BROWN_SHULKER_BOX:
-            case CAMPFIRE:
-            case CAULDRON:
-            case CHISELED_NETHER_BRICKS:
-            case COBBLESTONE:
-            case COBBLESTONE_SLAB:
-            case COBBLESTONE_STAIRS:
-            case COBBLESTONE_WALL:
-            case CRACKED_NETHER_BRICKS:
-            case CRIMSON_FENCE:
-            case CRIMSON_FENCE_GATE:
-            case CRIMSON_HYPHAE:
-            case CRIMSON_PLANKS:
-            case CRIMSON_SLAB:
-            case CRIMSON_STAIRS:
-            case CRIMSON_STEM:
-            case CUT_RED_SANDSTONE_SLAB:
-            case CUT_SANDSTONE_SLAB:
-            case CYAN_SHULKER_BOX:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_LOG:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_SLAB:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_WOOD:
-            case GRAY_SHULKER_BOX:
-            case GREEN_SHULKER_BOX:
-            case GRINDSTONE:
-            case JUKEBOX:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_LOG:
-            case JUNGLE_PLANKS:
-            case JUNGLE_SLAB:
-            case JUNGLE_STAIRS:
-            case JUNGLE_WOOD:
-            case LIGHT_BLUE_SHULKER_BOX:
-            case LIGHT_GRAY_SHULKER_BOX:
-            case LIME_SHULKER_BOX:
-            case MAGENTA_SHULKER_BOX:
-            case MOSSY_COBBLESTONE:
-            case MOSSY_COBBLESTONE_SLAB:
-            case MOSSY_COBBLESTONE_STAIRS:
-            case MOSSY_COBBLESTONE_WALL:
-            case NETHER_BRICKS:
-            case NETHER_BRICK_FENCE:
-            case NETHER_BRICK_SLAB:
-            case NETHER_BRICK_STAIRS:
-            case NETHER_BRICK_WALL:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_LOG:
-            case OAK_PLANKS:
-            case OAK_SLAB:
-            case OAK_STAIRS:
-            case OAK_WOOD:
-            case ORANGE_SHULKER_BOX:
-            case PETRIFIED_OAK_SLAB:
-            case PINK_SHULKER_BOX:
-            case POLISHED_BLACKSTONE:
-            case POLISHED_BLACKSTONE_BRICK_SLAB:
-            case POLISHED_BLACKSTONE_SLAB:
-            case POLISHED_BLACKSTONE_STAIRS:
-            case POLISHED_BLACKSTONE_WALL:
-            case PURPLE_SHULKER_BOX:
-            case PURPUR_SLAB:
-            case QUARTZ_SLAB:
-            case RED_NETHER_BRICKS:
-            case RED_NETHER_BRICK_SLAB:
-            case RED_NETHER_BRICK_STAIRS:
-            case RED_NETHER_BRICK_WALL:
-            case RED_SANDSTONE_SLAB:
-            case RED_SHULKER_BOX:
-            case SANDSTONE_SLAB:
-            case SHULKER_BOX:
-            case SMOOTH_QUARTZ:
-            case SMOOTH_QUARTZ_SLAB:
-            case SMOOTH_QUARTZ_STAIRS:
-            case SMOOTH_RED_SANDSTONE:
-            case SMOOTH_RED_SANDSTONE_SLAB:
-            case SMOOTH_RED_SANDSTONE_STAIRS:
-            case SMOOTH_SANDSTONE:
-            case SMOOTH_SANDSTONE_SLAB:
-            case SMOOTH_SANDSTONE_STAIRS:
-            case SMOOTH_STONE:
-            case SMOOTH_STONE_SLAB:
-            case SOUL_CAMPFIRE:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_LOG:
-            case SPRUCE_PLANKS:
-            case SPRUCE_SLAB:
-            case SPRUCE_STAIRS:
-            case SPRUCE_WOOD:
-            case STONE_BRICK_SLAB:
-            case STONE_SLAB:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_CRIMSON_HYPHAE:
-            case STRIPPED_CRIMSON_STEM:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case STRIPPED_WARPED_HYPHAE:
-            case STRIPPED_WARPED_STEM:
-            case WARPED_FENCE:
-            case WARPED_FENCE_GATE:
-            case WARPED_HYPHAE:
-            case WARPED_PLANKS:
-            case WARPED_SLAB:
-            case WARPED_STAIRS:
-            case WARPED_STEM:
-            case WHITE_SHULKER_BOX:
-            case YELLOW_SHULKER_BOX:
-                return 2.0F;
-            case BARREL:
-            case CARTOGRAPHY_TABLE:
-            case CHEST:
-            case CRAFTING_TABLE:
-            case FLETCHING_TABLE:
-            case LECTERN:
-            case LOOM:
-            case SMITHING_TABLE:
-            case TRAPPED_CHEST:
-                return 2.5F;
-            case BLUE_ICE:
-                return 2.8F;
-            case ACACIA_DOOR:
-            case ACACIA_TRAPDOOR:
-            case BEACON:
-            case BIRCH_DOOR:
-            case BIRCH_TRAPDOOR:
-            case COAL_ORE:
-            case CONDUIT:
-            case CRIMSON_DOOR:
-            case CRIMSON_TRAPDOOR:
-            case DARK_OAK_DOOR:
-            case DARK_OAK_TRAPDOOR:
-            case DIAMOND_ORE:
-            case DRAGON_EGG:
-            case EMERALD_ORE:
-            case END_STONE:
-            case END_STONE_BRICKS:
-            case END_STONE_BRICK_SLAB:
-            case END_STONE_BRICK_STAIRS:
-            case END_STONE_BRICK_WALL:
-            case GOLD_BLOCK:
-            case GOLD_ORE:
-            case HOPPER:
-            case IRON_ORE:
-            case JUNGLE_DOOR:
-            case JUNGLE_TRAPDOOR:
-            case LAPIS_BLOCK:
-            case LAPIS_ORE:
-            case NETHER_GOLD_ORE:
-            case NETHER_QUARTZ_ORE:
-            case OAK_DOOR:
-            case OAK_TRAPDOOR:
-            case OBSERVER:
-            case REDSTONE_ORE:
-            case SPRUCE_DOOR:
-            case SPRUCE_TRAPDOOR:
-            case WARPED_DOOR:
-            case WARPED_TRAPDOOR:
-                return 3.0F;
-            case BLAST_FURNACE:
-            case DISPENSER:
-            case DROPPER:
-            case FURNACE:
-            case LANTERN:
-            case LODESTONE:
-            case SMOKER:
-            case SOUL_LANTERN:
-            case STONECUTTER:
-                return 3.5F;
-            case COBWEB:
-                return 4.0F;
-            case ANVIL:
-            case BELL:
-            case CHAIN:
-            case CHIPPED_ANVIL:
-            case COAL_BLOCK:
-            case DAMAGED_ANVIL:
-            case DIAMOND_BLOCK:
-            case EMERALD_BLOCK:
-            case ENCHANTING_TABLE:
-            case IRON_BARS:
-            case IRON_BLOCK:
-            case IRON_DOOR:
-            case IRON_TRAPDOOR:
-            case REDSTONE_BLOCK:
-            case SPAWNER:
-                return 5.0F;
-            case ENDER_CHEST:
-                return 22.5F;
-            case ANCIENT_DEBRIS:
-                return 30.0F;
-            case CRYING_OBSIDIAN:
-            case NETHERITE_BLOCK:
-            case OBSIDIAN:
-            case RESPAWN_ANCHOR:
-                return 50.0F;
-            case LAVA:
-            case WATER:
-                return 100.0F;
-            default:
-                return 0F;
-            // </editor-fold>
-        }
+        // <editor-fold defaultstate="collapsed" desc="getBlockHardness">
+        // </editor-fold>
+        return switch (this) {
+            case BARRIER, BEDROCK, CHAIN_COMMAND_BLOCK, COMMAND_BLOCK, END_GATEWAY, END_PORTAL, END_PORTAL_FRAME, JIGSAW, MOVING_PISTON, NETHER_PORTAL, REPEATING_COMMAND_BLOCK, STRUCTURE_BLOCK -> -1.0F;
+            case BLACK_CARPET, BLUE_CARPET, BROWN_CARPET, CYAN_CARPET, GRAY_CARPET, GREEN_CARPET, LIGHT_BLUE_CARPET, LIGHT_GRAY_CARPET, LIME_CARPET, MAGENTA_CARPET, ORANGE_CARPET, PINK_CARPET, PURPLE_CARPET, RED_CARPET, SNOW, WHITE_CARPET, YELLOW_CARPET -> 0.1F;
+            case ACACIA_LEAVES, BIRCH_LEAVES, BLACK_BED, BLUE_BED, BROWN_BED, BROWN_MUSHROOM_BLOCK, COCOA, CYAN_BED, DARK_OAK_LEAVES, DAYLIGHT_DETECTOR, GRAY_BED, GREEN_BED, JUNGLE_LEAVES, LIGHT_BLUE_BED, LIGHT_GRAY_BED, LIME_BED, MAGENTA_BED, MUSHROOM_STEM, OAK_LEAVES, ORANGE_BED, PINK_BED, PURPLE_BED, RED_BED, RED_MUSHROOM_BLOCK, SNOW_BLOCK, SPRUCE_LEAVES, VINE, WHITE_BED, YELLOW_BED -> 0.2F;
+            case BEE_NEST, BLACK_STAINED_GLASS, BLACK_STAINED_GLASS_PANE, BLUE_STAINED_GLASS, BLUE_STAINED_GLASS_PANE, BROWN_STAINED_GLASS, BROWN_STAINED_GLASS_PANE, CYAN_STAINED_GLASS, CYAN_STAINED_GLASS_PANE, GLASS, GLASS_PANE, GLOWSTONE, GRAY_STAINED_GLASS, GRAY_STAINED_GLASS_PANE, GREEN_STAINED_GLASS, GREEN_STAINED_GLASS_PANE, LIGHT_BLUE_STAINED_GLASS, LIGHT_BLUE_STAINED_GLASS_PANE, LIGHT_GRAY_STAINED_GLASS, LIGHT_GRAY_STAINED_GLASS_PANE, LIME_STAINED_GLASS, LIME_STAINED_GLASS_PANE, MAGENTA_STAINED_GLASS, MAGENTA_STAINED_GLASS_PANE, ORANGE_STAINED_GLASS, ORANGE_STAINED_GLASS_PANE, PINK_STAINED_GLASS, PINK_STAINED_GLASS_PANE, PURPLE_STAINED_GLASS, PURPLE_STAINED_GLASS_PANE, REDSTONE_LAMP, RED_STAINED_GLASS, RED_STAINED_GLASS_PANE, SEA_LANTERN, WHITE_STAINED_GLASS, WHITE_STAINED_GLASS_PANE, YELLOW_STAINED_GLASS, YELLOW_STAINED_GLASS_PANE -> 0.3F;
+            case CACTUS, CHORUS_FLOWER, CHORUS_PLANT, CRIMSON_NYLIUM, LADDER, NETHERRACK, WARPED_NYLIUM -> 0.4F;
+            case ACACIA_BUTTON, ACACIA_PRESSURE_PLATE, BIRCH_BUTTON, BIRCH_PRESSURE_PLATE, BLACK_CONCRETE_POWDER, BLUE_CONCRETE_POWDER, BREWING_STAND, BROWN_CONCRETE_POWDER, CAKE, COARSE_DIRT, CRIMSON_BUTTON, CRIMSON_PRESSURE_PLATE, CYAN_CONCRETE_POWDER, DARK_OAK_BUTTON, DARK_OAK_PRESSURE_PLATE, DIRT, DRIED_KELP_BLOCK, FROSTED_ICE, GRAY_CONCRETE_POWDER, GREEN_CONCRETE_POWDER, HAY_BLOCK, HEAVY_WEIGHTED_PRESSURE_PLATE, ICE, JUNGLE_BUTTON, JUNGLE_PRESSURE_PLATE, LEVER, LIGHT_BLUE_CONCRETE_POWDER, LIGHT_GRAY_CONCRETE_POWDER, LIGHT_WEIGHTED_PRESSURE_PLATE, LIME_CONCRETE_POWDER, MAGENTA_CONCRETE_POWDER, MAGMA_BLOCK, OAK_BUTTON, OAK_PRESSURE_PLATE, ORANGE_CONCRETE_POWDER, PACKED_ICE, PINK_CONCRETE_POWDER, PODZOL, POLISHED_BLACKSTONE_BUTTON, POLISHED_BLACKSTONE_PRESSURE_PLATE, PURPLE_CONCRETE_POWDER, RED_CONCRETE_POWDER, RED_SAND, SAND, SOUL_SAND, SOUL_SOIL, SPRUCE_BUTTON, SPRUCE_PRESSURE_PLATE, STONE_BUTTON, STONE_PRESSURE_PLATE, TARGET, TURTLE_EGG, WARPED_BUTTON, WARPED_PRESSURE_PLATE, WHITE_CONCRETE_POWDER, YELLOW_CONCRETE_POWDER -> 0.5F;
+            case BEEHIVE, CLAY, COMPOSTER, FARMLAND, GRASS_BLOCK, GRAVEL, HONEYCOMB_BLOCK, MYCELIUM, SPONGE, WET_SPONGE -> 0.6F;
+            case GRASS_PATH -> 0.65F;
+            case ACTIVATOR_RAIL, DETECTOR_RAIL, POWERED_RAIL, RAIL -> 0.7F;
+            case BLACK_WOOL, BLUE_WOOL, BROWN_WOOL, CHISELED_QUARTZ_BLOCK, CHISELED_RED_SANDSTONE, CHISELED_SANDSTONE, CUT_RED_SANDSTONE, CUT_SANDSTONE, CYAN_WOOL, GRAY_WOOL, GREEN_WOOL, LIGHT_BLUE_WOOL, LIGHT_GRAY_WOOL, LIME_WOOL, MAGENTA_WOOL, NOTE_BLOCK, ORANGE_WOOL, PINK_WOOL, PURPLE_WOOL, QUARTZ_BLOCK, QUARTZ_BRICKS, QUARTZ_PILLAR, QUARTZ_STAIRS, RED_SANDSTONE, RED_SANDSTONE_STAIRS, RED_SANDSTONE_WALL, RED_WOOL, SANDSTONE, SANDSTONE_STAIRS, SANDSTONE_WALL, WHITE_WOOL, YELLOW_WOOL -> 0.8F;
+            case ACACIA_SIGN, ACACIA_WALL_SIGN, BAMBOO, BAMBOO_SAPLING, BIRCH_SIGN, BIRCH_WALL_SIGN, BLACK_BANNER, BLACK_WALL_BANNER, BLUE_BANNER, BLUE_WALL_BANNER, BROWN_BANNER, BROWN_WALL_BANNER, CARVED_PUMPKIN, CREEPER_HEAD, CREEPER_WALL_HEAD, CRIMSON_SIGN, CRIMSON_WALL_SIGN, CYAN_BANNER, CYAN_WALL_BANNER, DARK_OAK_SIGN, DARK_OAK_WALL_SIGN, DRAGON_HEAD, DRAGON_WALL_HEAD, GRAY_BANNER, GRAY_WALL_BANNER, GREEN_BANNER, GREEN_WALL_BANNER, JACK_O_LANTERN, JUNGLE_SIGN, JUNGLE_WALL_SIGN, LIGHT_BLUE_BANNER, LIGHT_BLUE_WALL_BANNER, LIGHT_GRAY_BANNER, LIGHT_GRAY_WALL_BANNER, LIME_BANNER, LIME_WALL_BANNER, MAGENTA_BANNER, MAGENTA_WALL_BANNER, MELON, NETHER_WART_BLOCK, OAK_SIGN, OAK_WALL_SIGN, ORANGE_BANNER, ORANGE_WALL_BANNER, PINK_BANNER, PINK_WALL_BANNER, PLAYER_HEAD, PLAYER_WALL_HEAD, PUMPKIN, PURPLE_BANNER, PURPLE_WALL_BANNER, RED_BANNER, RED_WALL_BANNER, SHROOMLIGHT, SKELETON_SKULL, SKELETON_WALL_SKULL, SPRUCE_SIGN, SPRUCE_WALL_SIGN, WARPED_SIGN, WARPED_WALL_SIGN, WARPED_WART_BLOCK, WHITE_BANNER, WHITE_WALL_BANNER, WITHER_SKELETON_SKULL, WITHER_SKELETON_WALL_SKULL, YELLOW_BANNER, YELLOW_WALL_BANNER, ZOMBIE_HEAD, ZOMBIE_WALL_HEAD -> 1.0F;
+            case BASALT, BLACK_TERRACOTTA, BLUE_TERRACOTTA, BROWN_TERRACOTTA, CYAN_TERRACOTTA, GRAY_TERRACOTTA, GREEN_TERRACOTTA, LIGHT_BLUE_TERRACOTTA, LIGHT_GRAY_TERRACOTTA, LIME_TERRACOTTA, MAGENTA_TERRACOTTA, ORANGE_TERRACOTTA, PINK_TERRACOTTA, POLISHED_BASALT, PURPLE_TERRACOTTA, RED_TERRACOTTA, TERRACOTTA, WHITE_TERRACOTTA, YELLOW_TERRACOTTA -> 1.25F;
+            case BLACK_GLAZED_TERRACOTTA, BLUE_GLAZED_TERRACOTTA, BROWN_GLAZED_TERRACOTTA, CYAN_GLAZED_TERRACOTTA, GRAY_GLAZED_TERRACOTTA, GREEN_GLAZED_TERRACOTTA, LIGHT_BLUE_GLAZED_TERRACOTTA, LIGHT_GRAY_GLAZED_TERRACOTTA, LIME_GLAZED_TERRACOTTA, MAGENTA_GLAZED_TERRACOTTA, ORANGE_GLAZED_TERRACOTTA, PINK_GLAZED_TERRACOTTA, PURPLE_GLAZED_TERRACOTTA, RED_GLAZED_TERRACOTTA, WHITE_GLAZED_TERRACOTTA, YELLOW_GLAZED_TERRACOTTA -> 1.4F;
+            case ANDESITE, ANDESITE_SLAB, ANDESITE_STAIRS, ANDESITE_WALL, BLACKSTONE, BLACKSTONE_STAIRS, BLACKSTONE_WALL, BOOKSHELF, BRAIN_CORAL_BLOCK, BUBBLE_CORAL_BLOCK, CHISELED_POLISHED_BLACKSTONE, CHISELED_STONE_BRICKS, CRACKED_POLISHED_BLACKSTONE_BRICKS, CRACKED_STONE_BRICKS, DARK_PRISMARINE, DARK_PRISMARINE_SLAB, DARK_PRISMARINE_STAIRS, DEAD_BRAIN_CORAL_BLOCK, DEAD_BUBBLE_CORAL_BLOCK, DEAD_FIRE_CORAL_BLOCK, DEAD_HORN_CORAL_BLOCK, DEAD_TUBE_CORAL_BLOCK, DIORITE, DIORITE_SLAB, DIORITE_STAIRS, DIORITE_WALL, FIRE_CORAL_BLOCK, GILDED_BLACKSTONE, GRANITE, GRANITE_SLAB, GRANITE_STAIRS, GRANITE_WALL, HORN_CORAL_BLOCK, MOSSY_STONE_BRICKS, MOSSY_STONE_BRICK_SLAB, MOSSY_STONE_BRICK_STAIRS, MOSSY_STONE_BRICK_WALL, PISTON, PISTON_HEAD, POLISHED_ANDESITE, POLISHED_ANDESITE_SLAB, POLISHED_ANDESITE_STAIRS, POLISHED_BLACKSTONE_BRICKS, POLISHED_BLACKSTONE_BRICK_STAIRS, POLISHED_BLACKSTONE_BRICK_WALL, POLISHED_DIORITE, POLISHED_DIORITE_SLAB, POLISHED_DIORITE_STAIRS, POLISHED_GRANITE, POLISHED_GRANITE_SLAB, POLISHED_GRANITE_STAIRS, PRISMARINE, PRISMARINE_BRICKS, PRISMARINE_BRICK_SLAB, PRISMARINE_BRICK_STAIRS, PRISMARINE_SLAB, PRISMARINE_STAIRS, PRISMARINE_WALL, PURPUR_BLOCK, PURPUR_PILLAR, PURPUR_STAIRS, STICKY_PISTON, STONE, STONE_BRICKS, STONE_BRICK_STAIRS, STONE_BRICK_WALL, STONE_STAIRS, TUBE_CORAL_BLOCK -> 1.5F;
+            case BLACK_CONCRETE, BLUE_CONCRETE, BROWN_CONCRETE, CYAN_CONCRETE, GRAY_CONCRETE, GREEN_CONCRETE, LIGHT_BLUE_CONCRETE, LIGHT_GRAY_CONCRETE, LIME_CONCRETE, MAGENTA_CONCRETE, ORANGE_CONCRETE, PINK_CONCRETE, PURPLE_CONCRETE, RED_CONCRETE, WHITE_CONCRETE, YELLOW_CONCRETE -> 1.8F;
+            case ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_LOG, ACACIA_PLANKS, ACACIA_SLAB, ACACIA_STAIRS, ACACIA_WOOD, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_LOG, BIRCH_PLANKS, BIRCH_SLAB, BIRCH_STAIRS, BIRCH_WOOD, BLACKSTONE_SLAB, BLACK_SHULKER_BOX, BLUE_SHULKER_BOX, BONE_BLOCK, BRICKS, BRICK_SLAB, BRICK_STAIRS, BRICK_WALL, BROWN_SHULKER_BOX, CAMPFIRE, CAULDRON, CHISELED_NETHER_BRICKS, COBBLESTONE, COBBLESTONE_SLAB, COBBLESTONE_STAIRS, COBBLESTONE_WALL, CRACKED_NETHER_BRICKS, CRIMSON_FENCE, CRIMSON_FENCE_GATE, CRIMSON_HYPHAE, CRIMSON_PLANKS, CRIMSON_SLAB, CRIMSON_STAIRS, CRIMSON_STEM, CUT_RED_SANDSTONE_SLAB, CUT_SANDSTONE_SLAB, CYAN_SHULKER_BOX, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_LOG, DARK_OAK_PLANKS, DARK_OAK_SLAB, DARK_OAK_STAIRS, DARK_OAK_WOOD, GRAY_SHULKER_BOX, GREEN_SHULKER_BOX, GRINDSTONE, JUKEBOX, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_LOG, JUNGLE_PLANKS, JUNGLE_SLAB, JUNGLE_STAIRS, JUNGLE_WOOD, LIGHT_BLUE_SHULKER_BOX, LIGHT_GRAY_SHULKER_BOX, LIME_SHULKER_BOX, MAGENTA_SHULKER_BOX, MOSSY_COBBLESTONE, MOSSY_COBBLESTONE_SLAB, MOSSY_COBBLESTONE_STAIRS, MOSSY_COBBLESTONE_WALL, NETHER_BRICKS, NETHER_BRICK_FENCE, NETHER_BRICK_SLAB, NETHER_BRICK_STAIRS, NETHER_BRICK_WALL, OAK_FENCE, OAK_FENCE_GATE, OAK_LOG, OAK_PLANKS, OAK_SLAB, OAK_STAIRS, OAK_WOOD, ORANGE_SHULKER_BOX, PETRIFIED_OAK_SLAB, PINK_SHULKER_BOX, POLISHED_BLACKSTONE, POLISHED_BLACKSTONE_BRICK_SLAB, POLISHED_BLACKSTONE_SLAB, POLISHED_BLACKSTONE_STAIRS, POLISHED_BLACKSTONE_WALL, PURPLE_SHULKER_BOX, PURPUR_SLAB, QUARTZ_SLAB, RED_NETHER_BRICKS, RED_NETHER_BRICK_SLAB, RED_NETHER_BRICK_STAIRS, RED_NETHER_BRICK_WALL, RED_SANDSTONE_SLAB, RED_SHULKER_BOX, SANDSTONE_SLAB, SHULKER_BOX, SMOOTH_QUARTZ, SMOOTH_QUARTZ_SLAB, SMOOTH_QUARTZ_STAIRS, SMOOTH_RED_SANDSTONE, SMOOTH_RED_SANDSTONE_SLAB, SMOOTH_RED_SANDSTONE_STAIRS, SMOOTH_SANDSTONE, SMOOTH_SANDSTONE_SLAB, SMOOTH_SANDSTONE_STAIRS, SMOOTH_STONE, SMOOTH_STONE_SLAB, SOUL_CAMPFIRE, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_LOG, SPRUCE_PLANKS, SPRUCE_SLAB, SPRUCE_STAIRS, SPRUCE_WOOD, STONE_BRICK_SLAB, STONE_SLAB, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_CRIMSON_HYPHAE, STRIPPED_CRIMSON_STEM, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, STRIPPED_WARPED_HYPHAE, STRIPPED_WARPED_STEM, WARPED_FENCE, WARPED_FENCE_GATE, WARPED_HYPHAE, WARPED_PLANKS, WARPED_SLAB, WARPED_STAIRS, WARPED_STEM, WHITE_SHULKER_BOX, YELLOW_SHULKER_BOX -> 2.0F;
+            case BARREL, CARTOGRAPHY_TABLE, CHEST, CRAFTING_TABLE, FLETCHING_TABLE, LECTERN, LOOM, SMITHING_TABLE, TRAPPED_CHEST -> 2.5F;
+            case BLUE_ICE -> 2.8F;
+            case ACACIA_DOOR, ACACIA_TRAPDOOR, BEACON, BIRCH_DOOR, BIRCH_TRAPDOOR, COAL_ORE, CONDUIT, CRIMSON_DOOR, CRIMSON_TRAPDOOR, DARK_OAK_DOOR, DARK_OAK_TRAPDOOR, DIAMOND_ORE, DRAGON_EGG, EMERALD_ORE, END_STONE, END_STONE_BRICKS, END_STONE_BRICK_SLAB, END_STONE_BRICK_STAIRS, END_STONE_BRICK_WALL, GOLD_BLOCK, GOLD_ORE, HOPPER, IRON_ORE, JUNGLE_DOOR, JUNGLE_TRAPDOOR, LAPIS_BLOCK, LAPIS_ORE, NETHER_GOLD_ORE, NETHER_QUARTZ_ORE, OAK_DOOR, OAK_TRAPDOOR, OBSERVER, REDSTONE_ORE, SPRUCE_DOOR, SPRUCE_TRAPDOOR, WARPED_DOOR, WARPED_TRAPDOOR -> 3.0F;
+            case BLAST_FURNACE, DISPENSER, DROPPER, FURNACE, LANTERN, LODESTONE, SMOKER, SOUL_LANTERN, STONECUTTER -> 3.5F;
+            case COBWEB -> 4.0F;
+            case ANVIL, BELL, CHAIN, CHIPPED_ANVIL, COAL_BLOCK, DAMAGED_ANVIL, DIAMOND_BLOCK, EMERALD_BLOCK, ENCHANTING_TABLE, IRON_BARS, IRON_BLOCK, IRON_DOOR, IRON_TRAPDOOR, REDSTONE_BLOCK, SPAWNER -> 5.0F;
+            case ENDER_CHEST -> 22.5F;
+            case ANCIENT_DEBRIS -> 30.0F;
+            case CRYING_OBSIDIAN, NETHERITE_BLOCK, OBSIDIAN, RESPAWN_ANCHOR -> 50.0F;
+            case LAVA, WATER -> 100.0F;
+            default -> 0F;
+        };
     }
 
     /**
@@ -7975,664 +4092,41 @@ public enum Material implements Keyed {
      */
     public float getBlastResistance() {
         Validate.isTrue(isBlock(), "The Material is not a block!");
-        switch (this) {
-            // <editor-fold defaultstate="collapsed" desc="getBlastResistance">
-            case BLACK_CARPET:
-            case BLUE_CARPET:
-            case BROWN_CARPET:
-            case CYAN_CARPET:
-            case GRAY_CARPET:
-            case GREEN_CARPET:
-            case LIGHT_BLUE_CARPET:
-            case LIGHT_GRAY_CARPET:
-            case LIME_CARPET:
-            case MAGENTA_CARPET:
-            case ORANGE_CARPET:
-            case PINK_CARPET:
-            case PURPLE_CARPET:
-            case RED_CARPET:
-            case SNOW:
-            case WHITE_CARPET:
-            case YELLOW_CARPET:
-                return 0.1F;
-            case ACACIA_LEAVES:
-            case BIRCH_LEAVES:
-            case BLACK_BED:
-            case BLUE_BED:
-            case BROWN_BED:
-            case BROWN_MUSHROOM_BLOCK:
-            case CYAN_BED:
-            case DARK_OAK_LEAVES:
-            case DAYLIGHT_DETECTOR:
-            case GRAY_BED:
-            case GREEN_BED:
-            case JUNGLE_LEAVES:
-            case LIGHT_BLUE_BED:
-            case LIGHT_GRAY_BED:
-            case LIME_BED:
-            case MAGENTA_BED:
-            case MUSHROOM_STEM:
-            case OAK_LEAVES:
-            case ORANGE_BED:
-            case PINK_BED:
-            case PURPLE_BED:
-            case RED_BED:
-            case RED_MUSHROOM_BLOCK:
-            case SNOW_BLOCK:
-            case SPRUCE_LEAVES:
-            case VINE:
-            case WHITE_BED:
-            case YELLOW_BED:
-                return 0.2F;
-            case BEE_NEST:
-            case BLACK_STAINED_GLASS:
-            case BLACK_STAINED_GLASS_PANE:
-            case BLUE_STAINED_GLASS:
-            case BLUE_STAINED_GLASS_PANE:
-            case BROWN_STAINED_GLASS:
-            case BROWN_STAINED_GLASS_PANE:
-            case CYAN_STAINED_GLASS:
-            case CYAN_STAINED_GLASS_PANE:
-            case GLASS:
-            case GLASS_PANE:
-            case GLOWSTONE:
-            case GRAY_STAINED_GLASS:
-            case GRAY_STAINED_GLASS_PANE:
-            case GREEN_STAINED_GLASS:
-            case GREEN_STAINED_GLASS_PANE:
-            case LIGHT_BLUE_STAINED_GLASS:
-            case LIGHT_BLUE_STAINED_GLASS_PANE:
-            case LIGHT_GRAY_STAINED_GLASS:
-            case LIGHT_GRAY_STAINED_GLASS_PANE:
-            case LIME_STAINED_GLASS:
-            case LIME_STAINED_GLASS_PANE:
-            case MAGENTA_STAINED_GLASS:
-            case MAGENTA_STAINED_GLASS_PANE:
-            case ORANGE_STAINED_GLASS:
-            case ORANGE_STAINED_GLASS_PANE:
-            case PINK_STAINED_GLASS:
-            case PINK_STAINED_GLASS_PANE:
-            case PURPLE_STAINED_GLASS:
-            case PURPLE_STAINED_GLASS_PANE:
-            case REDSTONE_LAMP:
-            case RED_STAINED_GLASS:
-            case RED_STAINED_GLASS_PANE:
-            case SEA_LANTERN:
-            case WHITE_STAINED_GLASS:
-            case WHITE_STAINED_GLASS_PANE:
-            case YELLOW_STAINED_GLASS:
-            case YELLOW_STAINED_GLASS_PANE:
-                return 0.3F;
-            case CACTUS:
-            case CHORUS_FLOWER:
-            case CHORUS_PLANT:
-            case CRIMSON_NYLIUM:
-            case LADDER:
-            case NETHERRACK:
-            case WARPED_NYLIUM:
-                return 0.4F;
-            case ACACIA_BUTTON:
-            case ACACIA_PRESSURE_PLATE:
-            case BIRCH_BUTTON:
-            case BIRCH_PRESSURE_PLATE:
-            case BLACK_CONCRETE_POWDER:
-            case BLUE_CONCRETE_POWDER:
-            case BREWING_STAND:
-            case BROWN_CONCRETE_POWDER:
-            case CAKE:
-            case COARSE_DIRT:
-            case CRIMSON_BUTTON:
-            case CRIMSON_PRESSURE_PLATE:
-            case CYAN_CONCRETE_POWDER:
-            case DARK_OAK_BUTTON:
-            case DARK_OAK_PRESSURE_PLATE:
-            case DIRT:
-            case FROSTED_ICE:
-            case GRAY_CONCRETE_POWDER:
-            case GREEN_CONCRETE_POWDER:
-            case HAY_BLOCK:
-            case HEAVY_WEIGHTED_PRESSURE_PLATE:
-            case ICE:
-            case JUNGLE_BUTTON:
-            case JUNGLE_PRESSURE_PLATE:
-            case LEVER:
-            case LIGHT_BLUE_CONCRETE_POWDER:
-            case LIGHT_GRAY_CONCRETE_POWDER:
-            case LIGHT_WEIGHTED_PRESSURE_PLATE:
-            case LIME_CONCRETE_POWDER:
-            case MAGENTA_CONCRETE_POWDER:
-            case MAGMA_BLOCK:
-            case OAK_BUTTON:
-            case OAK_PRESSURE_PLATE:
-            case ORANGE_CONCRETE_POWDER:
-            case PACKED_ICE:
-            case PINK_CONCRETE_POWDER:
-            case PODZOL:
-            case POLISHED_BLACKSTONE_BUTTON:
-            case POLISHED_BLACKSTONE_PRESSURE_PLATE:
-            case PURPLE_CONCRETE_POWDER:
-            case RED_CONCRETE_POWDER:
-            case RED_SAND:
-            case SAND:
-            case SOUL_SAND:
-            case SOUL_SOIL:
-            case SPRUCE_BUTTON:
-            case SPRUCE_PRESSURE_PLATE:
-            case STONE_BUTTON:
-            case STONE_PRESSURE_PLATE:
-            case TARGET:
-            case TURTLE_EGG:
-            case WARPED_BUTTON:
-            case WARPED_PRESSURE_PLATE:
-            case WHITE_CONCRETE_POWDER:
-            case YELLOW_CONCRETE_POWDER:
-                return 0.5F;
-            case BEEHIVE:
-            case CLAY:
-            case COMPOSTER:
-            case FARMLAND:
-            case GRASS_BLOCK:
-            case GRAVEL:
-            case HONEYCOMB_BLOCK:
-            case MYCELIUM:
-            case SPONGE:
-            case WET_SPONGE:
-                return 0.6F;
-            case GRASS_PATH:
-                return 0.65F;
-            case ACTIVATOR_RAIL:
-            case DETECTOR_RAIL:
-            case POWERED_RAIL:
-            case RAIL:
-                return 0.7F;
-            case INFESTED_CHISELED_STONE_BRICKS:
-            case INFESTED_COBBLESTONE:
-            case INFESTED_CRACKED_STONE_BRICKS:
-            case INFESTED_MOSSY_STONE_BRICKS:
-            case INFESTED_STONE:
-            case INFESTED_STONE_BRICKS:
-                return 0.75F;
-            case BLACK_WOOL:
-            case BLUE_WOOL:
-            case BROWN_WOOL:
-            case CHISELED_QUARTZ_BLOCK:
-            case CHISELED_RED_SANDSTONE:
-            case CHISELED_SANDSTONE:
-            case CUT_RED_SANDSTONE:
-            case CUT_SANDSTONE:
-            case CYAN_WOOL:
-            case GRAY_WOOL:
-            case GREEN_WOOL:
-            case LIGHT_BLUE_WOOL:
-            case LIGHT_GRAY_WOOL:
-            case LIME_WOOL:
-            case MAGENTA_WOOL:
-            case NOTE_BLOCK:
-            case ORANGE_WOOL:
-            case PINK_WOOL:
-            case PURPLE_WOOL:
-            case QUARTZ_BLOCK:
-            case QUARTZ_BRICKS:
-            case QUARTZ_PILLAR:
-            case QUARTZ_STAIRS:
-            case RED_SANDSTONE:
-            case RED_SANDSTONE_STAIRS:
-            case RED_SANDSTONE_WALL:
-            case RED_WOOL:
-            case SANDSTONE:
-            case SANDSTONE_STAIRS:
-            case SANDSTONE_WALL:
-            case WHITE_WOOL:
-            case YELLOW_WOOL:
-                return 0.8F;
-            case ACACIA_SIGN:
-            case ACACIA_WALL_SIGN:
-            case BAMBOO:
-            case BAMBOO_SAPLING:
-            case BIRCH_SIGN:
-            case BIRCH_WALL_SIGN:
-            case BLACK_BANNER:
-            case BLACK_WALL_BANNER:
-            case BLUE_BANNER:
-            case BLUE_WALL_BANNER:
-            case BROWN_BANNER:
-            case BROWN_WALL_BANNER:
-            case CARVED_PUMPKIN:
-            case CREEPER_HEAD:
-            case CREEPER_WALL_HEAD:
-            case CRIMSON_SIGN:
-            case CRIMSON_WALL_SIGN:
-            case CYAN_BANNER:
-            case CYAN_WALL_BANNER:
-            case DARK_OAK_SIGN:
-            case DARK_OAK_WALL_SIGN:
-            case DRAGON_HEAD:
-            case DRAGON_WALL_HEAD:
-            case GRAY_BANNER:
-            case GRAY_WALL_BANNER:
-            case GREEN_BANNER:
-            case GREEN_WALL_BANNER:
-            case JACK_O_LANTERN:
-            case JUNGLE_SIGN:
-            case JUNGLE_WALL_SIGN:
-            case LIGHT_BLUE_BANNER:
-            case LIGHT_BLUE_WALL_BANNER:
-            case LIGHT_GRAY_BANNER:
-            case LIGHT_GRAY_WALL_BANNER:
-            case LIME_BANNER:
-            case LIME_WALL_BANNER:
-            case MAGENTA_BANNER:
-            case MAGENTA_WALL_BANNER:
-            case MELON:
-            case NETHER_WART_BLOCK:
-            case OAK_SIGN:
-            case OAK_WALL_SIGN:
-            case ORANGE_BANNER:
-            case ORANGE_WALL_BANNER:
-            case PINK_BANNER:
-            case PINK_WALL_BANNER:
-            case PLAYER_HEAD:
-            case PLAYER_WALL_HEAD:
-            case PUMPKIN:
-            case PURPLE_BANNER:
-            case PURPLE_WALL_BANNER:
-            case RED_BANNER:
-            case RED_WALL_BANNER:
-            case SHROOMLIGHT:
-            case SKELETON_SKULL:
-            case SKELETON_WALL_SKULL:
-            case SPRUCE_SIGN:
-            case SPRUCE_WALL_SIGN:
-            case WARPED_SIGN:
-            case WARPED_WALL_SIGN:
-            case WARPED_WART_BLOCK:
-            case WHITE_BANNER:
-            case WHITE_WALL_BANNER:
-            case WITHER_SKELETON_SKULL:
-            case WITHER_SKELETON_WALL_SKULL:
-            case YELLOW_BANNER:
-            case YELLOW_WALL_BANNER:
-            case ZOMBIE_HEAD:
-            case ZOMBIE_WALL_HEAD:
-                return 1.0F;
-            case BLACK_GLAZED_TERRACOTTA:
-            case BLUE_GLAZED_TERRACOTTA:
-            case BROWN_GLAZED_TERRACOTTA:
-            case CYAN_GLAZED_TERRACOTTA:
-            case GRAY_GLAZED_TERRACOTTA:
-            case GREEN_GLAZED_TERRACOTTA:
-            case LIGHT_BLUE_GLAZED_TERRACOTTA:
-            case LIGHT_GRAY_GLAZED_TERRACOTTA:
-            case LIME_GLAZED_TERRACOTTA:
-            case MAGENTA_GLAZED_TERRACOTTA:
-            case ORANGE_GLAZED_TERRACOTTA:
-            case PINK_GLAZED_TERRACOTTA:
-            case PURPLE_GLAZED_TERRACOTTA:
-            case RED_GLAZED_TERRACOTTA:
-            case WHITE_GLAZED_TERRACOTTA:
-            case YELLOW_GLAZED_TERRACOTTA:
-                return 1.4F;
-            case BOOKSHELF:
-            case PISTON:
-            case PISTON_HEAD:
-            case STICKY_PISTON:
-                return 1.5F;
-            case BLACK_CONCRETE:
-            case BLUE_CONCRETE:
-            case BROWN_CONCRETE:
-            case CYAN_CONCRETE:
-            case GRAY_CONCRETE:
-            case GREEN_CONCRETE:
-            case LIGHT_BLUE_CONCRETE:
-            case LIGHT_GRAY_CONCRETE:
-            case LIME_CONCRETE:
-            case MAGENTA_CONCRETE:
-            case ORANGE_CONCRETE:
-            case PINK_CONCRETE:
-            case PURPLE_CONCRETE:
-            case RED_CONCRETE:
-            case WHITE_CONCRETE:
-            case YELLOW_CONCRETE:
-                return 1.8F;
-            case ACACIA_LOG:
-            case ACACIA_WOOD:
-            case BIRCH_LOG:
-            case BIRCH_WOOD:
-            case BLACK_SHULKER_BOX:
-            case BLUE_SHULKER_BOX:
-            case BONE_BLOCK:
-            case BROWN_SHULKER_BOX:
-            case CAMPFIRE:
-            case CAULDRON:
-            case CRIMSON_HYPHAE:
-            case CRIMSON_STEM:
-            case CYAN_SHULKER_BOX:
-            case DARK_OAK_LOG:
-            case DARK_OAK_WOOD:
-            case GRAY_SHULKER_BOX:
-            case GREEN_SHULKER_BOX:
-            case JUNGLE_LOG:
-            case JUNGLE_WOOD:
-            case LIGHT_BLUE_SHULKER_BOX:
-            case LIGHT_GRAY_SHULKER_BOX:
-            case LIME_SHULKER_BOX:
-            case MAGENTA_SHULKER_BOX:
-            case OAK_LOG:
-            case OAK_WOOD:
-            case ORANGE_SHULKER_BOX:
-            case PINK_SHULKER_BOX:
-            case PURPLE_SHULKER_BOX:
-            case RED_SHULKER_BOX:
-            case SHULKER_BOX:
-            case SOUL_CAMPFIRE:
-            case SPRUCE_LOG:
-            case SPRUCE_WOOD:
-            case STRIPPED_ACACIA_LOG:
-            case STRIPPED_ACACIA_WOOD:
-            case STRIPPED_BIRCH_LOG:
-            case STRIPPED_BIRCH_WOOD:
-            case STRIPPED_CRIMSON_HYPHAE:
-            case STRIPPED_CRIMSON_STEM:
-            case STRIPPED_DARK_OAK_LOG:
-            case STRIPPED_DARK_OAK_WOOD:
-            case STRIPPED_JUNGLE_LOG:
-            case STRIPPED_JUNGLE_WOOD:
-            case STRIPPED_OAK_LOG:
-            case STRIPPED_OAK_WOOD:
-            case STRIPPED_SPRUCE_LOG:
-            case STRIPPED_SPRUCE_WOOD:
-            case STRIPPED_WARPED_HYPHAE:
-            case STRIPPED_WARPED_STEM:
-            case WARPED_HYPHAE:
-            case WARPED_STEM:
-            case WHITE_SHULKER_BOX:
-            case YELLOW_SHULKER_BOX:
-                return 2.0F;
-            case BARREL:
-            case CARTOGRAPHY_TABLE:
-            case CHEST:
-            case CRAFTING_TABLE:
-            case DRIED_KELP_BLOCK:
-            case FLETCHING_TABLE:
-            case LECTERN:
-            case LOOM:
-            case SMITHING_TABLE:
-            case TRAPPED_CHEST:
-                return 2.5F;
-            case BLUE_ICE:
-                return 2.8F;
-            case ACACIA_DOOR:
-            case ACACIA_FENCE:
-            case ACACIA_FENCE_GATE:
-            case ACACIA_PLANKS:
-            case ACACIA_SLAB:
-            case ACACIA_STAIRS:
-            case ACACIA_TRAPDOOR:
-            case BEACON:
-            case BIRCH_DOOR:
-            case BIRCH_FENCE:
-            case BIRCH_FENCE_GATE:
-            case BIRCH_PLANKS:
-            case BIRCH_SLAB:
-            case BIRCH_STAIRS:
-            case BIRCH_TRAPDOOR:
-            case COAL_ORE:
-            case COCOA:
-            case CONDUIT:
-            case CRIMSON_DOOR:
-            case CRIMSON_FENCE:
-            case CRIMSON_FENCE_GATE:
-            case CRIMSON_PLANKS:
-            case CRIMSON_SLAB:
-            case CRIMSON_STAIRS:
-            case CRIMSON_TRAPDOOR:
-            case DARK_OAK_DOOR:
-            case DARK_OAK_FENCE:
-            case DARK_OAK_FENCE_GATE:
-            case DARK_OAK_PLANKS:
-            case DARK_OAK_SLAB:
-            case DARK_OAK_STAIRS:
-            case DARK_OAK_TRAPDOOR:
-            case DIAMOND_ORE:
-            case EMERALD_ORE:
-            case GOLD_ORE:
-            case IRON_ORE:
-            case JUNGLE_DOOR:
-            case JUNGLE_FENCE:
-            case JUNGLE_FENCE_GATE:
-            case JUNGLE_PLANKS:
-            case JUNGLE_SLAB:
-            case JUNGLE_STAIRS:
-            case JUNGLE_TRAPDOOR:
-            case LAPIS_BLOCK:
-            case LAPIS_ORE:
-            case NETHER_GOLD_ORE:
-            case NETHER_QUARTZ_ORE:
-            case OAK_DOOR:
-            case OAK_FENCE:
-            case OAK_FENCE_GATE:
-            case OAK_PLANKS:
-            case OAK_SLAB:
-            case OAK_STAIRS:
-            case OAK_TRAPDOOR:
-            case OBSERVER:
-            case REDSTONE_ORE:
-            case SPRUCE_DOOR:
-            case SPRUCE_FENCE:
-            case SPRUCE_FENCE_GATE:
-            case SPRUCE_PLANKS:
-            case SPRUCE_SLAB:
-            case SPRUCE_STAIRS:
-            case SPRUCE_TRAPDOOR:
-            case WARPED_DOOR:
-            case WARPED_FENCE:
-            case WARPED_FENCE_GATE:
-            case WARPED_PLANKS:
-            case WARPED_SLAB:
-            case WARPED_STAIRS:
-            case WARPED_TRAPDOOR:
-                return 3.0F;
-            case BLAST_FURNACE:
-            case DISPENSER:
-            case DROPPER:
-            case FURNACE:
-            case LANTERN:
-            case LODESTONE:
-            case SMOKER:
-            case SOUL_LANTERN:
-            case STONECUTTER:
-                return 3.5F;
-            case COBWEB:
-                return 4.0F;
-            case BASALT:
-            case BLACK_TERRACOTTA:
-            case BLUE_TERRACOTTA:
-            case BROWN_TERRACOTTA:
-            case CYAN_TERRACOTTA:
-            case GRAY_TERRACOTTA:
-            case GREEN_TERRACOTTA:
-            case LIGHT_BLUE_TERRACOTTA:
-            case LIGHT_GRAY_TERRACOTTA:
-            case LIME_TERRACOTTA:
-            case MAGENTA_TERRACOTTA:
-            case ORANGE_TERRACOTTA:
-            case PINK_TERRACOTTA:
-            case POLISHED_BASALT:
-            case PURPLE_TERRACOTTA:
-            case RED_TERRACOTTA:
-            case TERRACOTTA:
-            case WHITE_TERRACOTTA:
-            case YELLOW_TERRACOTTA:
-                return 4.2F;
-            case HOPPER:
-                return 4.8F;
-            case BELL:
-            case IRON_DOOR:
-            case IRON_TRAPDOOR:
-            case SPAWNER:
-                return 5.0F;
-            case ANDESITE:
-            case ANDESITE_SLAB:
-            case ANDESITE_STAIRS:
-            case ANDESITE_WALL:
-            case BLACKSTONE:
-            case BLACKSTONE_SLAB:
-            case BLACKSTONE_STAIRS:
-            case BLACKSTONE_WALL:
-            case BRAIN_CORAL_BLOCK:
-            case BRICKS:
-            case BRICK_SLAB:
-            case BRICK_STAIRS:
-            case BRICK_WALL:
-            case BUBBLE_CORAL_BLOCK:
-            case CHAIN:
-            case CHISELED_NETHER_BRICKS:
-            case CHISELED_POLISHED_BLACKSTONE:
-            case CHISELED_STONE_BRICKS:
-            case COAL_BLOCK:
-            case COBBLESTONE:
-            case COBBLESTONE_SLAB:
-            case COBBLESTONE_STAIRS:
-            case COBBLESTONE_WALL:
-            case CRACKED_NETHER_BRICKS:
-            case CRACKED_POLISHED_BLACKSTONE_BRICKS:
-            case CRACKED_STONE_BRICKS:
-            case CUT_RED_SANDSTONE_SLAB:
-            case CUT_SANDSTONE_SLAB:
-            case DARK_PRISMARINE:
-            case DARK_PRISMARINE_SLAB:
-            case DARK_PRISMARINE_STAIRS:
-            case DEAD_BRAIN_CORAL_BLOCK:
-            case DEAD_BUBBLE_CORAL_BLOCK:
-            case DEAD_FIRE_CORAL_BLOCK:
-            case DEAD_HORN_CORAL_BLOCK:
-            case DEAD_TUBE_CORAL_BLOCK:
-            case DIAMOND_BLOCK:
-            case DIORITE:
-            case DIORITE_SLAB:
-            case DIORITE_STAIRS:
-            case DIORITE_WALL:
-            case EMERALD_BLOCK:
-            case FIRE_CORAL_BLOCK:
-            case GILDED_BLACKSTONE:
-            case GOLD_BLOCK:
-            case GRANITE:
-            case GRANITE_SLAB:
-            case GRANITE_STAIRS:
-            case GRANITE_WALL:
-            case GRINDSTONE:
-            case HORN_CORAL_BLOCK:
-            case IRON_BARS:
-            case IRON_BLOCK:
-            case JUKEBOX:
-            case MOSSY_COBBLESTONE:
-            case MOSSY_COBBLESTONE_SLAB:
-            case MOSSY_COBBLESTONE_STAIRS:
-            case MOSSY_COBBLESTONE_WALL:
-            case MOSSY_STONE_BRICKS:
-            case MOSSY_STONE_BRICK_SLAB:
-            case MOSSY_STONE_BRICK_STAIRS:
-            case MOSSY_STONE_BRICK_WALL:
-            case NETHER_BRICKS:
-            case NETHER_BRICK_FENCE:
-            case NETHER_BRICK_SLAB:
-            case NETHER_BRICK_STAIRS:
-            case NETHER_BRICK_WALL:
-            case PETRIFIED_OAK_SLAB:
-            case POLISHED_ANDESITE:
-            case POLISHED_ANDESITE_SLAB:
-            case POLISHED_ANDESITE_STAIRS:
-            case POLISHED_BLACKSTONE:
-            case POLISHED_BLACKSTONE_BRICKS:
-            case POLISHED_BLACKSTONE_BRICK_SLAB:
-            case POLISHED_BLACKSTONE_BRICK_STAIRS:
-            case POLISHED_BLACKSTONE_BRICK_WALL:
-            case POLISHED_BLACKSTONE_SLAB:
-            case POLISHED_BLACKSTONE_STAIRS:
-            case POLISHED_BLACKSTONE_WALL:
-            case POLISHED_DIORITE:
-            case POLISHED_DIORITE_SLAB:
-            case POLISHED_DIORITE_STAIRS:
-            case POLISHED_GRANITE:
-            case POLISHED_GRANITE_SLAB:
-            case POLISHED_GRANITE_STAIRS:
-            case PRISMARINE:
-            case PRISMARINE_BRICKS:
-            case PRISMARINE_BRICK_SLAB:
-            case PRISMARINE_BRICK_STAIRS:
-            case PRISMARINE_SLAB:
-            case PRISMARINE_STAIRS:
-            case PRISMARINE_WALL:
-            case PURPUR_BLOCK:
-            case PURPUR_PILLAR:
-            case PURPUR_SLAB:
-            case PURPUR_STAIRS:
-            case QUARTZ_SLAB:
-            case REDSTONE_BLOCK:
-            case RED_NETHER_BRICKS:
-            case RED_NETHER_BRICK_SLAB:
-            case RED_NETHER_BRICK_STAIRS:
-            case RED_NETHER_BRICK_WALL:
-            case RED_SANDSTONE_SLAB:
-            case SANDSTONE_SLAB:
-            case SMOOTH_QUARTZ:
-            case SMOOTH_QUARTZ_SLAB:
-            case SMOOTH_QUARTZ_STAIRS:
-            case SMOOTH_RED_SANDSTONE:
-            case SMOOTH_RED_SANDSTONE_SLAB:
-            case SMOOTH_RED_SANDSTONE_STAIRS:
-            case SMOOTH_SANDSTONE:
-            case SMOOTH_SANDSTONE_SLAB:
-            case SMOOTH_SANDSTONE_STAIRS:
-            case SMOOTH_STONE:
-            case SMOOTH_STONE_SLAB:
-            case STONE:
-            case STONE_BRICKS:
-            case STONE_BRICK_SLAB:
-            case STONE_BRICK_STAIRS:
-            case STONE_BRICK_WALL:
-            case STONE_SLAB:
-            case STONE_STAIRS:
-            case TUBE_CORAL_BLOCK:
-                return 6.0F;
-            case DRAGON_EGG:
-            case END_STONE:
-            case END_STONE_BRICKS:
-            case END_STONE_BRICK_SLAB:
-            case END_STONE_BRICK_STAIRS:
-            case END_STONE_BRICK_WALL:
-                return 9.0F;
-            case LAVA:
-            case WATER:
-                return 100.0F;
-            case ENDER_CHEST:
-                return 600.0F;
-            case ANCIENT_DEBRIS:
-            case ANVIL:
-            case CHIPPED_ANVIL:
-            case CRYING_OBSIDIAN:
-            case DAMAGED_ANVIL:
-            case ENCHANTING_TABLE:
-            case NETHERITE_BLOCK:
-            case OBSIDIAN:
-            case RESPAWN_ANCHOR:
-                return 1200.0F;
-            case BEDROCK:
-            case CHAIN_COMMAND_BLOCK:
-            case COMMAND_BLOCK:
-            case END_GATEWAY:
-            case END_PORTAL:
-            case END_PORTAL_FRAME:
-            case JIGSAW:
-            case REPEATING_COMMAND_BLOCK:
-            case STRUCTURE_BLOCK:
-                return 3600000.0F;
-            case BARRIER:
-                return 3600000.8F;
-            default:
-                return 0;
-            // </editor-fold>
-        }
+        // <editor-fold defaultstate="collapsed" desc="getBlastResistance">
+        // </editor-fold>
+        return switch (this) {
+            case BLACK_CARPET, BLUE_CARPET, BROWN_CARPET, CYAN_CARPET, GRAY_CARPET, GREEN_CARPET, LIGHT_BLUE_CARPET, LIGHT_GRAY_CARPET, LIME_CARPET, MAGENTA_CARPET, ORANGE_CARPET, PINK_CARPET, PURPLE_CARPET, RED_CARPET, SNOW, WHITE_CARPET, YELLOW_CARPET -> 0.1F;
+            case ACACIA_LEAVES, BIRCH_LEAVES, BLACK_BED, BLUE_BED, BROWN_BED, BROWN_MUSHROOM_BLOCK, CYAN_BED, DARK_OAK_LEAVES, DAYLIGHT_DETECTOR, GRAY_BED, GREEN_BED, JUNGLE_LEAVES, LIGHT_BLUE_BED, LIGHT_GRAY_BED, LIME_BED, MAGENTA_BED, MUSHROOM_STEM, OAK_LEAVES, ORANGE_BED, PINK_BED, PURPLE_BED, RED_BED, RED_MUSHROOM_BLOCK, SNOW_BLOCK, SPRUCE_LEAVES, VINE, WHITE_BED, YELLOW_BED -> 0.2F;
+            case BEE_NEST, BLACK_STAINED_GLASS, BLACK_STAINED_GLASS_PANE, BLUE_STAINED_GLASS, BLUE_STAINED_GLASS_PANE, BROWN_STAINED_GLASS, BROWN_STAINED_GLASS_PANE, CYAN_STAINED_GLASS, CYAN_STAINED_GLASS_PANE, GLASS, GLASS_PANE, GLOWSTONE, GRAY_STAINED_GLASS, GRAY_STAINED_GLASS_PANE, GREEN_STAINED_GLASS, GREEN_STAINED_GLASS_PANE, LIGHT_BLUE_STAINED_GLASS, LIGHT_BLUE_STAINED_GLASS_PANE, LIGHT_GRAY_STAINED_GLASS, LIGHT_GRAY_STAINED_GLASS_PANE, LIME_STAINED_GLASS, LIME_STAINED_GLASS_PANE, MAGENTA_STAINED_GLASS, MAGENTA_STAINED_GLASS_PANE, ORANGE_STAINED_GLASS, ORANGE_STAINED_GLASS_PANE, PINK_STAINED_GLASS, PINK_STAINED_GLASS_PANE, PURPLE_STAINED_GLASS, PURPLE_STAINED_GLASS_PANE, REDSTONE_LAMP, RED_STAINED_GLASS, RED_STAINED_GLASS_PANE, SEA_LANTERN, WHITE_STAINED_GLASS, WHITE_STAINED_GLASS_PANE, YELLOW_STAINED_GLASS, YELLOW_STAINED_GLASS_PANE -> 0.3F;
+            case CACTUS, CHORUS_FLOWER, CHORUS_PLANT, CRIMSON_NYLIUM, LADDER, NETHERRACK, WARPED_NYLIUM -> 0.4F;
+            case ACACIA_BUTTON, ACACIA_PRESSURE_PLATE, BIRCH_BUTTON, BIRCH_PRESSURE_PLATE, BLACK_CONCRETE_POWDER, BLUE_CONCRETE_POWDER, BREWING_STAND, BROWN_CONCRETE_POWDER, CAKE, COARSE_DIRT, CRIMSON_BUTTON, CRIMSON_PRESSURE_PLATE, CYAN_CONCRETE_POWDER, DARK_OAK_BUTTON, DARK_OAK_PRESSURE_PLATE, DIRT, FROSTED_ICE, GRAY_CONCRETE_POWDER, GREEN_CONCRETE_POWDER, HAY_BLOCK, HEAVY_WEIGHTED_PRESSURE_PLATE, ICE, JUNGLE_BUTTON, JUNGLE_PRESSURE_PLATE, LEVER, LIGHT_BLUE_CONCRETE_POWDER, LIGHT_GRAY_CONCRETE_POWDER, LIGHT_WEIGHTED_PRESSURE_PLATE, LIME_CONCRETE_POWDER, MAGENTA_CONCRETE_POWDER, MAGMA_BLOCK, OAK_BUTTON, OAK_PRESSURE_PLATE, ORANGE_CONCRETE_POWDER, PACKED_ICE, PINK_CONCRETE_POWDER, PODZOL, POLISHED_BLACKSTONE_BUTTON, POLISHED_BLACKSTONE_PRESSURE_PLATE, PURPLE_CONCRETE_POWDER, RED_CONCRETE_POWDER, RED_SAND, SAND, SOUL_SAND, SOUL_SOIL, SPRUCE_BUTTON, SPRUCE_PRESSURE_PLATE, STONE_BUTTON, STONE_PRESSURE_PLATE, TARGET, TURTLE_EGG, WARPED_BUTTON, WARPED_PRESSURE_PLATE, WHITE_CONCRETE_POWDER, YELLOW_CONCRETE_POWDER -> 0.5F;
+            case BEEHIVE, CLAY, COMPOSTER, FARMLAND, GRASS_BLOCK, GRAVEL, HONEYCOMB_BLOCK, MYCELIUM, SPONGE, WET_SPONGE -> 0.6F;
+            case GRASS_PATH -> 0.65F;
+            case ACTIVATOR_RAIL, DETECTOR_RAIL, POWERED_RAIL, RAIL -> 0.7F;
+            case INFESTED_CHISELED_STONE_BRICKS, INFESTED_COBBLESTONE, INFESTED_CRACKED_STONE_BRICKS, INFESTED_MOSSY_STONE_BRICKS, INFESTED_STONE, INFESTED_STONE_BRICKS -> 0.75F;
+            case BLACK_WOOL, BLUE_WOOL, BROWN_WOOL, CHISELED_QUARTZ_BLOCK, CHISELED_RED_SANDSTONE, CHISELED_SANDSTONE, CUT_RED_SANDSTONE, CUT_SANDSTONE, CYAN_WOOL, GRAY_WOOL, GREEN_WOOL, LIGHT_BLUE_WOOL, LIGHT_GRAY_WOOL, LIME_WOOL, MAGENTA_WOOL, NOTE_BLOCK, ORANGE_WOOL, PINK_WOOL, PURPLE_WOOL, QUARTZ_BLOCK, QUARTZ_BRICKS, QUARTZ_PILLAR, QUARTZ_STAIRS, RED_SANDSTONE, RED_SANDSTONE_STAIRS, RED_SANDSTONE_WALL, RED_WOOL, SANDSTONE, SANDSTONE_STAIRS, SANDSTONE_WALL, WHITE_WOOL, YELLOW_WOOL -> 0.8F;
+            case ACACIA_SIGN, ACACIA_WALL_SIGN, BAMBOO, BAMBOO_SAPLING, BIRCH_SIGN, BIRCH_WALL_SIGN, BLACK_BANNER, BLACK_WALL_BANNER, BLUE_BANNER, BLUE_WALL_BANNER, BROWN_BANNER, BROWN_WALL_BANNER, CARVED_PUMPKIN, CREEPER_HEAD, CREEPER_WALL_HEAD, CRIMSON_SIGN, CRIMSON_WALL_SIGN, CYAN_BANNER, CYAN_WALL_BANNER, DARK_OAK_SIGN, DARK_OAK_WALL_SIGN, DRAGON_HEAD, DRAGON_WALL_HEAD, GRAY_BANNER, GRAY_WALL_BANNER, GREEN_BANNER, GREEN_WALL_BANNER, JACK_O_LANTERN, JUNGLE_SIGN, JUNGLE_WALL_SIGN, LIGHT_BLUE_BANNER, LIGHT_BLUE_WALL_BANNER, LIGHT_GRAY_BANNER, LIGHT_GRAY_WALL_BANNER, LIME_BANNER, LIME_WALL_BANNER, MAGENTA_BANNER, MAGENTA_WALL_BANNER, MELON, NETHER_WART_BLOCK, OAK_SIGN, OAK_WALL_SIGN, ORANGE_BANNER, ORANGE_WALL_BANNER, PINK_BANNER, PINK_WALL_BANNER, PLAYER_HEAD, PLAYER_WALL_HEAD, PUMPKIN, PURPLE_BANNER, PURPLE_WALL_BANNER, RED_BANNER, RED_WALL_BANNER, SHROOMLIGHT, SKELETON_SKULL, SKELETON_WALL_SKULL, SPRUCE_SIGN, SPRUCE_WALL_SIGN, WARPED_SIGN, WARPED_WALL_SIGN, WARPED_WART_BLOCK, WHITE_BANNER, WHITE_WALL_BANNER, WITHER_SKELETON_SKULL, WITHER_SKELETON_WALL_SKULL, YELLOW_BANNER, YELLOW_WALL_BANNER, ZOMBIE_HEAD, ZOMBIE_WALL_HEAD -> 1.0F;
+            case BLACK_GLAZED_TERRACOTTA, BLUE_GLAZED_TERRACOTTA, BROWN_GLAZED_TERRACOTTA, CYAN_GLAZED_TERRACOTTA, GRAY_GLAZED_TERRACOTTA, GREEN_GLAZED_TERRACOTTA, LIGHT_BLUE_GLAZED_TERRACOTTA, LIGHT_GRAY_GLAZED_TERRACOTTA, LIME_GLAZED_TERRACOTTA, MAGENTA_GLAZED_TERRACOTTA, ORANGE_GLAZED_TERRACOTTA, PINK_GLAZED_TERRACOTTA, PURPLE_GLAZED_TERRACOTTA, RED_GLAZED_TERRACOTTA, WHITE_GLAZED_TERRACOTTA, YELLOW_GLAZED_TERRACOTTA -> 1.4F;
+            case BOOKSHELF, PISTON, PISTON_HEAD, STICKY_PISTON -> 1.5F;
+            case BLACK_CONCRETE, BLUE_CONCRETE, BROWN_CONCRETE, CYAN_CONCRETE, GRAY_CONCRETE, GREEN_CONCRETE, LIGHT_BLUE_CONCRETE, LIGHT_GRAY_CONCRETE, LIME_CONCRETE, MAGENTA_CONCRETE, ORANGE_CONCRETE, PINK_CONCRETE, PURPLE_CONCRETE, RED_CONCRETE, WHITE_CONCRETE, YELLOW_CONCRETE -> 1.8F;
+            case ACACIA_LOG, ACACIA_WOOD, BIRCH_LOG, BIRCH_WOOD, BLACK_SHULKER_BOX, BLUE_SHULKER_BOX, BONE_BLOCK, BROWN_SHULKER_BOX, CAMPFIRE, CAULDRON, CRIMSON_HYPHAE, CRIMSON_STEM, CYAN_SHULKER_BOX, DARK_OAK_LOG, DARK_OAK_WOOD, GRAY_SHULKER_BOX, GREEN_SHULKER_BOX, JUNGLE_LOG, JUNGLE_WOOD, LIGHT_BLUE_SHULKER_BOX, LIGHT_GRAY_SHULKER_BOX, LIME_SHULKER_BOX, MAGENTA_SHULKER_BOX, OAK_LOG, OAK_WOOD, ORANGE_SHULKER_BOX, PINK_SHULKER_BOX, PURPLE_SHULKER_BOX, RED_SHULKER_BOX, SHULKER_BOX, SOUL_CAMPFIRE, SPRUCE_LOG, SPRUCE_WOOD, STRIPPED_ACACIA_LOG, STRIPPED_ACACIA_WOOD, STRIPPED_BIRCH_LOG, STRIPPED_BIRCH_WOOD, STRIPPED_CRIMSON_HYPHAE, STRIPPED_CRIMSON_STEM, STRIPPED_DARK_OAK_LOG, STRIPPED_DARK_OAK_WOOD, STRIPPED_JUNGLE_LOG, STRIPPED_JUNGLE_WOOD, STRIPPED_OAK_LOG, STRIPPED_OAK_WOOD, STRIPPED_SPRUCE_LOG, STRIPPED_SPRUCE_WOOD, STRIPPED_WARPED_HYPHAE, STRIPPED_WARPED_STEM, WARPED_HYPHAE, WARPED_STEM, WHITE_SHULKER_BOX, YELLOW_SHULKER_BOX -> 2.0F;
+            case BARREL, CARTOGRAPHY_TABLE, CHEST, CRAFTING_TABLE, DRIED_KELP_BLOCK, FLETCHING_TABLE, LECTERN, LOOM, SMITHING_TABLE, TRAPPED_CHEST -> 2.5F;
+            case BLUE_ICE -> 2.8F;
+            case ACACIA_DOOR, ACACIA_FENCE, ACACIA_FENCE_GATE, ACACIA_PLANKS, ACACIA_SLAB, ACACIA_STAIRS, ACACIA_TRAPDOOR, BEACON, BIRCH_DOOR, BIRCH_FENCE, BIRCH_FENCE_GATE, BIRCH_PLANKS, BIRCH_SLAB, BIRCH_STAIRS, BIRCH_TRAPDOOR, COAL_ORE, COCOA, CONDUIT, CRIMSON_DOOR, CRIMSON_FENCE, CRIMSON_FENCE_GATE, CRIMSON_PLANKS, CRIMSON_SLAB, CRIMSON_STAIRS, CRIMSON_TRAPDOOR, DARK_OAK_DOOR, DARK_OAK_FENCE, DARK_OAK_FENCE_GATE, DARK_OAK_PLANKS, DARK_OAK_SLAB, DARK_OAK_STAIRS, DARK_OAK_TRAPDOOR, DIAMOND_ORE, EMERALD_ORE, GOLD_ORE, IRON_ORE, JUNGLE_DOOR, JUNGLE_FENCE, JUNGLE_FENCE_GATE, JUNGLE_PLANKS, JUNGLE_SLAB, JUNGLE_STAIRS, JUNGLE_TRAPDOOR, LAPIS_BLOCK, LAPIS_ORE, NETHER_GOLD_ORE, NETHER_QUARTZ_ORE, OAK_DOOR, OAK_FENCE, OAK_FENCE_GATE, OAK_PLANKS, OAK_SLAB, OAK_STAIRS, OAK_TRAPDOOR, OBSERVER, REDSTONE_ORE, SPRUCE_DOOR, SPRUCE_FENCE, SPRUCE_FENCE_GATE, SPRUCE_PLANKS, SPRUCE_SLAB, SPRUCE_STAIRS, SPRUCE_TRAPDOOR, WARPED_DOOR, WARPED_FENCE, WARPED_FENCE_GATE, WARPED_PLANKS, WARPED_SLAB, WARPED_STAIRS, WARPED_TRAPDOOR -> 3.0F;
+            case BLAST_FURNACE, DISPENSER, DROPPER, FURNACE, LANTERN, LODESTONE, SMOKER, SOUL_LANTERN, STONECUTTER -> 3.5F;
+            case COBWEB -> 4.0F;
+            case BASALT, BLACK_TERRACOTTA, BLUE_TERRACOTTA, BROWN_TERRACOTTA, CYAN_TERRACOTTA, GRAY_TERRACOTTA, GREEN_TERRACOTTA, LIGHT_BLUE_TERRACOTTA, LIGHT_GRAY_TERRACOTTA, LIME_TERRACOTTA, MAGENTA_TERRACOTTA, ORANGE_TERRACOTTA, PINK_TERRACOTTA, POLISHED_BASALT, PURPLE_TERRACOTTA, RED_TERRACOTTA, TERRACOTTA, WHITE_TERRACOTTA, YELLOW_TERRACOTTA -> 4.2F;
+            case HOPPER -> 4.8F;
+            case BELL, IRON_DOOR, IRON_TRAPDOOR, SPAWNER -> 5.0F;
+            case ANDESITE, ANDESITE_SLAB, ANDESITE_STAIRS, ANDESITE_WALL, BLACKSTONE, BLACKSTONE_SLAB, BLACKSTONE_STAIRS, BLACKSTONE_WALL, BRAIN_CORAL_BLOCK, BRICKS, BRICK_SLAB, BRICK_STAIRS, BRICK_WALL, BUBBLE_CORAL_BLOCK, CHAIN, CHISELED_NETHER_BRICKS, CHISELED_POLISHED_BLACKSTONE, CHISELED_STONE_BRICKS, COAL_BLOCK, COBBLESTONE, COBBLESTONE_SLAB, COBBLESTONE_STAIRS, COBBLESTONE_WALL, CRACKED_NETHER_BRICKS, CRACKED_POLISHED_BLACKSTONE_BRICKS, CRACKED_STONE_BRICKS, CUT_RED_SANDSTONE_SLAB, CUT_SANDSTONE_SLAB, DARK_PRISMARINE, DARK_PRISMARINE_SLAB, DARK_PRISMARINE_STAIRS, DEAD_BRAIN_CORAL_BLOCK, DEAD_BUBBLE_CORAL_BLOCK, DEAD_FIRE_CORAL_BLOCK, DEAD_HORN_CORAL_BLOCK, DEAD_TUBE_CORAL_BLOCK, DIAMOND_BLOCK, DIORITE, DIORITE_SLAB, DIORITE_STAIRS, DIORITE_WALL, EMERALD_BLOCK, FIRE_CORAL_BLOCK, GILDED_BLACKSTONE, GOLD_BLOCK, GRANITE, GRANITE_SLAB, GRANITE_STAIRS, GRANITE_WALL, GRINDSTONE, HORN_CORAL_BLOCK, IRON_BARS, IRON_BLOCK, JUKEBOX, MOSSY_COBBLESTONE, MOSSY_COBBLESTONE_SLAB, MOSSY_COBBLESTONE_STAIRS, MOSSY_COBBLESTONE_WALL, MOSSY_STONE_BRICKS, MOSSY_STONE_BRICK_SLAB, MOSSY_STONE_BRICK_STAIRS, MOSSY_STONE_BRICK_WALL, NETHER_BRICKS, NETHER_BRICK_FENCE, NETHER_BRICK_SLAB, NETHER_BRICK_STAIRS, NETHER_BRICK_WALL, PETRIFIED_OAK_SLAB, POLISHED_ANDESITE, POLISHED_ANDESITE_SLAB, POLISHED_ANDESITE_STAIRS, POLISHED_BLACKSTONE, POLISHED_BLACKSTONE_BRICKS, POLISHED_BLACKSTONE_BRICK_SLAB, POLISHED_BLACKSTONE_BRICK_STAIRS, POLISHED_BLACKSTONE_BRICK_WALL, POLISHED_BLACKSTONE_SLAB, POLISHED_BLACKSTONE_STAIRS, POLISHED_BLACKSTONE_WALL, POLISHED_DIORITE, POLISHED_DIORITE_SLAB, POLISHED_DIORITE_STAIRS, POLISHED_GRANITE, POLISHED_GRANITE_SLAB, POLISHED_GRANITE_STAIRS, PRISMARINE, PRISMARINE_BRICKS, PRISMARINE_BRICK_SLAB, PRISMARINE_BRICK_STAIRS, PRISMARINE_SLAB, PRISMARINE_STAIRS, PRISMARINE_WALL, PURPUR_BLOCK, PURPUR_PILLAR, PURPUR_SLAB, PURPUR_STAIRS, QUARTZ_SLAB, REDSTONE_BLOCK, RED_NETHER_BRICKS, RED_NETHER_BRICK_SLAB, RED_NETHER_BRICK_STAIRS, RED_NETHER_BRICK_WALL, RED_SANDSTONE_SLAB, SANDSTONE_SLAB, SMOOTH_QUARTZ, SMOOTH_QUARTZ_SLAB, SMOOTH_QUARTZ_STAIRS, SMOOTH_RED_SANDSTONE, SMOOTH_RED_SANDSTONE_SLAB, SMOOTH_RED_SANDSTONE_STAIRS, SMOOTH_SANDSTONE, SMOOTH_SANDSTONE_SLAB, SMOOTH_SANDSTONE_STAIRS, SMOOTH_STONE, SMOOTH_STONE_SLAB, STONE, STONE_BRICKS, STONE_BRICK_SLAB, STONE_BRICK_STAIRS, STONE_BRICK_WALL, STONE_SLAB, STONE_STAIRS, TUBE_CORAL_BLOCK -> 6.0F;
+            case DRAGON_EGG, END_STONE, END_STONE_BRICKS, END_STONE_BRICK_SLAB, END_STONE_BRICK_STAIRS, END_STONE_BRICK_WALL -> 9.0F;
+            case LAVA, WATER -> 100.0F;
+            case ENDER_CHEST -> 600.0F;
+            case ANCIENT_DEBRIS, ANVIL, CHIPPED_ANVIL, CRYING_OBSIDIAN, DAMAGED_ANVIL, ENCHANTING_TABLE, NETHERITE_BLOCK, OBSIDIAN, RESPAWN_ANCHOR -> 1200.0F;
+            case BEDROCK, CHAIN_COMMAND_BLOCK, COMMAND_BLOCK, END_GATEWAY, END_PORTAL, END_PORTAL_FRAME, JIGSAW, REPEATING_COMMAND_BLOCK, STRUCTURE_BLOCK -> 3600000.0F;
+            case BARRIER -> 3600000.8F;
+            default -> 0;
+        };
     }
 
     /**
@@ -8646,18 +4140,12 @@ public enum Material implements Keyed {
     @Nullable
     public Material getCraftingRemainingItem() {
         Validate.isTrue(isItem(), "The Material is not an item!");
-        switch (this) {
-            // <editor-fold defaultstate="collapsed" desc="getCraftingRemainingItem">
-            case WATER_BUCKET:
-            case LAVA_BUCKET:
-            case MILK_BUCKET:
-                return BUCKET;
-            case DRAGON_BREATH:
-            case HONEY_BOTTLE:
-                return GLASS_BOTTLE;
-            default:
-                return null;
-            // </editor-fold>
-        }
+        // <editor-fold defaultstate="collapsed" desc="getCraftingRemainingItem">
+        // </editor-fold>
+        return switch (this) {
+            case WATER_BUCKET, LAVA_BUCKET, MILK_BUCKET -> BUCKET;
+            case DRAGON_BREATH, HONEY_BOTTLE -> GLASS_BOTTLE;
+            default -> null;
+        };
     }
 }
diff --git a/src/main/java/org/bukkit/Nameable.java b/src/main/java/org/bukkit/Nameable.java
index 2acdf2a6d3955923c721222b9da784f3278f6418..0502bebbe80c5f3507d6e01f1f75d445a6edc7b8 100644
--- a/src/main/java/org/bukkit/Nameable.java
+++ b/src/main/java/org/bukkit/Nameable.java
@@ -37,8 +37,7 @@ public interface Nameable {
      *
      * @return name of the mob/block or null
      */
-    @Nullable
-    public String getCustomName();
+    @Nullable String getCustomName();
 
     /**
      * Sets a custom name on a mob or block. This name will be used in death
@@ -51,5 +50,5 @@ public interface Nameable {
      *
      * @param name the name to set
      */
-    public void setCustomName(@Nullable String name);
+    void setCustomName(@Nullable String name);
 }
diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java
index 01bcb3a1bdb5accdf844d0178cec3d25746b3eaa..985857b5936399be5968d4748a2a3cb8276436f3 100644
--- a/src/main/java/org/bukkit/NamespacedKey.java
+++ b/src/main/java/org/bukkit/NamespacedKey.java
@@ -46,8 +46,8 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      */
     @Deprecated
     public NamespacedKey(@NotNull String namespace, @NotNull String key) {
-        Preconditions.checkArgument(namespace != null && VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
-        Preconditions.checkArgument(key != null && VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
+        Preconditions.checkArgument(VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
+        Preconditions.checkArgument(VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
 
         this.namespace = namespace;
         this.key = key;
@@ -69,8 +69,8 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @param key the key to create
      */
     public NamespacedKey(@NotNull Plugin plugin, @NotNull String key) {
-        Preconditions.checkArgument(plugin != null, "Plugin cannot be null");
-        Preconditions.checkArgument(key != null, "Key cannot be null");
+        Preconditions.checkArgument(true, "Plugin cannot be null");
+        Preconditions.checkArgument(true, "Key cannot be null");
 
         this.namespace = plugin.getName().toLowerCase(Locale.ROOT);
         this.key = key.toLowerCase(Locale.ROOT);
@@ -169,6 +169,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      */
     @Nullable
     public static NamespacedKey fromString(@NotNull String string, @Nullable Plugin defaultNamespace) {
+        //noinspection ConstantConditions
         Preconditions.checkArgument(string != null && !string.isEmpty(), "Input string must not be empty or null");
 
         String[] components = string.split(":", 3);
diff --git a/src/main/java/org/bukkit/NetherWartsState.java b/src/main/java/org/bukkit/NetherWartsState.java
index f43209cf7b752c26718c303ca8c3e1c7d9912ad3..5362cf350d76e3b13951b6083a644f0b471f4df3 100644
--- a/src/main/java/org/bukkit/NetherWartsState.java
+++ b/src/main/java/org/bukkit/NetherWartsState.java
@@ -17,5 +17,5 @@ public enum NetherWartsState {
     /**
      * Ready to harvest
      */
-    RIPE;
+    RIPE
 }
diff --git a/src/main/java/org/bukkit/Note.java b/src/main/java/org/bukkit/Note.java
index b1c86aefb6481695959db81da70ee5452567cbf3..5e6ebb866d729c12a751d21a4156e8b821a4a434 100644
--- a/src/main/java/org/bukkit/Note.java
+++ b/src/main/java/org/bukkit/Note.java
@@ -30,7 +30,7 @@ public class Note {
         /** The number of tones including sharped tones. */
         public static final byte TONES_COUNT = 12;
 
-        private Tone(int id, boolean sharpable) {
+        Tone(int id, boolean sharpable) {
             this.id = (byte) (id % TONES_COUNT);
             this.sharpable = sharpable;
         }
@@ -271,9 +271,7 @@ public class Note {
         if (getClass() != obj.getClass())
             return false;
         Note other = (Note) obj;
-        if (note != other.note)
-            return false;
-        return true;
+	    return note == other.note;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index 3afd5f5c0208a4ee93b5dbfc2aab2b9d2e8a7544..b359f3ba63d908620e0cdf9d97cba3b9bef3651f 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -16,7 +16,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return true if they are online
      */
-    public boolean isOnline();
+    boolean isOnline();
 
     /**
      * Returns the name of this player
@@ -27,8 +27,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Player name or null if we have not seen a name for this player yet
      */
     @Override
-    @Nullable
-    public String getName();
+    @Nullable String getName();
 
     /**
      * Returns the UUID of this player
@@ -36,15 +35,14 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Player UUID
      */
     @Override
-    @NotNull
-    public UUID getUniqueId();
+    @NotNull UUID getUniqueId();
 
     /**
      * Checks if this player is banned or not
      *
      * @return true if banned, otherwise false
      */
-    public boolean isBanned();
+    boolean isBanned();
     // Paper start
 
     /**
@@ -54,7 +52,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason) {
+    default BanEntry banPlayer(@Nullable String reason) {
         return banPlayer(reason, null, null);
     }
 
@@ -65,7 +63,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable String source) {
+    default BanEntry banPlayer(@Nullable String reason, @Nullable String source) {
         return banPlayer(reason, null, source);
     }
 
@@ -76,7 +74,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires) {
+    default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires) {
         return banPlayer(reason, expires, null);
     }
 
@@ -88,11 +86,11 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source) {
+    default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source) {
         return banPlayer(reason, expires, source, true);
     }
     @NotNull
-    public default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source, boolean kickIfOnline) {
+    default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source, boolean kickIfOnline) {
         BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.NAME).addBan(getName(), reason, expires, source);
         if (kickIfOnline && isOnline()) {
             getPlayer().kickPlayer(reason);
@@ -106,14 +104,14 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return true if whitelisted
      */
-    public boolean isWhitelisted();
+    boolean isWhitelisted();
 
     /**
      * Sets if this player is whitelisted or not
      *
      * @param value true if whitelisted
      */
-    public void setWhitelisted(boolean value);
+    void setWhitelisted(boolean value);
 
     /**
      * Gets a {@link Player} object that this represents, if there is one
@@ -123,8 +121,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Online player
      */
-    @Nullable
-    public Player getPlayer();
+    @Nullable Player getPlayer();
 
     /**
      * Gets the first date and time that this player was witnessed on this
@@ -136,7 +133,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Date of first log-in for this player, or 0
      */
-    public long getFirstPlayed();
+    long getFirstPlayed();
 
     /**
      * Gets the last date and time that this player was witnessed on this
@@ -150,14 +147,14 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @deprecated The API contract is ambiguous and the implementation may or may not return the correct value given this API ambiguity. It is instead recommended use {@link #getLastLogin()} or {@link #getLastSeen()} depending on your needs.
      */
     @Deprecated
-    public long getLastPlayed();
+    long getLastPlayed();
 
     /**
      * Checks if this player has played on this server before.
      *
      * @return True if the player has played before, otherwise false
      */
-    public boolean hasPlayedBefore();
+    boolean hasPlayedBefore();
 
     /**
      * Gets the Location where the player will spawn at their bed, null if
@@ -165,8 +162,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return Bed Spawn Location if bed exists, otherwise null.
      */
-    @Nullable
-    public Location getBedSpawnLocation();
+    @Nullable Location getBedSpawnLocation();
     // Paper start
     /**
      * Gets the last date and time that this player logged into the server.
@@ -177,7 +173,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return last login time
      */
-    public long getLastLogin();
+    long getLastLogin();
 
     /**
      * Gets the last date and time that this player was seen on the server.
@@ -189,7 +185,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      *
      * @return last seen time
      */
-    public long getLastSeen();
+    long getLastSeen();
     // Paper end
 
     /**
@@ -203,7 +199,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
      */
-    public void incrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
+    void incrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player.
@@ -216,7 +212,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
      */
-    public void decrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
+    void decrementStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player.
@@ -228,7 +224,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
      */
-    public void incrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
+    void incrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player.
@@ -240,7 +236,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
      */
-    public void decrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
+    void decrementStatistic(@NotNull Statistic statistic, int amount) throws IllegalArgumentException;
 
     /**
      * Sets the given statistic for this player.
@@ -252,7 +248,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
      */
-    public void setStatistic(@NotNull Statistic statistic, int newValue) throws IllegalArgumentException;
+    void setStatistic(@NotNull Statistic statistic, int newValue) throws IllegalArgumentException;
 
     /**
      * Gets the value of the given statistic for this player.
@@ -263,7 +259,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the statistic requires an
      *     additional parameter
      */
-    public int getStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
+    int getStatistic(@NotNull Statistic statistic) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given material.
@@ -278,7 +274,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
+    void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given material.
@@ -293,7 +289,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
+    void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Gets the value of the given statistic for this player.
@@ -306,7 +302,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public int getStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
+    int getStatistic(@NotNull Statistic statistic, @NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given material.
@@ -320,7 +316,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
+    void incrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given material.
@@ -334,7 +330,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
+    void decrementStatistic(@NotNull Statistic statistic, @NotNull Material material, int amount) throws IllegalArgumentException;
 
     /**
      * Sets the given statistic for this player for the given material.
@@ -348,7 +344,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void setStatistic(@NotNull Statistic statistic, @NotNull Material material, int newValue) throws IllegalArgumentException;
+    void setStatistic(@NotNull Statistic statistic, @NotNull Material material, int newValue) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given entity.
@@ -363,7 +359,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
+    void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given entity.
@@ -378,7 +374,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
+    void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
      * Gets the value of the given statistic for this player.
@@ -391,7 +387,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public int getStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
+    int getStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType) throws IllegalArgumentException;
 
     /**
      * Increments the given statistic for this player for the given entity.
@@ -405,7 +401,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount) throws IllegalArgumentException;
+    void incrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount) throws IllegalArgumentException;
 
     /**
      * Decrements the given statistic for this player for the given entity.
@@ -419,7 +415,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount);
+    void decrementStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int amount);
 
     /**
      * Sets the given statistic for this player for the given entity.
@@ -433,5 +429,5 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @throws IllegalArgumentException if the given parameter is not valid
      *     for the statistic
      */
-    public void setStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int newValue);
+    void setStatistic(@NotNull Statistic statistic, @NotNull EntityType entityType, int newValue);
 }
diff --git a/src/main/java/org/bukkit/Particle.java b/src/main/java/org/bukkit/Particle.java
index 1020002ff7127877db2d7e096f2c521751bf13a7..2a21e7b4cdd65261e5a979c7302e3083273908eb 100644
--- a/src/main/java/org/bukkit/Particle.java
+++ b/src/main/java/org/bukkit/Particle.java
@@ -127,7 +127,7 @@ public enum Particle {
         private final float size;
 
         public DustOptions(@NotNull Color color, float size) {
-            Preconditions.checkArgument(color != null, "color");
+            Preconditions.checkArgument(true, "color");
             this.color = color;
             this.size = size;
         }
diff --git a/src/main/java/org/bukkit/PortalType.java b/src/main/java/org/bukkit/PortalType.java
index 427cfbb8b542215c5d9993056e0cadf18ab9bd4b..7e4627da86974bc43f01060cf4e831afe9b16d02 100644
--- a/src/main/java/org/bukkit/PortalType.java
+++ b/src/main/java/org/bukkit/PortalType.java
@@ -18,5 +18,5 @@ public enum PortalType {
     /**
      * This is a custom Plugin portal.
      */
-    CUSTOM;
+    CUSTOM
 }
diff --git a/src/main/java/org/bukkit/Raid.java b/src/main/java/org/bukkit/Raid.java
index 983a8c20a06d2b509602b27f49c090598b8ecc42..a2bea3bac332a839d8daf0ce8a2cdb67f99402b2 100644
--- a/src/main/java/org/bukkit/Raid.java
+++ b/src/main/java/org/bukkit/Raid.java
@@ -112,7 +112,7 @@ public interface Raid {
     /**
      * Represents the status of a {@link Raid}.
      */
-    public enum RaidStatus {
+    enum RaidStatus {
 
         /**
          * The raid is in progress.
@@ -129,6 +129,6 @@ public interface Raid {
         /**
          * The raid was terminated.
          */
-        STOPPED;
+        STOPPED
     }
 }
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index 0fd586d6053bf3a7d2e766a30541b143b298482a..f29f8a18c6d9c2654b7df08f375d965bd2ec3ed8 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -1,6 +1,5 @@
 package org.bukkit;
 
-import com.google.common.base.Predicates;
 import com.google.common.collect.ImmutableMap;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -32,7 +31,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * @see Bukkit#getAdvancement(org.bukkit.NamespacedKey)
      * @see Bukkit#advancementIterator()
      */
-    Registry<Advancement> ADVANCEMENT = new Registry<Advancement>() {
+    Registry<Advancement> ADVANCEMENT = new Registry<>() {
 
         @Nullable
         @Override
@@ -70,7 +69,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      * @see Bukkit#getBossBar(org.bukkit.NamespacedKey)
      * @see Bukkit#getBossBars()
      */
-    Registry<KeyedBossBar> BOSS_BARS = new Registry<KeyedBossBar>() {
+    Registry<KeyedBossBar> BOSS_BARS = new Registry<>() {
 
         @Nullable
         @Override
@@ -89,7 +88,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see Enchantment#getByKey(org.bukkit.NamespacedKey)
      */
-    Registry<Enchantment> ENCHANTMENT = new Registry<Enchantment>() {
+    Registry<Enchantment> ENCHANTMENT = new Registry<>() {
 
         @Nullable
         @Override
@@ -150,7 +149,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
      *
      * @see MemoryKey
      */
-    Registry<MemoryKey> MEMORY_MODULE_TYPE = new Registry<MemoryKey>() {
+    Registry<MemoryKey> MEMORY_MODULE_TYPE = new Registry<>() {
 
         @NotNull
         @Override
@@ -180,12 +179,12 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
     @Nullable
     T get(@NotNull NamespacedKey key);
 
-    static final class SimpleRegistry<T extends Enum<T> & Keyed> implements Registry<T> {
+    final class SimpleRegistry<T extends Enum<T> & Keyed> implements Registry<T> {
 
         private final Map<NamespacedKey, T> map;
 
         protected SimpleRegistry(@NotNull Class<T> type) {
-            this(type, Predicates.<T>alwaysTrue());
+            this(type, t -> true);
         }
 
         protected SimpleRegistry(@NotNull Class<T> type, @NotNull Predicate<T> predicate) {
diff --git a/src/main/java/org/bukkit/SandstoneType.java b/src/main/java/org/bukkit/SandstoneType.java
index 6277451c3c6c551078c237cd767b6d70c4f585ea..f483a07d5debe2747af2c2a6ea17548ff467fd13 100644
--- a/src/main/java/org/bukkit/SandstoneType.java
+++ b/src/main/java/org/bukkit/SandstoneType.java
@@ -15,7 +15,7 @@ public enum SandstoneType {
     private final byte data;
     private static final Map<Byte, SandstoneType> BY_DATA = Maps.newHashMap();
 
-    private SandstoneType(final int data) {
+    SandstoneType(final int data) {
         this.data = (byte) data;
     }
 
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index f3e27d2d02a9407bb1b091b8c1125ad5abf99e55..19ea7156b24472a9f205fbd1d19b49c041ddcdcf 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -63,7 +63,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * <p>
      * For use in {@link #broadcast(java.lang.String, java.lang.String)}.
      */
-    public static final String BROADCAST_CHANNEL_ADMINISTRATIVE = "bukkit.broadcast.admin";
+    String BROADCAST_CHANNEL_ADMINISTRATIVE = "bukkit.broadcast.admin";
 
     /**
      * Used for all announcement messages, such as informing users that a
@@ -71,31 +71,28 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * <p>
      * For use in {@link #broadcast(java.lang.String, java.lang.String)}.
      */
-    public static final String BROADCAST_CHANNEL_USERS = "bukkit.broadcast.user";
+    String BROADCAST_CHANNEL_USERS = "bukkit.broadcast.user";
 
     /**
      * Gets the name of this server implementation.
      *
      * @return name of this server implementation
      */
-    @NotNull
-    public String getName();
+    @NotNull String getName();
 
     /**
      * Gets the version string of this server implementation.
      *
      * @return version of this server implementation
      */
-    @NotNull
-    public String getVersion();
+    @NotNull String getVersion();
 
     /**
      * Gets the Bukkit version that this server is running.
      *
      * @return version of Bukkit
      */
-    @NotNull
-    public String getBukkitVersion();
+    @NotNull String getBukkitVersion();
 
     // Paper start - expose game version
     /**
@@ -134,15 +131,14 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return a view of currently online players.
      */
-    @NotNull
-    public Collection<? extends Player> getOnlinePlayers();
+    @NotNull Collection<? extends Player> getOnlinePlayers();
 
     /**
      * Get the maximum amount of players which can login to this server.
      *
      * @return the amount of players this server allows
      */
-    public int getMaxPlayers();
+    int getMaxPlayers();
 
     // Paper start
     /**
@@ -150,7 +146,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @param maxPlayers the amount of players this server allows
      */
-    public void setMaxPlayers(int maxPlayers);
+    void setMaxPlayers(int maxPlayers);
     // Paper end
 
     /**
@@ -158,14 +154,14 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the port number of this server
      */
-    public int getPort();
+    int getPort();
 
     /**
      * Get the view distance from this server.
      *
      * @return the view distance from this server.
      */
-    public int getViewDistance();
+    int getViewDistance();
 
     /**
      * Get the IP that this server is bound to, or empty string if not
@@ -174,71 +170,68 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @return the IP string that this server is bound to, otherwise empty
      *     string
      */
-    @NotNull
-    public String getIp();
+    @NotNull String getIp();
 
     /**
      * Get world type (level-type setting) for default world.
      *
      * @return the value of level-type (e.g. DEFAULT, FLAT, DEFAULT_1_1)
      */
-    @NotNull
-    public String getWorldType();
+    @NotNull String getWorldType();
 
     /**
      * Get generate-structures setting.
      *
      * @return true if structure generation is enabled, false otherwise
      */
-    public boolean getGenerateStructures();
+    boolean getGenerateStructures();
 
     /**
      * Get max world size.
      *
      * @return the maximum world size as specified for the server
      */
-    public int getMaxWorldSize();
+    int getMaxWorldSize();
 
     /**
      * Gets whether this server allows the End or not.
      *
      * @return whether this server allows the End or not
      */
-    public boolean getAllowEnd();
+    boolean getAllowEnd();
 
     /**
      * Gets whether this server allows the Nether or not.
      *
      * @return whether this server allows the Nether or not
      */
-    public boolean getAllowNether();
+    boolean getAllowNether();
 
     /**
      * Gets whether this server has a whitelist or not.
      *
      * @return whether this server has a whitelist or not
      */
-    public boolean hasWhitelist();
+    boolean hasWhitelist();
 
     /**
      * Sets if the server is whitelisted.
      *
      * @param value true for whitelist on, false for off
      */
-    public void setWhitelist(boolean value);
+    void setWhitelist(boolean value);
 
     /**
      * Gets a list of whitelisted players.
      *
      * @return a set containing all whitelisted players
      */
-    @NotNull
-    public Set<OfflinePlayer> getWhitelistedPlayers();
+    @NotNull Set<OfflinePlayer> getWhitelistedPlayers();
 
     /**
      * Reloads the whitelist from disk.
      */
-    public void reloadWhitelist();
+    void reloadWhitelist();
 
     /**
      * Broadcast a message to all players.
@@ -251,7 +244,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated // Paper
-    public int broadcastMessage(@NotNull String message);
+    int broadcastMessage(@NotNull String message);
 
     // Paper start
     /**
@@ -261,7 +254,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
         spigot().broadcast(component);
     }
 
@@ -272,7 +265,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().broadcast(components);
     }
     // Paper end
@@ -285,8 +278,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the name of the update folder
      */
-    @NotNull
-    public String getUpdateFolder();
+    @NotNull String getUpdateFolder();
 
     /**
      * Gets the update folder. The update folder is used to safely update
@@ -294,15 +286,14 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the update folder
      */
-    @NotNull
-    public File getUpdateFolderFile();
+    @NotNull File getUpdateFolderFile();
 
     /**
      * Gets the value of the connection throttle setting.
      *
      * @return the value of the connection throttle setting
      */
-    public long getConnectionThrottle();
+    long getConnectionThrottle();
 
     /**
      * Gets default ticks per animal spawns value.
@@ -323,7 +314,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the default ticks per animal spawns value
      */
-    public int getTicksPerAnimalSpawns();
+    int getTicksPerAnimalSpawns();
 
     /**
      * Gets the default ticks per monster spawns value.
@@ -344,7 +335,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the default ticks per monsters spawn value
      */
-    public int getTicksPerMonsterSpawns();
+    int getTicksPerMonsterSpawns();
 
     /**
      * Gets the default ticks per water mob spawns value.
@@ -364,7 +355,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the default ticks per water mobs spawn value
      */
-    public int getTicksPerWaterSpawns();
+    int getTicksPerWaterSpawns();
 
     /**
      * Gets the default ticks per water ambient mob spawns value.
@@ -384,7 +375,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the default ticks per water ambient mobs spawn value
      */
-    public int getTicksPerWaterAmbientSpawns();
+    int getTicksPerWaterAmbientSpawns();
 
     /**
      * Gets the default ticks per ambient mob spawns value.
@@ -404,7 +395,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the default ticks per ambient mobs spawn value
      */
-    public int getTicksPerAmbientSpawns();
+    int getTicksPerAmbientSpawns();
 
     /**
      * Gets a player object by the given username.
@@ -414,8 +405,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param name the name to look up
      * @return a player if one was found, null otherwise
      */
-    @Nullable
-    public Player getPlayer(@NotNull String name);
+    @Nullable Player getPlayer(@NotNull String name);
 
     /**
      * Gets the player with the exact given name, case insensitive.
@@ -423,8 +413,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param name Exact name of the player to retrieve
      * @return a player object if one was found, null otherwise
      */
-    @Nullable
-    public Player getPlayerExact(@NotNull String name);
+    @Nullable Player getPlayerExact(@NotNull String name);
 
     /**
      * Attempts to match any players with the given name, and returns a list
@@ -436,8 +425,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param name the (partial) name to match
      * @return list of all possible players
      */
-    @NotNull
-    public List<Player> matchPlayer(@NotNull String name);
+    @NotNull List<Player> matchPlayer(@NotNull String name);
 
     /**
      * Gets the player with the given UUID.
@@ -445,8 +433,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param id UUID of the player to retrieve
      * @return a player object if one was found, null otherwise
      */
-    @Nullable
-    public Player getPlayer(@NotNull UUID id);
+    @Nullable Player getPlayer(@NotNull UUID id);
 
     // Paper start
     /**
@@ -456,8 +443,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param playerName the player name to look up the unique ID for
      * @return A UUID, or null if that player name is not registered with Minecraft and the server is in online mode
      */
-    @Nullable
-    public UUID getPlayerUniqueId(@NotNull String playerName);
+    @Nullable UUID getPlayerUniqueId(@NotNull String playerName);
     // Paper end
 
     /**
@@ -465,32 +451,28 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return a plugin manager for this Server instance
      */
-    @NotNull
-    public PluginManager getPluginManager();
+    @NotNull PluginManager getPluginManager();
 
     /**
      * Gets the scheduler for managing scheduled events.
      *
      * @return a scheduling service for this server
      */
-    @NotNull
-    public BukkitScheduler getScheduler();
+    @NotNull BukkitScheduler getScheduler();
 
     /**
      * Gets a services manager.
      *
      * @return s services manager
      */
-    @NotNull
-    public ServicesManager getServicesManager();
+    @NotNull ServicesManager getServicesManager();
 
     /**
      * Gets a list of all worlds on this server.
      *
      * @return a list of worlds
      */
-    @NotNull
-    public List<World> getWorlds();
+    @NotNull List<World> getWorlds();
 
     /**
      * Creates or loads a world with the given name using the specified
@@ -502,8 +484,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param creator the options to use when creating the world
      * @return newly created or loaded world
      */
-    @Nullable
-    public World createWorld(@NotNull WorldCreator creator);
+    @Nullable World createWorld(@NotNull WorldCreator creator);
 
     /**
      * Unloads a world with the given name.
@@ -512,7 +493,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param save whether to save the chunks before unloading
      * @return true if successful, false otherwise
      */
-    public boolean unloadWorld(@NotNull String name, boolean save);
+    boolean unloadWorld(@NotNull String name, boolean save);
 
     /**
      * Unloads the given world.
@@ -521,7 +502,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param save whether to save the chunks before unloading
      * @return true if successful, false otherwise
      */
-    public boolean unloadWorld(@NotNull World world, boolean save);
+    boolean unloadWorld(@NotNull World world, boolean save);
 
     /**
      * Gets the world with the given name.
@@ -529,8 +510,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param name the name of the world to retrieve
      * @return a world with the given name, or null if none exists
      */
-    @Nullable
-    public World getWorld(@NotNull String name);
+    @Nullable World getWorld(@NotNull String name);
 
     /**
      * Gets the world from the given Unique ID.
@@ -538,8 +518,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param uid a unique-id of the world to retrieve
      * @return a world with the given Unique ID, or null if none exists
      */
-    @Nullable
-    public World getWorld(@NotNull UUID uid);
+    @Nullable World getWorld(@NotNull UUID uid);
 
     // Paper start
     /**
@@ -548,8 +527,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param worldKey the NamespacedKey of the world to retrieve
      * @return a world with the given NamespacedKey, or null if none exists
      */
-    @Nullable
-    public World getWorld(@NotNull NamespacedKey worldKey);
+    @Nullable World getWorld(@NotNull NamespacedKey worldKey);
     // Paper end
 
     /**
@@ -560,8 +538,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated Magic value
      */
     @Deprecated
-    @Nullable
-    public MapView getMap(int id);
+    @Nullable MapView getMap(int id);
 
     /**
      * Create a new map with an automatically assigned ID.
@@ -569,8 +546,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param world the world the map will belong to
      * @return a newly created map view
      */
-    @NotNull
-    public MapView createMap(@NotNull World world);
+    @NotNull MapView createMap(@NotNull World world);
 
     /**
      * Create a new explorer map targeting the closest nearby structure of a
@@ -587,8 +563,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @see World#locateNearestStructure(org.bukkit.Location,
      *      org.bukkit.StructureType, int, boolean)
      */
-    @NotNull
-    public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType);
+    @NotNull ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType);
 
     /**
      * Create a new explorer map targeting the closest nearby structure of a
@@ -608,27 +583,25 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @see World#locateNearestStructure(org.bukkit.Location,
      *      org.bukkit.StructureType, int, boolean)
      */
-    @NotNull
-    public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored);
+    @NotNull ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored);
 
     /**
      * Reloads the server, refreshing settings and plugin information.
      */
-    public void reload();
+    void reload();
 
     /**
      * Reload only the Minecraft data for the server. This includes custom
      * advancements and loot tables.
      */
-    public void reloadData();
+    void reloadData();
 
     /**
      * Returns the primary logger associated with this server instance.
      *
      * @return Logger associated with this server
      */
-    @NotNull
-    public Logger getLogger();
+    @NotNull Logger getLogger();
 
     /**
      * Gets a {@link PluginCommand} with the given name or alias.
@@ -636,13 +609,12 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param name the name of the command to retrieve
      * @return a plugin command if found, null otherwise
      */
-    @Nullable
-    public PluginCommand getPluginCommand(@NotNull String name);
+    @Nullable PluginCommand getPluginCommand(@NotNull String name);
 
     /**
      * Writes loaded players to disk.
      */
-    public void savePlayers();
+    void savePlayers();
 
     /**
      * Dispatches a command on this server, and executes it if found.
@@ -654,7 +626,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @throws CommandException thrown when the executor for the given command
      *     fails with an unhandled exception
      */
-    public boolean dispatchCommand(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException;
+    boolean dispatchCommand(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException;
 
     /**
      * Adds a recipe to the crafting manager.
@@ -664,7 +636,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *     reason
      */
     @Contract("null -> false")
-    public boolean addRecipe(@Nullable Recipe recipe);
+    boolean addRecipe(@Nullable Recipe recipe);
 
     /**
      * Get a list of all recipes for a given item. The stack size is ignored
@@ -673,8 +645,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param result the item to match against recipe results
      * @return a list of recipes with the given result
      */
-    @NotNull
-    public List<Recipe> getRecipesFor(@NotNull ItemStack result);
+    @NotNull List<Recipe> getRecipesFor(@NotNull ItemStack result);
 
     /**
      * Get the {@link Recipe} for the given key.
@@ -682,26 +653,24 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param recipeKey the key of the recipe to return
      * @return the recipe for the given key or null.
      */
-    @Nullable
-    public Recipe getRecipe(@NotNull NamespacedKey recipeKey);
+    @Nullable Recipe getRecipe(@NotNull NamespacedKey recipeKey);
 
     /**
      * Get an iterator through the list of crafting recipes.
      *
      * @return an iterator
      */
-    @NotNull
-    public Iterator<Recipe> recipeIterator();
+    @NotNull Iterator<Recipe> recipeIterator();
 
     /**
      * Clears the list of crafting recipes.
      */
-    public void clearRecipes();
+    void clearRecipes();
 
     /**
      * Resets the list of crafting recipes to the default.
      */
-    public void resetRecipes();
+    void resetRecipes();
 
     /**
      * Remove a recipe from the server.
@@ -713,55 +682,54 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param key NamespacedKey of recipe to remove.
      * @return True if recipe was removed
      */
-    public boolean removeRecipe(@NotNull NamespacedKey key);
+    boolean removeRecipe(@NotNull NamespacedKey key);
 
     /**
      * Gets a list of command aliases defined in the server properties.
      *
      * @return a map of aliases to command names
      */
-    @NotNull
-    public Map<String, String[]> getCommandAliases();
+    @NotNull Map<String, String[]> getCommandAliases();
 
     /**
      * Gets the radius, in blocks, around each worlds spawn point to protect.
      *
      * @return spawn radius, or 0 if none
      */
-    public int getSpawnRadius();
+    int getSpawnRadius();
 
     /**
      * Sets the radius, in blocks, around each worlds spawn point to protect.
      *
      * @param value new spawn radius, or 0 if none
      */
-    public void setSpawnRadius(int value);
+    void setSpawnRadius(int value);
 
     /**
      * Gets whether the Server is in online mode or not.
      *
      * @return true if the server authenticates clients, false otherwise
      */
-    public boolean getOnlineMode();
+    boolean getOnlineMode();
 
     /**
      * Gets whether this server allows flying or not.
      *
      * @return true if the server allows flight, false otherwise
      */
-    public boolean getAllowFlight();
+    boolean getAllowFlight();
 
     /**
      * Gets whether the server is in hardcore mode or not.
      *
      * @return true if the server mode is hardcore, false otherwise
      */
-    public boolean isHardcore();
+    boolean isHardcore();
 
     /**
      * Shutdowns the server, stopping everything.
      */
-    public void shutdown();
+    void shutdown();
 
     /**
      * Broadcasts the specified message to every user with the given
@@ -774,7 +742,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}
      */
     @Deprecated // Paper
-    public int broadcast(@NotNull String message, @NotNull String permission);
+    int broadcast(@NotNull String message, @NotNull String permission);
     // Paper start
     /**
      * Broadcasts the specified message to every user with the given
@@ -805,8 +773,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @see #getOfflinePlayer(java.util.UUID)
      */
     @Deprecated
-    @NotNull
-    public OfflinePlayer getOfflinePlayer(@NotNull String name);
+    @NotNull OfflinePlayer getOfflinePlayer(@NotNull String name);
 
     // Paper start
     /**
@@ -823,8 +790,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @see #getOfflinePlayer(String)
      * @see #getOfflinePlayer(java.util.UUID)
      */
-    @Nullable
-    public OfflinePlayer getOfflinePlayerIfCached(@NotNull String name);
+    @Nullable OfflinePlayer getOfflinePlayerIfCached(@NotNull String name);
     // Paper end
 
     /**
@@ -837,38 +803,35 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param id the UUID of the player to retrieve
      * @return an offline player
      */
-    @NotNull
-    public OfflinePlayer getOfflinePlayer(@NotNull UUID id);
+    @NotNull OfflinePlayer getOfflinePlayer(@NotNull UUID id);
 
     /**
      * Gets a set containing all current IPs that are banned.
      *
      * @return a set containing banned IP addresses
      */
-    @NotNull
-    public Set<String> getIPBans();
+    @NotNull Set<String> getIPBans();
 
     /**
      * Bans the specified address from the server.
      *
      * @param address the IP address to ban
      */
-    public void banIP(@NotNull String address);
+    void banIP(@NotNull String address);
 
     /**
      * Unbans the specified address from the server.
      *
      * @param address the IP address to unban
      */
-    public void unbanIP(@NotNull String address);
+    void unbanIP(@NotNull String address);
 
     /**
      * Gets a set containing all banned players.
      *
      * @return a set containing banned players
      */
-    @NotNull
-    public Set<OfflinePlayer> getBannedPlayers();
+    @NotNull Set<OfflinePlayer> getBannedPlayers();
 
     /**
      * Gets a ban list for the supplied type.
@@ -879,31 +842,28 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param type the type of list to fetch, cannot be null
      * @return a ban list of the specified type
      */
-    @NotNull
-    public BanList getBanList(@NotNull BanList.Type type);
+    @NotNull BanList getBanList(@NotNull BanList.Type type);
 
     /**
      * Gets a set containing all player operators.
      *
      * @return a set containing player operators
      */
-    @NotNull
-    public Set<OfflinePlayer> getOperators();
+    @NotNull Set<OfflinePlayer> getOperators();
 
     /**
      * Gets the default {@link GameMode} for new players.
      *
      * @return the default game mode
      */
-    @NotNull
-    public GameMode getDefaultGameMode();
+    @NotNull GameMode getDefaultGameMode();
 
     /**
      * Sets the default {@link GameMode} for new players.
      *
      * @param mode the new game mode
      */
-    public void setDefaultGameMode(@NotNull GameMode mode);
+    void setDefaultGameMode(@NotNull GameMode mode);
 
     /**
      * Gets a {@link ConsoleCommandSender} that may be used as an input source
@@ -911,40 +871,35 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return a console command sender
      */
-    @NotNull
-    public ConsoleCommandSender getConsoleSender();
+    @NotNull ConsoleCommandSender getConsoleSender();
 
     /**
      * Gets the folder that contains all of the various {@link World}s.
      *
      * @return folder that contains all worlds
      */
-    @NotNull
-    public File getWorldContainer();
+    @NotNull File getWorldContainer();
 
     /**
      * Gets every player that has ever played on this server.
      *
      * @return an array containing all previous players
      */
-    @NotNull
-    public OfflinePlayer[] getOfflinePlayers();
+    @NotNull OfflinePlayer[] getOfflinePlayers();
 
     /**
      * Gets the {@link Messenger} responsible for this server.
      *
      * @return messenger responsible for this server
      */
-    @NotNull
-    public Messenger getMessenger();
+    @NotNull Messenger getMessenger();
 
     /**
      * Gets the {@link HelpMap} providing help topics for this server.
      *
      * @return a help map for this server
      */
-    @NotNull
-    public HelpMap getHelpMap();
+    @NotNull HelpMap getHelpMap();
 
     /**
      * Creates an empty inventory with the specified type. If the type
@@ -1190,8 +1145,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return the configured warning state
      */
-    @NotNull
-    public WarningState getWarningState();
+    @NotNull WarningState getWarningState();
 
     /**
      * Gets the instance of the item factory (for {@link ItemMeta}).
@@ -1263,14 +1217,14 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @param threshold the idle timeout in minutes
      */
-    public void setIdleTimeout(int threshold);
+    void setIdleTimeout(int threshold);
 
     /**
      * Gets the idle kick timeout.
      *
      * @return the idle timeout in minutes
      */
-    public int getIdleTimeout();
+    int getIdleTimeout();
 
     /**
      * Create a ChunkData for use in a generator.
@@ -1281,8 +1235,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @return a new ChunkData for the world
      *
      */
-    @NotNull
-    public ChunkGenerator.ChunkData createChunkData(@NotNull World world);
+    @NotNull ChunkGenerator.ChunkData createChunkData(@NotNull World world);
 
     // Paper start
     /**
@@ -1395,8 +1348,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return current server TPS (1m, 5m, 15m in Paper-Server)
      */
-    @NotNull
-    public double[] getTPS();
+    @NotNull double[] getTPS();
 
     /**
      * Get a sample of the servers last tick times (in nanos)
@@ -1459,8 +1411,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @param consumer consumer to run on new instance before returning
      * @return new data instance
      */
-    @NotNull
-    public BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer);
+    @NotNull BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer);
 
     /**
      * Creates a new {@link BlockData} instance with material and properties
@@ -1568,7 +1519,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     UnsafeValues getUnsafe();
 
     // Spigot start
-    public class Spigot {
+    class Spigot {
 
         @NotNull
         public org.bukkit.configuration.file.YamlConfiguration getConfig() {
diff --git a/src/main/java/org/bukkit/SkullType.java b/src/main/java/org/bukkit/SkullType.java
index 1c3d9ae9b07ccca520be4531b9946194a0ea2b38..1b3fd158518f88d88e941e677d8a471c995a3c5f 100644
--- a/src/main/java/org/bukkit/SkullType.java
+++ b/src/main/java/org/bukkit/SkullType.java
@@ -11,5 +11,5 @@ public enum SkullType {
     ZOMBIE,
     PLAYER,
     CREEPER,
-    DRAGON;
+    DRAGON
 }
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index d0ce64412276512cde133937a85a3340a70eea6d..5f27c9d85e0af0b6cf8dd16c445882dc38d5fc78 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -1007,7 +1007,7 @@ public enum Sound implements Keyed, net.kyori.adventure.sound.Sound.Type { // Pa
 
     private final NamespacedKey key;
 
-    private Sound(String key) {
+    Sound(String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/SoundCategory.java b/src/main/java/org/bukkit/SoundCategory.java
index ac5e263d737973af077e3406a84a84baca4370db..1a7f0d3bad568465d184d49e650567c69700a5c3 100644
--- a/src/main/java/org/bukkit/SoundCategory.java
+++ b/src/main/java/org/bukkit/SoundCategory.java
@@ -14,5 +14,5 @@ public enum SoundCategory {
     NEUTRAL,
     PLAYERS,
     AMBIENT,
-    VOICE;
+    VOICE
 }
diff --git a/src/main/java/org/bukkit/SoundGroup.java b/src/main/java/org/bukkit/SoundGroup.java
index 1f18c6bb39b151de547709112a7f57f95eabe410..f2fb342c90e6b32785e2df50339e0b789df1a96e 100644
--- a/src/main/java/org/bukkit/SoundGroup.java
+++ b/src/main/java/org/bukkit/SoundGroup.java
@@ -16,7 +16,7 @@ public interface SoundGroup {
      *
      * @return volume
      */
-    public float getVolume();
+    float getVolume();
 
     /**
      * Gets the pitch these sounds are played at.
@@ -26,45 +26,40 @@ public interface SoundGroup {
      *
      * @return pitch
      */
-    public float getPitch();
+    float getPitch();
 
     /**
      * Gets the corresponding breaking sound for this group.
      *
      * @return the break sound
      */
-    @NotNull
-    public Sound getBreakSound();
+    @NotNull Sound getBreakSound();
 
     /**
      * Gets the corresponding step sound for this group.
      *
      * @return the step sound
      */
-    @NotNull
-    public Sound getStepSound();
+    @NotNull Sound getStepSound();
 
     /**
      * Gets the corresponding place sound for this group.
      *
      * @return the place sound
      */
-    @NotNull
-    public Sound getPlaceSound();
+    @NotNull Sound getPlaceSound();
 
     /**
      * Gets the corresponding hit sound for this group.
      *
      * @return the hit sound
      */
-    @NotNull
-    public Sound getHitSound();
+    @NotNull Sound getHitSound();
 
     /**
      * Gets the corresponding fall sound for this group.
      *
      * @return the fall sound
      */
-    @NotNull
-    public Sound getFallSound();
+    @NotNull Sound getFallSound();
 }
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 5cb41f417eb87d4aecd61de30f2a44cec5a9a4cd..1d9b81c4181f8daffa546bfe374c274c4d7c0009 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -96,11 +96,11 @@ public enum Statistic implements Keyed {
     private final Type type;
     private final NamespacedKey key;
 
-    private Statistic() {
+    Statistic() {
         this(Type.UNTYPED);
     }
 
-    private Statistic(/*@NotNull*/ Type type) {
+    Statistic(/*@NotNull*/ Type type) {
         this.type = type;
         this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
     }
@@ -171,6 +171,6 @@ public enum Statistic implements Keyed {
         /**
          * Statistics of this type require an EntityType qualifier.
          */
-        ENTITY;
+        ENTITY
     }
 }
diff --git a/src/main/java/org/bukkit/TreeSpecies.java b/src/main/java/org/bukkit/TreeSpecies.java
index 2b177f98a74612ddc192745bcbb689ebdb1e104a..ab88f1de67a87ee04b4733251217026297913e4b 100644
--- a/src/main/java/org/bukkit/TreeSpecies.java
+++ b/src/main/java/org/bukkit/TreeSpecies.java
@@ -38,7 +38,7 @@ public enum TreeSpecies {
     private final byte data;
     private static final Map<Byte, TreeSpecies> BY_DATA = Maps.newHashMap();
 
-    private TreeSpecies(final int data) {
+    TreeSpecies(final int data) {
         this.data = (byte) data;
     }
 
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 7f90ef2fd1c87c5b8b69f2e9dba3ad8e6e9ce3ec..4cf0bdd8799fbbd4a95e993378e66d409451a91d 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -123,7 +123,7 @@ public interface UnsafeValues {
      * <p>
      * Use this when sending custom packets, so that there are no collisions on the client or server.
      */
-    public int nextEntityId();
+    int nextEntityId();
 
     /**
      * Gets the item rarity of a material. The material <b>MUST</b> be an item.
@@ -132,7 +132,7 @@ public interface UnsafeValues {
      * @param material the material to get the rarity of
      * @return the item rarity
      */
-    public io.papermc.paper.inventory.ItemRarity getItemRarity(Material material);
+    io.papermc.paper.inventory.ItemRarity getItemRarity(Material material);
 
     /**
      * Gets the item rarity of the itemstack. The rarity can change based on enchantements.
@@ -140,6 +140,6 @@ public interface UnsafeValues {
      * @param itemStack the itemstack to get the rarity of
      * @return the itemstack rarity
      */
-    public io.papermc.paper.inventory.ItemRarity getItemStackRarity(ItemStack itemStack);
+    io.papermc.paper.inventory.ItemRarity getItemStackRarity(ItemStack itemStack);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/Warning.java b/src/main/java/org/bukkit/Warning.java
index 3024468af4c073324e536c1cb26beffb1e09f3f4..bc3f621689306e8806233f1af59cf38783f176da 100644
--- a/src/main/java/org/bukkit/Warning.java
+++ b/src/main/java/org/bukkit/Warning.java
@@ -22,7 +22,7 @@ public @interface Warning {
     /**
      * This represents the states that server verbose for warnings may be.
      */
-    public enum WarningState {
+    enum WarningState {
 
         /**
          * Indicates all warnings should be printed for deprecated items.
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 4c80a999fcc4d656c047b96cb549782c693b33cd..9b29ad97b87cba4177b501f1592ddb118fdf2a58 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -3,7 +3,6 @@ package org.bukkit;
 import java.io.File;
 
 import org.bukkit.event.entity.CreatureSpawnEvent;
-import org.bukkit.generator.ChunkGenerator;
 
 import java.util.ArrayList;
 import java.util.Collection;
@@ -86,8 +85,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the block
      * @return Block at the given coordinates
      */
-    @NotNull
-    public Block getBlockAt(int x, int y, int z);
+    @NotNull Block getBlockAt(int x, int y, int z);
 
     /**
      * Gets the {@link Block} at the given {@link Location}
@@ -95,8 +93,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param location Location of the block
      * @return Block at the given location
      */
-    @NotNull
-    public Block getBlockAt(@NotNull Location location);
+    @NotNull Block getBlockAt(@NotNull Location location);
 
     // Paper start
     /**
@@ -107,7 +104,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see Block#getBlockKey(int, int, int)
      */
     @NotNull
-    public default Block getBlockAtKey(long key) {
+    default Block getBlockAtKey(long key) {
         int x = Block.getBlockKeyX(key);
         int y = Block.getBlockKeyY(key);
         int z = Block.getBlockKeyZ(key);
@@ -122,7 +119,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see Block#getBlockKey(int, int, int)
      */
     @NotNull
-    public default Location getLocationAtKey(long key) {
+    default Location getLocationAtKey(long key) {
         int x = Block.getBlockKeyX(key);
         int y = Block.getBlockKeyY(key);
         int z = Block.getBlockKeyZ(key);
@@ -138,7 +135,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the blocks
      * @return Y-coordinate of the highest non-empty block
      */
-    public int getHighestBlockYAt(int x, int z);
+    int getHighestBlockYAt(int x, int z);
 
     /**
      * Gets the highest non-empty (impassable) coordinate at the given
@@ -147,7 +144,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param location Location of the blocks
      * @return Y-coordinate of the highest non-empty block
      */
-    public int getHighestBlockYAt(@NotNull Location location);
+    int getHighestBlockYAt(@NotNull Location location);
 
     /**
      * Gets the highest non-empty (impassable) block at the given coordinates.
@@ -156,8 +153,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the block
      * @return Highest non-empty block
      */
-    @NotNull
-    public Block getHighestBlockAt(int x, int z);
+    @NotNull Block getHighestBlockAt(int x, int z);
 
     /**
      * Gets the highest non-empty (impassable) block at the given coordinates.
@@ -165,8 +161,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param location Coordinates to get the highest block
      * @return Highest non-empty block
      */
-    @NotNull
-    public Block getHighestBlockAt(@NotNull Location location);
+    @NotNull Block getHighestBlockAt(@NotNull Location location);
 
     // Paper start - Add heightmap API
     /**
@@ -186,7 +181,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see com.destroystokyo.paper.HeightmapType
      */
     @Deprecated
-    public int getHighestBlockYAt(int x, int z, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException;
+    int getHighestBlockYAt(int x, int z, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException;
 
     /**
      * Returns the highest block's y-coordinate at the specified block coordinates that match the specified heightmap's conditions.
@@ -261,7 +256,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Y-coordinate of the highest block corresponding to the
      * {@link HeightMap}
      */
-    public int getHighestBlockYAt(int x, int z, @NotNull HeightMap heightMap);
+    int getHighestBlockYAt(int x, int z, @NotNull HeightMap heightMap);
 
     /**
      * Gets the highest coordinate corresponding to the {@link HeightMap} at the
@@ -273,7 +268,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Y-coordinate of the highest block corresponding to the
      * {@link HeightMap}
      */
-    public int getHighestBlockYAt(@NotNull Location location, @NotNull HeightMap heightMap);
+    int getHighestBlockYAt(@NotNull Location location, @NotNull HeightMap heightMap);
 
     /**
      * Gets the highest block corresponding to the {@link HeightMap} at the
@@ -285,8 +280,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * point
      * @return Highest block corresponding to the {@link HeightMap}
      */
-    @NotNull
-    public Block getHighestBlockAt(int x, int z, @NotNull HeightMap heightMap);
+    @NotNull Block getHighestBlockAt(int x, int z, @NotNull HeightMap heightMap);
 
     /**
      * Gets the highest block corresponding to the {@link HeightMap} at the
@@ -297,8 +291,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * point
      * @return Highest block corresponding to the {@link HeightMap}
      */
-    @NotNull
-    public Block getHighestBlockAt(@NotNull Location location, @NotNull HeightMap heightMap);
+    @NotNull Block getHighestBlockAt(@NotNull Location location, @NotNull HeightMap heightMap);
 
     /**
      * Gets the {@link Chunk} at the given coordinates
@@ -307,8 +300,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the chunk
      * @return Chunk at the given coordinates
      */
-    @NotNull
-    public Chunk getChunkAt(int x, int z);
+    @NotNull Chunk getChunkAt(int x, int z);
 
     /**
      * Gets the {@link Chunk} at the given {@link Location}
@@ -316,8 +308,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param location Location of the chunk
      * @return Chunk at the given location
      */
-    @NotNull
-    public Chunk getChunkAt(@NotNull Location location);
+    @NotNull Chunk getChunkAt(@NotNull Location location);
 
     /**
      * Gets the {@link Chunk} that contains the given {@link Block}
@@ -325,8 +316,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param block Block to get the containing chunk from
      * @return The chunk that contains the given block
      */
-    @NotNull
-    public Chunk getChunkAt(@NotNull Block block);
+    @NotNull Chunk getChunkAt(@NotNull Block block);
 
     // Paper start
     /**
@@ -339,7 +329,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return The chunk at the specified key
      */
     @NotNull
-    public default Chunk getChunkAt(long chunkKey) {
+    default Chunk getChunkAt(long chunkKey) {
         return getChunkAt((int) chunkKey, (int) (chunkKey >> 32));
     }
 
@@ -350,7 +340,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param chunkKey The Chunk Key to look up the chunk by
      * @return true if the chunk has been generated, otherwise false
      */
-    public default boolean isChunkGenerated(long chunkKey) {
+    default boolean isChunkGenerated(long chunkKey) {
         return isChunkGenerated((int) chunkKey, (int) (chunkKey >> 32));
     }
 
@@ -370,8 +360,8 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @deprecated Use either the Future or the Consumer based methods
      */
     @Deprecated
-    public static interface ChunkLoadCallback extends java.util.function.Consumer<Chunk> {
-        public void onLoad(@NotNull Chunk chunk);
+    interface ChunkLoadCallback extends java.util.function.Consumer<Chunk> {
+        void onLoad(@NotNull Chunk chunk);
 
         // backwards compat to old api
         @Override
@@ -400,7 +390,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *           will be executed synchronously
      */
     @Deprecated
-    public default void getChunkAtAsync(int x, int z, @NotNull ChunkLoadCallback cb) {
+    default void getChunkAtAsync(int x, int z, @NotNull ChunkLoadCallback cb) {
         getChunkAtAsync(x, z, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -426,7 +416,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *           will be executed synchronously
      */
     @Deprecated
-    public default void getChunkAtAsync(@NotNull Location loc, @NotNull ChunkLoadCallback cb) {
+    default void getChunkAtAsync(@NotNull Location loc, @NotNull ChunkLoadCallback cb) {
         getChunkAtAsync(loc, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -452,7 +442,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *           will be executed synchronously
      */
     @Deprecated
-    public default void getChunkAtAsync(@NotNull Block block, @NotNull ChunkLoadCallback cb) {
+    default void getChunkAtAsync(@NotNull Block block, @NotNull ChunkLoadCallback cb) {
         getChunkAtAsync(block, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -477,7 +467,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(int x, int z, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(int x, int z, @NotNull java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(x, z, true).thenAccept(cb).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -503,7 +493,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(int x, int z, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(int x, int z, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(x, z, gen).thenAccept(cb).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -527,7 +517,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Location loc, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull Location loc, @NotNull java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true, cb);
     }
 
@@ -549,7 +539,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Location loc, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull Location loc, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen, cb);
     }
 
@@ -570,7 +560,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Block block, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull Block block, @NotNull java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true, cb);
     }
 
@@ -592,7 +582,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    public default void getChunkAtAsync(@NotNull Block block, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull Block block, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen, cb);
     }
 
@@ -612,7 +602,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true);
     }
 
@@ -633,7 +623,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc, boolean gen) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen);
     }
 
@@ -653,7 +643,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true);
     }
 
@@ -674,7 +664,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block, boolean gen) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen);
     }
 
@@ -696,7 +686,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z) {
         return getChunkAtAsync(x, z, true);
     }
 
@@ -719,7 +709,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen) {
         return getChunkAtAsync(x, z, gen, false);
     }
 
@@ -739,7 +729,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true, true);
     }
 
@@ -760,7 +750,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc, boolean gen) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen, true);
     }
 
@@ -780,7 +770,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true, true);
     }
 
@@ -801,7 +791,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block, boolean gen) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen, true);
     }
 
@@ -823,7 +813,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(int x, int z) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(int x, int z) {
         return getChunkAtAsync(x, z, true, true);
     }
 
@@ -846,15 +836,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param chunk The chunk to check
      * @return true if the chunk is loaded, otherwise false
      */
-    public boolean isChunkLoaded(@NotNull Chunk chunk);
+    boolean isChunkLoaded(@NotNull Chunk chunk);
 
     /**
      * Gets an array of all loaded {@link Chunk}s
      *
      * @return Chunk[] containing all loaded chunks
      */
-    @NotNull
-    public Chunk[] getLoadedChunks();
+    @NotNull Chunk[] getLoadedChunks();
 
     /**
      * Loads the specified {@link Chunk}.
@@ -865,7 +854,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @param chunk The chunk to load
      */
-    public void loadChunk(@NotNull Chunk chunk);
+    void loadChunk(@NotNull Chunk chunk);
 
     /**
      * Checks if the {@link Chunk} at the specified coordinates is loaded
@@ -874,7 +863,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the chunk
      * @return true if the chunk is loaded, otherwise false
      */
-    public boolean isChunkLoaded(int x, int z);
+    boolean isChunkLoaded(int x, int z);
 
     /**
      * Checks if the {@link Chunk} at the specified coordinates is generated
@@ -883,7 +872,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the chunk
      * @return true if the chunk is generated, otherwise false
      */
-    public boolean isChunkGenerated(int x, int z);
+    boolean isChunkGenerated(int x, int z);
 
     /**
      * Checks if the {@link Chunk} at the specified coordinates is loaded and
@@ -898,7 +887,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     will not be loaded for more than 1 tick unless they are in use.
      */
     @Deprecated
-    public boolean isChunkInUse(int x, int z);
+    boolean isChunkInUse(int x, int z);
 
     /**
      * Loads the {@link Chunk} at the specified coordinates.
@@ -915,7 +904,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param x X-coordinate of the chunk
      * @param z Z-coordinate of the chunk
      */
-    public void loadChunk(int x, int z);
+    void loadChunk(int x, int z);
 
     /**
      * Loads the {@link Chunk} at the specified coordinates.
@@ -930,7 +919,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     already exist
      * @return true if the chunk has loaded successfully, otherwise false
      */
-    public boolean loadChunk(int x, int z, boolean generate);
+    boolean loadChunk(int x, int z, boolean generate);
 
     /**
      * Safely unloads and saves the {@link Chunk} at the specified coordinates
@@ -941,7 +930,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param chunk the chunk to unload
      * @return true if the chunk has unloaded successfully, otherwise false
      */
-    public boolean unloadChunk(@NotNull Chunk chunk);
+    boolean unloadChunk(@NotNull Chunk chunk);
 
     /**
      * Safely unloads and saves the {@link Chunk} at the specified coordinates
@@ -953,7 +942,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the chunk
      * @return true if the chunk has unloaded successfully, otherwise false
      */
-    public boolean unloadChunk(int x, int z);
+    boolean unloadChunk(int x, int z);
 
     /**
      * Safely unloads and optionally saves the {@link Chunk} at the specified
@@ -964,7 +953,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param save Whether or not to save the chunk
      * @return true if the chunk has unloaded successfully, otherwise false
      */
-    public boolean unloadChunk(int x, int z, boolean save);
+    boolean unloadChunk(int x, int z, boolean save);
 
     /**
      * Safely queues the {@link Chunk} at the specified coordinates for
@@ -974,7 +963,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the chunk
      * @return true is the queue attempt was successful, otherwise false
      */
-    public boolean unloadChunkRequest(int x, int z);
+    boolean unloadChunkRequest(int x, int z);
 
     /**
      * Regenerates the {@link Chunk} at the specified coordinates
@@ -988,7 +977,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * this method should be avoided as it is known to produce buggy results.
      */
     @Deprecated
-    public boolean regenerateChunk(int x, int z);
+    boolean regenerateChunk(int x, int z);
 
     /**
      * Resends the {@link Chunk} to all clients
@@ -1000,7 +989,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @deprecated This method is not guaranteed to work suitably across all client implementations.
      */
     @Deprecated
-    public boolean refreshChunk(int x, int z);
+    boolean refreshChunk(int x, int z);
 
     /**
      * Gets whether the chunk at the specified chunk coordinates is force
@@ -1012,7 +1001,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the chunk
      * @return force load status
      */
-    public boolean isChunkForceLoaded(int x, int z);
+    boolean isChunkForceLoaded(int x, int z);
 
     /**
      * Sets whether the chunk at the specified chunk coordinates is force
@@ -1024,7 +1013,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z-coordinate of the chunk
      * @param forced force load status
      */
-    public void setChunkForceLoaded(int x, int z, boolean forced);
+    void setChunkForceLoaded(int x, int z, boolean forced);
 
     /**
      * Returns all force loaded chunks in this world.
@@ -1033,8 +1022,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return unmodifiable collection of force loaded chunks
      */
-    @NotNull
-    public Collection<Chunk> getForceLoadedChunks();
+    @NotNull Collection<Chunk> getForceLoadedChunks();
 
     /**
      * Adds a plugin ticket for the specified chunk, loading the chunk if it is
@@ -1053,7 +1041,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @throws IllegalStateException If the specified plugin is not enabled
      * @see #removePluginChunkTicket(int, int, Plugin)
      */
-    public boolean addPluginChunkTicket(int x, int z, @NotNull Plugin plugin);
+    boolean addPluginChunkTicket(int x, int z, @NotNull Plugin plugin);
 
     /**
      * Removes the specified plugin's ticket for the specified chunk
@@ -1070,7 +1058,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * there is no plugin ticket for the chunk
      * @see #addPluginChunkTicket(int, int, Plugin)
      */
-    public boolean removePluginChunkTicket(int x, int z, @NotNull Plugin plugin);
+    boolean removePluginChunkTicket(int x, int z, @NotNull Plugin plugin);
 
     /**
      * Removes all plugin tickets for the specified plugin
@@ -1084,7 +1072,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see #addPluginChunkTicket(int, int, Plugin)
      * @see #removePluginChunkTicket(int, int, Plugin)
      */
-    public void removePluginChunkTickets(@NotNull Plugin plugin);
+    void removePluginChunkTickets(@NotNull Plugin plugin);
 
     /**
      * Retrieves a collection specifying which plugins have tickets for the
@@ -1103,8 +1091,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see #addPluginChunkTicket(int, int, Plugin)
      * @see #removePluginChunkTicket(int, int, Plugin)
      */
-    @NotNull
-    public Collection<Plugin> getPluginChunkTickets(int x, int z);
+    @NotNull Collection<Plugin> getPluginChunkTickets(int x, int z);
 
     /**
      * Returns a map of which plugins have tickets for what chunks. The returned
@@ -1121,8 +1108,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see #addPluginChunkTicket(int, int, Plugin)
      * @see #removePluginChunkTicket(int, int, Plugin)
      */
-    @NotNull
-    public Map<Plugin, Collection<Chunk>> getPluginChunkTickets();
+    @NotNull Map<Plugin, Collection<Chunk>> getPluginChunkTickets();
 
     /**
      * Drops an item at the specified {@link Location}
@@ -1131,8 +1117,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param item ItemStack to drop
      * @return ItemDrop entity created as a result of this method
      */
-    @NotNull
-    public Item dropItem(@NotNull Location location, @NotNull ItemStack item);
+    @NotNull Item dropItem(@NotNull Location location, @NotNull ItemStack item);
 
     /**
      * Drops an item at the specified {@link Location}
@@ -1143,8 +1128,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param function the function to be run before the entity is spawned.
      * @return ItemDrop entity created as a result of this method
      */
-    @NotNull
-    public Item dropItem(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<Item> function);
+    @NotNull Item dropItem(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<Item> function);
 
     /**
      * Drops an item at the specified {@link Location} with a random offset
@@ -1153,8 +1137,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param item ItemStack to drop
      * @return ItemDrop entity created as a result of this method
      */
-    @NotNull
-    public Item dropItemNaturally(@NotNull Location location, @NotNull ItemStack item);
+    @NotNull Item dropItemNaturally(@NotNull Location location, @NotNull ItemStack item);
 
     /**
      * Drops an item at the specified {@link Location} with a random offset
@@ -1165,8 +1148,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param function the function to be run before the entity is spawned.
      * @return ItemDrop entity created as a result of this method
      */
-    @NotNull
-    public Item dropItemNaturally(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<Item> function);
+    @NotNull Item dropItemNaturally(@NotNull Location location, @NotNull ItemStack item, @Nullable Consumer<Item> function);
 
     /**
      * Creates an {@link Arrow} entity at the given {@link Location}
@@ -1177,8 +1159,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param spread Spread of the arrow. A recommend spread is 12
      * @return Arrow entity spawned as a result of this method
      */
-    @NotNull
-    public Arrow spawnArrow(@NotNull Location location, @NotNull Vector direction, float speed, float spread);
+    @NotNull Arrow spawnArrow(@NotNull Location location, @NotNull Vector direction, float speed, float spread);
 
     /**
      * Creates an arrow entity of the given class at the given {@link Location}
@@ -1192,8 +1173,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * {@link org.bukkit.entity.SpectralArrow},{@link org.bukkit.entity.Arrow},{@link org.bukkit.entity.TippedArrow}
      * @return Arrow entity spawned as a result of this method
      */
-    @NotNull
-    public <T extends AbstractArrow> T spawnArrow(@NotNull Location location, @NotNull Vector direction, float speed, float spread, @NotNull Class<T> clazz);
+    @NotNull <T extends AbstractArrow> T spawnArrow(@NotNull Location location, @NotNull Vector direction, float speed, float spread, @NotNull Class<T> clazz);
 
     /**
      * Creates a tree at the given {@link Location}
@@ -1202,7 +1182,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param type Type of the tree to create
      * @return true if the tree was created successfully, otherwise false
      */
-    public boolean generateTree(@NotNull Location location, @NotNull TreeType type);
+    boolean generateTree(@NotNull Location location, @NotNull TreeType type);
 
     /**
      * Creates a tree at the given {@link Location}
@@ -1213,7 +1193,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     this method
      * @return true if the tree was created successfully, otherwise false
      */
-    public boolean generateTree(@NotNull Location loc, @NotNull TreeType type, @NotNull BlockChangeDelegate delegate);
+    boolean generateTree(@NotNull Location loc, @NotNull TreeType type, @NotNull BlockChangeDelegate delegate);
 
     /**
      * Creates a entity at the given {@link Location}
@@ -1222,8 +1202,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param type The entity to spawn
      * @return Resulting Entity of this method, or null if it was unsuccessful
      */
-    @NotNull
-    public Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type);
+    @NotNull Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type);
 
     /**
      * Strikes lightning at the given {@link Location}
@@ -1231,8 +1210,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param loc The location to strike lightning
      * @return The lightning entity.
      */
-    @NotNull
-    public LightningStrike strikeLightning(@NotNull Location loc);
+    @NotNull LightningStrike strikeLightning(@NotNull Location loc);
 
     /**
      * Strikes lightning at the given {@link Location} without doing damage
@@ -1240,24 +1218,21 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param loc The location to strike lightning
      * @return The lightning entity.
      */
-    @NotNull
-    public LightningStrike strikeLightningEffect(@NotNull Location loc);
+    @NotNull LightningStrike strikeLightningEffect(@NotNull Location loc);
 
     /**
      * Get a list of all entities in this World
      *
      * @return A List of all Entities currently residing in this world
      */
-    @NotNull
-    public List<Entity> getEntities();
+    @NotNull List<Entity> getEntities();
 
     /**
      * Get a list of all living entities in this World
      *
      * @return A List of all LivingEntities currently residing in this world
      */
-    @NotNull
-    public List<LivingEntity> getLivingEntities();
+    @NotNull List<LivingEntity> getLivingEntities();
 
     /**
      * Get a collection of all entities in this World matching the given
@@ -1269,8 +1244,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     match the given class/interface
      */
     @Deprecated
-    @NotNull
-    public <T extends Entity> Collection<T> getEntitiesByClass(@NotNull Class<T>... classes);
+    @NotNull <T extends Entity> Collection<T> getEntitiesByClass(@NotNull Class<T>... classes);
 
     /**
      * Get a collection of all entities in this World matching the given
@@ -1281,8 +1255,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return A List of all Entities currently residing in this world that
      *     match the given class/interface
      */
-    @NotNull
-    public <T extends Entity> Collection<T> getEntitiesByClass(@NotNull Class<T> cls);
+    @NotNull <T extends Entity> Collection<T> getEntitiesByClass(@NotNull Class<T> cls);
 
     /**
      * Get a collection of all entities in this World matching any of the
@@ -1292,8 +1265,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return A List of all Entities currently residing in this world that
      *     match one or more of the given classes/interfaces
      */
-    @NotNull
-    public Collection<Entity> getEntitiesByClasses(@NotNull Class<?>... classes);
+    @NotNull Collection<Entity> getEntitiesByClasses(@NotNull Class<?>... classes);
 
     // Paper start
     /**
@@ -1303,7 +1275,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius);
     }
 
@@ -1315,7 +1287,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius);
     }
 
@@ -1328,7 +1300,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius);
     }
 
@@ -1340,7 +1312,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius, @Nullable Predicate<LivingEntity> predicate) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius, @Nullable Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius, predicate);
     }
 
@@ -1353,7 +1325,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -1367,7 +1339,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -1378,7 +1350,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius) {
+    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius);
     }
 
@@ -1390,7 +1362,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius) {
+    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius);
     }
 
@@ -1403,7 +1375,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius);
     }
 
@@ -1415,7 +1387,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius, @Nullable Predicate<Player> predicate) {
+    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius, @Nullable Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius, predicate);
     }
 
@@ -1428,7 +1400,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
+    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -1442,7 +1414,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
+    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -1455,7 +1427,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius) {
         return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, null);
     }
 
@@ -1469,7 +1441,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius) {
         return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, null);
     }
 
@@ -1484,7 +1456,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius) {
         return getNearbyEntitiesByType(clazz, loc, xRadius, yRadius, zRadius, null);
     }
 
@@ -1498,7 +1470,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius, @Nullable Predicate<T> predicate) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius, @Nullable Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, predicate);
     }
 
@@ -1513,7 +1485,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -1529,7 +1501,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
       * @return the collection of entities near location. This will always be a non-null collection.
       */
      @NotNull
-    public default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
+     default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
         if (clazz == null) {
             clazz = Entity.class;
         }
@@ -1550,8 +1522,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return A list of all Players currently residing in this world
      */
-    @NotNull
-    public List<Player> getPlayers();
+    @NotNull List<Player> getPlayers();
 
     // Paper start
     @NotNull
@@ -1576,8 +1547,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a
      *      non-null collection.
      */
-    @NotNull
-    public Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z);
+    @NotNull Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z);
 
     // Paper start - getEntity by UUID API
     /**
@@ -1586,8 +1556,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param uuid the UUID of the entity
      * @return the entity with the given UUID, or null if it isn't found
      */
-    @Nullable
-    public Entity getEntity(@NotNull UUID uuid);
+    @Nullable Entity getEntity(@NotNull UUID uuid);
     // Paper end
 
     /**
@@ -1607,8 +1576,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a
      *     non-null collection.
      */
-    @NotNull
-    public Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z, @Nullable Predicate<Entity> filter);
+    @NotNull Collection<Entity> getNearbyEntities(@NotNull Location location, double x, double y, double z, @Nullable Predicate<Entity> filter);
 
     /**
      * Returns a list of entities within the given bounding box.
@@ -1621,8 +1589,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities within the bounding box, will always
      *     be a non-null collection
      */
-    @NotNull
-    public Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox);
+    @NotNull Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox);
 
     /**
      * Returns a list of entities within the given bounding box.
@@ -1637,8 +1604,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities within the bounding box, will always
      *     be a non-null collection
      */
-    @NotNull
-    public Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox, @Nullable Predicate<Entity> filter);
+    @NotNull Collection<Entity> getNearbyEntities(@NotNull BoundingBox boundingBox, @Nullable Predicate<Entity> filter);
 
     /**
      * Performs a ray trace that checks for entity collisions.
@@ -1654,8 +1620,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     is no hit
      * @see #rayTraceEntities(Location, Vector, double, double, Predicate)
      */
-    @Nullable
-    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance);
+    @Nullable RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance);
 
     /**
      * Performs a ray trace that checks for entity collisions.
@@ -1673,8 +1638,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     is no hit
      * @see #rayTraceEntities(Location, Vector, double, double, Predicate)
      */
-    @Nullable
-    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize);
+    @Nullable RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize);
 
     /**
      * Performs a ray trace that checks for entity collisions.
@@ -1692,8 +1656,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     is no hit
      * @see #rayTraceEntities(Location, Vector, double, double, Predicate)
      */
-    @Nullable
-    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, @Nullable Predicate<Entity> filter);
+    @Nullable RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, @Nullable Predicate<Entity> filter);
 
     /**
      * Performs a ray trace that checks for entity collisions.
@@ -1712,8 +1675,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the closest ray trace hit result, or <code>null</code> if there
      *     is no hit
      */
-    @Nullable
-    public RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize, @Nullable Predicate<Entity> filter);
+    @Nullable RayTraceResult rayTraceEntities(@NotNull Location start, @NotNull Vector direction, double maxDistance, double raySize, @Nullable Predicate<Entity> filter);
 
     /**
      * Performs a ray trace that checks for block collisions using the blocks'
@@ -1731,8 +1693,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the ray trace hit result, or <code>null</code> if there is no hit
      * @see #rayTraceBlocks(Location, Vector, double, FluidCollisionMode, boolean)
      */
-    @Nullable
-    public RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance);
+    @Nullable RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance);
 
     /**
      * Performs a ray trace that checks for block collisions using the blocks'
@@ -1750,8 +1711,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the ray trace hit result, or <code>null</code> if there is no hit
      * @see #rayTraceBlocks(Location, Vector, double, FluidCollisionMode, boolean)
      */
-    @Nullable
-    public RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode);
+    @Nullable RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode);
 
     /**
      * Performs a ray trace that checks for block collisions using the blocks'
@@ -1775,8 +1735,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     blocks (ex. tall grass, signs, fluids, ..)
      * @return the ray trace hit result, or <code>null</code> if there is no hit
      */
-    @Nullable
-    public RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks);
+    @Nullable RayTraceResult rayTraceBlocks(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks);
 
     /**
      * Performs a ray trace that checks for both block and entity collisions.
@@ -1808,32 +1767,28 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the closest ray trace hit result with either a block or an
      *     entity, or <code>null</code> if there is no hit
      */
-    @Nullable
-    public RayTraceResult rayTrace(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, @Nullable Predicate<Entity> filter);
+    @Nullable RayTraceResult rayTrace(@NotNull Location start, @NotNull Vector direction, double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode, boolean ignorePassableBlocks, double raySize, @Nullable Predicate<Entity> filter);
 
     /**
      * Gets the unique name of this world
      *
      * @return Name of this world
      */
-    @NotNull
-    public String getName();
+    @NotNull String getName();
 
     /**
      * Gets the Unique ID of this world
      *
      * @return Unique ID of this world.
      */
-    @NotNull
-    public UUID getUID();
+    @NotNull UUID getUID();
 
     /**
      * Gets the default spawn {@link Location} of this world
      *
      * @return The spawn location of this world
      */
-    @NotNull
-    public Location getSpawnLocation();
+    @NotNull Location getSpawnLocation();
 
     /**
      * Sets the spawn location of the world.
@@ -1843,7 +1798,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param location The {@link Location} to set the spawn for this world at.
      * @return True if it was successfully set.
      */
-    public boolean setSpawnLocation(@NotNull Location location);
+    boolean setSpawnLocation(@NotNull Location location);
 
     /**
      * Sets the spawn location of the world
@@ -1854,7 +1809,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param angle the angle
      * @return True if it was successfully set.
      */
-    public boolean setSpawnLocation(int x, int y, int z, float angle);
+    boolean setSpawnLocation(int x, int y, int z, float angle);
 
     /**
      * Sets the spawn location of the world
@@ -1864,7 +1819,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z coordinate
      * @return True if it was successfully set.
      */
-    public boolean setSpawnLocation(int x, int y, int z);
+    boolean setSpawnLocation(int x, int y, int z);
 
     /**
      * Gets the relative in-game time of this world.
@@ -1874,7 +1829,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return The current relative time
      * @see #getFullTime() Returns an absolute time of this world
      */
-    public long getTime();
+    long getTime();
 
     /**
      * Sets the relative in-game time on the server.
@@ -1889,7 +1844,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     hours*1000)
      * @see #setFullTime(long) Sets the absolute time of this world
      */
-    public void setTime(long time);
+    void setTime(long time);
 
     /**
      * Gets the full in-game time on this world
@@ -1897,7 +1852,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return The current absolute time
      * @see #getTime() Returns a relative time of this world
      */
-    public long getFullTime();
+    long getFullTime();
 
     /**
      * Sets the in-game time on the server
@@ -1908,7 +1863,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param time The new absolute time to set this world to
      * @see #setTime(long) Sets the relative time of this world
      */
-    public void setFullTime(long time);
+    void setFullTime(long time);
 
     // Paper start
 
@@ -1917,7 +1872,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return True if it is daytime
      */
-    public boolean isDayTime();
+    boolean isDayTime();
     // Paper end
 
     /**
@@ -1927,14 +1882,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see #getTime() Returns a relative time of this world
      * @see #getFullTime() Returns an absolute time of this world
      */
-    public long getGameTime();
+    long getGameTime();
 
     /**
      * Returns whether the world has an ongoing storm.
      *
      * @return Whether there is an ongoing storm
      */
-    public boolean hasStorm();
+    boolean hasStorm();
 
     /**
      * Set whether there is a storm. A duration will be set for the new
@@ -1945,28 +1900,28 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @param hasStorm Whether there is rain and snow
      */
-    public void setStorm(boolean hasStorm);
+    void setStorm(boolean hasStorm);
 
     /**
      * Get the remaining time in ticks of the current conditions.
      *
      * @return Time in ticks
      */
-    public int getWeatherDuration();
+    int getWeatherDuration();
 
     /**
      * Set the remaining time in ticks of the current conditions.
      *
      * @param duration Time in ticks
      */
-    public void setWeatherDuration(int duration);
+    void setWeatherDuration(int duration);
 
     /**
      * Returns whether there is thunder.
      *
      * @return Whether there is thunder
      */
-    public boolean isThundering();
+    boolean isThundering();
 
     /**
      * Set whether it is thundering.
@@ -1976,21 +1931,21 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @param thundering Whether it is thundering
      */
-    public void setThundering(boolean thundering);
+    void setThundering(boolean thundering);
 
     /**
      * Get the thundering duration.
      *
      * @return Duration in ticks
      */
-    public int getThunderDuration();
+    int getThunderDuration();
 
     /**
      * Set the thundering duration.
      *
      * @param duration Duration in ticks
      */
-    public void setThunderDuration(int duration);
+    void setThunderDuration(int duration);
 
     /**
      * Returns whether the world has clear weather.
@@ -2000,7 +1955,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return true if clear weather
      */
-    public boolean isClearWeather();
+    boolean isClearWeather();
 
     /**
      * Set the clear weather duration.
@@ -2014,14 +1969,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @param duration duration in ticks
      */
-    public void setClearWeatherDuration(int duration);
+    void setClearWeatherDuration(int duration);
 
     /**
      * Get the clear weather duration.
      *
      * @return duration in ticks
      */
-    public int getClearWeatherDuration();
+    int getClearWeatherDuration();
 
     /**
      * Creates explosion at given coordinates with given power
@@ -2032,7 +1987,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(double x, double y, double z, float power);
+    boolean createExplosion(double x, double y, double z, float power);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
@@ -2045,7 +2000,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(double x, double y, double z, float power, boolean setFire);
+    boolean createExplosion(double x, double y, double z, float power, boolean setFire);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
@@ -2059,7 +2014,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks);
+    boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
@@ -2074,7 +2029,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param source the source entity, used for tracking damage
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source);
+    boolean createExplosion(double x, double y, double z, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source);
 
     /**
      * Creates explosion at given coordinates with given power
@@ -2083,7 +2038,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@NotNull Location loc, float power);
+    boolean createExplosion(@NotNull Location loc, float power);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
@@ -2094,7 +2049,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@NotNull Location loc, float power, boolean setFire);
+    boolean createExplosion(@NotNull Location loc, float power, boolean setFire);
 
     // Paper start
     /**
@@ -2108,7 +2063,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power, boolean setFire, boolean breakBlocks);
+    boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power, boolean setFire, boolean breakBlocks);
 
     /**
      * Creates explosion at given location with given power and optionally
@@ -2122,7 +2077,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power, boolean setFire) {
+    default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power, boolean setFire) {
         return createExplosion(source, loc, power, setFire, true);
     }
     /**
@@ -2134,7 +2089,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power) {
+    default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power) {
         return createExplosion(source, loc, power, true, true);
     }
     /**
@@ -2147,7 +2102,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@NotNull Entity source, float power, boolean setFire, boolean breakBlocks) {
+    default boolean createExplosion(@NotNull Entity source, float power, boolean setFire, boolean breakBlocks) {
         return createExplosion(source, source.getLocation(), power, setFire, breakBlocks);
     }
     /**
@@ -2161,7 +2116,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@NotNull Entity source, float power, boolean setFire) {
+    default boolean createExplosion(@NotNull Entity source, float power, boolean setFire) {
         return createExplosion(source, source.getLocation(), power, setFire, true);
     }
 
@@ -2173,7 +2128,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public default boolean createExplosion(@NotNull Entity source, float power) {
+    default boolean createExplosion(@NotNull Entity source, float power) {
         return createExplosion(source, source.getLocation(), power, true, true);
     }
     // Paper end
@@ -2188,7 +2143,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks);
+    boolean createExplosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks);
 
     /**
      * Creates explosion at given coordinates with given power and optionally
@@ -2201,57 +2156,54 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param source the source entity, used for tracking damage
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source);
+    boolean createExplosion(@NotNull Location loc, float power, boolean setFire, boolean breakBlocks, @Nullable Entity source);
 
     /**
      * Gets the {@link Environment} type of this world
      *
      * @return This worlds Environment type
      */
-    @NotNull
-    public Environment getEnvironment();
+    @NotNull Environment getEnvironment();
 
     /**
      * Gets the Seed for this world.
      *
      * @return This worlds Seed
      */
-    public long getSeed();
+    long getSeed();
 
     /**
      * Gets the current PVP setting for this world.
      *
      * @return True if PVP is enabled
      */
-    public boolean getPVP();
+    boolean getPVP();
 
     /**
      * Sets the PVP setting for this world.
      *
      * @param pvp True/False whether PVP should be Enabled.
      */
-    public void setPVP(boolean pvp);
+    void setPVP(boolean pvp);
 
     /**
      * Gets the chunk generator for this world
      *
      * @return ChunkGenerator associated with this world
      */
-    @Nullable
-    public ChunkGenerator getGenerator();
+    @Nullable ChunkGenerator getGenerator();
 
     /**
      * Saves world to disk
      */
-    public void save();
+    void save();
 
     /**
      * Gets a list of all applied {@link BlockPopulator}s for this World
      *
      * @return List containing any or none BlockPopulators
      */
-    @NotNull
-    public List<BlockPopulator> getPopulators();
+    @NotNull List<BlockPopulator> getPopulators();
 
     /**
      * Spawn an entity of a specific class at the given {@link Location}
@@ -2263,12 +2215,11 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @throws IllegalArgumentException if either parameter is null or the
      *     {@link Entity} requested cannot be spawned
      */
-    @NotNull
-    public <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz) throws IllegalArgumentException;
+    @NotNull <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz) throws IllegalArgumentException;
 
     // Paper start
     @NotNull
-    public default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
+    default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         return spawn(location, clazz, reason, null);
     }
 
@@ -2289,27 +2240,26 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     {@link Entity} requested cannot be spawned
      */
     @NotNull
-    public default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<T> function) throws IllegalArgumentException {
+    default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<T> function) throws IllegalArgumentException {
         return spawn(location, clazz, CreatureSpawnEvent.SpawnReason.CUSTOM, function);
     }
 
     @NotNull
-    public default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<T> function) throws IllegalArgumentException {
+    default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<T> function) throws IllegalArgumentException {
         return spawn(location, clazz, function, reason);
     }
 
     @NotNull
-    public default Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason) {
+    default Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason) {
         return spawn(loc, (Class<Entity>) type.getEntityClass(), reason, null);
     }
 
     @NotNull
-    public default Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<Entity> function) {
+    default Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<Entity> function) {
         return spawn(loc, (Class<Entity>) type.getEntityClass(), reason, function);
     }
 
-    @NotNull
-    public <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<T> function, @NotNull CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException;
+    @NotNull <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<T> function, @NotNull CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException;
     // Paper end
 
     /**
@@ -2326,8 +2276,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @throws IllegalArgumentException if {@link Location} or {@link
      *     MaterialData} are null or {@link Material} of the {@link MaterialData} is not a block
      */
-    @NotNull
-    public FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull MaterialData data) throws IllegalArgumentException;
+    @NotNull FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull MaterialData data) throws IllegalArgumentException;
 
     /**
      * Spawn a {@link FallingBlock} entity at the given {@link Location} of
@@ -2343,8 +2292,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @throws IllegalArgumentException if {@link Location} or {@link
      *     BlockData} are null
      */
-    @NotNull
-    public FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull BlockData data) throws IllegalArgumentException;
+    @NotNull FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull BlockData data) throws IllegalArgumentException;
 
     /**
      * Spawn a {@link FallingBlock} entity at the given {@link Location} of the
@@ -2363,8 +2311,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @deprecated Magic value
      */
     @Deprecated
-    @NotNull
-    public FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull Material material, byte data) throws IllegalArgumentException;
+    @NotNull FallingBlock spawnFallingBlock(@NotNull Location location, @NotNull Material material, byte data) throws IllegalArgumentException;
 
     /**
      * Plays an effect to all players within a default radius around a given
@@ -2375,7 +2322,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param effect the {@link Effect}
      * @param data a data bit needed for some effects
      */
-    public void playEffect(@NotNull Location location, @NotNull Effect effect, int data);
+    void playEffect(@NotNull Location location, @NotNull Effect effect, int data);
 
     /**
      * Plays an effect to all players within a given radius around a location.
@@ -2386,7 +2333,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data a data bit needed for some effects
      * @param radius the radius around the location
      */
-    public void playEffect(@NotNull Location location, @NotNull Effect effect, int data, int radius);
+    void playEffect(@NotNull Location location, @NotNull Effect effect, int data, int radius);
 
     /**
      * Plays an effect to all players within a default radius around a given
@@ -2398,7 +2345,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param effect the {@link Effect}
      * @param data a data bit needed for some effects
      */
-    public <T> void playEffect(@NotNull Location location, @NotNull Effect effect, @Nullable T data);
+    <T> void playEffect(@NotNull Location location, @NotNull Effect effect, @Nullable T data);
 
     /**
      * Plays an effect to all players within a given radius around a location.
@@ -2410,7 +2357,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data a data bit needed for some effects
      * @param radius the radius around the location
      */
-    public <T> void playEffect(@NotNull Location location, @NotNull Effect effect, @Nullable T data, int radius);
+    <T> void playEffect(@NotNull Location location, @NotNull Effect effect, @Nullable T data, int radius);
 
     /**
      * Get empty chunk snapshot (equivalent to all air blocks), optionally
@@ -2425,8 +2372,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     raw biome temperature
      * @return The empty snapshot.
      */
-    @NotNull
-    public ChunkSnapshot getEmptyChunkSnapshot(int x, int z, boolean includeBiome, boolean includeBiomeTemp);
+    @NotNull ChunkSnapshot getEmptyChunkSnapshot(int x, int z, boolean includeBiome, boolean includeBiomeTemp);
 
     /**
      * Sets the spawn flags for this.
@@ -2436,21 +2382,21 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param allowAnimals - if true, animals are allowed to spawn in this
      *     world.
      */
-    public void setSpawnFlags(boolean allowMonsters, boolean allowAnimals);
+    void setSpawnFlags(boolean allowMonsters, boolean allowAnimals);
 
     /**
      * Gets whether animals can spawn in this world.
      *
      * @return whether animals can spawn in this world.
      */
-    public boolean getAllowAnimals();
+    boolean getAllowAnimals();
 
     /**
      * Gets whether monsters can spawn in this world.
      *
      * @return whether monsters can spawn in this world.
      */
-    public boolean getAllowMonsters();
+    boolean getAllowMonsters();
 
     /**
      * Gets the biome for the given block coordinates.
@@ -2511,7 +2457,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @deprecated biomes are now 3-dimensional
      */
     @Deprecated
-    public double getTemperature(int x, int z);
+    double getTemperature(int x, int z);
 
     /**
      * Gets the temperature for the given block coordinates.
@@ -2527,7 +2473,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z coordinate of the block
      * @return Temperature of the requested block
      */
-    public double getTemperature(int x, int y, int z);
+    double getTemperature(int x, int y, int z);
 
     /**
      * Gets the humidity for the given block coordinates.
@@ -2541,7 +2487,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @deprecated biomes are now 3-dimensional
      */
     @Deprecated
-    public double getHumidity(int x, int z);
+    double getHumidity(int x, int z);
 
     /**
      * Gets the humidity for the given block coordinates.
@@ -2554,7 +2500,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z Z coordinate of the block
      * @return Humidity of the requested block
      */
-    public double getHumidity(int x, int y, int z);
+    double getHumidity(int x, int y, int z);
 
     /**
      * Gets the minimum height of this world.
@@ -2563,7 +2509,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return Minimum height of the world
      */
-    public int getMinHeight();
+    int getMinHeight();
 
     /**
      * Gets the maximum height of this world.
@@ -2572,7 +2518,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return Maximum height of the world
      */
-    public int getMaxHeight();
+    int getMaxHeight();
 
     /**
      * Gets the sea level for this world.
@@ -2581,7 +2527,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return Sea level
      */
-    public int getSeaLevel();
+    int getSeaLevel();
 
     /**
      * Gets whether the world's spawn area should be kept loaded into memory
@@ -2589,7 +2535,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return true if the world's spawn area will be kept loaded into memory.
      */
-    public boolean getKeepSpawnInMemory();
+    boolean getKeepSpawnInMemory();
 
     /**
      * Sets whether the world's spawn area should be kept loaded into memory
@@ -2598,14 +2544,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param keepLoaded if true then the world's spawn area will be kept
      *     loaded into memory.
      */
-    public void setKeepSpawnInMemory(boolean keepLoaded);
+    void setKeepSpawnInMemory(boolean keepLoaded);
 
     /**
      * Gets whether or not the world will automatically save
      *
      * @return true if the world will automatically save, otherwise false
      */
-    public boolean isAutoSave();
+    boolean isAutoSave();
 
     /**
      * Sets whether or not the world will automatically save
@@ -2613,30 +2559,28 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param value true if the world should automatically save, otherwise
      *     false
      */
-    public void setAutoSave(boolean value);
+    void setAutoSave(boolean value);
 
     /**
      * Sets the Difficulty of the world.
      *
      * @param difficulty the new difficulty you want to set the world to
      */
-    public void setDifficulty(@NotNull Difficulty difficulty);
+    void setDifficulty(@NotNull Difficulty difficulty);
 
     /**
      * Gets the Difficulty of the world.
      *
      * @return The difficulty of the world.
      */
-    @NotNull
-    public Difficulty getDifficulty();
+    @NotNull Difficulty getDifficulty();
 
     /**
      * Gets the folder of this world on disk.
      *
      * @return The folder of this world.
      */
-    @NotNull
-    public File getWorldFolder();
+    @NotNull File getWorldFolder();
 
     /**
      * Gets the type of this world.
@@ -2648,14 +2592,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      */
     @Nullable
     @Deprecated
-    public WorldType getWorldType();
+    WorldType getWorldType();
 
     /**
      * Gets whether or not structures are being generated.
      *
      * @return True if structures are being generated.
      */
-    public boolean canGenerateStructures();
+    boolean canGenerateStructures();
 
     /**
      * Gets whether the world is hardcore or not.
@@ -2664,7 +2608,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return hardcore status
      */
-    public boolean isHardcore();
+    boolean isHardcore();
 
     /**
      * Sets whether the world is hardcore or not.
@@ -2673,7 +2617,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @param hardcore Whether the world is hardcore
      */
-    public void setHardcore(boolean hardcore);
+    void setHardcore(boolean hardcore);
 
     /**
      * Gets the world's ticks per animal spawns value
@@ -2699,7 +2643,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return The world's ticks per animal spawns value
      */
-    public long getTicksPerAnimalSpawns();
+    long getTicksPerAnimalSpawns();
 
     /**
      * Sets the world's ticks per animal spawns value
@@ -2726,7 +2670,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param ticksPerAnimalSpawns the ticks per animal spawns value you want
      *     to set the world to
      */
-    public void setTicksPerAnimalSpawns(int ticksPerAnimalSpawns);
+    void setTicksPerAnimalSpawns(int ticksPerAnimalSpawns);
 
     /**
      * Gets the world's ticks per monster spawns value
@@ -2752,7 +2696,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return The world's ticks per monster spawns value
      */
-    public long getTicksPerMonsterSpawns();
+    long getTicksPerMonsterSpawns();
 
     /**
      * Sets the world's ticks per monster spawns value
@@ -2779,7 +2723,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param ticksPerMonsterSpawns the ticks per monster spawns value you
      *     want to set the world to
      */
-    public void setTicksPerMonsterSpawns(int ticksPerMonsterSpawns);
+    void setTicksPerMonsterSpawns(int ticksPerMonsterSpawns);
 
     /**
      * Gets the world's ticks per water mob spawns value
@@ -2803,7 +2747,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return The world's ticks per water mob spawns value
      */
-    public long getTicksPerWaterSpawns();
+    long getTicksPerWaterSpawns();
 
     /**
      * Sets the world's ticks per water mob spawns value
@@ -2828,7 +2772,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param ticksPerWaterSpawns the ticks per water mob spawns value you
      *     want to set the world to
      */
-    public void setTicksPerWaterSpawns(int ticksPerWaterSpawns);
+    void setTicksPerWaterSpawns(int ticksPerWaterSpawns);
 
     /**
      * Gets the default ticks per water ambient mob spawns value.
@@ -2848,7 +2792,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return the default ticks per water ambient mobs spawn value
      */
-    public long getTicksPerWaterAmbientSpawns();
+    long getTicksPerWaterAmbientSpawns();
 
     /**
      * Sets the world's ticks per water ambient mob spawns value
@@ -2873,7 +2817,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param ticksPerAmbientSpawns the ticks per water ambient mob spawns value you
      *     want to set the world to
      */
-    public void setTicksPerWaterAmbientSpawns(int ticksPerAmbientSpawns);
+    void setTicksPerWaterAmbientSpawns(int ticksPerAmbientSpawns);
 
     /**
      * Gets the world's ticks per ambient mob spawns value
@@ -2897,7 +2841,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return The world's ticks per ambient mob spawns value
      */
-    public long getTicksPerAmbientSpawns();
+    long getTicksPerAmbientSpawns();
 
     /**
      * Sets the world's ticks per ambient mob spawns value
@@ -2922,7 +2866,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param ticksPerAmbientSpawns the ticks per ambient mob spawns value you
      *     want to set the world to
      */
-    public void setTicksPerAmbientSpawns(int ticksPerAmbientSpawns);
+    void setTicksPerAmbientSpawns(int ticksPerAmbientSpawns);
 
     /**
      * Gets limit for number of monsters that can spawn in a chunk in this
@@ -3078,8 +3022,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return An array of {@link GameRule} names.
      */
-    @NotNull
-    public String[] getGameRules();
+    @NotNull String[] getGameRules();
 
     /**
      * Gets the current state of the specified rule
@@ -3092,8 +3035,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      */
     @Deprecated
     @Contract("null -> null; !null -> !null")
-    @Nullable
-    public String getGameRuleValue(@Nullable String rule);
+    @Nullable String getGameRuleValue(@Nullable String rule);
 
     /**
      * Set the specified gamerule to specified value.
@@ -3109,7 +3051,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @deprecated use {@link #setGameRule(GameRule, Object)} instead.
      */
     @Deprecated
-    public boolean setGameRuleValue(@NotNull String rule, @NotNull String value);
+    boolean setGameRuleValue(@NotNull String rule, @NotNull String value);
 
     /**
      * Checks if string is a valid game rule
@@ -3117,7 +3059,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param rule Rule to check
      * @return True if rule exists
      */
-    public boolean isGameRule(@NotNull String rule);
+    boolean isGameRule(@NotNull String rule);
 
     /**
      * Get the current value for a given {@link GameRule}.
@@ -3126,8 +3068,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param <T> the GameRule's type
      * @return the current value
      */
-    @Nullable
-    public <T> T getGameRuleValue(@NotNull GameRule<T> rule);
+    @Nullable <T> T getGameRuleValue(@NotNull GameRule<T> rule);
 
     /**
      * Get the default value for a given {@link GameRule}. This value is not
@@ -3137,8 +3078,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param <T> the type of GameRule
      * @return the default value
      */
-    @Nullable
-    public <T> T getGameRuleDefault(@NotNull GameRule<T> rule);
+    @Nullable <T> T getGameRuleDefault(@NotNull GameRule<T> rule);
 
     /**
      * Set the given {@link GameRule}'s new value.
@@ -3148,15 +3088,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param <T> the value type of the GameRule
      * @return true if the value was successfully set
      */
-    public <T> boolean setGameRule(@NotNull GameRule<T> rule, @NotNull T newValue);
+    <T> boolean setGameRule(@NotNull GameRule<T> rule, @NotNull T newValue);
 
     /**
      * Gets the world border for this world.
      *
      * @return The world border for this world.
      */
-    @NotNull
-    public WorldBorder getWorldBorder();
+    @NotNull WorldBorder getWorldBorder();
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3166,7 +3105,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param location the location to spawn at
      * @param count the number of particles
      */
-    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count);
+    void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3178,7 +3117,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param z the position on the z axis to spawn at
      * @param count the number of particles
      */
-    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count);
+    void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3191,7 +3130,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, @Nullable T data);
 
 
     /**
@@ -3207,7 +3146,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3222,7 +3161,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param offsetY the maximum random offset on the Y axis
      * @param offsetZ the maximum random offset on the Z axis
      */
-    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ);
+    void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3239,7 +3178,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param offsetY the maximum random offset on the Y axis
      * @param offsetZ the maximum random offset on the Z axis
      */
-    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ);
+    void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3257,7 +3196,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3277,7 +3216,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3294,7 +3233,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param extra the extra data for this particle, depends on the
      *              particle used (normally speed)
      */
-    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra);
+    void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3313,7 +3252,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param extra the extra data for this particle, depends on the
      *              particle used (normally speed)
      */
-    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra);
+    void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3333,7 +3272,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3355,7 +3294,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public default <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, null, null, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }// Paper start - Expand Particle API
+    default <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, null, null, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }// Paper start - Expand Particle API
     /**
      * Spawns the particle (the number of times specified by count)
      * at the target location. The position of each particle will be
@@ -3378,7 +3317,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *             the type of this depends on {@link Particle#getDataType()}
      * @param <T> Type
      */
-    public default <T> void spawnParticle(@NotNull Particle particle, @Nullable List<Player> receivers, @NotNull Player source, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, receivers, source, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }
+    default <T> void spawnParticle(@NotNull Particle particle, @Nullable List<Player> receivers, @NotNull Player source, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, receivers, source, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }
     /**
      * Spawns the particle (the number of times specified by count)
      * at the target location. The position of each particle will be
@@ -3403,7 +3342,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param force allows the particle to be seen further away from the player
      *              and shows to players using any vanilla client particle settings
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @Nullable List<Player> receivers, @Nullable Player source, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data, boolean force);
+    <T> void spawnParticle(@NotNull Particle particle, @Nullable List<Player> receivers, @Nullable Player source, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data, boolean force);
     // Paper end
 
 
@@ -3428,7 +3367,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *              range and encourage their client to render it regardless of
      *              settings
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data, boolean force);
+    <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data, boolean force);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -3453,7 +3392,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *              range and encourage their client to render it regardless of
      *              settings
      */
-    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data, boolean force);
+    <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data, boolean force);
 
     /**
      * Find the closest nearby structure of a given {@link StructureType}.
@@ -3479,8 +3418,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the closest {@link Location}, or null if no structure of the
      * specified type exists.
      */
-    @Nullable
-    public Location locateNearestStructure(@NotNull Location origin, @NotNull StructureType structureType, int radius, boolean findUnexplored);
+    @Nullable Location locateNearestStructure(@NotNull Location origin, @NotNull StructureType structureType, int radius, boolean findUnexplored);
 
     // Spigot start
     /**
@@ -3520,7 +3458,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
     // Paper end - view distance api
 
     // Spigot start
-    public class Spigot {
+    class Spigot {
 
         /**
          * Strikes lightning at the given {@link Location} and possibly without sound
@@ -3558,16 +3496,14 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param radius the radius
      * @return the closest {@link Raid}, or null if no raids were found
      */
-    @Nullable
-    public Raid locateNearestRaid(@NotNull Location location, int radius);
+    @Nullable Raid locateNearestRaid(@NotNull Location location, int radius);
 
     /**
      * Gets all raids that are going on over this world.
      *
      * @return the list of all active raids
      */
-    @NotNull
-    public List<Raid> getRaids();
+    @NotNull List<Raid> getRaids();
 
     /**
      * Get the {@link DragonBattle} associated with this world.
@@ -3581,13 +3517,12 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *
      * @return the dragon battle instance
      */
-    @Nullable
-    public DragonBattle getEnderDragonBattle();
+    @Nullable DragonBattle getEnderDragonBattle();
 
     /**
      * Represents various map environment types that a world may be
      */
-    public enum Environment {
+    enum Environment {
 
         /**
          * Represents the "normal"/"surface world" map
@@ -3607,9 +3542,9 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
         CUSTOM(-999);
 
         private final int id;
-        private static final Map<Integer, Environment> lookup = new HashMap<Integer, Environment>();
+        private static final Map<Integer, Environment> lookup = new HashMap<>();
 
-        private Environment(int id) {
+        Environment(int id) {
             this.id = id;
         }
 
diff --git a/src/main/java/org/bukkit/WorldBorder.java b/src/main/java/org/bukkit/WorldBorder.java
index afb7b136b461202026290624836446cff9f9e45d..fe48b47a9e158337f156884b5fe7cb67dec6a23e 100644
--- a/src/main/java/org/bukkit/WorldBorder.java
+++ b/src/main/java/org/bukkit/WorldBorder.java
@@ -7,21 +7,21 @@ public interface WorldBorder {
     /**
      * Resets the border to default values.
      */
-    public void reset();
+    void reset();
 
     /**
      * Gets the current side length of the border.
      *
      * @return The current side length of the border.
      */
-    public double getSize();
+    double getSize();
 
     /**
      * Sets the border to a square region with the specified side length in blocks.
      *
      * @param newSize The new size of the border.
      */
-    public void setSize(double newSize);
+    void setSize(double newSize);
 
     /**
      * Sets the border to a square region with the specified side length in blocks.
@@ -29,15 +29,14 @@ public interface WorldBorder {
      * @param newSize The new side length of the border.
      * @param seconds The time in seconds in which the border grows or shrinks from the previous size to that being set.
      */
-    public void setSize(double newSize, long seconds);
+    void setSize(double newSize, long seconds);
 
     /**
      * Gets the current border center.
      *
      * @return The current border center.
      */
-    @NotNull
-    public Location getCenter();
+    @NotNull Location getCenter();
 
     /**
      * Sets the new border center.
@@ -45,70 +44,70 @@ public interface WorldBorder {
      * @param x The new center x-coordinate.
      * @param z The new center z-coordinate.
      */
-    public void setCenter(double x, double z);
+    void setCenter(double x, double z);
 
     /**
      * Sets the new border center.
      *
      * @param location The new location of the border center. (Only x/z used)
      */
-    public void setCenter(@NotNull Location location);
+    void setCenter(@NotNull Location location);
 
     /**
      * Gets the current border damage buffer.
      *
      * @return The current border damage buffer.
      */
-    public double getDamageBuffer();
+    double getDamageBuffer();
 
     /**
      * Sets the amount of blocks a player may safely be outside the border before taking damage.
      *
      * @param blocks The amount of blocks. (The default is 5 blocks.)
      */
-    public void setDamageBuffer(double blocks);
+    void setDamageBuffer(double blocks);
 
     /**
      * Gets the current border damage amount.
      *
      * @return The current border damage amount.
      */
-    public double getDamageAmount();
+    double getDamageAmount();
 
     /**
      * Sets the amount of damage a player takes when outside the border plus the border buffer.
      *
      * @param damage The amount of damage. (The default is 0.2 damage per second per block.)
      */
-    public void setDamageAmount(double damage);
+    void setDamageAmount(double damage);
 
     /**
      * Gets the current border warning time in seconds.
      *
      * @return The current border warning time in seconds.
      */
-    public int getWarningTime();
+    int getWarningTime();
 
     /**
      * Sets the warning time that causes the screen to be tinted red when a contracting border will reach the player within the specified time.
      *
      * @param seconds The amount of time in seconds. (The default is 15 seconds.)
      */
-    public void setWarningTime(int seconds);
+    void setWarningTime(int seconds);
 
     /**
      * Gets the current border warning distance.
      *
      * @return The current border warning distance.
      */
-    public int getWarningDistance();
+    int getWarningDistance();
 
     /**
      * Sets the warning distance that causes the screen to be tinted red when the player is within the specified number of blocks from the border.
      *
      * @param distance The distance in blocks. (The default is 5 blocks.)
      */
-    public void setWarningDistance(int distance);
+    void setWarningDistance(int distance);
 
     /**
      * Check if the specified location is inside this border.
@@ -116,7 +115,7 @@ public interface WorldBorder {
      * @param location the location to check
      * @return if this location is inside the border or not
      */
-    public boolean isInside(@NotNull Location location);
+    boolean isInside(@NotNull Location location);
 
     // Paper start
     /**
@@ -127,7 +126,7 @@ public interface WorldBorder {
      * @deprecated use {@link #isInside(Location)} for an upstream compatible replacement
      */
     @Deprecated
-    public default boolean isInBounds(@NotNull Location location) {
+    default boolean isInBounds(@NotNull Location location) {
         return this.isInside(location);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index e6a83252f42da31ad38f8dc1beccc7aa2c3f54b8..978ecfcbfaec32470e2977143771e38a574873df 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -38,10 +38,7 @@ public class WorldCreator {
      * @param worldKey NamespacedKey of the world that will be created
      */
     public WorldCreator(@NotNull String levelName, @NotNull NamespacedKey worldKey) {
-        if (levelName == null || worldKey == null) {
-            throw new IllegalArgumentException("World name and key cannot be null");
-        }
-        this.name = levelName;
+	    this.name = levelName;
         this.seed = (new Random()).nextLong();
         this.key = worldKey;
     }
@@ -97,11 +94,8 @@ public class WorldCreator {
      */
     @NotNull
     public WorldCreator copy(@NotNull World world) {
-        if (world == null) {
-            throw new IllegalArgumentException("World cannot be null");
-        }
 
-        seed = world.getSeed();
+	    seed = world.getSeed();
         environment = world.getEnvironment();
         generator = world.getGenerator();
         type = world.getWorldType();
@@ -119,11 +113,8 @@ public class WorldCreator {
      */
     @NotNull
     public WorldCreator copy(@NotNull WorldCreator creator) {
-        if (creator == null) {
-            throw new IllegalArgumentException("Creator cannot be null");
-        }
 
-        seed = creator.seed();
+	    seed = creator.seed();
         environment = creator.environment();
         generator = creator.generator();
         type = creator.type();
@@ -411,11 +402,7 @@ public class WorldCreator {
     public static ChunkGenerator getGeneratorForName(@NotNull String world, @Nullable String name, @Nullable CommandSender output) {
         ChunkGenerator result = null;
 
-        if (world == null) {
-            throw new IllegalArgumentException("World name must be specified");
-        }
-
-        if (output == null) {
+	    if (output == null) {
             output = Bukkit.getConsoleSender();
         }
 
diff --git a/src/main/java/org/bukkit/WorldType.java b/src/main/java/org/bukkit/WorldType.java
index c48b5579f78760e93dc0ca71223ea5a5ce394873..afe2ecdd3b38e78fa165a5cc52058279e3e0a768 100644
--- a/src/main/java/org/bukkit/WorldType.java
+++ b/src/main/java/org/bukkit/WorldType.java
@@ -17,7 +17,7 @@ public enum WorldType {
     private static final Map<String, WorldType> BY_NAME = Maps.newHashMap();
     private final String name;
 
-    private WorldType(/*@NotNull*/ String name) {
+    WorldType(/*@NotNull*/ String name) {
         this.name = name;
     }
 
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index 13eac9ad2c1672051635d1c35cc49239252e7a61..b9ad84c2d6250e568a6ca5459ff3918d7a2de680 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -64,7 +64,7 @@ public enum Attribute implements Keyed {
 
     private final NamespacedKey key;
 
-    private Attribute(String key) {
+    Attribute(String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/attribute/AttributeModifier.java b/src/main/java/org/bukkit/attribute/AttributeModifier.java
index ff8f1231f3e2e71740fd24fa8d4dac5d0e550ae7..8b2f2795f691c83cd42c22f55ea39157fcd1ef99 100644
--- a/src/main/java/org/bukkit/attribute/AttributeModifier.java
+++ b/src/main/java/org/bukkit/attribute/AttributeModifier.java
@@ -1,9 +1,5 @@
 package org.bukkit.attribute;
 
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Objects;
-import java.util.UUID;
 import org.apache.commons.lang.Validate;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.inventory.EquipmentSlot;
@@ -11,6 +7,11 @@ import org.bukkit.util.NumberConversions;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Objects;
+import java.util.UUID;
+
 /**
  * Concrete implementation of an attribute modifier.
  */
@@ -94,7 +95,7 @@ public class AttributeModifier implements ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        Map<String, Object> data = new HashMap<String, Object>();
+        Map<String, Object> data = new HashMap<>();
         data.put("uuid", uuid.toString());
         data.put("name", name);
         data.put("operation", operation.ordinal());
@@ -161,6 +162,6 @@ public class AttributeModifier implements ConfigurationSerializable {
         /**
          * Multiply amount by this value, after adding 1 to it.
          */
-        MULTIPLY_SCALAR_1;
+        MULTIPLY_SCALAR_1
     }
 }
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index 5650eeca7af868d5baafd60541121b669d6dd870..2fb2763731a0faced599f4b6564ed4a7af56f79a 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -1,10 +1,11 @@
 package org.bukkit.block;
 
-import java.util.Locale;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Locale;
+
 /**
  * Holds all accepted Biomes in the default server
  */
@@ -95,7 +96,7 @@ public enum Biome implements Keyed {
 
     private final NamespacedKey key;
 
-    private Biome() {
+    Biome() {
         this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
     }
 
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 85ff6ce3bf75ab78f066a508d130def5913fff0e..0bf67e1134c3fd6c69b6d166de0bed892c693224 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -1,12 +1,6 @@
 package org.bukkit.block;
 
-import java.util.Collection;
-
-import org.bukkit.Chunk;
-import org.bukkit.FluidCollisionMode;
-import org.bukkit.Location;
-import org.bukkit.Material;
-import org.bukkit.World;
+import org.bukkit.*;
 import org.bukkit.block.data.Bisected;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.entity.Entity;
@@ -19,6 +13,8 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Collection;
+
 /**
  * Represents a block. This is a live object, and only one Block may exist for
  * any given location in a world. The state of the block may change
@@ -161,7 +157,7 @@ public interface Block extends Metadatable {
      * @see Block#getBlockKey(int, int, int)
      * @return This block's x, y, and z coordinates packed into a long value
      */
-    public default long getBlockKey() {
+    default long getBlockKey() {
         return Block.getBlockKey(this.getX(), this.getY(), this.getZ());
     }
 
@@ -185,7 +181,7 @@ public interface Block extends Metadatable {
      *
      * @return This block's x, y, and z coordinates packed into a long value
      */
-    public static long getBlockKey(int x, int y, int z) {
+    static long getBlockKey(int x, int y, int z) {
         return ((long)x & 0x7FFFFFF) | (((long)z & 0x7FFFFFF) << 27) | ((long)y << 54);
     }
 
@@ -195,7 +191,7 @@ public interface Block extends Metadatable {
      * @see Block#getBlockKey(int, int, int)
      * @return The x component from the packed value.
      */
-    public static int getBlockKeyX(long packed) {
+    static int getBlockKeyX(long packed) {
         return (int) ((packed << 37) >> 37);
     }
 
@@ -205,7 +201,7 @@ public interface Block extends Metadatable {
      * @see Block#getBlockKey(int, int, int)
      * @return The y component from the packed value.
      */
-    public static int getBlockKeyY(long packed) {
+    static int getBlockKeyY(long packed) {
         return (int) (packed >>> 54);
     }
 
@@ -215,7 +211,7 @@ public interface Block extends Metadatable {
      * @see Block#getBlockKey(int, int, int)
      * @return The z component from the packed value.
      */
-    public static int getBlockKeyZ(long packed) {
+    static int getBlockKeyZ(long packed) {
         return (int) ((packed << 10) >> 37);
     }
 
@@ -636,7 +632,7 @@ public interface Block extends Metadatable {
      * @return the speed that this Block will be mined by the given {@link ItemStack}
      */
     @NotNull
-    public default float getDestroySpeed(@NotNull ItemStack itemStack) {
+    default float getDestroySpeed(@NotNull ItemStack itemStack) {
         return getDestroySpeed(itemStack, false);
     }
 
diff --git a/src/main/java/org/bukkit/block/BlockFace.java b/src/main/java/org/bukkit/block/BlockFace.java
index fe83ed9bf6b6288991b044bb992bd8b2f00edc24..fbb0052a8651b933f48d288965f413fe9967a036 100644
--- a/src/main/java/org/bukkit/block/BlockFace.java
+++ b/src/main/java/org/bukkit/block/BlockFace.java
@@ -31,13 +31,13 @@ public enum BlockFace {
     private final int modY;
     private final int modZ;
 
-    private BlockFace(final int modX, final int modY, final int modZ) {
+    BlockFace(final int modX, final int modY, final int modZ) {
         this.modX = modX;
         this.modY = modY;
         this.modZ = modZ;
     }
 
-    private BlockFace(final BlockFace face1, final BlockFace face2) {
+    BlockFace(final BlockFace face1, final BlockFace face2) {
         this.modX = face1.getModX() + face2.getModX();
         this.modY = face1.getModY() + face2.getModY();
         this.modZ = face1.getModZ() + face2.getModZ();
@@ -91,80 +91,35 @@ public enum BlockFace {
      * @return Cartesian status
      */
     public boolean isCartesian() {
-        switch (this) {
-            case NORTH:
-            case SOUTH:
-            case EAST:
-            case WEST:
-            case UP:
-            case DOWN:
-                return true;
-            default:
-                return false;
-        }
+	    return switch (this) {
+		    case NORTH, SOUTH, EAST, WEST, UP, DOWN -> true;
+		    default -> false;
+	    };
     }
 
     @NotNull
     public BlockFace getOppositeFace() {
-        switch (this) {
-        case NORTH:
-            return BlockFace.SOUTH;
-
-        case SOUTH:
-            return BlockFace.NORTH;
-
-        case EAST:
-            return BlockFace.WEST;
-
-        case WEST:
-            return BlockFace.EAST;
-
-        case UP:
-            return BlockFace.DOWN;
-
-        case DOWN:
-            return BlockFace.UP;
-
-        case NORTH_EAST:
-            return BlockFace.SOUTH_WEST;
-
-        case NORTH_WEST:
-            return BlockFace.SOUTH_EAST;
-
-        case SOUTH_EAST:
-            return BlockFace.NORTH_WEST;
-
-        case SOUTH_WEST:
-            return BlockFace.NORTH_EAST;
-
-        case WEST_NORTH_WEST:
-            return BlockFace.EAST_SOUTH_EAST;
-
-        case NORTH_NORTH_WEST:
-            return BlockFace.SOUTH_SOUTH_EAST;
-
-        case NORTH_NORTH_EAST:
-            return BlockFace.SOUTH_SOUTH_WEST;
-
-        case EAST_NORTH_EAST:
-            return BlockFace.WEST_SOUTH_WEST;
-
-        case EAST_SOUTH_EAST:
-            return BlockFace.WEST_NORTH_WEST;
-
-        case SOUTH_SOUTH_EAST:
-            return BlockFace.NORTH_NORTH_WEST;
-
-        case SOUTH_SOUTH_WEST:
-            return BlockFace.NORTH_NORTH_EAST;
-
-        case WEST_SOUTH_WEST:
-            return BlockFace.EAST_NORTH_EAST;
-
-        case SELF:
-            return BlockFace.SELF;
-        }
+	    return switch (this) {
+		    case NORTH -> BlockFace.SOUTH;
+		    case SOUTH -> BlockFace.NORTH;
+		    case EAST -> BlockFace.WEST;
+		    case WEST -> BlockFace.EAST;
+		    case UP -> BlockFace.DOWN;
+		    case DOWN -> BlockFace.UP;
+		    case NORTH_EAST -> BlockFace.SOUTH_WEST;
+		    case NORTH_WEST -> BlockFace.SOUTH_EAST;
+		    case SOUTH_EAST -> BlockFace.NORTH_WEST;
+		    case SOUTH_WEST -> BlockFace.NORTH_EAST;
+		    case WEST_NORTH_WEST -> BlockFace.EAST_SOUTH_EAST;
+		    case NORTH_NORTH_WEST -> BlockFace.SOUTH_SOUTH_EAST;
+		    case NORTH_NORTH_EAST -> BlockFace.SOUTH_SOUTH_WEST;
+		    case EAST_NORTH_EAST -> BlockFace.WEST_SOUTH_WEST;
+		    case EAST_SOUTH_EAST -> BlockFace.WEST_NORTH_WEST;
+		    case SOUTH_SOUTH_EAST -> BlockFace.NORTH_NORTH_WEST;
+		    case SOUTH_SOUTH_WEST -> BlockFace.NORTH_NORTH_EAST;
+		    case WEST_SOUTH_WEST -> BlockFace.EAST_NORTH_EAST;
+		    case SELF -> BlockFace.SELF;
+	    };
 
-        return BlockFace.SELF;
     }
 }
diff --git a/src/main/java/org/bukkit/block/BlockState.java b/src/main/java/org/bukkit/block/BlockState.java
index 631cbf2be51040eee00aa39a39c5ec4003f91843..713eeabe3c55910428de8d5f350002d15618d569 100644
--- a/src/main/java/org/bukkit/block/BlockState.java
+++ b/src/main/java/org/bukkit/block/BlockState.java
@@ -202,14 +202,14 @@ public interface BlockState extends Metadatable {
      * @deprecated Magic value
      */
     @Deprecated
-    public byte getRawData();
+    byte getRawData();
 
     /**
      * @param data The new data value for the block.
      * @deprecated Magic value
      */
     @Deprecated
-    public void setRawData(byte data);
+    void setRawData(byte data);
 
     /**
      * Returns whether this state is placed in the world.
diff --git a/src/main/java/org/bukkit/block/Chest.java b/src/main/java/org/bukkit/block/Chest.java
index db6affbc78106b2d93b41953b624a0bca0ca1d72..cb9380acda62e20fba4bbca08126e1d932f0bee3 100644
--- a/src/main/java/org/bukkit/block/Chest.java
+++ b/src/main/java/org/bukkit/block/Chest.java
@@ -1,9 +1,7 @@
 package org.bukkit.block;
 
-import com.destroystokyo.paper.loottable.LootableBlockInventory; // Paper
-import org.bukkit.Nameable; // Paper
+import com.destroystokyo.paper.loottable.LootableBlockInventory;
 import org.bukkit.inventory.Inventory;
-import org.bukkit.loot.Lootable;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/org/bukkit/block/CommandBlock.java b/src/main/java/org/bukkit/block/CommandBlock.java
index 372c0bd5a4d7800a11c24c95e39fe376a96232bf..cfcc0d3cffb7a5ad7846842957983121b9b01ffd 100644
--- a/src/main/java/org/bukkit/block/CommandBlock.java
+++ b/src/main/java/org/bukkit/block/CommandBlock.java
@@ -15,8 +15,7 @@ public interface CommandBlock extends TileState {
      *
      * @return Command that this CommandBlock will run when powered.
      */
-    @NotNull
-    public String getCommand();
+    @NotNull String getCommand();
 
     /**
      * Sets the command that this CommandBlock will run when powered.
@@ -25,7 +24,7 @@ public interface CommandBlock extends TileState {
      *
      * @param command Command that this CommandBlock will run when powered.
      */
-    public void setCommand(@Nullable String command);
+    void setCommand(@Nullable String command);
 
     /**
      * Gets the name of this CommandBlock.  The name is used with commands
@@ -34,8 +33,7 @@ public interface CommandBlock extends TileState {
      *
      * @return Name of this CommandBlock.
      */
-    @NotNull
-    public String getName();
+    @NotNull String getName();
 
     /**
      * Sets the name of this CommandBlock.  The name is used with commands
@@ -44,5 +42,5 @@ public interface CommandBlock extends TileState {
      *
      * @param name New name for this CommandBlock.
      */
-    public void setName(@Nullable String name);
+    void setName(@Nullable String name);
 }
diff --git a/src/main/java/org/bukkit/block/CreatureSpawner.java b/src/main/java/org/bukkit/block/CreatureSpawner.java
index 5bbae759ce39d42886994e500fd9454ec328f804..540e8180965a5a1e116b4b139604d4c80e55f395 100644
--- a/src/main/java/org/bukkit/block/CreatureSpawner.java
+++ b/src/main/java/org/bukkit/block/CreatureSpawner.java
@@ -13,15 +13,14 @@ public interface CreatureSpawner extends TileState {
      *
      * @return The creature type.
      */
-    @NotNull
-    public EntityType getSpawnedType();
+    @NotNull EntityType getSpawnedType();
 
     /**
      * Set the spawner's creature type.
      *
      * @param creatureType The creature type.
      */
-    public void setSpawnedType(@NotNull EntityType creatureType);
+    void setSpawnedType(@NotNull EntityType creatureType);
 
     /**
      * Set the spawner mob type.
@@ -31,7 +30,7 @@ public interface CreatureSpawner extends TileState {
      * {@link #setSpawnedType(org.bukkit.entity.EntityType)}.
      */
     @Deprecated
-    public void setCreatureTypeByName(@NotNull String creatureType);
+    void setCreatureTypeByName(@NotNull String creatureType);
 
     /**
      * Get the spawner's creature type.
@@ -40,8 +39,7 @@ public interface CreatureSpawner extends TileState {
      * @deprecated magic value, use {@link #getSpawnedType()}.
      */
     @Deprecated
-    @NotNull
-    public String getCreatureTypeName();
+    @NotNull String getCreatureTypeName();
 
     /**
      * Get the spawner's delay.
@@ -50,7 +48,7 @@ public interface CreatureSpawner extends TileState {
      *
      * @return The delay.
      */
-    public int getDelay();
+    int getDelay();
 
     /**
      * Set the spawner's delay.
@@ -60,7 +58,7 @@ public interface CreatureSpawner extends TileState {
      *
      * @param delay The delay.
      */
-    public void setDelay(int delay);
+    void setDelay(int delay);
 
     /**
      * The minimum spawn delay amount (in ticks).
@@ -73,7 +71,7 @@ public interface CreatureSpawner extends TileState {
      *
      * @return the minimum spawn delay amount
      */
-    public int getMinSpawnDelay();
+    int getMinSpawnDelay();
 
     /**
      * Set the minimum spawn delay amount (in ticks).
@@ -81,7 +79,7 @@ public interface CreatureSpawner extends TileState {
      * @param delay the minimum spawn delay amount
      * @see #getMinSpawnDelay()
      */
-    public void setMinSpawnDelay(int delay);
+    void setMinSpawnDelay(int delay);
 
     /**
      * The maximum spawn delay amount (in ticks).
@@ -97,7 +95,7 @@ public interface CreatureSpawner extends TileState {
      *
      * @return the maximum spawn delay amount
      */
-    public int getMaxSpawnDelay();
+    int getMaxSpawnDelay();
 
     /**
      * Set the maximum spawn delay amount (in ticks).
@@ -108,7 +106,7 @@ public interface CreatureSpawner extends TileState {
      * @param delay the new maximum spawn delay amount
      * @see #getMaxSpawnDelay()
      */
-    public void setMaxSpawnDelay(int delay);
+    void setMaxSpawnDelay(int delay);
 
     /**
      * Get how many mobs attempt to spawn.
@@ -117,14 +115,14 @@ public interface CreatureSpawner extends TileState {
      *
      * @return the current spawn count
      */
-    public int getSpawnCount();
+    int getSpawnCount();
 
     /**
      * Set how many mobs attempt to spawn.
      *
      * @param spawnCount the new spawn count
      */
-    public void setSpawnCount(int spawnCount);
+    void setSpawnCount(int spawnCount);
 
     /**
      * Set the new maximum amount of similar entities that are allowed to be
@@ -137,7 +135,7 @@ public interface CreatureSpawner extends TileState {
      *
      * @return the maximum number of nearby, similar, entities
      */
-    public int getMaxNearbyEntities();
+    int getMaxNearbyEntities();
 
     /**
      * Set the maximum number of similar entities that are allowed to be within
@@ -147,7 +145,7 @@ public interface CreatureSpawner extends TileState {
      *
      * @param maxNearbyEntities the maximum number of nearby, similar, entities
      */
-    public void setMaxNearbyEntities(int maxNearbyEntities);
+    void setMaxNearbyEntities(int maxNearbyEntities);
 
     /**
      * Get the maximum distance(squared) a player can be in order for this
@@ -161,7 +159,7 @@ public interface CreatureSpawner extends TileState {
      * @return the maximum distance(squared) a player can be in order for this
      * spawner to be active.
      */
-    public int getRequiredPlayerRange();
+    int getRequiredPlayerRange();
 
     /**
      * Set the maximum distance (squared) a player can be in order for this
@@ -173,7 +171,7 @@ public interface CreatureSpawner extends TileState {
      * @param requiredPlayerRange the maximum distance (squared) a player can be
      * in order for this spawner to be active.
      */
-    public void setRequiredPlayerRange(int requiredPlayerRange);
+    void setRequiredPlayerRange(int requiredPlayerRange);
 
     /**
      * Get the radius around which the spawner will attempt to spawn mobs in.
@@ -189,7 +187,7 @@ public interface CreatureSpawner extends TileState {
      *
      * @return the spawn range
      */
-    public int getSpawnRange();
+    int getSpawnRange();
 
     /**
      * Set the new spawn range.
@@ -198,7 +196,7 @@ public interface CreatureSpawner extends TileState {
      * @param spawnRange the new spawn range
      * @see #getSpawnRange()
      */
-    public void setSpawnRange(int spawnRange);
+    void setSpawnRange(int spawnRange);
 
     // Paper start
     /**
@@ -206,12 +204,12 @@ public interface CreatureSpawner extends TileState {
      *
      * @return True if a player is close enough to activate it
      */
-    public boolean isActivated();
+    boolean isActivated();
 
     /**
      * Resets the spawn delay timer within the min/max range
      */
-    public void resetTimer();
+    void resetTimer();
 
     /**
      * Sets the {@link EntityType} to {@link EntityType#DROPPED_ITEM} and sets the data to the given
diff --git a/src/main/java/org/bukkit/block/Dispenser.java b/src/main/java/org/bukkit/block/Dispenser.java
index 07af1a3f011d4b96275f919d302ac367198e923e..ab396580303471fd1ac39e58d10c4940ff07b6ce 100644
--- a/src/main/java/org/bukkit/block/Dispenser.java
+++ b/src/main/java/org/bukkit/block/Dispenser.java
@@ -2,7 +2,6 @@ package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
 import org.bukkit.Nameable;
-import org.bukkit.loot.Lootable;
 import org.bukkit.projectiles.BlockProjectileSource;
 import org.jetbrains.annotations.Nullable;
 
@@ -20,8 +19,7 @@ public interface Dispenser extends Container, Nameable, LootableBlockInventory {
      * @return a BlockProjectileSource if valid, otherwise null
      * @throws IllegalStateException if this block state is not placed
      */
-    @Nullable
-    public BlockProjectileSource getBlockProjectileSource();
+    @Nullable BlockProjectileSource getBlockProjectileSource();
 
     /**
      * Attempts to dispense the contents of the dispenser.
@@ -32,5 +30,5 @@ public interface Dispenser extends Container, Nameable, LootableBlockInventory {
      * @return true if successful, otherwise false
      * @throws IllegalStateException if this block state is not placed
      */
-    public boolean dispense();
+    boolean dispense();
 }
diff --git a/src/main/java/org/bukkit/block/DoubleChest.java b/src/main/java/org/bukkit/block/DoubleChest.java
index a39d2f1acbbd84ae0e2cf29f85594e09e55e9355..78f6969e50db87cae7b54ee3631122330206251f 100644
--- a/src/main/java/org/bukkit/block/DoubleChest.java
+++ b/src/main/java/org/bukkit/block/DoubleChest.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
  * Represents a double chest.
  */
 public class DoubleChest implements InventoryHolder {
-    private DoubleChestInventory inventory;
+    private final DoubleChestInventory inventory;
 
     public DoubleChest(@NotNull DoubleChestInventory chest) {
         inventory = chest;
diff --git a/src/main/java/org/bukkit/block/Dropper.java b/src/main/java/org/bukkit/block/Dropper.java
index c76202321e29ad67597ca3017eb8d9baf6787383..407e68a1b9bcbd93ce46c74bd0f42bdc72046e0b 100644
--- a/src/main/java/org/bukkit/block/Dropper.java
+++ b/src/main/java/org/bukkit/block/Dropper.java
@@ -1,7 +1,7 @@
 package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
-import org.bukkit.loot.Lootable;
+
 
 /**
  * Represents a captured state of a dropper.
@@ -28,5 +28,5 @@ public interface Dropper extends Container, LootableBlockInventory { // Paper
      *
      * @throws IllegalStateException if this block state is not placed
      */
-    public void drop();
+    void drop();
 }
diff --git a/src/main/java/org/bukkit/block/Furnace.java b/src/main/java/org/bukkit/block/Furnace.java
index 9063cf370a0fe66c2a27086e125f9111b77366ae..fe2a53ff7d78b9e620289412bad60460eef62565 100644
--- a/src/main/java/org/bukkit/block/Furnace.java
+++ b/src/main/java/org/bukkit/block/Furnace.java
@@ -13,7 +13,7 @@ public interface Furnace extends Container {
      *
      * @return Burn time
      */
-    public short getBurnTime();
+    short getBurnTime();
 
     /**
      * Set burn time.
@@ -23,7 +23,7 @@ public interface Furnace extends Container {
      *
      * @param burnTime Burn time
      */
-    public void setBurnTime(short burnTime);
+    void setBurnTime(short burnTime);
 
     /**
      * Get cook time.
@@ -32,7 +32,7 @@ public interface Furnace extends Container {
      *
      * @return Cook time
      */
-    public short getCookTime();
+    short getCookTime();
 
     /**
      * Set cook time.
@@ -41,7 +41,7 @@ public interface Furnace extends Container {
      *
      * @param cookTime Cook time
      */
-    public void setCookTime(short cookTime);
+    void setCookTime(short cookTime);
 
     /**
      * Get cook time total.
@@ -50,7 +50,7 @@ public interface Furnace extends Container {
      *
      * @return Cook time total
      */
-    public int getCookTimeTotal();
+    int getCookTimeTotal();
 
     /**
      * Set cook time.
@@ -59,7 +59,7 @@ public interface Furnace extends Container {
      *
      * @param cookTimeTotal Cook time total
      */
-    public void setCookTimeTotal(int cookTimeTotal);
+    void setCookTimeTotal(int cookTimeTotal);
 
     // Paper start
     /**
@@ -68,7 +68,7 @@ public interface Furnace extends Container {
      *
      * @return the multiplier, a value between 0 and 200
      */
-    public double getCookSpeedMultiplier();
+    double getCookSpeedMultiplier();
 
     /**
      * Sets the speed multiplier that this {@link Furnace} will cook
@@ -78,14 +78,14 @@ public interface Furnace extends Container {
      * @throws IllegalArgumentException if value is less than 0
      * @throws IllegalArgumentException if value is more than 200
      */
-    public void setCookSpeedMultiplier(double multiplier);
+    void setCookSpeedMultiplier(double multiplier);
     // Paper end
 
     @NotNull
     @Override
-    public FurnaceInventory getInventory();
+    FurnaceInventory getInventory();
 
     @NotNull
     @Override
-    public FurnaceInventory getSnapshotInventory();
+    FurnaceInventory getSnapshotInventory();
 }
diff --git a/src/main/java/org/bukkit/block/Hopper.java b/src/main/java/org/bukkit/block/Hopper.java
index 7ade312f180b7e30871d3a3240c76325cc369c26..01e99f036e5fb3aa9d72320cff72b56b8e3f630b 100644
--- a/src/main/java/org/bukkit/block/Hopper.java
+++ b/src/main/java/org/bukkit/block/Hopper.java
@@ -1,7 +1,7 @@
 package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
-import org.bukkit.loot.Lootable;
+
 
 /**
  * Represents a captured state of a hopper.
diff --git a/src/main/java/org/bukkit/block/Jukebox.java b/src/main/java/org/bukkit/block/Jukebox.java
index 321e5e034a906129142341cec952fac3c1e7e360..e85161e99a9167f12874b8c25e5512561206d113 100644
--- a/src/main/java/org/bukkit/block/Jukebox.java
+++ b/src/main/java/org/bukkit/block/Jukebox.java
@@ -15,42 +15,40 @@ public interface Jukebox extends TileState {
      *
      * @return The record Material, or AIR if none is inserted
      */
-    @NotNull
-    public Material getPlaying();
+    @NotNull Material getPlaying();
 
     /**
      * Sets the record being played.
      *
      * @param record The record Material, or null/AIR to stop playing
      */
-    public void setPlaying(@Nullable Material record);
+    void setPlaying(@Nullable Material record);
 
     /**
      * Gets the record item inserted into the jukebox.
      *
      * @return a copy of the inserted record, or an air stack if none
      */
-    @NotNull
-    public ItemStack getRecord();
+    @NotNull ItemStack getRecord();
 
     /**
      * Sets the record being played.
      *
      * @param record the record to insert or null/AIR to empty
      */
-    public void setRecord(@Nullable ItemStack record);
+    void setRecord(@Nullable ItemStack record);
 
     /**
      * Checks if the jukebox is playing a record.
      *
      * @return True if there is a record playing
      */
-    public boolean isPlaying();
+    boolean isPlaying();
 
     /**
      * Stops the jukebox playing without ejecting the record.
      */
-    public void stopPlaying();
+    void stopPlaying();
 
     /**
      * Stops the jukebox playing and ejects the current record.
@@ -61,5 +59,5 @@ public interface Jukebox extends TileState {
      * @return True if a record was ejected; false if there was none playing
      * @throws IllegalStateException if this block state is not placed
      */
-    public boolean eject();
+    boolean eject();
 }
diff --git a/src/main/java/org/bukkit/block/PistonMoveReaction.java b/src/main/java/org/bukkit/block/PistonMoveReaction.java
index b90f5dc345ad2cdd3ae353dc57f42a14c231d18a..c80667eae67361fd433b8fbd9eaf1ef0d76e0b03 100644
--- a/src/main/java/org/bukkit/block/PistonMoveReaction.java
+++ b/src/main/java/org/bukkit/block/PistonMoveReaction.java
@@ -34,15 +34,15 @@ public enum PistonMoveReaction {
      */
     PUSH_ONLY(4);
 
-    private int id;
-    private static Map<Integer, PistonMoveReaction> byId = new HashMap<Integer, PistonMoveReaction>();
+    private final int id;
+    private static final Map<Integer, PistonMoveReaction> byId = new HashMap<>();
     static {
         for (PistonMoveReaction reaction : PistonMoveReaction.values()) {
             byId.put(reaction.id, reaction);
         }
     }
 
-    private PistonMoveReaction(int id) {
+    PistonMoveReaction(int id) {
         this.id = id;
     }
 
diff --git a/src/main/java/org/bukkit/block/ShulkerBox.java b/src/main/java/org/bukkit/block/ShulkerBox.java
index 172f383fea619127324fec2b043639fd0683f135..c4cfe276b03ff349cb038aa963e230517149f486 100644
--- a/src/main/java/org/bukkit/block/ShulkerBox.java
+++ b/src/main/java/org/bukkit/block/ShulkerBox.java
@@ -2,7 +2,6 @@ package org.bukkit.block;
 
 import com.destroystokyo.paper.loottable.LootableBlockInventory;
 import org.bukkit.DyeColor;
-import org.bukkit.loot.Lootable;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -15,6 +14,5 @@ public interface ShulkerBox extends Container, LootableBlockInventory, Lidded {
      *
      * @return the {@link DyeColor} of this ShulkerBox
      */
-    @NotNull
-    public DyeColor getColor();
+    @NotNull DyeColor getColor();
 }
diff --git a/src/main/java/org/bukkit/block/Sign.java b/src/main/java/org/bukkit/block/Sign.java
index 6ea9b54d95d80070c01a612c0ce2ab37f0b4ad41..a24e16382a6d555e6d164b65ed48ca4574d70768 100644
--- a/src/main/java/org/bukkit/block/Sign.java
+++ b/src/main/java/org/bukkit/block/Sign.java
@@ -13,8 +13,7 @@ public interface Sign extends TileState, Colorable {
      *
      * @return Array of Strings containing each line of text
      */
-    @NotNull
-    public java.util.List<net.kyori.adventure.text.Component> lines();
+    @NotNull java.util.List<net.kyori.adventure.text.Component> lines();
 
     /**
      * Gets the line of text at the specified index.
@@ -25,8 +24,7 @@ public interface Sign extends TileState, Colorable {
      * @throws IndexOutOfBoundsException Thrown when the line does not exist
      * @return Text on the given line
      */
-    @NotNull
-    public net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;
+    @NotNull net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException;
 
     /**
      * Sets the line of text at the specified index.
@@ -38,7 +36,7 @@ public interface Sign extends TileState, Colorable {
      * @param line New text to set at the specified index
      * @throws IndexOutOfBoundsException If the index is out of the range 0..3
      */
-    public void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;
+    void line(int index, @NotNull net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException;
     // Paper end
 
     /**
@@ -49,7 +47,7 @@ public interface Sign extends TileState, Colorable {
      */
     @NotNull
     @Deprecated // Paper
-    public String[] getLines();
+    String[] getLines();
 
     /**
      * Gets the line of text at the specified index.
@@ -63,7 +61,7 @@ public interface Sign extends TileState, Colorable {
      */
     @NotNull
     @Deprecated // Paper
-    public String getLine(int index) throws IndexOutOfBoundsException;
+    String getLine(int index) throws IndexOutOfBoundsException;
 
     /**
      * Sets the line of text at the specified index.
@@ -77,7 +75,7 @@ public interface Sign extends TileState, Colorable {
      * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;
+    void setLine(int index, @NotNull String line) throws IndexOutOfBoundsException;
 
     /**
      * Marks whether this sign can be edited by players.
@@ -88,7 +86,7 @@ public interface Sign extends TileState, Colorable {
      *
      * @return if this sign is currently editable
      */
-    public boolean isEditable();
+    boolean isEditable();
 
     /**
      * Marks whether this sign can be edited by players.
@@ -99,5 +97,5 @@ public interface Sign extends TileState, Colorable {
      *
      * @param editable if this sign is currently editable
      */
-    public void setEditable(boolean editable);
+    void setEditable(boolean editable);
 }
diff --git a/src/main/java/org/bukkit/block/Skull.java b/src/main/java/org/bukkit/block/Skull.java
index a6914f01e01e9103702185f92b0209b3c84c152a..d57337ac212f229a39a289446ed95ff84e8b4857 100644
--- a/src/main/java/org/bukkit/block/Skull.java
+++ b/src/main/java/org/bukkit/block/Skull.java
@@ -19,7 +19,7 @@ public interface Skull extends TileState {
      *
      * @return true if the skull has an owner
      */
-    public boolean hasOwner();
+    boolean hasOwner();
 
     /**
      * Gets the owner of the skull, if one exists
@@ -28,8 +28,7 @@ public interface Skull extends TileState {
      * @deprecated See {@link #getOwningPlayer()}.
      */
     @Deprecated
-    @Nullable
-    public String getOwner();
+    @Nullable String getOwner();
 
     /**
      * Sets the owner of the skull
@@ -43,7 +42,7 @@ public interface Skull extends TileState {
      */
     @Deprecated
     @Contract("null -> false")
-    public boolean setOwner(@Nullable String name);
+    boolean setOwner(@Nullable String name);
 
     /**
      * Get the player which owns the skull. This player may appear as the
@@ -51,8 +50,7 @@ public interface Skull extends TileState {
      *
      * @return owning player
      */
-    @Nullable
-    public OfflinePlayer getOwningPlayer();
+    @Nullable OfflinePlayer getOwningPlayer();
 
     /**
      * Set the player which owns the skull. This player may appear as the
@@ -60,7 +58,7 @@ public interface Skull extends TileState {
      *
      * @param player the owning player
      */
-    public void setOwningPlayer(@NotNull OfflinePlayer player);
+    void setOwningPlayer(@NotNull OfflinePlayer player);
 
     // Paper start
     /**
@@ -84,8 +82,7 @@ public interface Skull extends TileState {
      * @deprecated use {@link BlockData}
      */
     @Deprecated
-    @NotNull
-    public BlockFace getRotation();
+    @NotNull BlockFace getRotation();
 
     /**
      * Sets the rotation of the skull in the world (or facing direction if this
@@ -95,7 +92,7 @@ public interface Skull extends TileState {
      * @deprecated use {@link BlockData}
      */
     @Deprecated
-    public void setRotation(@NotNull BlockFace rotation);
+    void setRotation(@NotNull BlockFace rotation);
 
     /**
      * Gets the type of skull
@@ -104,8 +101,7 @@ public interface Skull extends TileState {
      * @deprecated check {@link Material} instead
      */
     @Deprecated
-    @NotNull
-    public SkullType getSkullType();
+    @NotNull SkullType getSkullType();
 
     /**
      * Sets the type of skull
@@ -115,5 +111,5 @@ public interface Skull extends TileState {
      */
     @Deprecated
     @Contract("_ -> fail")
-    public void setSkullType(SkullType skullType);
+    void setSkullType(SkullType skullType);
 }
diff --git a/src/main/java/org/bukkit/block/banner/Pattern.java b/src/main/java/org/bukkit/block/banner/Pattern.java
index 5c293ab0b7505267dda019c3e60d3b053c0fdd27..2c616b638226b6bbf45cd60e621a85271fe5cb1d 100644
--- a/src/main/java/org/bukkit/block/banner/Pattern.java
+++ b/src/main/java/org/bukkit/block/banner/Pattern.java
@@ -50,7 +50,7 @@ public class Pattern implements ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        return ImmutableMap.<String, Object>of(
+        return ImmutableMap.of(
             COLOR, color.toString(),
             PATTERN, pattern.getIdentifier()
         );
diff --git a/src/main/java/org/bukkit/block/banner/PatternType.java b/src/main/java/org/bukkit/block/banner/PatternType.java
index e6ce94ed2a4d64204aac60c4b2dc138f258e4720..11372d5cc9ad60d91ad30ca55278df5d25c1305b 100644
--- a/src/main/java/org/bukkit/block/banner/PatternType.java
+++ b/src/main/java/org/bukkit/block/banner/PatternType.java
@@ -50,7 +50,7 @@ public enum PatternType {
     PIGLIN("pig");
 
     private final String identifier;
-    private static final Map<String, PatternType> byString = new HashMap<String, PatternType>();
+    private static final Map<String, PatternType> byString = new HashMap<>();
 
     static {
         for (PatternType p : values()) {
@@ -58,7 +58,7 @@ public enum PatternType {
         }
     }
 
-    private PatternType(/*@NotNull*/ String key) {
+    PatternType(/*@NotNull*/ String key) {
         this.identifier = key;
     }
 
diff --git a/src/main/java/org/bukkit/block/data/Bisected.java b/src/main/java/org/bukkit/block/data/Bisected.java
index 7b7c0d2be7e50cf573d8f8c1f48258c17795342e..a7015d96e3fc65bab852b119d29899ed1dced860 100644
--- a/src/main/java/org/bukkit/block/data/Bisected.java
+++ b/src/main/java/org/bukkit/block/data/Bisected.java
@@ -27,7 +27,7 @@ public interface Bisected extends BlockData {
     /**
      * The half of a vertically bisected block.
      */
-    public enum Half {
+    enum Half {
         /**
          * The top half of the block, normally with the higher y coordinate.
          */
@@ -35,6 +35,6 @@ public interface Bisected extends BlockData {
         /**
          * The bottom half of the block, normally with the lower y coordinate.
          */
-        BOTTOM;
+        BOTTOM
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/FaceAttachable.java b/src/main/java/org/bukkit/block/data/FaceAttachable.java
index 9599e1237b9717ddbf84c3738bf6c1293e8b3c54..98270d57471c84d2f172ba375d24cd16c20141e6 100644
--- a/src/main/java/org/bukkit/block/data/FaceAttachable.java
+++ b/src/main/java/org/bukkit/block/data/FaceAttachable.java
@@ -28,7 +28,7 @@ public interface FaceAttachable extends BlockData {
     /**
      * The face to which a switch type block is stuck.
      */
-    public enum AttachedFace {
+    enum AttachedFace {
         /**
          * The switch is mounted to the floor and pointing upwards.
          */
@@ -40,6 +40,6 @@ public interface FaceAttachable extends BlockData {
         /**
          * The switch is mounted to the ceiling and pointing dowanrds.
          */
-        CEILING;
+        CEILING
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/Rail.java b/src/main/java/org/bukkit/block/data/Rail.java
index b89938800152df6d3b83639dfd03058106d8fe41..2372a036fd240184f33cb1ce2f879106156c6eda 100644
--- a/src/main/java/org/bukkit/block/data/Rail.java
+++ b/src/main/java/org/bukkit/block/data/Rail.java
@@ -37,7 +37,7 @@ public interface Rail extends BlockData {
     /**
      * The different types of shapes a rail block can occupy.
      */
-    public enum Shape {
+    enum Shape {
 
         /**
          * The rail runs flat along the north/south (Z) axis.
@@ -82,6 +82,6 @@ public interface Rail extends BlockData {
          * The rail forms a curve connecting the north and east faces of the
          * block.
          */
-        NORTH_EAST;
+        NORTH_EAST
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Bamboo.java b/src/main/java/org/bukkit/block/data/type/Bamboo.java
index 96b5add2999521e96dfeb22560241c2ff357e1e1..bdf40a607ca62989e200e0cfc4159e9e12ea59cc 100644
--- a/src/main/java/org/bukkit/block/data/type/Bamboo.java
+++ b/src/main/java/org/bukkit/block/data/type/Bamboo.java
@@ -26,7 +26,7 @@ public interface Bamboo extends Ageable, Sapling {
     /**
      * Bamboo leaf size.
      */
-    public enum Leaves {
+    enum Leaves {
 
         /**
          * No leaves.
@@ -39,6 +39,6 @@ public interface Bamboo extends Ageable, Sapling {
         /**
          * Large leaves.
          */
-        LARGE;
+        LARGE
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Bed.java b/src/main/java/org/bukkit/block/data/type/Bed.java
index ed519bfebe5b921f60867a3900edfce9859058b6..fd88b0fb4bcf934064d2df8355face8067bdc86d 100644
--- a/src/main/java/org/bukkit/block/data/type/Bed.java
+++ b/src/main/java/org/bukkit/block/data/type/Bed.java
@@ -38,7 +38,7 @@ public interface Bed extends Directional {
     /**
      * Horizontal half of a bed.
      */
-    public enum Part {
+    enum Part {
 
         /**
          * The head is the upper part of the bed containing the pillow.
@@ -47,6 +47,6 @@ public interface Bed extends Directional {
         /**
          * The foot is the lower half of the bed.
          */
-        FOOT;
+        FOOT
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Bell.java b/src/main/java/org/bukkit/block/data/type/Bell.java
index 9b8abfff4d573d46a880fc138232d9f2b10e5d09..900061a09475ef46db40a587779f19429209cbbf 100644
--- a/src/main/java/org/bukkit/block/data/type/Bell.java
+++ b/src/main/java/org/bukkit/block/data/type/Bell.java
@@ -27,7 +27,7 @@ public interface Bell extends Directional, Powerable {
     /**
      * What the bell is attached to.
      */
-    public enum Attachment {
+    enum Attachment {
 
         /**
          * Placed on floor.
@@ -44,6 +44,6 @@ public interface Bell extends Directional, Powerable {
         /**
          * Placed between two walls.
          */
-        DOUBLE_WALL;
+        DOUBLE_WALL
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Chest.java b/src/main/java/org/bukkit/block/data/type/Chest.java
index d79c3d0007f235d06c389108605d0aee3b108e60..c5ea76320efb1223916f75cb6b80f42703930fef 100644
--- a/src/main/java/org/bukkit/block/data/type/Chest.java
+++ b/src/main/java/org/bukkit/block/data/type/Chest.java
@@ -31,7 +31,7 @@ public interface Chest extends Directional, Waterlogged {
      * NB: Left and right are relative to the chest itself, i.e opposite to what
      * a player placing the appropriate block would see.
      */
-    public enum Type {
+    enum Type {
         /**
          * The chest is not linked to any others and contains only one 27 slot
          * inventory.
@@ -46,6 +46,6 @@ public interface Chest extends Directional, Waterlogged {
          * The chest is the right hand side of a double chest and shares a 54
          * block inventory with the chest to its left.
          */
-        RIGHT;
+        RIGHT
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Comparator.java b/src/main/java/org/bukkit/block/data/type/Comparator.java
index 6cfd2966046b19cf2a158d6d0c28711d2abc1329..d4a8516288a99f625f5e659b086f2e222f64b4f8 100644
--- a/src/main/java/org/bukkit/block/data/type/Comparator.java
+++ b/src/main/java/org/bukkit/block/data/type/Comparator.java
@@ -27,7 +27,7 @@ public interface Comparator extends Directional, Powerable {
     /**
      * The mode in which a comparator will operate in.
      */
-    public enum Mode {
+    enum Mode {
 
         /**
          * The default mode, similar to a transistor. The comparator will turn
@@ -38,6 +38,6 @@ public interface Comparator extends Directional, Powerable {
          * Alternate subtraction mode. The output signal strength will be equal
          * to max(rear-max(left,right),0).
          */
-        SUBTRACT;
+        SUBTRACT
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Door.java b/src/main/java/org/bukkit/block/data/type/Door.java
index 5b0bba5efed8dbfb15f550ea20eb11911838ae9a..dcdb956e1199735089c71819e39c629073206842 100644
--- a/src/main/java/org/bukkit/block/data/type/Door.java
+++ b/src/main/java/org/bukkit/block/data/type/Door.java
@@ -30,7 +30,7 @@ public interface Door extends Bisected, Directional, Openable, Powerable {
     /**
      * The hinge of a door.
      */
-    public enum Hinge {
+    enum Hinge {
         /**
          * Door is attached to the left side.
          */
@@ -38,6 +38,6 @@ public interface Door extends Bisected, Directional, Openable, Powerable {
         /**
          * Door is attached to the right side.
          */
-        RIGHT;
+        RIGHT
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Jigsaw.java b/src/main/java/org/bukkit/block/data/type/Jigsaw.java
index c70c755cdb36c8afc70988340b061c39c492e14e..bfe750f3d3694b224c3d551b88e320e9c1bbc292 100644
--- a/src/main/java/org/bukkit/block/data/type/Jigsaw.java
+++ b/src/main/java/org/bukkit/block/data/type/Jigsaw.java
@@ -26,7 +26,7 @@ public interface Jigsaw extends BlockData {
     /**
      * The directions the Jigsaw can be oriented.
      */
-    public enum Orientation {
+    enum Orientation {
 
         DOWN_EAST,
         DOWN_NORTH,
@@ -39,6 +39,6 @@ public interface Jigsaw extends BlockData {
         WEST_UP,
         EAST_UP,
         NORTH_UP,
-        SOUTH_UP;
+        SOUTH_UP
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/RedstoneWire.java b/src/main/java/org/bukkit/block/data/type/RedstoneWire.java
index ba8a80ee3ea3975e358b56f38255913fd1342af5..11a7d1c7c65ff812e596f222610f104a3ba78542 100644
--- a/src/main/java/org/bukkit/block/data/type/RedstoneWire.java
+++ b/src/main/java/org/bukkit/block/data/type/RedstoneWire.java
@@ -39,7 +39,7 @@ public interface RedstoneWire extends AnaloguePowerable {
     /**
      * The way in which a redstone wire can connect to an adjacent block face.
      */
-    public enum Connection {
+    enum Connection {
         /**
          * The wire travels up the side of the block adjacent to this face.
          */
@@ -51,6 +51,6 @@ public interface RedstoneWire extends AnaloguePowerable {
         /**
          * The wire does not connect in this direction.
          */
-        NONE;
+        NONE
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Slab.java b/src/main/java/org/bukkit/block/data/type/Slab.java
index cb09c32686c69ca6d5e72a78983f7a5448f9f7ca..07c3fee13b2e77e2ddfbc24291ae41004c2cd1b0 100644
--- a/src/main/java/org/bukkit/block/data/type/Slab.java
+++ b/src/main/java/org/bukkit/block/data/type/Slab.java
@@ -27,7 +27,7 @@ public interface Slab extends Waterlogged {
     /**
      * The type of the slab.
      */
-    public enum Type {
+    enum Type {
         /**
          * The slab occupies the upper y half of the block.
          */
@@ -39,6 +39,6 @@ public interface Slab extends Waterlogged {
         /**
          * The slab occupies the entire block.
          */
-        DOUBLE;
+        DOUBLE
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Stairs.java b/src/main/java/org/bukkit/block/data/type/Stairs.java
index 8bc5539566acf7335a7d8c0bf5bcb5d13450ddd1..7ac0de43e2f8f128e67e353fed0be4361cc21a8c 100644
--- a/src/main/java/org/bukkit/block/data/type/Stairs.java
+++ b/src/main/java/org/bukkit/block/data/type/Stairs.java
@@ -28,7 +28,7 @@ public interface Stairs extends Bisected, Directional, Waterlogged {
     /**
      * The shape of a stair block - used for constructing corners.
      */
-    public enum Shape {
+    enum Shape {
         /**
          * Regular stair block.
          */
@@ -48,6 +48,6 @@ public interface Stairs extends Bisected, Directional, Waterlogged {
         /**
          * Outer corner stair block with higher right side.
          */
-        OUTER_RIGHT;
+        OUTER_RIGHT
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/StructureBlock.java b/src/main/java/org/bukkit/block/data/type/StructureBlock.java
index 3c13a9a561c132c3b6a04570800a0084eb5201c6..ee9b38c859dfe799e6632ff8023b68d3e45f5134 100644
--- a/src/main/java/org/bukkit/block/data/type/StructureBlock.java
+++ b/src/main/java/org/bukkit/block/data/type/StructureBlock.java
@@ -27,7 +27,7 @@ public interface StructureBlock extends BlockData {
     /**
      * Operating mode of a structure block.
      */
-    public enum Mode {
+    enum Mode {
         /**
          * Allows selection and saving of a structure.
          */
@@ -44,6 +44,6 @@ public interface StructureBlock extends BlockData {
          * Dummy block used to run a custom function during world generation
          * before being removed.
          */
-        DATA;
+        DATA
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Switch.java b/src/main/java/org/bukkit/block/data/type/Switch.java
index be06f8db02ca41d5cc3a5dc02951ad27e3cc8f9d..6df4f27845a57cb9c16b816dbc320b742fbacea8 100644
--- a/src/main/java/org/bukkit/block/data/type/Switch.java
+++ b/src/main/java/org/bukkit/block/data/type/Switch.java
@@ -32,7 +32,7 @@ public interface Switch extends Directional, FaceAttachable, Powerable {
      * @deprecated use {@link AttachedFace}
      */
     @Deprecated
-    public enum Face {
+    enum Face {
         /**
          * The switch is mounted to the floor and pointing upwards.
          */
@@ -44,6 +44,6 @@ public interface Switch extends Directional, FaceAttachable, Powerable {
         /**
          * The switch is mounted to the ceiling and pointing dowanrds.
          */
-        CEILING;
+        CEILING
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/TechnicalPiston.java b/src/main/java/org/bukkit/block/data/type/TechnicalPiston.java
index 4c8b6e9be9596f6c701036173039d5907a69af39..7ab1bfdccfc192383ad9e95c8f4a0e50b73b4132 100644
--- a/src/main/java/org/bukkit/block/data/type/TechnicalPiston.java
+++ b/src/main/java/org/bukkit/block/data/type/TechnicalPiston.java
@@ -27,7 +27,7 @@ public interface TechnicalPiston extends Directional {
     /**
      * Different piston variants.
      */
-    public enum Type {
+    enum Type {
         /**
          * A normal piston which does not pull connected blocks backwards on
          * retraction.
@@ -36,6 +36,6 @@ public interface TechnicalPiston extends Directional {
         /**
          * A sticky piston which will also retract connected blocks.
          */
-        STICKY;
+        STICKY
     }
 }
diff --git a/src/main/java/org/bukkit/block/data/type/Wall.java b/src/main/java/org/bukkit/block/data/type/Wall.java
index 2a14ccd10897a6aabd6da09ffd0545750c2d2327..8919d2d29bbfb67777d2b8bb6bc5880b2ce17e95 100644
--- a/src/main/java/org/bukkit/block/data/type/Wall.java
+++ b/src/main/java/org/bukkit/block/data/type/Wall.java
@@ -46,7 +46,7 @@ public interface Wall extends Waterlogged {
     /**
      * The different heights a face of a wall may have.
      */
-    public enum Height {
+    enum Height {
         /**
          * No wall present.
          */
@@ -58,6 +58,6 @@ public interface Wall extends Waterlogged {
         /**
          * Tall wall present.
          */
-        TALL;
+        TALL
     }
 }
diff --git a/src/main/java/org/bukkit/block/structure/Mirror.java b/src/main/java/org/bukkit/block/structure/Mirror.java
index 86e812a1b2248cd7186fd9f69b375bccd1f4bbcf..1e11edc4553beb029c47485ddb62f62fb0088be0 100644
--- a/src/main/java/org/bukkit/block/structure/Mirror.java
+++ b/src/main/java/org/bukkit/block/structure/Mirror.java
@@ -23,5 +23,5 @@ public enum Mirror {
      * <br>
      * Positive Z to Negative X
      */
-    FRONT_BACK;
+    FRONT_BACK
 }
diff --git a/src/main/java/org/bukkit/block/structure/StructureRotation.java b/src/main/java/org/bukkit/block/structure/StructureRotation.java
index 0d0bfca435ee32ece136eee2bebee91995b2cdbf..0d331f11e9d30812656abcad766053c9f902f596 100644
--- a/src/main/java/org/bukkit/block/structure/StructureRotation.java
+++ b/src/main/java/org/bukkit/block/structure/StructureRotation.java
@@ -22,5 +22,5 @@ public enum StructureRotation {
      * <br>
      * Equivalent to rotating clockwise 270 degrees.
      */
-    COUNTERCLOCKWISE_90;
+    COUNTERCLOCKWISE_90
 }
diff --git a/src/main/java/org/bukkit/block/structure/UsageMode.java b/src/main/java/org/bukkit/block/structure/UsageMode.java
index cbea3f386bb052592788fd400ead3ea713defa04..ed3868739d9dc1014d397f472a166213f1f9777c 100644
--- a/src/main/java/org/bukkit/block/structure/UsageMode.java
+++ b/src/main/java/org/bukkit/block/structure/UsageMode.java
@@ -25,5 +25,5 @@ public enum UsageMode {
      * The data tags (functions) can be found on the
      * <a href="http://minecraft.gamepedia.com/Structure_Block#Data">wiki</a>.
      */
-    DATA;
+    DATA
 }
diff --git a/src/main/java/org/bukkit/boss/DragonBattle.java b/src/main/java/org/bukkit/boss/DragonBattle.java
index 927dcc9ac268721d5577e30a989476c68e3f0e1e..56bc92124877e4bf219d8dd21f97b02915eb39e6 100644
--- a/src/main/java/org/bukkit/boss/DragonBattle.java
+++ b/src/main/java/org/bukkit/boss/DragonBattle.java
@@ -17,16 +17,14 @@ public interface DragonBattle {
      *
      * @return the ender dragon. null if dead
      */
-    @Nullable
-    public EnderDragon getEnderDragon();
+    @Nullable EnderDragon getEnderDragon();
 
     /**
      * Get the boss bar to be displayed for this dragon battle.
      *
      * @return the boss bar
      */
-    @NotNull
-    public BossBar getBossBar();
+    @NotNull BossBar getBossBar();
 
     /**
      * Get the location of the end portal.
@@ -35,8 +33,7 @@ public interface DragonBattle {
      *
      * @return the end portal location or null if not generated
      */
-    @Nullable
-    public Location getEndPortalLocation();
+    @Nullable Location getEndPortalLocation();
 
     /**
      * Generate the end portal.
@@ -45,28 +42,27 @@ public interface DragonBattle {
      *
      * @return true if generated, false if already present
      */
-    public boolean generateEndPortal(boolean withPortals);
+    boolean generateEndPortal(boolean withPortals);
 
     /**
      * Check whether or not the first dragon has been killed already.
      *
      * @return true if killed before, false otherwise
      */
-    public boolean hasBeenPreviouslyKilled();
+    boolean hasBeenPreviouslyKilled();
 
     /**
      * Initiate a respawn sequence to summon the dragon as though a player has
      * placed 4 end crystals on the portal.
      */
-    public void initiateRespawn();
+    void initiateRespawn();
 
     /**
      * Get this battle's current respawn phase.
      *
      * @return the current respawn phase.
      */
-    @NotNull
-    public RespawnPhase getRespawnPhase();
+    @NotNull RespawnPhase getRespawnPhase();
 
     /**
      * Set the dragon's respawn phase.
@@ -79,18 +75,18 @@ public interface DragonBattle {
      *
      * @see #initiateRespawn()
      */
-    public boolean setRespawnPhase(@NotNull RespawnPhase phase);
+    boolean setRespawnPhase(@NotNull RespawnPhase phase);
 
     /**
      * Reset the crystals located on the obsidian pillars (remove their beam
      * targets and invulnerability).
      */
-    public void resetCrystals();
+    void resetCrystals();
 
     /**
      * Represents a phase in the dragon respawn process.
      */
-    public enum RespawnPhase {
+    enum RespawnPhase {
 
         /**
          * The crystal beams are directed upwards into the sky.
@@ -118,6 +114,6 @@ public interface DragonBattle {
         /**
          * No respawn is in progress.
          */
-        NONE;
+        NONE
     }
 }
diff --git a/src/main/java/org/bukkit/command/BlockCommandSender.java b/src/main/java/org/bukkit/command/BlockCommandSender.java
index b8f2f7ebe49dceb12a316388a229cce6b4e2da7c..a0814a92690842251a85e0e148a04db3e6050dc1 100644
--- a/src/main/java/org/bukkit/command/BlockCommandSender.java
+++ b/src/main/java/org/bukkit/command/BlockCommandSender.java
@@ -10,6 +10,5 @@ public interface BlockCommandSender extends CommandSender {
      *
      * @return Block for the command sender
      */
-    @NotNull
-    public Block getBlock();
+    @NotNull Block getBlock();
 }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index c10fc8d2386301bc2caddcdb1cd18566bcaa8689..b478046be86e87a2c4e8cfb4274a0b829fa5b4b7 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -1,16 +1,8 @@
 package org.bukkit.command;
 
 import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Set;
 import org.apache.commons.lang.Validate;
-import org.bukkit.Bukkit;
-import org.bukkit.ChatColor;
-import org.bukkit.GameRule;
-import org.bukkit.Location;
-import org.bukkit.Server;
+import org.bukkit.*;
 import org.bukkit.entity.Player;
 import org.bukkit.entity.minecart.CommandMinecart;
 import org.bukkit.permissions.Permissible;
@@ -19,6 +11,10 @@ import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
 /**
  * Represents a Command, which executes various tasks upon user input
  */
@@ -37,17 +33,17 @@ public abstract class Command {
     @NotNull public String getTimingName() {return getName();} // Paper
 
     protected Command(@NotNull String name) {
-        this(name, "", "/" + name, new ArrayList<String>());
+        this(name, "", "/" + name, new ArrayList<>());
     }
 
     protected Command(@NotNull String name, @NotNull String description, @NotNull String usageMessage, @NotNull List<String> aliases) {
         this.name = name;
         this.nextLabel = name;
         this.label = name;
-        this.description = (description == null) ? "" : description;
-        this.usageMessage = (usageMessage == null) ? "/" + name : usageMessage;
+        this.description = description;
+        this.usageMessage = usageMessage;
         this.aliases = aliases;
-        this.activeAliases = new ArrayList<String>(aliases);
+        this.activeAliases = new ArrayList<>(aliases);
     }
 
     /**
@@ -107,7 +103,7 @@ public abstract class Command {
 
         Player senderPlayer = sender instanceof Player ? (Player) sender : null;
 
-        ArrayList<String> matchedPlayers = new ArrayList<String>();
+        ArrayList<String> matchedPlayers = new ArrayList<>();
         for (Player player : sender.getServer().getOnlinePlayers()) {
             String name = player.getName();
             if ((senderPlayer == null || senderPlayer.canSee(player)) && StringUtil.startsWithIgnoreCase(name, lastWord)) {
@@ -115,7 +111,7 @@ public abstract class Command {
             }
         }
 
-        Collections.sort(matchedPlayers, String.CASE_INSENSITIVE_ORDER);
+        matchedPlayers.sort(String.CASE_INSENSITIVE_ORDER);
         return matchedPlayers;
     }
 
@@ -141,8 +137,8 @@ public abstract class Command {
      *     the command was already registered
      */
     public boolean setName(@NotNull String name) {
-        if (!isRegistered()) {
-            this.name = (name == null) ? "" : name;
+        if (isRegistered()) {
+            this.name = name;
             return true;
         }
         return false;
@@ -240,11 +236,8 @@ public abstract class Command {
      *     the command was already registered
      */
     public boolean setLabel(@NotNull String name) {
-        if (name == null) {
-            name = "";
-        }
-        this.nextLabel = name;
-        if (!isRegistered()) {
+	    this.nextLabel = name;
+        if (isRegistered()) {
             this.label = name;
             return true;
         }
@@ -280,7 +273,7 @@ public abstract class Command {
     public boolean unregister(@NotNull CommandMap commandMap) {
         if (allowChangesFrom(commandMap)) {
             this.commandMap = null;
-            this.activeAliases = new ArrayList<String>(this.aliases);
+            this.activeAliases = new ArrayList<>(this.aliases);
             this.label = this.nextLabel;
             return true;
         }
@@ -298,7 +291,7 @@ public abstract class Command {
      * @return true if this command is currently registered false otherwise
      */
     public boolean isRegistered() {
-        return (null != this.commandMap);
+        return (null == this.commandMap);
     }
 
     /**
@@ -354,8 +347,8 @@ public abstract class Command {
     @NotNull
     public Command setAliases(@NotNull List<String> aliases) {
         this.aliases = aliases;
-        if (!isRegistered()) {
-            this.activeAliases = new ArrayList<String>(aliases);
+        if (isRegistered()) {
+            this.activeAliases = new ArrayList<>(aliases);
         }
         return this;
     }
@@ -370,7 +363,7 @@ public abstract class Command {
      */
     @NotNull
     public Command setDescription(@NotNull String description) {
-        this.description = (description == null) ? "" : description;
+        this.description = description;
         return this;
     }
 
@@ -395,7 +388,7 @@ public abstract class Command {
      */
     @NotNull
     public Command setUsage(@NotNull String usage) {
-        this.usageMessage = (usage == null) ? "" : usage;
+        this.usageMessage = usage;
         return this;
     }
 
diff --git a/src/main/java/org/bukkit/command/CommandExecutor.java b/src/main/java/org/bukkit/command/CommandExecutor.java
index 45cb8da120ac976fc1ccac7c54264d8d3c4f2072..27ddbef7f23bd7cbb066a70ce56d40cd59ed702b 100644
--- a/src/main/java/org/bukkit/command/CommandExecutor.java
+++ b/src/main/java/org/bukkit/command/CommandExecutor.java
@@ -19,5 +19,5 @@ public interface CommandExecutor {
      * @param args Passed command arguments
      * @return true if a valid command, otherwise false
      */
-    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args);
+    boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args);
 }
diff --git a/src/main/java/org/bukkit/command/CommandMap.java b/src/main/java/org/bukkit/command/CommandMap.java
index 864c263bbd4dd6dd7c37a74b39b1a40a884d0731..58a1bf33967d16af5f16dfb92a20919f096b7509 100644
--- a/src/main/java/org/bukkit/command/CommandMap.java
+++ b/src/main/java/org/bukkit/command/CommandMap.java
@@ -1,10 +1,11 @@
 package org.bukkit.command;
 
-import java.util.List;
 import org.bukkit.Location;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 public interface CommandMap {
 
     /**
@@ -22,7 +23,7 @@ public interface CommandMap {
      *     a ':' one or more times to make the command unique
      * @param commands a list of commands to register
      */
-    public void registerAll(@NotNull String fallbackPrefix, @NotNull List<Command> commands);
+    void registerAll(@NotNull String fallbackPrefix, @NotNull List<Command> commands);
 
     /**
      * Registers a command. Returns true on success; false if name is already
@@ -44,7 +45,7 @@ public interface CommandMap {
      *     otherwise, which indicates the fallbackPrefix was used one or more
      *     times
      */
-    public boolean register(@NotNull String label, @NotNull String fallbackPrefix, @NotNull Command command);
+    boolean register(@NotNull String label, @NotNull String fallbackPrefix, @NotNull Command command);
 
     /**
      * Registers a command. Returns true on success; false if name is already
@@ -66,7 +67,7 @@ public interface CommandMap {
      *     otherwise, which indicates the fallbackPrefix was used one or more
      *     times
      */
-    public boolean register(@NotNull String fallbackPrefix, @NotNull Command command);
+    boolean register(@NotNull String fallbackPrefix, @NotNull Command command);
 
     /**
      * Looks for the requested command and executes it if found.
@@ -77,12 +78,12 @@ public interface CommandMap {
      * @throws CommandException Thrown when the executor for the given command
      *     fails with an unhandled exception
      */
-    public boolean dispatch(@NotNull CommandSender sender, @NotNull String cmdLine) throws CommandException;
+    boolean dispatch(@NotNull CommandSender sender, @NotNull String cmdLine) throws CommandException;
 
     /**
      * Clears all registered commands.
      */
-    public void clearCommands();
+    void clearCommands();
 
     /**
      * Gets the command registered to the specified name
@@ -91,8 +92,7 @@ public interface CommandMap {
      * @return Command with the specified name or null if a command with that
      *     label doesn't exist
      */
-    @Nullable
-    public Command getCommand(@NotNull String name);
+    @Nullable Command getCommand(@NotNull String name);
 
     /**
      * Looks for the requested command and executes an appropriate
@@ -108,8 +108,7 @@ public interface CommandMap {
      *     command fails with an unhandled exception
      * @throws IllegalArgumentException if either sender or cmdLine are null
      */
-    @Nullable
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine) throws IllegalArgumentException;
+    @Nullable List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine) throws IllegalArgumentException;
 
     /**
      * Looks for the requested command and executes an appropriate
@@ -126,8 +125,7 @@ public interface CommandMap {
      *     command fails with an unhandled exception
      * @throws IllegalArgumentException if either sender or cmdLine are null
      */
-    @Nullable
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine, @Nullable Location location) throws IllegalArgumentException;
+    @Nullable List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine, @Nullable Location location) throws IllegalArgumentException;
 
     // Paper start - Expose Known Commands
     /**
@@ -135,7 +133,6 @@ public interface CommandMap {
      *
      * @return known commands
      */
-    @NotNull
-    public java.util.Map<String, Command> getKnownCommands();
+    @NotNull java.util.Map<String, Command> getKnownCommands();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index fb0e608fa92dae99b9eee8fc1cbdf4b91a33e620..4937cf8e4af36013a9ccc8cbc4e9c89ba4eae41f 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -1,6 +1,5 @@
 package org.bukkit.command;
 
-import java.util.UUID;
 import net.kyori.adventure.audience.MessageType;
 import net.kyori.adventure.identity.Identity;
 import net.kyori.adventure.text.Component;
@@ -9,6 +8,8 @@ import org.bukkit.permissions.Permissible;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 public interface CommandSender extends net.kyori.adventure.audience.Audience, Permissible { // Paper
 
     /**
@@ -17,7 +18,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @param message Message to be displayed
      * @see #sendMessage(net.kyori.adventure.text.Component)
      */
-    public void sendMessage(@NotNull String message);
+    void sendMessage(@NotNull String message);
 
     /**
      * Sends this sender multiple messages
@@ -25,7 +26,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @param messages An array of messages to be displayed
      * @see #sendMessage(net.kyori.adventure.text.Component)
      */
-    public void sendMessage(@NotNull String[] messages);
+    void sendMessage(@NotNull String[] messages);
 
     /**
      * Sends this sender a message
@@ -34,7 +35,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @param sender The sender of this message
      * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)
      */
-    public void sendMessage(@Nullable UUID sender, @NotNull String message);
+    void sendMessage(@Nullable UUID sender, @NotNull String message);
 
     /**
      * Sends this sender multiple messages
@@ -43,26 +44,24 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @param sender The sender of this message
      * @see #sendMessage(net.kyori.adventure.identity.Identified, net.kyori.adventure.text.Component)
      */
-    public void sendMessage(@Nullable UUID sender, @NotNull String[] messages);
+    void sendMessage(@Nullable UUID sender, @NotNull String[] messages);
 
     /**
      * Returns the server instance that this command is running on
      *
      * @return Server instance
      */
-    @NotNull
-    public Server getServer();
+    @NotNull Server getServer();
 
     /**
      * Gets the name of this command sender
      *
      * @return Name of the sender
      */
-    @NotNull
-    public String getName();
+    @NotNull String getName();
 
     // Spigot start
-    public class Spigot {
+    class Spigot {
 
         /**
          * Sends this sender a chat component.
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index 9d4f553c04784cca63901a56a7aea62a5cae1d72..b627b78a899e8e674310f5ff0b3d0f5b3fe67a0c 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -19,7 +19,7 @@ public class FormattedCommandAlias extends Command {
     @Override
     public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
         boolean result = false;
-        ArrayList<String> commands = new ArrayList<String>();
+        ArrayList<String> commands = new ArrayList<>();
         for (String formatString : formatStrings) {
             try {
                 commands.add(buildCommand(sender, formatString, args)); // Paper
diff --git a/src/main/java/org/bukkit/command/MultipleCommandAlias.java b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
index 8487bfe3327616fd8eb871c52b35ce3af033934c..d07f28ac39426456dfa743832eebee42dcca883d 100644
--- a/src/main/java/org/bukkit/command/MultipleCommandAlias.java
+++ b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
@@ -6,7 +6,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents a command that delegates to one or more other commands
  */
 public class MultipleCommandAlias extends Command {
-    private Command[] commands;
+    private final Command[] commands;
 
     public MultipleCommandAlias(@NotNull String name, @NotNull Command[] commands) {
         super(name);
diff --git a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
index a542c4bb3c973bbe4b976642feccde6a4d90cb7b..2af4e9d2e0d70badb9437d316655393f45aac2e8 100644
--- a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
+++ b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
@@ -12,15 +12,11 @@ public class PluginCommandYamlParser {
 
     @NotNull
     public static List<Command> parse(@NotNull Plugin plugin) {
-        List<Command> pluginCmds = new ArrayList<Command>();
+        List<Command> pluginCmds = new ArrayList<>();
 
         Map<String, Map<String, Object>> map = plugin.getDescription().getCommands();
 
-        if (map == null) {
-            return pluginCmds;
-        }
-
-        for (Entry<String, Map<String, Object>> entry : map.entrySet()) {
+	    for (Entry<String, Map<String, Object>> entry : map.entrySet()) {
             if (entry.getKey().contains(":")) {
                 Bukkit.getServer().getLogger().severe("Could not load command " + entry.getKey() + " for plugin " + plugin.getName() + ": Illegal Characters");
                 continue;
@@ -41,7 +37,7 @@ public class PluginCommandYamlParser {
             }
 
             if (aliases != null) {
-                List<String> aliasList = new ArrayList<String>();
+                List<String> aliasList = new ArrayList<>();
 
                 if (aliases instanceof List) {
                     for (Object o : (List<?>) aliases) {
diff --git a/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java b/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java
index d51e0fd604a77ece6e3023bbca738396bef59784..bf3a9cce0637cbef9d36bc09993d2b25c8fbaad1 100644
--- a/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java
+++ b/src/main/java/org/bukkit/command/PluginIdentifiableCommand.java
@@ -16,6 +16,5 @@ public interface PluginIdentifiableCommand {
      *
      * @return Plugin that owns this PluginIdentifiableCommand.
      */
-    @NotNull
-    public Plugin getPlugin();
+    @NotNull Plugin getPlugin();
 }
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index 460fda05a62b12db2edcfb7ea8b2a5dd8e4b110d..bd096f806e506ca518cdb6f39c834e6db3a239d0 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -26,7 +26,7 @@ import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public class SimpleCommandMap implements CommandMap {
-    protected final Map<String, Command> knownCommands = new HashMap<String, Command>();
+    protected final Map<String, Command> knownCommands = new HashMap<>();
     private final Server server;
 
     public SimpleCommandMap(@NotNull final Server server) {
@@ -50,11 +50,9 @@ public class SimpleCommandMap implements CommandMap {
      */
     @Override
     public void registerAll(@NotNull String fallbackPrefix, @NotNull List<Command> commands) {
-        if (commands != null) {
-            for (Command c : commands) {
-                register(fallbackPrefix, c);
-            }
-        }
+	    for (Command c : commands) {
+	        register(fallbackPrefix, c);
+	    }
     }
 
     /**
@@ -126,7 +124,7 @@ public class SimpleCommandMap implements CommandMap {
         }
         knownCommands.put(label, command);
 
-        return registered;
+        return true;
     }
 
     /**
@@ -185,8 +183,7 @@ public class SimpleCommandMap implements CommandMap {
     @Override
     @Nullable
     public Command getCommand(@NotNull String name) {
-        Command target = knownCommands.get(name.toLowerCase(java.util.Locale.ENGLISH));
-        return target;
+        return knownCommands.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
@@ -204,7 +201,7 @@ public class SimpleCommandMap implements CommandMap {
         int spaceIndex = cmdLine.indexOf(' ');
 
         if (spaceIndex == -1) {
-            ArrayList<String> completions = new ArrayList<String>();
+            ArrayList<String> completions = new ArrayList<>();
             Map<String, Command> knownCommands = this.knownCommands;
 
             final String prefix = (sender instanceof Player ? "/" : "");
@@ -223,7 +220,7 @@ public class SimpleCommandMap implements CommandMap {
                 }
             }
 
-            Collections.sort(completions, String.CASE_INSENSITIVE_ORDER);
+            completions.sort(String.CASE_INSENSITIVE_ORDER);
             return completions;
         }
 
@@ -238,7 +235,7 @@ public class SimpleCommandMap implements CommandMap {
             return null;
         }
 
-        String[] args = cmdLine.substring(spaceIndex + 1, cmdLine.length()).split(" ", -1);
+        String[] args = cmdLine.substring(spaceIndex + 1).split(" ", -1);
 
         try {
             return target.tabComplete(sender, commandName, args, location);
@@ -267,7 +264,7 @@ public class SimpleCommandMap implements CommandMap {
             }
 
             String[] commandStrings = entry.getValue();
-            List<String> targets = new ArrayList<String>();
+            List<String> targets = new ArrayList<>();
             StringBuilder bad = new StringBuilder();
 
             for (String commandString : commandStrings) {
@@ -291,7 +288,7 @@ public class SimpleCommandMap implements CommandMap {
 
             // We register these as commands so they have absolute priority.
             if (targets.size() > 0) {
-                knownCommands.put(alias.toLowerCase(java.util.Locale.ENGLISH), new FormattedCommandAlias(alias.toLowerCase(java.util.Locale.ENGLISH), targets.toArray(new String[targets.size()])));
+                knownCommands.put(alias.toLowerCase(java.util.Locale.ENGLISH), new FormattedCommandAlias(alias.toLowerCase(java.util.Locale.ENGLISH), targets.toArray(new String[0])));
             } else {
                 knownCommands.remove(alias.toLowerCase(java.util.Locale.ENGLISH));
             }
diff --git a/src/main/java/org/bukkit/command/TabCompleter.java b/src/main/java/org/bukkit/command/TabCompleter.java
index e9cf71f5ce9d7fd193c7423300ddbf5c77c9accf..588b1908f91d2e2e251808aa76ec0b4fcb58e537 100644
--- a/src/main/java/org/bukkit/command/TabCompleter.java
+++ b/src/main/java/org/bukkit/command/TabCompleter.java
@@ -22,6 +22,5 @@ public interface TabCompleter {
      * @return A List of possible completions for the final argument, or null
      *     to default to the command executor
      */
-    @Nullable
-    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args);
+    @Nullable List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args);
 }
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index 98027fdd8dbd2c0ed84a065f7b991738ee397a66..32d58e3df7246e56b028f6d8bcf8bdeca564560a 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -1,13 +1,9 @@
 package org.bukkit.command.defaults;
 
 import com.google.common.collect.ImmutableList;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.TreeSet;
+
+import java.util.*;
+
 import org.apache.commons.lang.ArrayUtils;
 import org.apache.commons.lang.StringUtils;
 import org.apache.commons.lang.Validate;
@@ -29,7 +25,7 @@ public class HelpCommand extends BukkitCommand {
         super("help");
         this.description = "Shows the help menu";
         this.usageMessage = "/help <pageNumber>\n/help <topic>\n/help <topic> <pageNumber>";
-        this.setAliases(Arrays.asList(new String[]{"?"}));
+        this.setAliases(Collections.singletonList("?"));
         this.setPermission("bukkit.command.help");
     }
 
@@ -101,9 +97,7 @@ public class HelpCommand extends BukkitCommand {
             header.append(") ");
         }
         header.append(ChatColor.YELLOW);
-        for (int i = header.length(); i < ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH; i++) {
-            header.append("-");
-        }
+        header.append("-".repeat(Math.max(0, ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH - header.length())));
         sender.sendMessage(header.toString());
 
         sender.sendMessage(page.getLines());
@@ -119,7 +113,7 @@ public class HelpCommand extends BukkitCommand {
         Validate.notNull(alias, "Alias cannot be null");
 
         if (args.length == 1) {
-            List<String> matchedTopics = new ArrayList<String>();
+            List<String> matchedTopics = new ArrayList<>();
             String searchString = args[0];
             for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
                 String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
@@ -136,7 +130,7 @@ public class HelpCommand extends BukkitCommand {
     @Nullable
     protected HelpTopic findPossibleMatches(@NotNull String searchString) {
         int maxDistance = (searchString.length() / 5) + 3;
-        Set<HelpTopic> possibleMatches = new TreeSet<HelpTopic>(HelpTopicComparator.helpTopicComparatorInstance());
+        Set<HelpTopic> possibleMatches = new TreeSet<>(HelpTopicComparator.helpTopicComparatorInstance());
 
         if (searchString.startsWith("/")) {
             searchString = searchString.substring(1);
@@ -181,7 +175,7 @@ public class HelpCommand extends BukkitCommand {
         if (s1 != null && s2 == null) {
             return s1.length();
         }
-        if (s1 == null && s2 != null) {
+        if (s1 == null) {
             return s2.length();
         }
 
@@ -200,7 +194,7 @@ public class HelpCommand extends BukkitCommand {
             H[0][j + 1] = INF;
         }
 
-        Map<Character, Integer> sd = new HashMap<Character, Integer>();
+        Map<Character, Integer> sd = new HashMap<>();
         for (char Letter : (s1 + s2).toCharArray()) {
             if (!sd.containsKey(Letter)) {
                 sd.put(Letter, 0);
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index 1aa58c59e1e8738bbdc77752885ff3b18b29de42..59e241f59251222cdaac762f9577c7977bb194c1 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -1,6 +1,5 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import java.util.Map;
@@ -18,7 +17,7 @@ public class PluginsCommand extends BukkitCommand {
         this.description = "Gets a list of plugins running on the server";
         this.usageMessage = "/plugins";
         this.setPermission("bukkit.command.plugins");
-        this.setAliases(Arrays.asList("pl"));
+        this.setAliases(Collections.singletonList("pl"));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index 0c7ba0718de2b93d013968ca0fec34ffd423990f..cc7e094f79aa4ba21117db1e745ac225433a4325 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -1,6 +1,5 @@
 package org.bukkit.command.defaults;
 
-import java.util.Arrays;
 import java.util.Collections;
 import java.util.List;
 import org.bukkit.Bukkit;
@@ -15,7 +14,7 @@ public class ReloadCommand extends BukkitCommand {
         this.description = "Reloads the server configuration and plugins";
         this.usageMessage = "/reload [permissions|commands|confirm]"; // Paper
         this.setPermission("bukkit.command.reload");
-        this.setAliases(Arrays.asList("rl"));
+        this.setAliases(Collections.singletonList("rl"));
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index 4c2ddc722a9dc4011906ad9530b13fa9be1d3ff9..c3b888684d5489b751dff521a68f8e2591e74b61 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -11,6 +11,7 @@ import java.io.BufferedReader;
 import java.io.IOException;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.nio.charset.StandardCharsets;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -143,7 +144,7 @@ public class VersionCommand extends BukkitCommand {
         Validate.notNull(alias, "Alias cannot be null");
 
         if (args.length == 1) {
-            List<String> completions = new ArrayList<String>();
+            List<String> completions = new ArrayList<>();
             String toComplete = args[0].toLowerCase(java.util.Locale.ENGLISH);
             for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 if (StringUtil.startsWithIgnoreCase(plugin.getName(), toComplete)) {
@@ -158,7 +159,7 @@ public class VersionCommand extends BukkitCommand {
     private final ReentrantLock versionLock = new ReentrantLock();
     private boolean hasVersion = false;
     private Component versionMessage = null; // Paper
-    private final Set<CommandSender> versionWaiters = new HashSet<CommandSender>();
+    private final Set<CommandSender> versionWaiters = new HashSet<>();
     private boolean versionTaskStarted = false;
     private long lastCheck = 0;
 
@@ -182,13 +183,7 @@ public class VersionCommand extends BukkitCommand {
             sender.sendMessage(Component.text("Checking version, please wait...", net.kyori.adventure.text.format.NamedTextColor.WHITE, net.kyori.adventure.text.format.TextDecoration.ITALIC)); // Paper
             if (!versionTaskStarted) {
                 versionTaskStarted = true;
-                new Thread(new Runnable() {
-
-                    @Override
-                    public void run() {
-                        obtainVersion();
-                    }
-                }).start();
+                new Thread(this::obtainVersion).start();
             }
         } finally {
             versionLock.unlock();
@@ -266,18 +261,15 @@ public class VersionCommand extends BukkitCommand {
 
     private static int getDistance(@NotNull String repo, @NotNull String hash) {
         try {
-            BufferedReader reader = Resources.asCharSource(
-                    new URL("https://hub.spigotmc.org/stash/rest/api/1.0/projects/SPIGOT/repos/" + repo + "/commits?since=" + URLEncoder.encode(hash, "UTF-8") + "&withCounts=true"),
-                    Charsets.UTF_8
-            ).openBufferedStream();
-            try {
+            try (BufferedReader reader = Resources.asCharSource(
+                new URL("https://hub.spigotmc.org/stash/rest/api/1.0/projects/SPIGOT/repos/" + repo + "/commits?since=" + URLEncoder.encode(hash, StandardCharsets.UTF_8) + "&withCounts=true"),
+                Charsets.UTF_8
+            ).openBufferedStream()) {
                 JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
                 return obj.get("totalCount").getAsInt();
             } catch (JsonSyntaxException ex) {
                 ex.printStackTrace();
                 return -1;
-            } finally {
-                reader.close();
             }
         } catch (IOException e) {
             e.printStackTrace();
diff --git a/src/main/java/org/bukkit/configuration/Configuration.java b/src/main/java/org/bukkit/configuration/Configuration.java
index f12a98b1beb20a039f9830a00be89742a307d9ad..b1e56c0b567b80c8d23b81f0c2eb3039400a24b2 100644
--- a/src/main/java/org/bukkit/configuration/Configuration.java
+++ b/src/main/java/org/bukkit/configuration/Configuration.java
@@ -1,9 +1,10 @@
 package org.bukkit.configuration;
 
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 /**
  * Represents a source of configurable options and settings
  */
@@ -23,7 +24,7 @@ public interface Configuration extends ConfigurationSection {
      * @throws IllegalArgumentException Thrown if path is null.
      */
     @Override
-    public void addDefault(@NotNull String path, @Nullable Object value);
+    void addDefault(@NotNull String path, @Nullable Object value);
 
     /**
      * Sets the default values of the given paths as provided.
@@ -35,7 +36,7 @@ public interface Configuration extends ConfigurationSection {
      * @param defaults A map of Path{@literal ->}Values to add to defaults.
      * @throws IllegalArgumentException Thrown if defaults is null.
      */
-    public void addDefaults(@NotNull Map<String, Object> defaults);
+    void addDefaults(@NotNull Map<String, Object> defaults);
 
     /**
      * Sets the default values of the given paths as provided.
@@ -52,7 +53,7 @@ public interface Configuration extends ConfigurationSection {
      * @param defaults A configuration holding a list of defaults to copy.
      * @throws IllegalArgumentException Thrown if defaults is null or this.
      */
-    public void addDefaults(@NotNull Configuration defaults);
+    void addDefaults(@NotNull Configuration defaults);
 
     /**
      * Sets the source of all default values for this {@link Configuration}.
@@ -63,7 +64,7 @@ public interface Configuration extends ConfigurationSection {
      * @param defaults New source of default values for this configuration.
      * @throws IllegalArgumentException Thrown if defaults is null or this.
      */
-    public void setDefaults(@NotNull Configuration defaults);
+    void setDefaults(@NotNull Configuration defaults);
 
     /**
      * Gets the source {@link Configuration} for this configuration.
@@ -74,8 +75,7 @@ public interface Configuration extends ConfigurationSection {
      *
      * @return Configuration source for default values, or null if none exist.
      */
-    @Nullable
-    public Configuration getDefaults();
+    @Nullable Configuration getDefaults();
 
     /**
      * Gets the {@link ConfigurationOptions} for this {@link Configuration}.
@@ -84,6 +84,5 @@ public interface Configuration extends ConfigurationSection {
      *
      * @return Options for this configuration
      */
-    @NotNull
-    public ConfigurationOptions options();
+    @NotNull ConfigurationOptions options();
 }
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationSection.java b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
index 5a6e621d5876ce1ec5c5fb5559cb2bfa01ecba20..0f24859211ee543ad7b6284794fec11e7d42ae17 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationSection.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
@@ -1,8 +1,5 @@
 package org.bukkit.configuration;
 
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
 import org.bukkit.Color;
 import org.bukkit.Location;
 import org.bukkit.OfflinePlayer;
@@ -12,6 +9,10 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
 /**
  * Represents a section of a {@link Configuration}
  */
@@ -30,8 +31,7 @@ public interface ConfigurationSection {
      *     list.
      * @return Set of keys contained within this ConfigurationSection.
      */
-    @NotNull
-    public Set<String> getKeys(boolean deep);
+    @NotNull Set<String> getKeys(boolean deep);
 
     /**
      * Gets a Map containing all keys and their values for this section.
@@ -47,8 +47,7 @@ public interface ConfigurationSection {
      *     list.
      * @return Map of keys and values of this section.
      */
-    @NotNull
-    public Map<String, Object> getValues(boolean deep);
+    @NotNull Map<String, Object> getValues(boolean deep);
 
     /**
      * Checks if this {@link ConfigurationSection} contains the given path.
@@ -61,7 +60,7 @@ public interface ConfigurationSection {
      *     default or being set.
      * @throws IllegalArgumentException Thrown when path is null.
      */
-    public boolean contains(@NotNull String path);
+    boolean contains(@NotNull String path);
 
     /**
      * Checks if this {@link ConfigurationSection} contains the given path.
@@ -80,7 +79,7 @@ public interface ConfigurationSection {
      * value exist and the boolean parameter for this method is true.
      * @throws IllegalArgumentException Thrown when path is null.
      */
-    public boolean contains(@NotNull String path, boolean ignoreDefault);
+    boolean contains(@NotNull String path, boolean ignoreDefault);
 
     /**
      * Checks if this {@link ConfigurationSection} has a value set for the
@@ -94,7 +93,7 @@ public interface ConfigurationSection {
      *     having a default.
      * @throws IllegalArgumentException Thrown when path is null.
      */
-    public boolean isSet(@NotNull String path);
+    boolean isSet(@NotNull String path);
 
     /**
      * Gets the path of this {@link ConfigurationSection} from its root {@link
@@ -111,8 +110,7 @@ public interface ConfigurationSection {
      *
      * @return Path of this section relative to its root
      */
-    @Nullable
-    public String getCurrentPath();
+    @Nullable String getCurrentPath();
 
     /**
      * Gets the name of this individual {@link ConfigurationSection}, in the
@@ -123,8 +121,7 @@ public interface ConfigurationSection {
      *
      * @return Name of this section
      */
-    @NotNull
-    public String getName();
+    @NotNull String getName();
 
     /**
      * Gets the root {@link Configuration} that contains this {@link
@@ -138,8 +135,7 @@ public interface ConfigurationSection {
      *
      * @return Root configuration containing this section.
      */
-    @Nullable
-    public Configuration getRoot();
+    @Nullable Configuration getRoot();
 
     /**
      * Gets the parent {@link ConfigurationSection} that directly contains
@@ -152,8 +148,7 @@ public interface ConfigurationSection {
      *
      * @return Parent section containing this section.
      */
-    @Nullable
-    public ConfigurationSection getParent();
+    @Nullable ConfigurationSection getParent();
 
     /**
      * Gets the requested Object by path.
@@ -165,8 +160,7 @@ public interface ConfigurationSection {
      * @param path Path of the Object to get.
      * @return Requested Object.
      */
-    @Nullable
-    public Object get(@NotNull String path);
+    @Nullable Object get(@NotNull String path);
 
     /**
      * Gets the requested Object by path, returning a default value if not
@@ -180,8 +174,7 @@ public interface ConfigurationSection {
      * @param def The default value to return if the path is not found.
      * @return Requested Object.
      */
-    @Nullable
-    public Object get(@NotNull String path, @Nullable Object def);
+    @Nullable Object get(@NotNull String path, @Nullable Object def);
 
     /**
      * Sets the specified path to the given value.
@@ -197,7 +190,7 @@ public interface ConfigurationSection {
      * @param path Path of the object to set.
      * @param value New value to set the path to.
      */
-    public void set(@NotNull String path, @Nullable Object value);
+    void set(@NotNull String path, @Nullable Object value);
 
     /**
      * Creates an empty {@link ConfigurationSection} at the specified path.
@@ -209,8 +202,7 @@ public interface ConfigurationSection {
      * @param path Path to create the section at.
      * @return Newly created section
      */
-    @NotNull
-    public ConfigurationSection createSection(@NotNull String path);
+    @NotNull ConfigurationSection createSection(@NotNull String path);
 
     /**
      * Creates a {@link ConfigurationSection} at the specified path, with
@@ -224,8 +216,7 @@ public interface ConfigurationSection {
      * @param map The values to used.
      * @return Newly created section
      */
-    @NotNull
-    public ConfigurationSection createSection(@NotNull String path, @NotNull Map<?, ?> map);
+    @NotNull ConfigurationSection createSection(@NotNull String path, @NotNull Map<?, ?> map);
 
     // Primitives
     /**
@@ -238,8 +229,7 @@ public interface ConfigurationSection {
      * @param path Path of the String to get.
      * @return Requested String.
      */
-    @Nullable
-    public String getString(@NotNull String path);
+    @Nullable String getString(@NotNull String path);
 
     /**
      * Gets the requested String by path, returning a default value if not
@@ -254,8 +244,7 @@ public interface ConfigurationSection {
      *     not a String.
      * @return Requested String.
      */
-    @Nullable
-    public String getString(@NotNull String path, @Nullable String def);
+    @Nullable String getString(@NotNull String path, @Nullable String def);
 
     /**
      * Checks if the specified path is a String.
@@ -268,7 +257,7 @@ public interface ConfigurationSection {
      * @param path Path of the String to check.
      * @return Whether or not the specified path is a String.
      */
-    public boolean isString(@NotNull String path);
+    boolean isString(@NotNull String path);
 
     /**
      * Gets the requested int by path.
@@ -280,7 +269,7 @@ public interface ConfigurationSection {
      * @param path Path of the int to get.
      * @return Requested int.
      */
-    public int getInt(@NotNull String path);
+    int getInt(@NotNull String path);
 
     /**
      * Gets the requested int by path, returning a default value if not found.
@@ -294,7 +283,7 @@ public interface ConfigurationSection {
      *     not an int.
      * @return Requested int.
      */
-    public int getInt(@NotNull String path, int def);
+    int getInt(@NotNull String path, int def);
 
     /**
      * Checks if the specified path is an int.
@@ -307,7 +296,7 @@ public interface ConfigurationSection {
      * @param path Path of the int to check.
      * @return Whether or not the specified path is an int.
      */
-    public boolean isInt(@NotNull String path);
+    boolean isInt(@NotNull String path);
 
     /**
      * Gets the requested boolean by path.
@@ -319,7 +308,7 @@ public interface ConfigurationSection {
      * @param path Path of the boolean to get.
      * @return Requested boolean.
      */
-    public boolean getBoolean(@NotNull String path);
+    boolean getBoolean(@NotNull String path);
 
     /**
      * Gets the requested boolean by path, returning a default value if not
@@ -334,7 +323,7 @@ public interface ConfigurationSection {
      *     not a boolean.
      * @return Requested boolean.
      */
-    public boolean getBoolean(@NotNull String path, boolean def);
+    boolean getBoolean(@NotNull String path, boolean def);
 
     /**
      * Checks if the specified path is a boolean.
@@ -347,7 +336,7 @@ public interface ConfigurationSection {
      * @param path Path of the boolean to check.
      * @return Whether or not the specified path is a boolean.
      */
-    public boolean isBoolean(@NotNull String path);
+    boolean isBoolean(@NotNull String path);
 
     /**
      * Gets the requested double by path.
@@ -359,7 +348,7 @@ public interface ConfigurationSection {
      * @param path Path of the double to get.
      * @return Requested double.
      */
-    public double getDouble(@NotNull String path);
+    double getDouble(@NotNull String path);
 
     /**
      * Gets the requested double by path, returning a default value if not
@@ -374,7 +363,7 @@ public interface ConfigurationSection {
      *     not a double.
      * @return Requested double.
      */
-    public double getDouble(@NotNull String path, double def);
+    double getDouble(@NotNull String path, double def);
 
     /**
      * Checks if the specified path is a double.
@@ -387,7 +376,7 @@ public interface ConfigurationSection {
      * @param path Path of the double to check.
      * @return Whether or not the specified path is a double.
      */
-    public boolean isDouble(@NotNull String path);
+    boolean isDouble(@NotNull String path);
 
     /**
      * Gets the requested long by path.
@@ -399,7 +388,7 @@ public interface ConfigurationSection {
      * @param path Path of the long to get.
      * @return Requested long.
      */
-    public long getLong(@NotNull String path);
+    long getLong(@NotNull String path);
 
     /**
      * Gets the requested long by path, returning a default value if not
@@ -414,7 +403,7 @@ public interface ConfigurationSection {
      *     not a long.
      * @return Requested long.
      */
-    public long getLong(@NotNull String path, long def);
+    long getLong(@NotNull String path, long def);
 
     /**
      * Checks if the specified path is a long.
@@ -427,7 +416,7 @@ public interface ConfigurationSection {
      * @param path Path of the long to check.
      * @return Whether or not the specified path is a long.
      */
-    public boolean isLong(@NotNull String path);
+    boolean isLong(@NotNull String path);
 
     // Java
     /**
@@ -440,8 +429,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List.
      */
-    @Nullable
-    public List<?> getList(@NotNull String path);
+    @Nullable List<?> getList(@NotNull String path);
 
     /**
      * Gets the requested List by path, returning a default value if not
@@ -456,8 +444,7 @@ public interface ConfigurationSection {
      *     not a List.
      * @return Requested List.
      */
-    @Nullable
-    public List<?> getList(@NotNull String path, @Nullable List<?> def);
+    @Nullable List<?> getList(@NotNull String path, @Nullable List<?> def);
 
     /**
      * Checks if the specified path is a List.
@@ -470,7 +457,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to check.
      * @return Whether or not the specified path is a List.
      */
-    public boolean isList(@NotNull String path);
+    boolean isList(@NotNull String path);
 
     /**
      * Gets the requested List of String by path.
@@ -485,8 +472,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of String.
      */
-    @NotNull
-    public List<String> getStringList(@NotNull String path);
+    @NotNull List<String> getStringList(@NotNull String path);
 
     /**
      * Gets the requested List of Integer by path.
@@ -501,8 +487,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Integer.
      */
-    @NotNull
-    public List<Integer> getIntegerList(@NotNull String path);
+    @NotNull List<Integer> getIntegerList(@NotNull String path);
 
     /**
      * Gets the requested List of Boolean by path.
@@ -517,8 +502,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Boolean.
      */
-    @NotNull
-    public List<Boolean> getBooleanList(@NotNull String path);
+    @NotNull List<Boolean> getBooleanList(@NotNull String path);
 
     /**
      * Gets the requested List of Double by path.
@@ -533,8 +517,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Double.
      */
-    @NotNull
-    public List<Double> getDoubleList(@NotNull String path);
+    @NotNull List<Double> getDoubleList(@NotNull String path);
 
     /**
      * Gets the requested List of Float by path.
@@ -549,8 +532,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Float.
      */
-    @NotNull
-    public List<Float> getFloatList(@NotNull String path);
+    @NotNull List<Float> getFloatList(@NotNull String path);
 
     /**
      * Gets the requested List of Long by path.
@@ -565,8 +547,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Long.
      */
-    @NotNull
-    public List<Long> getLongList(@NotNull String path);
+    @NotNull List<Long> getLongList(@NotNull String path);
 
     /**
      * Gets the requested List of Byte by path.
@@ -581,8 +562,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Byte.
      */
-    @NotNull
-    public List<Byte> getByteList(@NotNull String path);
+    @NotNull List<Byte> getByteList(@NotNull String path);
 
     /**
      * Gets the requested List of Character by path.
@@ -597,8 +577,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Character.
      */
-    @NotNull
-    public List<Character> getCharacterList(@NotNull String path);
+    @NotNull List<Character> getCharacterList(@NotNull String path);
 
     /**
      * Gets the requested List of Short by path.
@@ -613,8 +592,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Short.
      */
-    @NotNull
-    public List<Short> getShortList(@NotNull String path);
+    @NotNull List<Short> getShortList(@NotNull String path);
 
     /**
      * Gets the requested List of Maps by path.
@@ -629,8 +607,7 @@ public interface ConfigurationSection {
      * @param path Path of the List to get.
      * @return Requested List of Maps.
      */
-    @NotNull
-    public List<Map<?, ?>> getMapList(@NotNull String path);
+    @NotNull List<Map<?, ?>> getMapList(@NotNull String path);
 
     // Bukkit
     /**
@@ -651,8 +628,7 @@ public interface ConfigurationSection {
      * @param clazz the type of the requested object
      * @return Requested object
      */
-    @Nullable
-    public <T extends Object> T getObject(@NotNull String path, @NotNull Class<T> clazz);
+    @Nullable <T> T getObject(@NotNull String path, @NotNull Class<T> clazz);
 
     /**
      * Gets the requested object at the given path, returning a default value if
@@ -677,8 +653,7 @@ public interface ConfigurationSection {
      * the path
      * @return Requested object
      */
-    @Nullable
-    public <T extends Object> T getObject(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def);
+    @Nullable <T> T getObject(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def);
 
     /**
      * Gets the requested {@link ConfigurationSerializable} object at the given
@@ -693,8 +668,7 @@ public interface ConfigurationSection {
      * @param clazz the type of {@link ConfigurationSerializable}
      * @return Requested {@link ConfigurationSerializable} object
      */
-    @Nullable
-    public <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz);
+    @Nullable <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz);
 
     /**
      * Gets the requested {@link ConfigurationSerializable} object at the given
@@ -711,8 +685,7 @@ public interface ConfigurationSection {
      * the path
      * @return Requested {@link ConfigurationSerializable} object
      */
-    @Nullable
-    public <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def);
+    @Nullable <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def);
 
     /**
      * Gets the requested Vector by path.
@@ -724,8 +697,7 @@ public interface ConfigurationSection {
      * @param path Path of the Vector to get.
      * @return Requested Vector.
      */
-    @Nullable
-    public Vector getVector(@NotNull String path);
+    @Nullable Vector getVector(@NotNull String path);
 
     /**
      * Gets the requested {@link Vector} by path, returning a default value if
@@ -740,8 +712,7 @@ public interface ConfigurationSection {
      *     not a Vector.
      * @return Requested Vector.
      */
-    @Nullable
-    public Vector getVector(@NotNull String path, @Nullable Vector def);
+    @Nullable Vector getVector(@NotNull String path, @Nullable Vector def);
 
     /**
      * Checks if the specified path is a Vector.
@@ -754,7 +725,7 @@ public interface ConfigurationSection {
      * @param path Path of the Vector to check.
      * @return Whether or not the specified path is a Vector.
      */
-    public boolean isVector(@NotNull String path);
+    boolean isVector(@NotNull String path);
 
     /**
      * Gets the requested OfflinePlayer by path.
@@ -767,8 +738,7 @@ public interface ConfigurationSection {
      * @param path Path of the OfflinePlayer to get.
      * @return Requested OfflinePlayer.
      */
-    @Nullable
-    public OfflinePlayer getOfflinePlayer(@NotNull String path);
+    @Nullable OfflinePlayer getOfflinePlayer(@NotNull String path);
 
     /**
      * Gets the requested {@link OfflinePlayer} by path, returning a default
@@ -783,8 +753,7 @@ public interface ConfigurationSection {
      *     not an OfflinePlayer.
      * @return Requested OfflinePlayer.
      */
-    @Nullable
-    public OfflinePlayer getOfflinePlayer(@NotNull String path, @Nullable OfflinePlayer def);
+    @Nullable OfflinePlayer getOfflinePlayer(@NotNull String path, @Nullable OfflinePlayer def);
 
     /**
      * Checks if the specified path is an OfflinePlayer.
@@ -797,7 +766,7 @@ public interface ConfigurationSection {
      * @param path Path of the OfflinePlayer to check.
      * @return Whether or not the specified path is an OfflinePlayer.
      */
-    public boolean isOfflinePlayer(@NotNull String path);
+    boolean isOfflinePlayer(@NotNull String path);
 
     /**
      * Gets the requested ItemStack by path.
@@ -809,8 +778,7 @@ public interface ConfigurationSection {
      * @param path Path of the ItemStack to get.
      * @return Requested ItemStack.
      */
-    @Nullable
-    public ItemStack getItemStack(@NotNull String path);
+    @Nullable ItemStack getItemStack(@NotNull String path);
 
     /**
      * Gets the requested {@link ItemStack} by path, returning a default value
@@ -825,8 +793,7 @@ public interface ConfigurationSection {
      *     not an ItemStack.
      * @return Requested ItemStack.
      */
-    @Nullable
-    public ItemStack getItemStack(@NotNull String path, @Nullable ItemStack def);
+    @Nullable ItemStack getItemStack(@NotNull String path, @Nullable ItemStack def);
 
     /**
      * Checks if the specified path is an ItemStack.
@@ -839,7 +806,7 @@ public interface ConfigurationSection {
      * @param path Path of the ItemStack to check.
      * @return Whether or not the specified path is an ItemStack.
      */
-    public boolean isItemStack(@NotNull String path);
+    boolean isItemStack(@NotNull String path);
 
     /**
      * Gets the requested Color by path.
@@ -851,8 +818,7 @@ public interface ConfigurationSection {
      * @param path Path of the Color to get.
      * @return Requested Color.
      */
-    @Nullable
-    public Color getColor(@NotNull String path);
+    @Nullable Color getColor(@NotNull String path);
 
     /**
      * Gets the requested {@link Color} by path, returning a default value if
@@ -867,8 +833,7 @@ public interface ConfigurationSection {
      *     not a Color.
      * @return Requested Color.
      */
-    @Nullable
-    public Color getColor(@NotNull String path, @Nullable Color def);
+    @Nullable Color getColor(@NotNull String path, @Nullable Color def);
 
     /**
      * Checks if the specified path is a Color.
@@ -881,7 +846,7 @@ public interface ConfigurationSection {
      * @param path Path of the Color to check.
      * @return Whether or not the specified path is a Color.
      */
-    public boolean isColor(@NotNull String path);
+    boolean isColor(@NotNull String path);
 
     /**
      * Gets the requested Location by path.
@@ -893,8 +858,7 @@ public interface ConfigurationSection {
      * @param path Path of the Location to get.
      * @return Requested Location.
      */
-    @Nullable
-    public Location getLocation(@NotNull String path);
+    @Nullable Location getLocation(@NotNull String path);
 
     /**
      * Gets the requested {@link Location} by path, returning a default value if
@@ -909,8 +873,7 @@ public interface ConfigurationSection {
      * a Location.
      * @return Requested Location.
      */
-    @Nullable
-    public Location getLocation(@NotNull String path, @Nullable Location def);
+    @Nullable Location getLocation(@NotNull String path, @Nullable Location def);
 
     /**
      * Checks if the specified path is a Location.
@@ -923,7 +886,7 @@ public interface ConfigurationSection {
      * @param path Path of the Location to check.
      * @return Whether or not the specified path is a Location.
      */
-    public boolean isLocation(@NotNull String path);
+    boolean isLocation(@NotNull String path);
 
     /**
      * Gets the requested ConfigurationSection by path.
@@ -936,8 +899,7 @@ public interface ConfigurationSection {
      * @param path Path of the ConfigurationSection to get.
      * @return Requested ConfigurationSection.
      */
-    @Nullable
-    public ConfigurationSection getConfigurationSection(@NotNull String path);
+    @Nullable ConfigurationSection getConfigurationSection(@NotNull String path);
 
     /**
      * Checks if the specified path is a ConfigurationSection.
@@ -951,7 +913,7 @@ public interface ConfigurationSection {
      * @param path Path of the ConfigurationSection to check.
      * @return Whether or not the specified path is a ConfigurationSection.
      */
-    public boolean isConfigurationSection(@NotNull String path);
+    boolean isConfigurationSection(@NotNull String path);
 
     /**
      * Gets the equivalent {@link ConfigurationSection} from the default
@@ -963,8 +925,7 @@ public interface ConfigurationSection {
      *
      * @return Equivalent section in root configuration
      */
-    @Nullable
-    public ConfigurationSection getDefaultSection();
+    @Nullable ConfigurationSection getDefaultSection();
 
     /**
      * Sets the default value in the root at the given path as provided.
@@ -984,5 +945,5 @@ public interface ConfigurationSection {
      * @param value Value to set the default to.
      * @throws IllegalArgumentException Thrown if path is null.
      */
-    public void addDefault(@NotNull String path, @Nullable Object value);
+    void addDefault(@NotNull String path, @Nullable Object value);
 }
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index f03dec0c9e489bb3deac760fd11970055998cf59..f3ed8274c00d03fd56eebea938c32fb0e268ebd7 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -21,7 +21,7 @@ import org.jetbrains.annotations.Nullable;
  * A type of {@link ConfigurationSection} that is stored in memory.
  */
 public class MemorySection implements ConfigurationSection {
-    protected final Map<String, Object> map = new LinkedHashMap<String, Object>();
+    protected final Map<String, Object> map = new LinkedHashMap<>();
     private final Configuration root;
     private final ConfigurationSection parent;
     private final String path;
@@ -73,7 +73,7 @@ public class MemorySection implements ConfigurationSection {
     @Override
     @NotNull
     public Set<String> getKeys(boolean deep) {
-        Set<String> result = new LinkedHashSet<String>();
+        Set<String> result = new LinkedHashSet<>();
 
         Configuration root = getRoot();
         if (root != null && root.options().copyDefaults()) {
@@ -92,7 +92,7 @@ public class MemorySection implements ConfigurationSection {
     @Override
     @NotNull
     public Map<String, Object> getValues(boolean deep) {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        Map<String, Object> result = new LinkedHashMap<>();
 
         Configuration root = getRoot();
         if (root != null && root.options().copyDefaults()) {
@@ -432,10 +432,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<String>(0);
+            return new ArrayList<>(0);
         }
 
-        List<String> result = new ArrayList<String>();
+        List<String> result = new ArrayList<>();
 
         for (Object object : list) {
             if ((object instanceof String) || (isPrimitiveWrapper(object))) {
@@ -452,10 +452,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Integer>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Integer> result = new ArrayList<Integer>();
+        List<Integer> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Integer) {
@@ -463,10 +463,10 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Integer.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
-                result.add((int) ((Character) object).charValue());
+                result.add((int) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).intValue());
             }
@@ -481,10 +481,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Boolean>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Boolean> result = new ArrayList<Boolean>();
+        List<Boolean> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Boolean) {
@@ -507,10 +507,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Double>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Double> result = new ArrayList<Double>();
+        List<Double> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Double) {
@@ -518,10 +518,10 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Double.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
-                result.add((double) ((Character) object).charValue());
+                result.add((double) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).doubleValue());
             }
@@ -536,10 +536,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Float>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Float> result = new ArrayList<Float>();
+        List<Float> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Float) {
@@ -547,10 +547,10 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Float.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
-                result.add((float) ((Character) object).charValue());
+                result.add((float) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).floatValue());
             }
@@ -565,10 +565,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Long>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Long> result = new ArrayList<Long>();
+        List<Long> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Long) {
@@ -576,10 +576,10 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Long.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
-                result.add((long) ((Character) object).charValue());
+                result.add((long) (Character) object);
             } else if (object instanceof Number) {
                 result.add(((Number) object).longValue());
             }
@@ -594,10 +594,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Byte>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Byte> result = new ArrayList<Byte>();
+        List<Byte> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Byte) {
@@ -605,7 +605,7 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Byte.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((byte) ((Character) object).charValue());
@@ -623,10 +623,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Character>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Character> result = new ArrayList<Character>();
+        List<Character> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Character) {
@@ -651,10 +651,10 @@ public class MemorySection implements ConfigurationSection {
         List<?> list = getList(path);
 
         if (list == null) {
-            return new ArrayList<Short>(0);
+            return new ArrayList<>(0);
         }
 
-        List<Short> result = new ArrayList<Short>();
+        List<Short> result = new ArrayList<>();
 
         for (Object object : list) {
             if (object instanceof Short) {
@@ -662,7 +662,7 @@ public class MemorySection implements ConfigurationSection {
             } else if (object instanceof String) {
                 try {
                     result.add(Short.valueOf((String) object));
-                } catch (Exception ex) {
+                } catch (Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((short) ((Character) object).charValue());
@@ -678,7 +678,7 @@ public class MemorySection implements ConfigurationSection {
     @NotNull
     public List<Map<?, ?>> getMapList(@NotNull String path) {
         List<?> list = getList(path);
-        List<Map<?, ?>> result = new ArrayList<Map<?, ?>>();
+        List<Map<?, ?>> result = new ArrayList<>();
 
         if (list == null) {
             return result;
@@ -696,18 +696,18 @@ public class MemorySection implements ConfigurationSection {
     // Bukkit
     @Nullable
     @Override
-    public <T extends Object> T getObject(@NotNull String path, @NotNull Class<T> clazz) {
+    public <T> T getObject(@NotNull String path, @NotNull Class<T> clazz) {
         Validate.notNull(clazz, "Class cannot be null");
         Object def = getDefault(path);
-        return getObject(path, clazz, (def != null && clazz.isInstance(def)) ? clazz.cast(def) : null);
+        return getObject(path, clazz, (clazz.isInstance(def)) ? clazz.cast(def) : null);
     }
 
     @Nullable
     @Override
-    public <T extends Object> T getObject(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
+    public <T> T getObject(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
         Validate.notNull(clazz, "Class cannot be null");
         Object val = get(path, def);
-        return (val != null && clazz.isInstance(val)) ? clazz.cast(val) : def;
+        return (clazz.isInstance(val)) ? clazz.cast(val) : def;
     }
 
     @Nullable
@@ -850,7 +850,7 @@ public class MemorySection implements ConfigurationSection {
 
                 if ((deep) && (entry.getValue() instanceof ConfigurationSection)) {
                     ConfigurationSection subsection = (ConfigurationSection) entry.getValue();
-                    mapChildrenKeys(output, subsection, deep);
+                    mapChildrenKeys(output, subsection, true);
                 }
             }
         } else {
@@ -876,7 +876,7 @@ public class MemorySection implements ConfigurationSection {
 
                 if (entry.getValue() instanceof ConfigurationSection) {
                     if (deep) {
-                        mapChildrenValues(output, (ConfigurationSection) entry.getValue(), deep);
+                        mapChildrenValues(output, (ConfigurationSection) entry.getValue(), true);
                     }
                 }
             }
@@ -902,7 +902,7 @@ public class MemorySection implements ConfigurationSection {
      */
     @NotNull
     public static String createPath(@NotNull ConfigurationSection section, @Nullable String key) {
-        return createPath(section, key, (section == null) ? null : section.getRoot());
+        return createPath(section, key, section.getRoot());
     }
 
     /**
@@ -927,17 +927,15 @@ public class MemorySection implements ConfigurationSection {
         char separator = root.options().pathSeparator();
 
         StringBuilder builder = new StringBuilder();
-        if (section != null) {
-            for (ConfigurationSection parent = section; (parent != null) && (parent != relativeTo); parent = parent.getParent()) {
-                if (builder.length() > 0) {
-                    builder.insert(0, separator);
-                }
+	    for (ConfigurationSection parent = section; (parent != null) && (parent != relativeTo); parent = parent.getParent()) {
+	        if (builder.length() > 0) {
+	            builder.insert(0, separator);
+	        }
 
-                builder.insert(0, parent.getName());
-            }
-        }
+	        builder.insert(0, parent.getName());
+	    }
 
-        if ((key != null) && (key.length() > 0)) {
+	    if ((key != null) && (key.length() > 0)) {
             if (builder.length() > 0) {
                 builder.append(separator);
             }
@@ -951,13 +949,11 @@ public class MemorySection implements ConfigurationSection {
     @Override
     public String toString() {
         Configuration root = getRoot();
-        return new StringBuilder()
-            .append(getClass().getSimpleName())
-            .append("[path='")
-            .append(getCurrentPath())
-            .append("', root='")
-            .append(root == null ? null : root.getClass().getSimpleName())
-            .append("']")
-            .toString();
+        return getClass().getSimpleName() +
+            "[path='" +
+            getCurrentPath() +
+            "', root='" +
+            (root == null ? null : root.getClass().getSimpleName()) +
+            "']";
     }
 }
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
index 581889ffa2afbf17ca2ebe2905f2a041fe760cd8..e266fa96b69acd81291da7cf72aa2615d45fb4f4 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
@@ -64,12 +64,8 @@ public abstract class FileConfiguration extends MemoryConfiguration {
 
         String data = saveToString();
 
-        Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8);
-
-        try {
+        try (Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8)) {
             writer.write(data);
-        } finally {
-            writer.close();
         }
     }
 
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
index 6476f3794b0c3815486c87968a71d0c572f3a89a..d2b1d7904cd8ccbd0a250b5d2e24d88885851d81 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
@@ -54,7 +54,7 @@ public class YamlConfiguration extends FileConfiguration {
         Map<?, ?> input;
         try {
             loaderOptions.setMaxAliasesForCollections(Integer.MAX_VALUE); // SPIGOT-5881: Not ideal, but was default pre SnakeYAML 1.26
-            input = (Map<?, ?>) yaml.load(contents);
+            input = yaml.load(contents);
         } catch (YAMLException e) {
             throw new InvalidConfigurationException(e);
         } catch (ClassCastException e) {
@@ -124,11 +124,11 @@ public class YamlConfiguration extends FileConfiguration {
         if (options().copyHeader()) {
             Configuration def = getDefaults();
 
-            if ((def != null) && (def instanceof FileConfiguration)) {
+            if ((def instanceof FileConfiguration)) {
                 FileConfiguration filedefaults = (FileConfiguration) def;
                 String defaultsHeader = filedefaults.buildHeader();
 
-                if ((defaultsHeader != null) && (defaultsHeader.length() > 0)) {
+                if (defaultsHeader.length() > 0) {
                     return defaultsHeader;
                 }
             }
@@ -186,10 +186,8 @@ public class YamlConfiguration extends FileConfiguration {
 
         try {
             config.load(file);
-        } catch (FileNotFoundException ex) {
-        } catch (IOException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
-        } catch (InvalidConfigurationException ex) {
+        } catch (FileNotFoundException ignored) {
+        } catch (IOException | InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
         }
 
@@ -215,9 +213,7 @@ public class YamlConfiguration extends FileConfiguration {
 
         try {
             config.load(reader);
-        } catch (IOException ex) {
-            Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
-        } catch (InvalidConfigurationException ex) {
+        } catch (IOException | InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
         }
 
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
index c8466a29a22d6f685e856feaa8e1990aa35ae72c..9aa393f4ea654257d9bca7cf8eece5be6f446fbb 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
@@ -28,7 +28,7 @@ public class YamlConstructor extends SafeConstructor {
             Map<?, ?> raw = (Map<?, ?>) super.construct(node);
 
             if (raw.containsKey(ConfigurationSerialization.SERIALIZED_TYPE_KEY)) {
-                Map<String, Object> typed = new LinkedHashMap<String, Object>(raw.size());
+                Map<String, Object> typed = new LinkedHashMap<>(raw.size());
                 for (Map.Entry<?, ?> entry : raw.entrySet()) {
                     typed.put(entry.getKey().toString(), entry.getValue());
                 }
diff --git a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
index 9dd3890f974b322ce381225e5d6395602d787f24..67a3c7b8fccd375990fbc41b0b7a72e1ca595383 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
@@ -34,7 +34,7 @@ public class YamlRepresenter extends Representer {
         @Override
         public Node representData(@NotNull Object data) {
             ConfigurationSerializable serializable = (ConfigurationSerializable) data;
-            Map<String, Object> values = new LinkedHashMap<String, Object>();
+            Map<String, Object> values = new LinkedHashMap<>();
             values.put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(serializable.getClass()));
             values.putAll(serializable.serialize());
 
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
index 177944d4e8cf37d7f9a8884cafdeefd7c3b3d78b..8893190955bcfb817e30b2db4cd5d331de8b8aec 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerializable.java
@@ -1,8 +1,9 @@
 package org.bukkit.configuration.serialization;
 
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Map;
+
 /**
  * Represents an object that may be serialized.
  * <p>
@@ -32,6 +33,5 @@ public interface ConfigurationSerializable {
      *
      * @return Map containing the current state of this class
      */
-    @NotNull
-    public Map<String, Object> serialize();
+    @NotNull Map<String, Object> serialize();
 }
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index 8c9b4f6967e4f9264c653be84cb821c1f8bb0753..68a70ca27568096b7f11ae2c9ff933dc445f0ac7 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -1,13 +1,5 @@
 package org.bukkit.configuration.serialization;
 
-import java.lang.reflect.Constructor;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.logging.Level;
-import java.util.logging.Logger;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
@@ -23,13 +15,22 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+
 /**
  * Utility class for storing and retrieving classes for {@link Configuration}.
  */
 public class ConfigurationSerialization {
     public static final String SERIALIZED_TYPE_KEY = "==";
     private final Class<? extends ConfigurationSerializable> clazz;
-    private static Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<String, Class<? extends ConfigurationSerializable>>();
+    private static final Map<String, Class<? extends ConfigurationSerializable>> aliases = new HashMap<>();
 
     static {
         registerClass(Vector.class);
@@ -61,9 +62,7 @@ public class ConfigurationSerialization {
             }
 
             return method;
-        } catch (NoSuchMethodException ex) {
-            return null;
-        } catch (SecurityException ex) {
+        } catch (NoSuchMethodException | SecurityException ex) {
             return null;
         }
     }
@@ -72,9 +71,7 @@ public class ConfigurationSerialization {
     protected Constructor<? extends ConfigurationSerializable> getConstructor() {
         try {
             return clazz.getConstructor(Map.class);
-        } catch (NoSuchMethodException ex) {
-            return null;
-        } catch (SecurityException ex) {
+        } catch (NoSuchMethodException | SecurityException ex) {
             return null;
         }
     }
@@ -120,15 +117,13 @@ public class ConfigurationSerialization {
         ConfigurationSerializable result = null;
         Method method = null;
 
-        if (result == null) {
-            method = getMethod("deserialize", true);
+	    method = getMethod("deserialize", true);
 
-            if (method != null) {
-                result = deserializeViaMethod(method, args);
-            }
-        }
+	    if (method != null) {
+	        result = deserializeViaMethod(method, args);
+	    }
 
-        if (result == null) {
+	    if (result == null) {
             method = getMethod("valueOf", true);
 
             if (method != null) {
@@ -251,7 +246,6 @@ public class ConfigurationSerialization {
      */
     public static void unregisterClass(@NotNull Class<? extends ConfigurationSerializable> clazz) {
         while (aliases.values().remove(clazz)) {
-            ;
         }
     }
 
@@ -279,21 +273,19 @@ public class ConfigurationSerialization {
         DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
 
         if (delegate != null) {
-            if ((delegate.value() == null) || (delegate.value() == clazz)) {
+            if (delegate.value() == clazz) {
                 delegate = null;
             } else {
                 return getAlias(delegate.value());
             }
         }
 
-        if (delegate == null) {
-            SerializableAs alias = clazz.getAnnotation(SerializableAs.class);
+	    SerializableAs alias = clazz.getAnnotation(SerializableAs.class);
 
-            if ((alias != null) && (alias.value() != null)) {
-                return alias.value();
-            }
-        }
+	    if (alias != null) {
+	        return alias.value();
+	    }
 
-        return clazz.getName();
+	    return clazz.getName();
     }
 }
diff --git a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
index 13839611610258263fd6ea6a62e67fd21f5e4be8..b9d36a5beb2de8cdc2d6b5f00e9893441f74bf30 100644
--- a/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/DelegateDeserialization.java
@@ -1,10 +1,11 @@
 package org.bukkit.configuration.serialization;
 
+import org.jetbrains.annotations.NotNull;
+
 import java.lang.annotation.ElementType;
 import java.lang.annotation.Retention;
 import java.lang.annotation.RetentionPolicy;
 import java.lang.annotation.Target;
-import org.jetbrains.annotations.NotNull;
 
 /**
  * Applies to a {@link ConfigurationSerializable} that will delegate all
@@ -19,6 +20,5 @@ public @interface DelegateDeserialization {
      *
      * @return Delegate class
      */
-    @NotNull
-    public Class<? extends ConfigurationSerializable> value();
+    @NotNull Class<? extends ConfigurationSerializable> value();
 }
diff --git a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
index 725685ed346a6b378869341c474dfcd9e8f296fb..74154273b7fc0f38d6675cef167b645d51d3b33a 100644
--- a/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
+++ b/src/main/java/org/bukkit/configuration/serialization/SerializableAs.java
@@ -31,6 +31,5 @@ public @interface SerializableAs {
      *
      * @return Name to serialize the class as.
      */
-    @NotNull
-    public String value();
+    @NotNull String value();
 }
diff --git a/src/main/java/org/bukkit/conversations/Conversable.java b/src/main/java/org/bukkit/conversations/Conversable.java
index b7d8dd30360a38dbdc7bbce40c8e6ced7261f833..a14feb9c4ef24520904da76d1d109e4aa995a0d9 100644
--- a/src/main/java/org/bukkit/conversations/Conversable.java
+++ b/src/main/java/org/bukkit/conversations/Conversable.java
@@ -1,9 +1,10 @@
 package org.bukkit.conversations;
 
-import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 /**
  * The Conversable interface is used to indicate objects that can have
  * conversations.
@@ -16,7 +17,7 @@ public interface Conversable {
      *
      * @return True if a conversation is in progress
      */
-    public boolean isConversing();
+    boolean isConversing();
 
     /**
      * Accepts input into the active conversation. If no conversation is in
@@ -24,7 +25,7 @@ public interface Conversable {
      *
      * @param input The input message into the conversation
      */
-    public void acceptConversationInput(@NotNull String input);
+    void acceptConversationInput(@NotNull String input);
 
     /**
      * Enters into a dialog with a Conversation object.
@@ -33,14 +34,14 @@ public interface Conversable {
      * @return True if the conversation should proceed, false if it has been
      *     enqueued
      */
-    public boolean beginConversation(@NotNull Conversation conversation);
+    boolean beginConversation(@NotNull Conversation conversation);
 
     /**
      * Abandons an active conversation.
      *
      * @param conversation The conversation to abandon
      */
-    public void abandonConversation(@NotNull Conversation conversation);
+    void abandonConversation(@NotNull Conversation conversation);
 
     /**
      * Abandons an active conversation.
@@ -48,14 +49,14 @@ public interface Conversable {
      * @param conversation The conversation to abandon
      * @param details Details about why the conversation was abandoned
      */
-    public void abandonConversation(@NotNull Conversation conversation, @NotNull ConversationAbandonedEvent details);
+    void abandonConversation(@NotNull Conversation conversation, @NotNull ConversationAbandonedEvent details);
 
     /**
      * Sends this sender a message raw
      *
      * @param message Message to be displayed
      */
-    public void sendRawMessage(@NotNull String message);
+    void sendRawMessage(@NotNull String message);
 
     /**
      * Sends this sender a message raw
@@ -63,5 +64,5 @@ public interface Conversable {
      * @param message Message to be displayed
      * @param sender The sender of this message
      */
-    public void sendRawMessage(@Nullable UUID sender, @NotNull String message);
+    void sendRawMessage(@Nullable UUID sender, @NotNull String message);
 }
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index bf2407c838bc20197802687c150d513f4e86ed2b..e23eb284322fe1c1635ad10016057411a85c4967 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -1,12 +1,13 @@
 package org.bukkit.conversations;
 
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 /**
  * The Conversation class is responsible for tracking the current state of a
@@ -35,15 +36,15 @@ import org.jetbrains.annotations.Nullable;
  */
 public class Conversation {
 
-    private Prompt firstPrompt;
+    private final Prompt firstPrompt;
     private boolean abandoned;
     protected Prompt currentPrompt;
-    protected ConversationContext context;
+    protected final ConversationContext context;
     protected boolean modal;
     protected boolean localEchoEnabled;
     protected ConversationPrefix prefix;
-    protected List<ConversationCanceller> cancellers;
-    protected List<ConversationAbandonedListener> abandonedListeners;
+    protected final List<ConversationCanceller> cancellers;
+    protected final List<ConversationAbandonedListener> abandonedListeners;
 
     /**
      * Initializes a new Conversation.
@@ -53,7 +54,7 @@ public class Conversation {
      * @param firstPrompt The first prompt in the conversation graph.
      */
     public Conversation(@Nullable Plugin plugin, @NotNull Conversable forWhom, @Nullable Prompt firstPrompt) {
-        this(plugin, forWhom, firstPrompt, new HashMap<Object, Object>());
+        this(plugin, forWhom, firstPrompt, new HashMap<>());
     }
 
     /**
@@ -71,8 +72,8 @@ public class Conversation {
         this.modal = true;
         this.localEchoEnabled = true;
         this.prefix = new NullConversationPrefix();
-        this.cancellers = new ArrayList<ConversationCanceller>();
-        this.abandonedListeners = new ArrayList<ConversationAbandonedListener>();
+        this.cancellers = new ArrayList<>();
+        this.abandonedListeners = new ArrayList<>();
     }
 
     /**
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
index 0d67fe0c00e886def63edf72c3af3e4e5b7b3ea2..f6fc05e1ea65b5ea8932c61330fa399b44ca788b 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
@@ -1,17 +1,18 @@
 package org.bukkit.conversations;
 
-import java.util.EventObject;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.EventObject;
+
 /**
  * ConversationAbandonedEvent contains information about an abandoned
  * conversation.
  */
 public class ConversationAbandonedEvent extends EventObject {
 
-    private ConversationContext context;
-    private ConversationCanceller canceller;
+    private final ConversationContext context;
+    private final ConversationCanceller canceller;
 
     public ConversationAbandonedEvent(@NotNull Conversation conversation) {
         this(conversation, null);
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
index 451121e7dfdd6f58c0649a509b1770c1d3752480..53f38d6eb99c2701712cf30d197d7fce050f99e8 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedListener.java
@@ -1,8 +1,9 @@
 package org.bukkit.conversations;
 
-import java.util.EventListener;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.EventListener;
+
 /**
  */
 public interface ConversationAbandonedListener extends EventListener {
@@ -12,5 +13,5 @@ public interface ConversationAbandonedListener extends EventListener {
      * @param abandonedEvent Contains details about the abandoned
      *     conversation.
      */
-    public void conversationAbandoned(@NotNull ConversationAbandonedEvent abandonedEvent);
+    void conversationAbandoned(@NotNull ConversationAbandonedEvent abandonedEvent);
 }
diff --git a/src/main/java/org/bukkit/conversations/ConversationCanceller.java b/src/main/java/org/bukkit/conversations/ConversationCanceller.java
index bacac14094f532ef51f671e2f4fa31759fbdf161..51bf3bbe4a05e2fd50d9f2dd68a15d667d2d8b15 100644
--- a/src/main/java/org/bukkit/conversations/ConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ConversationCanceller.java
@@ -13,7 +13,7 @@ public interface ConversationCanceller extends Cloneable {
      *
      * @param conversation A conversation.
      */
-    public void setConversation(@NotNull Conversation conversation);
+    void setConversation(@NotNull Conversation conversation);
 
     /**
      * Cancels a conversation based on user input.
@@ -22,7 +22,7 @@ public interface ConversationCanceller extends Cloneable {
      * @param input The input text from the user.
      * @return True to cancel the conversation, False otherwise.
      */
-    public boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input);
+    boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input);
 
     /**
      * Allows the {@link ConversationFactory} to duplicate this
@@ -32,6 +32,5 @@ public interface ConversationCanceller extends Cloneable {
      *
      * @return A clone.
      */
-    @NotNull
-    public ConversationCanceller clone();
+    @NotNull ConversationCanceller clone();
 }
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
index 58009e1e7a9cbbba1b0db43cd81eddc19c710687..04949fcfdca9a728ce210e10b3d96e7429b63a03 100644
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java
@@ -1,14 +1,15 @@
 package org.bukkit.conversations;
 
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import org.bukkit.entity.Player;
 import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
 /**
  * A ConversationFactory is responsible for creating a {@link Conversation}
  * from a predefined template. A ConversationFactory is typically created when
@@ -21,15 +22,15 @@ import org.jetbrains.annotations.Nullable;
  */
 public class ConversationFactory {
 
-    protected Plugin plugin;
+    protected final Plugin plugin;
     protected boolean isModal;
     protected boolean localEchoEnabled;
     protected ConversationPrefix prefix;
     protected Prompt firstPrompt;
     protected Map<Object, Object> initialSessionData;
     protected String playerOnlyMessage;
-    protected List<ConversationCanceller> cancellers;
-    protected List<ConversationAbandonedListener> abandonedListeners;
+    protected final List<ConversationCanceller> cancellers;
+    protected final List<ConversationAbandonedListener> abandonedListeners;
 
     /**
      * Constructs a ConversationFactory.
@@ -42,10 +43,10 @@ public class ConversationFactory {
         localEchoEnabled = true;
         prefix = new NullConversationPrefix();
         firstPrompt = Prompt.END_OF_CONVERSATION;
-        initialSessionData = new HashMap<Object, Object>();
+        initialSessionData = new HashMap<>();
         playerOnlyMessage = null;
-        cancellers = new ArrayList<ConversationCanceller>();
-        abandonedListeners = new ArrayList<ConversationAbandonedListener>();
+        cancellers = new ArrayList<>();
+        abandonedListeners = new ArrayList<>();
     }
 
     /**
@@ -201,8 +202,7 @@ public class ConversationFactory {
         }
 
         //Clone any initial session data
-        Map<Object, Object> copiedInitialSessionData = new HashMap<Object, Object>();
-        copiedInitialSessionData.putAll(initialSessionData);
+        Map<Object, Object> copiedInitialSessionData = new HashMap<>(initialSessionData);
 
         //Build and return a conversation
         Conversation conversation = new Conversation(plugin, forWhom, firstPrompt, copiedInitialSessionData);
diff --git a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
index 6b54ee877aa1fc4121bfe52b9965ab4a13497850..68745ae516e9db691a6ce76938db21589dc9ced3 100644
--- a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
  * enters an exact input string
  */
 public class ExactMatchConversationCanceller implements ConversationCanceller {
-    private String escapeSequence;
+    private final String escapeSequence;
 
     /**
      * Builds an ExactMatchConversationCanceller.
@@ -27,6 +27,7 @@ public class ExactMatchConversationCanceller implements ConversationCanceller {
         return input.equals(escapeSequence);
     }
 
+    /** @noinspection MethodDoesntCallSuperMethod*/
     @Override
     @NotNull
     public ConversationCanceller clone() {
diff --git a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
index fd8daa02063833a7457fec7a714ca37048487d94..6be47b28c2c56cbfbe2a1c00f51dace985aa60c0 100644
--- a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
@@ -8,8 +8,8 @@ import org.jetbrains.annotations.NotNull;
  * a period of inactivity by the user.
  */
 public class InactivityConversationCanceller implements ConversationCanceller {
-    protected Plugin plugin;
-    protected int timeoutSeconds;
+    protected final Plugin plugin;
+    protected final int timeoutSeconds;
     protected Conversation conversation;
     private int taskId = -1;
 
@@ -38,6 +38,7 @@ public class InactivityConversationCanceller implements ConversationCanceller {
         return false;
     }
 
+    /** @noinspection MethodDoesntCallSuperMethod*/
     @Override
     @NotNull
     public ConversationCanceller clone() {
@@ -48,17 +49,14 @@ public class InactivityConversationCanceller implements ConversationCanceller {
      * Starts an inactivity timer.
      */
     private void startTimer() {
-        taskId = plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new Runnable() {
-            @Override
-            public void run() {
-                if (conversation.getState() == Conversation.ConversationState.UNSTARTED) {
-                    startTimer();
-                } else if (conversation.getState() == Conversation.ConversationState.STARTED) {
-                    cancelling(conversation);
-                    conversation.abandon(new ConversationAbandonedEvent(conversation, InactivityConversationCanceller.this));
-                }
+        taskId = plugin.getServer().getScheduler().scheduleSyncDelayedTask(plugin, () -> {
+            if (conversation.getState() == Conversation.ConversationState.UNSTARTED) {
+                startTimer();
+            } else if (conversation.getState() == Conversation.ConversationState.STARTED) {
+                cancelling(conversation);
+                conversation.abandon(new ConversationAbandonedEvent(conversation, InactivityConversationCanceller.this));
             }
-        }, timeoutSeconds * 20);
+        }, timeoutSeconds * 20L);
     }
 
     /**
diff --git a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
index 86d51c488e449a529535c394522b021cbdb674fa..4078c49d2d6288fd29f6d35efadbb0cae7f801d5 100644
--- a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
+++ b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.Nullable;
  * to enter another player's name.
  */
 public abstract class PlayerNamePrompt extends ValidatingPrompt {
-    private Plugin plugin;
+    private final Plugin plugin;
 
     public PlayerNamePrompt(@NotNull Plugin plugin) {
         super();
diff --git a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
index 5911944fe22d0f040a2b022e7aeb1acd4336763f..64b4f837d27b1b0815e5bb57ccc637db22cc3b6c 100644
--- a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
@@ -10,11 +10,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PluginNameConversationPrefix implements ConversationPrefix {
 
-    protected String separator;
-    protected ChatColor prefixColor;
-    protected Plugin plugin;
+    protected final String separator;
+    protected final ChatColor prefixColor;
+    protected final Plugin plugin;
 
-    private String cachedPrefix;
+    private final String cachedPrefix;
 
     public PluginNameConversationPrefix(@NotNull Plugin plugin) {
         this(plugin, " > ", ChatColor.LIGHT_PURPLE);
diff --git a/src/main/java/org/bukkit/conversations/Prompt.java b/src/main/java/org/bukkit/conversations/Prompt.java
index fcca208c0f31b41ab67323d0e77a8e3ecf9e78dd..afcb85c73fc146a253b30512e26eaa4f3e69fc7b 100644
--- a/src/main/java/org/bukkit/conversations/Prompt.java
+++ b/src/main/java/org/bukkit/conversations/Prompt.java
@@ -15,7 +15,7 @@ public interface Prompt extends Cloneable {
     /**
      * A convenience constant for indicating the end of a conversation.
      */
-    static final Prompt END_OF_CONVERSATION = null;
+    Prompt END_OF_CONVERSATION = null;
 
     /**
      * Gets the text to display to the user when this prompt is first
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index 8eb0497c81744874809ebc4bc2e28b128e66a926..8bd8239d39384ced19d7979485115a58565345a2 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -1,7 +1,5 @@
 package org.bukkit.enchantments;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.bukkit.Keyed;
 import org.bukkit.NamespacedKey;
 import org.bukkit.inventory.ItemStack;
@@ -9,6 +7,9 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * The various type of enchantments that may be added to armour or weapons
  */
@@ -205,8 +206,8 @@ public abstract class Enchantment implements Keyed {
      */
     public static final Enchantment SOUL_SPEED = new EnchantmentWrapper("soul_speed");
 
-    private static final Map<NamespacedKey, Enchantment> byKey = new HashMap<NamespacedKey, Enchantment>();
-    private static final Map<String, Enchantment> byName = new HashMap<String, Enchantment>();
+    private static final Map<NamespacedKey, Enchantment> byKey = new HashMap<>();
+    private static final Map<String, Enchantment> byName = new HashMap<>();
     private static boolean acceptingNew = true;
     private final NamespacedKey key;
 
@@ -317,10 +318,7 @@ public abstract class Enchantment implements Keyed {
             return false;
         }
         final Enchantment other = (Enchantment) obj;
-        if (!this.key.equals(other.key)) {
-            return false;
-        }
-        return true;
+	    return this.key.equals(other.key);
     }
 
     @Override
@@ -400,6 +398,6 @@ public abstract class Enchantment implements Keyed {
      */
     @NotNull
     public static Enchantment[] values() {
-        return byName.values().toArray(new Enchantment[byName.size()]);
+        return byName.values().toArray(new Enchantment[0]);
     }
 }
diff --git a/src/main/java/org/bukkit/entity/AbstractArrow.java b/src/main/java/org/bukkit/entity/AbstractArrow.java
index b1d8007eed489aa061c1a6813bcdafc101231e56..5185fa3a781f5374c4fa3a292191b4244c6f2a12 100644
--- a/src/main/java/org/bukkit/entity/AbstractArrow.java
+++ b/src/main/java/org/bukkit/entity/AbstractArrow.java
@@ -16,14 +16,14 @@ public interface AbstractArrow extends Projectile {
      *
      * @return the knockback strength value
      */
-    public int getKnockbackStrength();
+    int getKnockbackStrength();
 
     /**
      * Sets the knockback strength for an arrow.
      *
      * @param knockbackStrength the knockback strength value
      */
-    public void setKnockbackStrength(int knockbackStrength);
+    void setKnockbackStrength(int knockbackStrength);
 
     /**
      * Gets the base amount of damage this arrow will do.
@@ -34,21 +34,21 @@ public interface AbstractArrow extends Projectile {
      *
      * @return base damage amount
      */
-    public double getDamage();
+    double getDamage();
 
     /**
      * Sets the base amount of damage this arrow will do.
      *
      * @param damage new damage amount
      */
-    public void setDamage(double damage);
+    void setDamage(double damage);
 
     /**
      * Gets the number of times this arrow can pierce through an entity.
      *
      * @return pierce level
      */
-    public int getPierceLevel();
+    int getPierceLevel();
 
     /**
      * Sets the number of times this arrow can pierce through an entity.
@@ -57,7 +57,7 @@ public interface AbstractArrow extends Projectile {
      *
      * @param pierceLevel new pierce level
      */
-    public void setPierceLevel(int pierceLevel);
+    void setPierceLevel(int pierceLevel);
 
     /**
      * Gets whether this arrow is critical.
@@ -69,14 +69,14 @@ public interface AbstractArrow extends Projectile {
      *
      * @return true if it is critical
      */
-    public boolean isCritical();
+    boolean isCritical();
 
     /**
      * Sets whether or not this arrow should be critical.
      *
      * @param critical whether or not it should be critical
      */
-    public void setCritical(boolean critical);
+    void setCritical(boolean critical);
 
     /**
      * Gets whether this arrow is in a block or not.
@@ -85,49 +85,47 @@ public interface AbstractArrow extends Projectile {
      *
      * @return true if in a block
      */
-    public boolean isInBlock();
+    boolean isInBlock();
 
     /**
      * Gets the block to which this arrow is attached.
      *
      * @return the attached block or null if not attached
      */
-    @Nullable
-    public Block getAttachedBlock();
+    @Nullable Block getAttachedBlock();
 
     /**
      * Gets the current pickup status of this arrow.
      *
      * @return the pickup status of this arrow.
      */
-    @NotNull
-    public PickupStatus getPickupStatus();
+    @NotNull PickupStatus getPickupStatus();
 
     /**
      * Sets the current pickup status of this arrow.
      *
      * @param status new pickup status of this arrow.
      */
-    public void setPickupStatus(@NotNull PickupStatus status);
+    void setPickupStatus(@NotNull PickupStatus status);
 
     /**
      * Gets if this arrow was shot from a crossbow.
      *
      * @return if shot from a crossbow
      */
-    public boolean isShotFromCrossbow();
+    boolean isShotFromCrossbow();
 
     /**
      * Sets if this arrow was shot from a crossbow.
      *
      * @param shotFromCrossbow if shot from a crossbow
      */
-    public void setShotFromCrossbow(boolean shotFromCrossbow);
+    void setShotFromCrossbow(boolean shotFromCrossbow);
 
     /**
      * Represents the pickup status of this arrow.
      */
-    public enum PickupStatus {
+    enum PickupStatus {
         /**
          * The arrow cannot be picked up.
          */
@@ -180,7 +178,7 @@ public interface AbstractArrow extends Projectile {
     enum PickupRule {
         DISALLOWED,
         ALLOWED,
-        CREATIVE_ONLY;
+        CREATIVE_ONLY
     }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/AbstractHorse.java b/src/main/java/org/bukkit/entity/AbstractHorse.java
index 2bbf1d074b7d46e176f2589db7abe5e3ef47871c..410e6ffcdbdc45e41e67b82e28cbe78b8c1b710c 100644
--- a/src/main/java/org/bukkit/entity/AbstractHorse.java
+++ b/src/main/java/org/bukkit/entity/AbstractHorse.java
@@ -21,8 +21,7 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      * @deprecated different variants are different classes
      */
     @Deprecated
-    @NotNull
-    public Horse.Variant getVariant();
+    @NotNull Horse.Variant getVariant();
 
     /**
      * @param variant variant
@@ -30,7 +29,7 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      */
     @Deprecated
     @Contract("_ -> fail")
-    public void setVariant(Horse.Variant variant);
+    void setVariant(Horse.Variant variant);
 
     /**
      * Gets the domestication level of this horse.
@@ -41,7 +40,7 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      *
      * @return domestication level
      */
-    public int getDomestication();
+    int getDomestication();
 
     /**
      * Sets the domestication level of this horse.
@@ -55,7 +54,7 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      *
      * @param level domestication level
      */
-    public void setDomestication(int level);
+    void setDomestication(int level);
 
     /**
      * Gets the maximum domestication level of this horse.
@@ -65,7 +64,7 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      *
      * @return the max domestication level
      */
-    public int getMaxDomestication();
+    int getMaxDomestication();
 
     /**
      * Sets the maximum domestication level of this horse.
@@ -78,7 +77,7 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      *
      * @param level the max domestication level
      */
-    public void setMaxDomestication(int level);
+    void setMaxDomestication(int level);
 
     /**
      * Gets the jump strength of this horse.
@@ -88,7 +87,7 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      *
      * @return the horse's jump strength
      */
-    public double getJumpStrength();
+    double getJumpStrength();
 
     /**
      * Sets the jump strength of this horse.
@@ -100,9 +99,9 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      *
      * @param strength jump strength for this horse
      */
-    public void setJumpStrength(double strength);
+    void setJumpStrength(double strength);
 
     @NotNull
     @Override
-    public AbstractHorseInventory getInventory();
+    AbstractHorseInventory getInventory();
 }
diff --git a/src/main/java/org/bukkit/entity/AbstractVillager.java b/src/main/java/org/bukkit/entity/AbstractVillager.java
index 7fbe31c4fd69d4fca7ef96c0a56b0e0204d60cf4..6c6012538903022025e7a180ba6d50febfe9ee2c 100644
--- a/src/main/java/org/bukkit/entity/AbstractVillager.java
+++ b/src/main/java/org/bukkit/entity/AbstractVillager.java
@@ -26,6 +26,6 @@ public interface AbstractVillager extends Breedable, NPC, InventoryHolder, Merch
     /**
      * Reset this villager's trade offers
      */
-    public void resetOffers();
+    void resetOffers();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/Ageable.java b/src/main/java/org/bukkit/entity/Ageable.java
index 82b80a96bd2fefc847f07cb5bc413addebff8908..bcba11ecba392bd23a47d5684a1963efd209cda1 100644
--- a/src/main/java/org/bukkit/entity/Ageable.java
+++ b/src/main/java/org/bukkit/entity/Ageable.java
@@ -9,14 +9,14 @@ public interface Ageable extends Creature {
      *
      * @return Age
      */
-    public int getAge();
+    int getAge();
 
     /**
      * Sets the age of this mob.
      *
      * @param age New age
      */
-    public void setAge(int age);
+    void setAge(int age);
 
     /**
      * Lock the age of the animal, setting this will prevent the animal from
@@ -26,7 +26,7 @@ public interface Ageable extends Creature {
      * @deprecated see {@link Breedable#setAgeLock(boolean)}
      */
     @Deprecated
-    public void setAgeLock(boolean lock);
+    void setAgeLock(boolean lock);
 
     /**
      * Gets the current agelock.
@@ -35,24 +35,24 @@ public interface Ageable extends Creature {
      * @deprecated see {@link Breedable#getAgeLock()}
      */
     @Deprecated
-    public boolean getAgeLock();
+    boolean getAgeLock();
 
     /**
      * Sets the age of the mob to a baby
      */
-    public void setBaby();
+    void setBaby();
 
     /**
      * Sets the age of the mob to an adult
      */
-    public void setAdult();
+    void setAdult();
 
     /**
      * Returns true if the mob is an adult.
      *
      * @return return true if the mob is an adult
      */
-    public boolean isAdult();
+    boolean isAdult();
 
     /**
      * Return the ability to breed of the animal.
@@ -61,7 +61,7 @@ public interface Ageable extends Creature {
      * @deprecated see {@link Breedable#canBreed()}
      */
     @Deprecated
-    public boolean canBreed();
+    boolean canBreed();
 
     /**
      * Set breedability of the animal, if the animal is a baby and set to
@@ -71,5 +71,5 @@ public interface Ageable extends Creature {
      * @deprecated see {@link Breedable#setBreed(boolean)}
      */
     @Deprecated
-    public void setBreed(boolean breed);
+    void setBreed(boolean breed);
 }
diff --git a/src/main/java/org/bukkit/entity/AnimalTamer.java b/src/main/java/org/bukkit/entity/AnimalTamer.java
index 2e17b2d4f759531fbe9ee8e9b00c839186af09ca..193a0e7729b8cf28839c8d619744f1cba227e765 100644
--- a/src/main/java/org/bukkit/entity/AnimalTamer.java
+++ b/src/main/java/org/bukkit/entity/AnimalTamer.java
@@ -1,9 +1,10 @@
 package org.bukkit.entity;
 
-import java.util.UUID;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.UUID;
+
 public interface AnimalTamer {
 
     /**
@@ -11,14 +12,12 @@ public interface AnimalTamer {
      *
      * @return The name to reference on tamed animals or null if a name cannot be obtained
      */
-    @Nullable
-    public String getName();
+    @Nullable String getName();
 
     /**
      * This is the UUID of the specified AnimalTamer.
      *
      * @return The UUID to reference on tamed animals
      */
-    @NotNull
-    public UUID getUniqueId();
+    @NotNull UUID getUniqueId();
 }
diff --git a/src/main/java/org/bukkit/entity/AreaEffectCloud.java b/src/main/java/org/bukkit/entity/AreaEffectCloud.java
index c2096b5344d48d855d031538ec32e0154bd9054d..ce1156544aa51f70fd1f3b151f663ea48d10b1ea 100644
--- a/src/main/java/org/bukkit/entity/AreaEffectCloud.java
+++ b/src/main/java/org/bukkit/entity/AreaEffectCloud.java
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.Particle;
 import org.bukkit.potion.PotionData;
@@ -10,6 +9,8 @@ import org.bukkit.projectiles.ProjectileSource;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents an area effect cloud which will imbue a potion effect onto
  * entities which enter it.
@@ -230,13 +231,12 @@ public interface AreaEffectCloud extends Entity {
      *
      * @return the {@link ProjectileSource} that threw the LingeringPotion
      */
-    @Nullable
-    public ProjectileSource getSource();
+    @Nullable ProjectileSource getSource();
 
     /**
      * Set the original source of this cloud.
      *
      * @param source the {@link ProjectileSource} that threw the LingeringPotion
      */
-    public void setSource(@Nullable ProjectileSource source);
+    void setSource(@Nullable ProjectileSource source);
 }
diff --git a/src/main/java/org/bukkit/entity/ArmorStand.java b/src/main/java/org/bukkit/entity/ArmorStand.java
index 2f0c6af7fa6688a98d6aa0bd3f0e6556af8330d0..536e61bdb49b6766cd87b9b3386227c024d58259 100644
--- a/src/main/java/org/bukkit/entity/ArmorStand.java
+++ b/src/main/java/org/bukkit/entity/ArmorStand.java
@@ -323,7 +323,7 @@ public interface ArmorStand extends LivingEntity {
     /**
      * Represents types of locking mechanisms for ArmorStand equipment.
      */
-    public enum LockType {
+    enum LockType {
 
         /**
          * Prevents adding or changing the respective equipment - players cannot
@@ -342,7 +342,7 @@ public interface ArmorStand extends LivingEntity {
          * empty slot with a new item, but can swap items between themselves and
          * the ArmorStand.
          */
-        ADDING;
+        ADDING
     }
     // Paper start
     /**
diff --git a/src/main/java/org/bukkit/entity/Boat.java b/src/main/java/org/bukkit/entity/Boat.java
index e0d0537606d4f9a3fe588ebf7d02f314c0359335..a2f2de63816d36e79792352702af2afe59a0aaeb 100644
--- a/src/main/java/org/bukkit/entity/Boat.java
+++ b/src/main/java/org/bukkit/entity/Boat.java
@@ -32,7 +32,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public double getMaxSpeed();
+    double getMaxSpeed();
 
     /**
      * Sets the maximum speed of a boat. Must be nonnegative. Default is 0.4D.
@@ -41,7 +41,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public void setMaxSpeed(double speed);
+    void setMaxSpeed(double speed);
 
     /**
      * Gets the deceleration rate (newSpeed = curSpeed * rate) of occupied
@@ -51,7 +51,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public double getOccupiedDeceleration();
+    double getOccupiedDeceleration();
 
     /**
      * Sets the deceleration rate (newSpeed = curSpeed * rate) of occupied
@@ -62,7 +62,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public void setOccupiedDeceleration(double rate);
+    void setOccupiedDeceleration(double rate);
 
     /**
      * Gets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied
@@ -73,7 +73,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public double getUnoccupiedDeceleration();
+    double getUnoccupiedDeceleration();
 
     /**
      * Sets the deceleration rate (newSpeed = curSpeed * rate) of unoccupied
@@ -85,7 +85,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public void setUnoccupiedDeceleration(double rate);
+    void setUnoccupiedDeceleration(double rate);
 
     /**
      * Get whether boats can work on land.
@@ -94,7 +94,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public boolean getWorkOnLand();
+    boolean getWorkOnLand();
 
     /**
      * Set whether boats can work on land.
@@ -103,7 +103,7 @@ public interface Boat extends Vehicle {
      * @deprecated boats are complex and many of these methods do not work correctly across multiple versions.
      */
     @Deprecated
-    public void setWorkOnLand(boolean workOnLand);
+    void setWorkOnLand(boolean workOnLand);
 
     // Paper start
     /**
@@ -111,7 +111,6 @@ public interface Boat extends Vehicle {
      *
      * @return the boat material.
      */
-    @NotNull
-    public Material getBoatMaterial();
+    @NotNull Material getBoatMaterial();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/Breedable.java b/src/main/java/org/bukkit/entity/Breedable.java
index 0cf8ce497814a4c711a518ebb294f06f26351fe9..f2a399d242f909bf996dfeffc42032b8eeaaa215 100644
--- a/src/main/java/org/bukkit/entity/Breedable.java
+++ b/src/main/java/org/bukkit/entity/Breedable.java
@@ -11,21 +11,21 @@ public interface Breedable extends Ageable {
      *
      * @param lock new lock
      */
-    public void setAgeLock(boolean lock);
+    void setAgeLock(boolean lock);
 
     /**
      * Gets the current agelock.
      *
      * @return the current agelock
      */
-    public boolean getAgeLock();
+    boolean getAgeLock();
 
     /**
      * Return the ability to breed of the animal.
      *
      * @return the ability to breed of the animal
      */
-    public boolean canBreed();
+    boolean canBreed();
 
     /**
      * Set breedability of the animal, if the animal is a baby and set to
@@ -33,6 +33,6 @@ public interface Breedable extends Ageable {
      *
      * @param breed breedability of the animal
      */
-    public void setBreed(boolean breed);
+    void setBreed(boolean breed);
 
 }
diff --git a/src/main/java/org/bukkit/entity/Cat.java b/src/main/java/org/bukkit/entity/Cat.java
index c2a566b864c82ffb094b7334d9e6e25a1bfc87d1..e401d134a1806de173d783f72df1989e249e466f 100644
--- a/src/main/java/org/bukkit/entity/Cat.java
+++ b/src/main/java/org/bukkit/entity/Cat.java
@@ -13,35 +13,33 @@ public interface Cat extends Tameable, Sittable {
      *
      * @return Type of the cat.
      */
-    @NotNull
-    public Type getCatType();
+    @NotNull Type getCatType();
 
     /**
      * Sets the current type of this cat.
      *
      * @param type New type of this cat.
      */
-    public void setCatType(@NotNull Type type);
+    void setCatType(@NotNull Type type);
 
     /**
      * Get the collar color of this cat
      *
      * @return the color of the collar
      */
-    @NotNull
-    public DyeColor getCollarColor();
+    @NotNull DyeColor getCollarColor();
 
     /**
      * Set the collar color of this cat
      *
      * @param color the color to apply
      */
-    public void setCollarColor(@NotNull DyeColor color);
+    void setCollarColor(@NotNull DyeColor color);
 
     /**
      * Represents the various different cat types there are.
      */
-    public enum Type {
+    enum Type {
         TABBY,
         BLACK,
         RED,
@@ -52,6 +50,6 @@ public interface Cat extends Tameable, Sittable {
         RAGDOLL,
         WHITE,
         JELLIE,
-        ALL_BLACK;
+        ALL_BLACK
     }
 }
diff --git a/src/main/java/org/bukkit/entity/ChestedHorse.java b/src/main/java/org/bukkit/entity/ChestedHorse.java
index 24780af641ea5709415457ef382646962ac95b94..ce583f1291c82f753b0a189d88fc06ff8693c5ae 100644
--- a/src/main/java/org/bukkit/entity/ChestedHorse.java
+++ b/src/main/java/org/bukkit/entity/ChestedHorse.java
@@ -10,7 +10,7 @@ public interface ChestedHorse extends AbstractHorse {
      *
      * @return true if the horse has chest storage
      */
-    public boolean isCarryingChest();
+    boolean isCarryingChest();
 
     /**
      * Sets whether the horse has a chest equipped. Removing a chest will also
@@ -18,5 +18,5 @@ public interface ChestedHorse extends AbstractHorse {
      *
      * @param chest true if the horse should have a chest
      */
-    public void setCarryingChest(boolean chest);
+    void setCarryingChest(boolean chest);
 }
diff --git a/src/main/java/org/bukkit/entity/ComplexEntityPart.java b/src/main/java/org/bukkit/entity/ComplexEntityPart.java
index 937f53499af58f87fde44ef308a064de5f8f37b6..ced76a62cdbd95deece419605732bd38c3cbea85 100644
--- a/src/main/java/org/bukkit/entity/ComplexEntityPart.java
+++ b/src/main/java/org/bukkit/entity/ComplexEntityPart.java
@@ -12,6 +12,5 @@ public interface ComplexEntityPart extends Entity {
      *
      * @return Parent complex entity
      */
-    @NotNull
-    public ComplexLivingEntity getParent();
+    @NotNull ComplexLivingEntity getParent();
 }
diff --git a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
index 2151e3bac040b0dd47c67ffe3a9de6dc45e9d62c..1c91cfc0d189a3f451990b4008f5452503c0ad57 100644
--- a/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
+++ b/src/main/java/org/bukkit/entity/ComplexLivingEntity.java
@@ -1,8 +1,9 @@
 package org.bukkit.entity;
 
-import java.util.Set;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Set;
+
 /**
  * Represents a complex living entity - one that is made up of various smaller
  * parts
@@ -13,6 +14,5 @@ public interface ComplexLivingEntity extends LivingEntity {
      *
      * @return List of parts
      */
-    @NotNull
-    public Set<ComplexEntityPart> getParts();
+    @NotNull Set<ComplexEntityPart> getParts();
 }
diff --git a/src/main/java/org/bukkit/entity/Creeper.java b/src/main/java/org/bukkit/entity/Creeper.java
index e144f618702122bf28ebedc5cb8ce0f6ef27c107..99fe5c46570b4e8c1e00d10227127333d75bc4d2 100644
--- a/src/main/java/org/bukkit/entity/Creeper.java
+++ b/src/main/java/org/bukkit/entity/Creeper.java
@@ -10,14 +10,14 @@ public interface Creeper extends Monster {
      *
      * @return true if this creeper is powered
      */
-    public boolean isPowered();
+    boolean isPowered();
 
     /**
      * Sets the Powered status of this Creeper
      *
      * @param value New Powered status
      */
-    public void setPowered(boolean value);
+    void setPowered(boolean value);
 
     /**
      * Set the maximum fuse ticks for this Creeper, where the maximum ticks
@@ -26,7 +26,7 @@ public interface Creeper extends Monster {
      *
      * @param ticks the new maximum fuse ticks
      */
-    public void setMaxFuseTicks(int ticks);
+    void setMaxFuseTicks(int ticks);
 
     /**
      * Get the maximum fuse ticks for this Creeper, where the maximum ticks
@@ -35,7 +35,7 @@ public interface Creeper extends Monster {
      *
      * @return the maximum fuse ticks
      */
-    public int getMaxFuseTicks();
+    int getMaxFuseTicks();
 
     /**
      * Set the fuse ticks for this Creeper, where the ticks is the amount of
@@ -43,7 +43,7 @@ public interface Creeper extends Monster {
      *
      * @param ticks the new fuse ticks
      */
-    public void setFuseTicks(int ticks);
+    void setFuseTicks(int ticks);
 
     /**
      * Get the maximum fuse ticks for this Creeper, where the ticks is the
@@ -51,21 +51,21 @@ public interface Creeper extends Monster {
      *
      * @return the fuse ticks
      */
-    public int getFuseTicks();
+    int getFuseTicks();
 
     /**
      * Set the explosion radius in which this Creeper's explosion will affect.
      *
      * @param radius the new explosion radius
      */
-    public void setExplosionRadius(int radius);
+    void setExplosionRadius(int radius);
 
     /**
      * Get the explosion radius in which this Creeper's explosion will affect.
      *
      * @return the explosion radius
      */
-    public int getExplosionRadius();
+    int getExplosionRadius();
 
     /**
      * Makes this Creeper explode instantly.
@@ -74,7 +74,7 @@ public interface Creeper extends Monster {
      * {@link org.bukkit.event.entity.ExplosionPrimeEvent} and obeys the mob
      * griefing gamerule.
      */
-    public void explode();
+    void explode();
 
     /**
      * Ignites this Creeper, beginning its fuse.
@@ -86,7 +86,7 @@ public interface Creeper extends Monster {
      * {@link org.bukkit.event.entity.ExplosionPrimeEvent} and obeys the mob
      * griefing gamerule.
      */
-    public void ignite();
+    void ignite();
     // Paper start
 
     /**
@@ -94,13 +94,13 @@ public interface Creeper extends Monster {
      *
      * @param ignited New ignited state
      */
-    public void setIgnited(boolean ignited);
+    void setIgnited(boolean ignited);
 
     /**
      * Check if creeper is ignited or not (armed to explode)
      *
      * @return Ignited state
      */
-    public boolean isIgnited();
+    boolean isIgnited();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/EnderDragonPart.java b/src/main/java/org/bukkit/entity/EnderDragonPart.java
index d0ac89bab1879382ab980373e0f750e7916ba6df..13fbf906d3714b9f1c6153e6fc553b09f76bfde1 100644
--- a/src/main/java/org/bukkit/entity/EnderDragonPart.java
+++ b/src/main/java/org/bukkit/entity/EnderDragonPart.java
@@ -7,6 +7,5 @@ import org.jetbrains.annotations.NotNull;
  */
 public interface EnderDragonPart extends ComplexEntityPart, Damageable {
     @Override
-    @NotNull
-    public EnderDragon getParent();
+    @NotNull EnderDragon getParent();
 }
diff --git a/src/main/java/org/bukkit/entity/EnderSignal.java b/src/main/java/org/bukkit/entity/EnderSignal.java
index 1bba155d80621852acd187e181423afc577899ea..56dfe892b472c8cf5f48bcace5e7e022af1b65f9 100644
--- a/src/main/java/org/bukkit/entity/EnderSignal.java
+++ b/src/main/java/org/bukkit/entity/EnderSignal.java
@@ -15,8 +15,7 @@ public interface EnderSignal extends Entity {
      *
      * @return the {@link Location} this EnderSignal is moving towards.
      */
-    @NotNull
-    public Location getTargetLocation();
+    @NotNull Location getTargetLocation();
 
     /**
      * Set the {@link Location} this EnderSignal is moving towards.
@@ -26,7 +25,7 @@ public interface EnderSignal extends Entity {
      *
      * @param location the new target location
      */
-    public void setTargetLocation(@NotNull Location location);
+    void setTargetLocation(@NotNull Location location);
 
     /**
      * Gets if the EnderSignal should drop an item on death.<br>
@@ -35,7 +34,7 @@ public interface EnderSignal extends Entity {
      * @return true if the EnderSignal will drop an item on death, or false if
      * it will shatter
      */
-    public boolean getDropItem();
+    boolean getDropItem();
 
     /**
      * Sets if the EnderSignal should drop an item on death; or if it should
@@ -44,7 +43,7 @@ public interface EnderSignal extends Entity {
      * @param drop true if the EnderSignal should drop an item on death, or
      * false if it should shatter.
      */
-    public void setDropItem(boolean drop);
+    void setDropItem(boolean drop);
 
     /**
      * Get the {@link ItemStack} to be displayed while in the air and to be
@@ -52,8 +51,7 @@ public interface EnderSignal extends Entity {
      *
      * @return the item stack
      */
-    @NotNull
-    public ItemStack getItem();
+    @NotNull ItemStack getItem();
 
     /**
      * Set the {@link ItemStack} to be displayed while in the air and to be
@@ -61,7 +59,7 @@ public interface EnderSignal extends Entity {
      *
      * @param item the item to set. If null, resets to the default eye of ender
      */
-    public void setItem(@Nullable ItemStack item);
+    void setItem(@Nullable ItemStack item);
 
     /**
      * Gets the amount of time this entity has been alive (in ticks).
@@ -70,7 +68,7 @@ public interface EnderSignal extends Entity {
      *
      * @return the number of ticks this EnderSignal has been alive.
      */
-    public int getDespawnTimer();
+    int getDespawnTimer();
 
     /**
      * Set how long this entity has been alive (in ticks).
@@ -79,5 +77,5 @@ public interface EnderSignal extends Entity {
      *
      * @param timer how long (in ticks) this EnderSignal has been alive.
      */
-    public void setDespawnTimer(int timer);
+    void setDespawnTimer(int timer);
 }
diff --git a/src/main/java/org/bukkit/entity/Enderman.java b/src/main/java/org/bukkit/entity/Enderman.java
index 821c690f8a32918bdb284ffec4af98f411f76ccc..72d62138fb36f290e3a86d6809779dddbdd9d119 100644
--- a/src/main/java/org/bukkit/entity/Enderman.java
+++ b/src/main/java/org/bukkit/entity/Enderman.java
@@ -18,7 +18,7 @@ public interface Enderman extends Monster {
      * @return If the enderman teleported successfully or not
      */
 
-    public boolean teleportRandomly();
+    boolean teleportRandomly();
     // Paper end
 
     /**
@@ -26,28 +26,26 @@ public interface Enderman extends Monster {
      *
      * @return MaterialData containing the id and data of the block
      */
-    @NotNull
-    public MaterialData getCarriedMaterial();
+    @NotNull MaterialData getCarriedMaterial();
 
     /**
      * Sets the id and data of the block that the Enderman is carrying.
      *
      * @param material data to set the carried block to
      */
-    public void setCarriedMaterial(@NotNull MaterialData material);
+    void setCarriedMaterial(@NotNull MaterialData material);
 
     /**
      * Gets the data of the block that the Enderman is carrying.
      *
      * @return BlockData containing the carried block, or null if none
      */
-    @Nullable
-    public BlockData getCarriedBlock();
+    @Nullable BlockData getCarriedBlock();
 
     /**
      * Sets the data of the block that the Enderman is carrying.
      *
      * @param blockData data to set the carried block to, or null to remove
      */
-    public void setCarriedBlock(@Nullable BlockData blockData);
+    void setCarriedBlock(@Nullable BlockData blockData);
 }
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index 428daeb04d0a35a443467e2f657d2356bcfdd7d7..a6101c39d72b83e98201ea2d1a38b0e750cd9655 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1,14 +1,6 @@
 package org.bukkit.entity;
 
-import java.util.List;
-import java.util.Set;
-import java.util.UUID;
-import org.bukkit.Chunk; // Paper
-import org.bukkit.EntityEffect;
-import org.bukkit.Location;
-import org.bukkit.Nameable;
-import org.bukkit.Server;
-import org.bukkit.World;
+import org.bukkit.*;
 import org.bukkit.block.BlockFace;
 import org.bukkit.block.PistonMoveReaction;
 import org.bukkit.command.CommandSender;
@@ -23,6 +15,10 @@ import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+import java.util.Set;
+import java.util.UUID;
+
 /**
  * Represents a base entity in the world
  */
@@ -33,8 +29,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return a new copy of Location containing the position of this entity
      */
-    @NotNull
-    public Location getLocation();
+    @NotNull Location getLocation();
 
     /**
      * Stores the entity's current position in the provided Location object.
@@ -46,37 +41,35 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return The Location object provided or null
      */
     @Contract("null -> null; !null -> !null")
-    @Nullable
-    public Location getLocation(@Nullable Location loc);
+    @Nullable Location getLocation(@Nullable Location loc);
 
     /**
      * Sets this entity's velocity
      *
      * @param velocity New velocity to travel with
      */
-    public void setVelocity(@NotNull Vector velocity);
+    void setVelocity(@NotNull Vector velocity);
 
     /**
      * Gets this entity's current velocity
      *
      * @return Current traveling velocity of this entity
      */
-    @NotNull
-    public Vector getVelocity();
+    @NotNull Vector getVelocity();
 
     /**
      * Gets the entity's height
      *
      * @return height of entity
      */
-    public double getHeight();
+    double getHeight();
 
     /**
      * Gets the entity's width
      *
      * @return width of entity
      */
-    public double getWidth();
+    double getWidth();
 
     /**
      * Gets the entity's current bounding box.
@@ -86,8 +79,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return the entity's current bounding box
      */
-    @NotNull
-    public BoundingBox getBoundingBox();
+    @NotNull BoundingBox getBoundingBox();
 
     /**
      * Returns true if the entity is supported by a block. This value is a
@@ -97,22 +89,21 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return True if entity is on ground.
      * @see Player#isOnGround()
      */
-    public boolean isOnGround();
+    boolean isOnGround();
 
     /**
      * Returns true if the entity is in water.
      *
      * @return <code>true</code> if the entity is in water.
      */
-    public boolean isInWater();
+    boolean isInWater();
 
     /**
      * Gets the current world this entity resides in
      *
      * @return World
      */
-    @NotNull
-    public World getWorld();
+    @NotNull World getWorld();
 
     /**
      * Sets the entity's rotation.
@@ -123,7 +114,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param pitch the pitch
      * @throws UnsupportedOperationException if used for players
      */
-    public void setRotation(float yaw, float pitch);
+    void setRotation(float yaw, float pitch);
 
     /**
      * Teleports this entity to the given location. If this entity is riding a
@@ -132,7 +123,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param location New location to teleport this entity to
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(@NotNull Location location);
+    boolean teleport(@NotNull Location location);
 
     /**
      * Teleports this entity to the given location. If this entity is riding a
@@ -142,7 +133,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param cause The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(@NotNull Location location, @NotNull TeleportCause cause);
+    boolean teleport(@NotNull Location location, @NotNull TeleportCause cause);
 
     /**
      * Teleports this entity to the target Entity. If this entity is riding a
@@ -151,7 +142,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param destination Entity to teleport this entity to
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(@NotNull Entity destination);
+    boolean teleport(@NotNull Entity destination);
 
     /**
      * Teleports this entity to the target Entity. If this entity is riding a
@@ -161,7 +152,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param cause The cause of this teleportation
      * @return <code>true</code> if the teleport was successful
      */
-    public boolean teleport(@NotNull Entity destination, @NotNull TeleportCause cause);
+    boolean teleport(@NotNull Entity destination, @NotNull TeleportCause cause);
 
     // Paper start
     /**
@@ -170,7 +161,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return A future that will be completed with the result of the teleport
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc) {
+    default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc) {
         return teleportAsync(loc, TeleportCause.PLUGIN);
     }
     /**
@@ -180,7 +171,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return A future that will be completed with the result of the teleport
      */
     @NotNull
-    public default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc, @NotNull TeleportCause cause) {
+    default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc, @NotNull TeleportCause cause) {
         java.util.concurrent.CompletableFuture<Boolean> future = new java.util.concurrent.CompletableFuture<>();
         loc.getWorld().getChunkAtAsyncUrgently(loc).thenAccept((chunk) -> future.complete(teleport(loc, cause))).exceptionally(ex -> {
             future.completeExceptionally(ex);
@@ -199,15 +190,14 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param z 1/2 the size of the box along z axis
      * @return {@code List<Entity>} List of entities nearby
      */
-    @NotNull
-    public List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z);
+    @NotNull List<org.bukkit.entity.Entity> getNearbyEntities(double x, double y, double z);
 
     /**
      * Returns a unique id for this entity
      *
      * @return Entity id
      */
-    public int getEntityId();
+    int getEntityId();
 
     /**
      * Returns the entity's current fire ticks (ticks before the entity stops
@@ -215,14 +205,14 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return int fireTicks
      */
-    public int getFireTicks();
+    int getFireTicks();
 
     /**
      * Returns the entity's maximum fire ticks.
      *
      * @return int maxFireTicks
      */
-    public int getMaxFireTicks();
+    int getMaxFireTicks();
 
     /**
      * Sets the entity's current fire ticks (ticks before the entity stops
@@ -230,19 +220,19 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @param ticks Current ticks remaining
      */
-    public void setFireTicks(int ticks);
+    void setFireTicks(int ticks);
 
     /**
      * Mark the entity's removal.
      */
-    public void remove();
+    void remove();
 
     /**
      * Returns true if this entity has been marked for removal.
      *
      * @return True if it is dead.
      */
-    public boolean isDead();
+    boolean isDead();
 
     /**
      * Returns false if the entity has died or been despawned for some other
@@ -250,7 +240,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return True if valid.
      */
-    public boolean isValid();
+    boolean isValid();
 
     /**
      * Gets the {@link Server} that contains this Entity
@@ -258,8 +248,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return Server instance running this Entity
      */
     @Override
-    @NotNull
-    public Server getServer();
+    @NotNull Server getServer();
 
     /**
      * Returns true if the entity gets persisted.
@@ -278,7 +267,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return true if this entity is persistent
      */
-    public boolean isPersistent();
+    boolean isPersistent();
 
     /**
      * Sets whether or not the entity gets persisted.
@@ -286,7 +275,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param persistent the persistence status
      * @see #isPersistent()
      */
-    public void setPersistent(boolean persistent);
+    void setPersistent(boolean persistent);
 
     /**
      * Gets the primary passenger of a vehicle. For vehicles that could have
@@ -297,8 +286,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * {@link #getPassengers()}
      */
     @Deprecated
-    @Nullable
-    public Entity getPassenger();
+    @Nullable Entity getPassenger();
 
     /**
      * Set the passenger of a vehicle.
@@ -309,7 +297,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * {@link #addPassenger(org.bukkit.entity.Entity)}
      */
     @Deprecated
-    public boolean setPassenger(@NotNull Entity passenger);
+    boolean setPassenger(@NotNull Entity passenger);
 
     /**
      * Gets a list of passengers of this vehicle.
@@ -319,8 +307,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return list of entities corresponding to current passengers.
      */
-    @NotNull
-    public List<Entity> getPassengers();
+    @NotNull List<Entity> getPassengers();
 
     /**
      * Add a passenger to the vehicle.
@@ -328,7 +315,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param passenger The passenger to add
      * @return false if it could not be done for whatever reason
      */
-    public boolean addPassenger(@NotNull Entity passenger);
+    boolean addPassenger(@NotNull Entity passenger);
 
     /**
      * Remove a passenger from the vehicle.
@@ -336,42 +323,42 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @param passenger The passenger to remove
      * @return false if it could not be done for whatever reason
      */
-    public boolean removePassenger(@NotNull Entity passenger);
+    boolean removePassenger(@NotNull Entity passenger);
 
     /**
      * Check if a vehicle has passengers.
      *
      * @return True if the vehicle has no passengers.
      */
-    public boolean isEmpty();
+    boolean isEmpty();
 
     /**
      * Eject any passenger.
      *
      * @return True if there was a passenger.
      */
-    public boolean eject();
+    boolean eject();
 
     /**
      * Returns the distance this entity has fallen
      *
      * @return The distance.
      */
-    public float getFallDistance();
+    float getFallDistance();
 
     /**
      * Sets the fall distance for this entity
      *
      * @param distance The new distance.
      */
-    public void setFallDistance(float distance);
+    void setFallDistance(float distance);
 
     /**
      * Record the last {@link EntityDamageEvent} inflicted on this entity
      *
      * @param event a {@link EntityDamageEvent}
      */
-    public void setLastDamageCause(@Nullable EntityDamageEvent event);
+    void setLastDamageCause(@Nullable EntityDamageEvent event);
 
     /**
      * Retrieve the last {@link EntityDamageEvent} inflicted on this entity.
@@ -380,16 +367,14 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return the last known {@link EntityDamageEvent} or null if hitherto
      *     unharmed
      */
-    @Nullable
-    public EntityDamageEvent getLastDamageCause();
+    @Nullable EntityDamageEvent getLastDamageCause();
 
     /**
      * Returns a unique and persistent id for this entity
      *
      * @return unique id
      */
-    @NotNull
-    public UUID getUniqueId();
+    @NotNull UUID getUniqueId();
 
     /**
      * Gets the amount of ticks this entity has lived for.
@@ -398,7 +383,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return Age of entity
      */
-    public int getTicksLived();
+    int getTicksLived();
 
     /**
      * Sets the amount of ticks this entity has lived for.
@@ -408,7 +393,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @param value Age of entity
      */
-    public void setTicksLived(int value);
+    void setTicksLived(int value);
 
     /**
      * Performs the specified {@link EntityEffect} for this entity.
@@ -419,22 +404,21 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @param type Effect to play.
      */
-    public void playEffect(@NotNull EntityEffect type);
+    void playEffect(@NotNull EntityEffect type);
 
     /**
      * Get the type of the entity.
      *
      * @return The entity type.
      */
-    @NotNull
-    public EntityType getType();
+    @NotNull EntityType getType();
 
     /**
      * Returns whether this entity is inside a vehicle.
      *
      * @return True if the entity is in a vehicle.
      */
-    public boolean isInsideVehicle();
+    boolean isInsideVehicle();
 
     /**
      * Leave the current vehicle. If the entity is currently in a vehicle (and
@@ -443,7 +427,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return True if the entity was in a vehicle.
      */
-    public boolean leaveVehicle();
+    boolean leaveVehicle();
 
     /**
      * Get the vehicle that this player is inside. If there is no vehicle,
@@ -451,8 +435,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return The current vehicle.
      */
-    @Nullable
-    public Entity getVehicle();
+    @Nullable Entity getVehicle();
 
     /**
      * Sets whether or not to display the mob's custom name client side. The
@@ -463,7 +446,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @param flag custom name or not
      */
-    public void setCustomNameVisible(boolean flag);
+    void setCustomNameVisible(boolean flag);
 
     /**
      * Gets whether or not the mob's custom name is displayed client side.
@@ -473,7 +456,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @return if the custom name is displayed
      */
-    public boolean isCustomNameVisible();
+    boolean isCustomNameVisible();
 
     /**
      * Sets whether the entity has a team colored (default: white) glow.
@@ -503,21 +486,21 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @param flag if the entity is invulnerable
      */
-    public void setInvulnerable(boolean flag);
+    void setInvulnerable(boolean flag);
 
     /**
      * Gets whether the entity is invulnerable or not.
      *
      * @return whether the entity is
      */
-    public boolean isInvulnerable();
+    boolean isInvulnerable();
 
     /**
      * Gets whether the entity is silent or not.
      *
      * @return whether the entity is silent.
      */
-    public boolean isSilent();
+    boolean isSilent();
 
     /**
      * Sets whether the entity is silent or not.
@@ -526,7 +509,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      *
      * @param flag if the entity is silent
      */
-    public void setSilent(boolean flag);
+    void setSilent(boolean flag);
 
     /**
      * Returns whether gravity applies to this entity.
@@ -622,7 +605,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     Pose getPose();
 
     // Spigot start
-    public class Spigot extends CommandSender.Spigot {
+    class Spigot extends CommandSender.Spigot {
 
     }
 
@@ -672,36 +655,36 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
     /**
      * Check if entity is in rain
      */
-    public boolean isInRain();
+    boolean isInRain();
 
     /**
      * Check if entity is in bubble column
      */
-    public boolean isInBubbleColumn();
+    boolean isInBubbleColumn();
 
     /**
      * Check if entity is in water or rain
      */
-    public boolean isInWaterOrRain();
+    boolean isInWaterOrRain();
 
     /**
      * Check if entity is in water or bubble column
      */
-    public boolean isInWaterOrBubbleColumn();
+    boolean isInWaterOrBubbleColumn();
 
     /**
      * Check if entity is in water or rain or bubble column
      */
-    public boolean isInWaterOrRainOrBubbleColumn();
+    boolean isInWaterOrRainOrBubbleColumn();
 
     /**
      * Check if entity is in lava
      */
-    public boolean isInLava();
+    boolean isInLava();
 
     /**
      * Check if entity is inside a ticking chunk
      */
-    public boolean isTicking();
+    boolean isTicking();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/EntityCategory.java b/src/main/java/org/bukkit/entity/EntityCategory.java
index fd960f20c79f721575c9bd4074a5ca9ab6b796b1..2dcd37e56611c13850973617586038b6336d1c12 100644
--- a/src/main/java/org/bukkit/entity/EntityCategory.java
+++ b/src/main/java/org/bukkit/entity/EntityCategory.java
@@ -59,5 +59,5 @@ public enum EntityCategory {
      *   <li>Are capable of swimming in water rather than floating or sinking.
      * </ul>
      */
-    WATER;
+    WATER
 }
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 692b75eb78405874077c850bfc72e247ccc80860..706785b290fca73f5c7fb3a70e0b3f048dc300b5 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -288,8 +288,8 @@ public enum EntityType implements Keyed {
     private final boolean independent, living;
     private final NamespacedKey key;
 
-    private static final Map<String, EntityType> NAME_MAP = new HashMap<String, EntityType>();
-    private static final Map<Short, EntityType> ID_MAP = new HashMap<Short, EntityType>();
+    private static final Map<String, EntityType> NAME_MAP = new HashMap<>();
+    private static final Map<Short, EntityType> ID_MAP = new HashMap<>();
 
     static {
         for (EntityType type : values()) {
@@ -317,11 +317,11 @@ public enum EntityType implements Keyed {
         NAME_MAP.put("zombie_pigman", ZOMBIFIED_PIGLIN);
     }
 
-    private EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId) {
+    EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId) {
         this(name, clazz, typeId, true);
     }
 
-    private EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId, boolean independent) {
+    EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId, boolean independent) {
         this.name = name;
         this.clazz = clazz;
         this.typeId = (short) typeId;
@@ -408,7 +408,7 @@ public enum EntityType implements Keyed {
      * @return False if the entity type cannot be spawned
      */
     public boolean isSpawnable() {
-        return independent;
+        return !independent;
     }
 
     public boolean isAlive() {
diff --git a/src/main/java/org/bukkit/entity/Evoker.java b/src/main/java/org/bukkit/entity/Evoker.java
index 76f81cd124090337876c9e5e469862a1c8da4ec8..9b60bbcc1d22649cffffdde347b09c30fbdf06a4 100644
--- a/src/main/java/org/bukkit/entity/Evoker.java
+++ b/src/main/java/org/bukkit/entity/Evoker.java
@@ -15,7 +15,7 @@ public interface Evoker extends Spellcaster {
      * entities.
      */
     @Deprecated
-    public enum Spell {
+    enum Spell {
 
         /**
          * No spell is being evoked.
@@ -40,7 +40,7 @@ public interface Evoker extends Spellcaster {
         /**
          * The spell that makes the target blind.
          */
-        BLINDNESS;
+        BLINDNESS
     }
 
     /**
diff --git a/src/main/java/org/bukkit/entity/ExperienceOrb.java b/src/main/java/org/bukkit/entity/ExperienceOrb.java
index dec70bbfaf73a9d525b2c45682b804c684e1645b..c884e89cd9b1bfbc9e75c4a29521297eb7688aec 100644
--- a/src/main/java/org/bukkit/entity/ExperienceOrb.java
+++ b/src/main/java/org/bukkit/entity/ExperienceOrb.java
@@ -13,14 +13,14 @@ public interface ExperienceOrb extends Entity {
      *
      * @return Amount of experience
      */
-    public int getExperience();
+    int getExperience();
 
     /**
      * Sets how much experience is contained within this orb
      *
      * @param value Amount of experience
      */
-    public void setExperience(int value);
+    void setExperience(int value);
 
     // Paper start
     /**
diff --git a/src/main/java/org/bukkit/entity/Explosive.java b/src/main/java/org/bukkit/entity/Explosive.java
index 48650f6ab82e602e8a08f69c31e0c2c38e27ff98..af920087f1840837f1c5d98ee9a18cc0ad5b2f28 100644
--- a/src/main/java/org/bukkit/entity/Explosive.java
+++ b/src/main/java/org/bukkit/entity/Explosive.java
@@ -10,26 +10,26 @@ public interface Explosive extends Entity {
      *
      * @param yield The explosive yield
      */
-    public void setYield(float yield);
+    void setYield(float yield);
 
     /**
      * Return the radius or yield of this explosive's explosion
      *
      * @return the radius of blocks affected
      */
-    public float getYield();
+    float getYield();
 
     /**
      * Set whether or not this explosive's explosion causes fire
      *
      * @param isIncendiary Whether it should cause fire
      */
-    public void setIsIncendiary(boolean isIncendiary);
+    void setIsIncendiary(boolean isIncendiary);
 
     /**
      * Return whether or not this explosive creates a fire when exploding
      *
      * @return true if the explosive creates fire, false otherwise
      */
-    public boolean isIncendiary();
+    boolean isIncendiary();
 }
diff --git a/src/main/java/org/bukkit/entity/Fireball.java b/src/main/java/org/bukkit/entity/Fireball.java
index 7a44707f2307dc4dbfea4de3f4baf3cc0490dc93..d695e42b38e4d7bbaadec01e9cb35ef28ccfe6de 100644
--- a/src/main/java/org/bukkit/entity/Fireball.java
+++ b/src/main/java/org/bukkit/entity/Fireball.java
@@ -13,14 +13,13 @@ public interface Fireball extends Projectile, Explosive {
      *
      * @param direction the direction this fireball is flying toward
      */
-    public void setDirection(@NotNull Vector direction);
+    void setDirection(@NotNull Vector direction);
 
     /**
      * Retrieve the direction this fireball is heading toward
      *
      * @return the direction
      */
-    @NotNull
-    public Vector getDirection();
+    @NotNull Vector getDirection();
 
 }
diff --git a/src/main/java/org/bukkit/entity/Firework.java b/src/main/java/org/bukkit/entity/Firework.java
index d616d5941b3c7b85e350e845901da798601b9a3c..bbe155b8ab7907c38476f628e352cd128dff0a21 100644
--- a/src/main/java/org/bukkit/entity/Firework.java
+++ b/src/main/java/org/bukkit/entity/Firework.java
@@ -45,13 +45,11 @@ public interface Firework extends Projectile {
     void setShotAtAngle(boolean shotAtAngle);
 
     // Paper start
-    @org.jetbrains.annotations.Nullable
-    public java.util.UUID getSpawningEntity();
+    @org.jetbrains.annotations.Nullable java.util.UUID getSpawningEntity();
     /**
      * If this firework is boosting an entity, return it
      * @return The entity being boosted
      */
-    @org.jetbrains.annotations.Nullable
-    public LivingEntity getBoostedEntity();
+    @org.jetbrains.annotations.Nullable LivingEntity getBoostedEntity();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/FishHook.java b/src/main/java/org/bukkit/entity/FishHook.java
index d1b37530319f6d37ee37f62080289c1e45848bc8..8c7762180fe97d750dfebe7c501cf80b5cae3134 100644
--- a/src/main/java/org/bukkit/entity/FishHook.java
+++ b/src/main/java/org/bukkit/entity/FishHook.java
@@ -16,7 +16,7 @@ public interface FishHook extends Projectile {
      *
      * @return Minimum number of ticks one has to wait for a fish biting
      */
-    public int getMinWaitTime();
+    int getMinWaitTime();
 
     /**
      * Set the minimum number of ticks one has to wait for a fish biting.
@@ -27,7 +27,7 @@ public interface FishHook extends Projectile {
      * @param minWaitTime Minimum number of ticks one has to wait for a fish
      * biting
      */
-    public void setMinWaitTime(int minWaitTime);
+    void setMinWaitTime(int minWaitTime);
 
     /**
      * Get the maximum number of ticks one has to wait for a fish biting.
@@ -37,7 +37,7 @@ public interface FishHook extends Projectile {
      *
      * @return Maximum number of ticks one has to wait for a fish biting
      */
-    public int getMaxWaitTime();
+    int getMaxWaitTime();
 
     /**
      * Set the maximum number of ticks one has to wait for a fish biting.
@@ -48,7 +48,7 @@ public interface FishHook extends Projectile {
      * @param maxWaitTime Maximum number of ticks one has to wait for a fish
      * biting
      */
-    public void setMaxWaitTime(int maxWaitTime);
+    void setMaxWaitTime(int maxWaitTime);
 
     /**
      * Get whether the lure enchantment should be applied to reduce the wait
@@ -61,7 +61,7 @@ public interface FishHook extends Projectile {
      * @return Whether the lure enchantment should be applied to reduce the wait
      * time
      */
-    public boolean getApplyLure();
+    boolean getApplyLure();
 
     /**
      * Set whether the lure enchantment should be applied to reduce the wait
@@ -74,7 +74,7 @@ public interface FishHook extends Projectile {
      * @param applyLure Whether the lure enchantment should be applied to reduce
      * the wait time
      */
-    public void setApplyLure(boolean applyLure);
+    void setApplyLure(boolean applyLure);
 
     /**
      * Gets the chance of a fish biting.
@@ -86,7 +86,7 @@ public interface FishHook extends Projectile {
      * @deprecated has no effect in newer Minecraft versions
      */
     @Deprecated
-    public double getBiteChance();
+    double getBiteChance();
 
     /**
      * Sets the chance of a fish biting.
@@ -100,7 +100,7 @@ public interface FishHook extends Projectile {
      * @deprecated has no effect in newer Minecraft versions
      */
     @Deprecated
-    public void setBiteChance(double chance) throws IllegalArgumentException;
+    void setBiteChance(double chance) throws IllegalArgumentException;
 
     /**
      * Check whether or not this fish hook is in open water.
@@ -110,22 +110,21 @@ public interface FishHook extends Projectile {
      *
      * @return true if in open water, false otherwise
      */
-    public boolean isInOpenWater();
+    boolean isInOpenWater();
 
     /**
      * Get the entity hooked by this fish hook.
      *
      * @return the hooked entity. null if none
      */
-    @Nullable
-    public Entity getHookedEntity();
+    @Nullable Entity getHookedEntity();
 
     /**
      * Set the entity hooked by this fish hook.
      *
      * @param entity the entity to set, or null to unhook
      */
-    public void setHookedEntity(@Nullable Entity entity);
+    void setHookedEntity(@Nullable Entity entity);
 
     /**
      * Pull the hooked entity to the caster of this fish hook. If no entity is
@@ -133,20 +132,19 @@ public interface FishHook extends Projectile {
      *
      * @return true if pulled, false if no entity is hooked
      */
-    public boolean pullHookedEntity();
+    boolean pullHookedEntity();
 
     /**
      * Get the current state of this fish hook.
      *
      * @return the fish hook state
      */
-    @NotNull
-    public HookState getState();
+    @NotNull HookState getState();
 
     /**
      * Represents a state in which a fishing hook may be.
      */
-    public enum HookState {
+    enum HookState {
 
         /**
          * The fishing hook has been cast and is either in the air or resting
@@ -160,6 +158,6 @@ public interface FishHook extends Projectile {
         /**
          * The fishing hook is bobbing in the water, waiting for a bite.
          */
-        BOBBING;
+        BOBBING
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Fox.java b/src/main/java/org/bukkit/entity/Fox.java
index 498e182846b81d50b3a594254e8b341fb23e8763..76fb745653f16cfdb33d5e4650797c3dd39e3a7d 100644
--- a/src/main/java/org/bukkit/entity/Fox.java
+++ b/src/main/java/org/bukkit/entity/Fox.java
@@ -13,15 +13,14 @@ public interface Fox extends Animals, Sittable {
      *
      * @return Type of the fox.
      */
-    @NotNull
-    public Type getFoxType();
+    @NotNull Type getFoxType();
 
     /**
      * Sets the current type of this fox.
      *
      * @param type New type of this fox.
      */
-    public void setFoxType(@NotNull Type type);
+    void setFoxType(@NotNull Type type);
 
     /**
      * Checks if this animal is crouching
@@ -49,8 +48,7 @@ public interface Fox extends Animals, Sittable {
      *
      * @return the owning AnimalTamer, or null if not owned
      */
-    @Nullable
-    public AnimalTamer getFirstTrustedPlayer();
+    @Nullable AnimalTamer getFirstTrustedPlayer();
 
     /**
      * Set the first trusted player.
@@ -59,15 +57,14 @@ public interface Fox extends Animals, Sittable {
      *
      * @param player the AnimalTamer to be trusted
      */
-    public void setFirstTrustedPlayer(@Nullable AnimalTamer player);
+    void setFirstTrustedPlayer(@Nullable AnimalTamer player);
 
     /**
      * Gets the second trusted player.
      *
      * @return the owning AnimalTamer, or null if not owned
      */
-    @Nullable
-    public AnimalTamer getSecondTrustedPlayer();
+    @Nullable AnimalTamer getSecondTrustedPlayer();
 
     /**
      * Set the second trusted player.
@@ -76,13 +73,13 @@ public interface Fox extends Animals, Sittable {
      *
      * @param player the AnimalTamer to be trusted
      */
-    public void setSecondTrustedPlayer(@Nullable AnimalTamer player);
+    void setSecondTrustedPlayer(@Nullable AnimalTamer player);
 
     /**
      * Represents the various different fox types there are.
      */
-    public enum Type {
+    enum Type {
         RED,
-        SNOW;
+        SNOW
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Guardian.java b/src/main/java/org/bukkit/entity/Guardian.java
index 4da9f3c5f1423bf8f9eeb490736cabf027853e60..18b7862fbf24c0c71142af93886558720531c386 100644
--- a/src/main/java/org/bukkit/entity/Guardian.java
+++ b/src/main/java/org/bukkit/entity/Guardian.java
@@ -9,12 +9,12 @@ public interface Guardian extends Monster {
      * @deprecated should check if instance of {@link ElderGuardian}.
      */
     @Deprecated
-    public boolean isElder();
+    boolean isElder();
 
     /**
      * @param shouldBeElder shouldBeElder
      * @deprecated Must spawn a new {@link ElderGuardian}.
      */
     @Deprecated
-    public void setElder(boolean shouldBeElder);
+    void setElder(boolean shouldBeElder);
 }
diff --git a/src/main/java/org/bukkit/entity/Hanging.java b/src/main/java/org/bukkit/entity/Hanging.java
index 2f07efac03f4d12fd2ae9a340d34cf92a90b6cfa..0ed09425c0036167cced6969f6768c47fa7bc051 100644
--- a/src/main/java/org/bukkit/entity/Hanging.java
+++ b/src/main/java/org/bukkit/entity/Hanging.java
@@ -19,5 +19,5 @@ public interface Hanging extends Entity, Attachable {
      * @return False if force was false and there was no block for it to
      *     attach to in order to face the given direction.
      */
-    public boolean setFacingDirection(@NotNull BlockFace face, boolean force);
+    boolean setFacingDirection(@NotNull BlockFace face, boolean force);
 }
diff --git a/src/main/java/org/bukkit/entity/Hoglin.java b/src/main/java/org/bukkit/entity/Hoglin.java
index b49670816d0d42aee08614d9a59a1f785ad8e6bc..4dc1148bfe34c64418121830570be878b2f51538 100644
--- a/src/main/java/org/bukkit/entity/Hoglin.java
+++ b/src/main/java/org/bukkit/entity/Hoglin.java
@@ -10,28 +10,28 @@ public interface Hoglin extends Animals {
      *
      * @return Whether the hoglin is immune to zombification
      */
-    public boolean isImmuneToZombification();
+    boolean isImmuneToZombification();
 
     /**
      * Sets whether the hoglin is immune to zombification.
      *
      * @param flag Whether the hoglin is immune to zombification
      */
-    public void setImmuneToZombification(boolean flag);
+    void setImmuneToZombification(boolean flag);
 
     /**
      * Get whether the hoglin is able to be hunted by piglins.
      *
      * @return Whether the hoglin is able to be hunted by piglins
      */
-    public boolean isAbleToBeHunted();
+    boolean isAbleToBeHunted();
 
     /**
      * Sets whether the hoglin is able to be hunted by piglins.
      *
      * @param flag Whether the hoglin is able to be hunted by piglins.
      */
-    public void setIsAbleToBeHunted(boolean flag);
+    void setIsAbleToBeHunted(boolean flag);
 
     /**
      * Gets the amount of ticks until this entity will be converted to a Zoglin.
@@ -41,7 +41,7 @@ public interface Hoglin extends Animals {
      * @return conversion time
      * @throws IllegalStateException if {@link #isConverting()} is false.
      */
-    public int getConversionTime();
+    int getConversionTime();
 
     /**
      * Sets the amount of ticks until this entity will be converted to a Zoglin.
@@ -52,7 +52,7 @@ public interface Hoglin extends Animals {
      *
      * @param time new conversion time
      */
-    public void setConversionTime(int time);
+    void setConversionTime(int time);
 
     /**
      * Get if this entity is in the process of converting to a Zoglin.
diff --git a/src/main/java/org/bukkit/entity/Horse.java b/src/main/java/org/bukkit/entity/Horse.java
index 9e1bb136c146e83d9b5b78186155925142ce7eb3..2d964ac572f5a25198e234647bacf8fddd8dab89 100644
--- a/src/main/java/org/bukkit/entity/Horse.java
+++ b/src/main/java/org/bukkit/entity/Horse.java
@@ -12,7 +12,7 @@ public interface Horse extends AbstractHorse {
      * @deprecated different variants are differing classes
      */
     @Deprecated
-    public enum Variant {
+    enum Variant {
         /**
          * A normal horse
          */
@@ -37,13 +37,12 @@ public interface Horse extends AbstractHorse {
          * Not really a horse :)
          */
         LLAMA
-        ;
     }
 
     /**
      * Represents the base color that the horse has.
      */
-    public enum Color {
+    enum Color {
         /**
          * Snow white
          */
@@ -78,7 +77,7 @@ public interface Horse extends AbstractHorse {
     /**
      * Represents the style, or markings, that the horse has.
      */
-    public enum Style {
+    enum Style {
         /**
          * No markings
          */
@@ -110,8 +109,7 @@ public interface Horse extends AbstractHorse {
      *
      * @return a {@link Color} representing the horse's group
      */
-    @NotNull
-    public Color getColor();
+    @NotNull Color getColor();
 
     /**
      * Sets the horse's color.
@@ -121,7 +119,7 @@ public interface Horse extends AbstractHorse {
      *
      * @param color a {@link Color} for this horse
      */
-    public void setColor(@NotNull Color color);
+    void setColor(@NotNull Color color);
 
     /**
      * Gets the horse's style.
@@ -132,8 +130,7 @@ public interface Horse extends AbstractHorse {
      *
      * @return a {@link Style} representing the horse's style
      */
-    @NotNull
-    public Style getStyle();
+    @NotNull Style getStyle();
 
     /**
      * Sets the style of this horse.
@@ -144,23 +141,23 @@ public interface Horse extends AbstractHorse {
      *
      * @param style a {@link Style} for this horse
      */
-    public void setStyle(@NotNull Style style);
+    void setStyle(@NotNull Style style);
 
     /**
      * @return carrying chest status
      * @deprecated see {@link ChestedHorse}
      */
     @Deprecated
-    public boolean isCarryingChest();
+    boolean isCarryingChest();
 
     /**
      * @param chest chest
      * @deprecated see {@link ChestedHorse}
      */
     @Deprecated
-    public void setCarryingChest(boolean chest);
+    void setCarryingChest(boolean chest);
 
     @NotNull
     @Override
-    public HorseInventory getInventory();
+    HorseInventory getInventory();
 }
diff --git a/src/main/java/org/bukkit/entity/HumanEntity.java b/src/main/java/org/bukkit/entity/HumanEntity.java
index f0e0710fef5a3e0b722ece7ccf89c3d0f88f8f0f..e828aa3936b7de60bb888b53e418073cb12b3834 100644
--- a/src/main/java/org/bukkit/entity/HumanEntity.java
+++ b/src/main/java/org/bukkit/entity/HumanEntity.java
@@ -28,7 +28,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      */
     @NotNull
     @Override
-    public String getName();
+    String getName();
 
     /**
      * Get the player's inventory.
@@ -38,23 +38,21 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      */
     @NotNull
     @Override
-    public PlayerInventory getInventory();
+    PlayerInventory getInventory();
 
     /**
      * Get the player's EnderChest inventory
      *
      * @return The EnderChest of the player
      */
-    @NotNull
-    public Inventory getEnderChest();
+    @NotNull Inventory getEnderChest();
 
     /**
      * Gets the player's selected main hand
      *
      * @return the players main hand
      */
-    @NotNull
-    public MainHand getMainHand();
+    @NotNull MainHand getMainHand();
 
     /**
      * If the player currently has an inventory window open, this method will
@@ -64,7 +62,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @param value The value to set the property to.
      * @return True if the property was successfully set.
      */
-    public boolean setWindowProperty(@NotNull InventoryView.Property prop, int value);
+    boolean setWindowProperty(@NotNull InventoryView.Property prop, int value);
 
     /**
      * Gets the inventory view the player is currently viewing. If they do not
@@ -72,8 +70,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return The inventory view.
      */
-    @NotNull
-    public InventoryView getOpenInventory();
+    @NotNull InventoryView getOpenInventory();
 
     /**
      * Opens an inventory window with the specified inventory on the top and
@@ -82,8 +79,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @param inventory The inventory to open
      * @return The newly opened inventory view
      */
-    @Nullable
-    public InventoryView openInventory(@NotNull Inventory inventory);
+    @Nullable InventoryView openInventory(@NotNull Inventory inventory);
 
     /**
      * Opens an empty workbench inventory window with the player's inventory
@@ -96,8 +92,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openWorkbench(@Nullable Location location, boolean force);
+    @Nullable InventoryView openWorkbench(@Nullable Location location, boolean force);
 
     /**
      * Opens an empty enchanting inventory window with the player's inventory
@@ -110,15 +105,14 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openEnchanting(@Nullable Location location, boolean force);
+    @Nullable InventoryView openEnchanting(@Nullable Location location, boolean force);
 
     /**
      * Opens an inventory window to the specified inventory view.
      *
      * @param inventory The view to open
      */
-    public void openInventory(@NotNull InventoryView inventory);
+    void openInventory(@NotNull InventoryView inventory);
 
     /**
      * Starts a trade between the player and the villager.
@@ -131,8 +125,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      * opened.
      */
-    @Nullable
-    public InventoryView openMerchant(@NotNull Villager trader, boolean force);
+    @Nullable InventoryView openMerchant(@NotNull Villager trader, boolean force);
 
     /**
      * Starts a trade between the player and the merchant.
@@ -145,8 +138,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      * opened.
      */
-    @Nullable
-    public InventoryView openMerchant(@NotNull Merchant merchant, boolean force);
+    @Nullable InventoryView openMerchant(@NotNull Merchant merchant, boolean force);
 
     // Paper start - Add additional containers
     /**
@@ -160,8 +152,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openAnvil(@Nullable Location location, boolean force);
+    @Nullable InventoryView openAnvil(@Nullable Location location, boolean force);
 
     /**
      * Opens an empty cartography table inventory window with the player's inventory
@@ -174,8 +165,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openCartographyTable(@Nullable Location location, boolean force);
+    @Nullable InventoryView openCartographyTable(@Nullable Location location, boolean force);
 
     /**
      * Opens an empty grindstone inventory window with the player's inventory
@@ -188,8 +178,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openGrindstone(@Nullable Location location, boolean force);
+    @Nullable InventoryView openGrindstone(@Nullable Location location, boolean force);
 
     /**
      * Opens an empty loom inventory window with the player's inventory
@@ -202,8 +191,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openLoom(@Nullable Location location, boolean force);
+    @Nullable InventoryView openLoom(@Nullable Location location, boolean force);
 
     /**
      * Opens an empty smithing table inventory window with the player's inventory
@@ -216,8 +204,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openSmithingTable(@Nullable Location location, boolean force);
+    @Nullable InventoryView openSmithingTable(@Nullable Location location, boolean force);
 
     /**
      * Opens an empty stonecutter inventory window with the player's inventory
@@ -230,14 +217,13 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return The newly opened inventory view, or null if it could not be
      *     opened.
      */
-    @Nullable
-    public InventoryView openStonecutter(@Nullable Location location, boolean force);
+    @Nullable InventoryView openStonecutter(@Nullable Location location, boolean force);
     // Paper end
 
     /**
      * Force-closes the currently open inventory view for this player, if any.
      */
-    public void closeInventory();
+    void closeInventory();
 
     // Paper start
     /**
@@ -245,7 +231,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @param reason why the inventory is closing
      */
-    public void closeInventory(@NotNull org.bukkit.event.inventory.InventoryCloseEvent.Reason reason);
+    void closeInventory(@NotNull org.bukkit.event.inventory.InventoryCloseEvent.Reason reason);
     // Paper end
 
     /**
@@ -256,8 +242,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * methods in {@link PlayerInventory}.
      */
     @Deprecated
-    @NotNull
-    public ItemStack getItemInHand();
+    @NotNull ItemStack getItemInHand();
 
     /**
      * Sets the item to the given ItemStack, this will replace whatever the
@@ -268,7 +253,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * methods in {@link PlayerInventory}.
      */
     @Deprecated
-    public void setItemInHand(@Nullable ItemStack item);
+    void setItemInHand(@Nullable ItemStack item);
 
     /**
      * Returns the ItemStack currently on your cursor, can be empty. Will
@@ -276,8 +261,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return The ItemStack of the item you are currently moving around.
      */
-    @NotNull
-    public ItemStack getItemOnCursor();
+    @NotNull ItemStack getItemOnCursor();
 
     /**
      * Sets the item to the given ItemStack, this will replace whatever the
@@ -286,7 +270,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @param item The ItemStack which will end up in the hand
      */
-    public void setItemOnCursor(@Nullable ItemStack item);
+    void setItemOnCursor(@Nullable ItemStack item);
 
     /**
      * Check whether a cooldown is active on the specified material.
@@ -294,7 +278,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @param material the material to check
      * @return if a cooldown is active on the material
      */
-    public boolean hasCooldown(@NotNull Material material);
+    boolean hasCooldown(@NotNull Material material);
 
     /**
      * Get the cooldown time in ticks remaining for the specified material.
@@ -302,7 +286,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @param material the material to check
      * @return the remaining cooldown time in ticks
      */
-    public int getCooldown(@NotNull Material material);
+    int getCooldown(@NotNull Material material);
 
     /**
      * Set a cooldown on the specified material for a certain amount of ticks.
@@ -317,14 +301,14 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @param material the material to set the cooldown for
      * @param ticks the amount of ticks to set or 0 to remove
      */
-    public void setCooldown(@NotNull Material material, int ticks);
+    void setCooldown(@NotNull Material material, int ticks);
 
     /**
      * Get the sleep ticks of the player. This value may be capped.
      *
      * @return slumber ticks
      */
-    public int getSleepTicks();
+    int getSleepTicks();
 
 
     // Paper start - Potential bed api
@@ -335,8 +319,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return Bed Location if has slept in one, otherwise null.
      */
-    @Nullable
-    public Location getPotentialBedLocation();
+    @Nullable Location getPotentialBedLocation();
     // Paper end
 
     /**
@@ -351,7 +334,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * normally possible
      * @return whether the sleep was successful
      */
-    public boolean sleep(@NotNull Location location, boolean force);
+    boolean sleep(@NotNull Location location, boolean force);
 
     /**
      * Causes the player to wakeup if they are currently sleeping.
@@ -360,7 +343,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * they are currently sleeping in
      * @throws IllegalStateException if not sleeping
      */
-    public void wakeup(boolean setSpawnLocation);
+    void wakeup(boolean setSpawnLocation);
 
     /**
      * Gets the location of the bed the player is currently sleeping in
@@ -368,30 +351,28 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return location
      * @throws IllegalStateException if not sleeping
      */
-    @NotNull
-    public Location getBedLocation();
+    @NotNull Location getBedLocation();
 
     /**
      * Gets this human's current {@link GameMode}
      *
      * @return Current game mode
      */
-    @NotNull
-    public GameMode getGameMode();
+    @NotNull GameMode getGameMode();
 
     /**
      * Sets this human's current {@link GameMode}
      *
      * @param mode New game mode
      */
-    public void setGameMode(@NotNull GameMode mode);
+    void setGameMode(@NotNull GameMode mode);
 
     /**
      * Check if the player is currently blocking (ie with a shield).
      *
      * @return Whether they are blocking.
      */
-    public boolean isBlocking();
+    boolean isBlocking();
 
     /**
      * Check if the player currently has their hand raised (ie about to begin
@@ -399,14 +380,14 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return Whether their hand is raised
      */
-    public boolean isHandRaised();
+    boolean isHandRaised();
 
     /**
      * Get the total amount of experience required for the player to level
      *
      * @return Experience required to level up
      */
-    public int getExpToLevel();
+    int getExpToLevel();
 
     // Paper start
     /**
@@ -415,8 +396,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return The released entity, or null
      */
-    @Nullable
-    public Entity releaseLeftShoulderEntity();
+    @Nullable Entity releaseLeftShoulderEntity();
 
     /**
      * If there is an Entity on this entities left shoulder, it will be released to the world and returned.
@@ -424,8 +404,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return The released entity, or null
      */
-    @Nullable
-    public Entity releaseRightShoulderEntity();
+    @Nullable Entity releaseRightShoulderEntity();
     // Paper end
 
     /**
@@ -436,7 +415,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return A float between 0.0-1.0 representing the progress of the charge
      */
-    public float getAttackCooldown();
+    float getAttackCooldown();
 
     /**
      * Discover a recipe for this player such that it has not already been
@@ -447,7 +426,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return whether or not the recipe was newly discovered
      */
-    public boolean discoverRecipe(@NotNull NamespacedKey recipe);
+    boolean discoverRecipe(@NotNull NamespacedKey recipe);
 
     /**
      * Discover a collection of recipes for this player such that they have not
@@ -461,7 +440,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * none were newly discovered and a number equal to {@code recipes.size()}
      * indicates that all were new
      */
-    public int discoverRecipes(@NotNull Collection<NamespacedKey> recipes);
+    int discoverRecipes(@NotNull Collection<NamespacedKey> recipes);
 
     /**
      * Undiscover a recipe for this player such that it has already been
@@ -473,7 +452,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @return whether or not the recipe was successfully undiscovered (i.e. it
      * was previously discovered)
      */
-    public boolean undiscoverRecipe(@NotNull NamespacedKey recipe);
+    boolean undiscoverRecipe(@NotNull NamespacedKey recipe);
 
     /**
      * Undiscover a collection of recipes for this player such that they have
@@ -487,7 +466,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * were undiscovered and a number equal to {@code recipes.size()} indicates
      * that all were undiscovered
      */
-    public int undiscoverRecipes(@NotNull Collection<NamespacedKey> recipes);
+    int undiscoverRecipes(@NotNull Collection<NamespacedKey> recipes);
 
     /**
      * Check whether or not this entity has discovered the specified recipe.
@@ -496,15 +475,14 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return true if discovered, false otherwise
      */
-    public boolean hasDiscoveredRecipe(@NotNull NamespacedKey recipe);
+    boolean hasDiscoveredRecipe(@NotNull NamespacedKey recipe);
 
     /**
      * Get an immutable set of recipes this entity has discovered.
      *
      * @return all discovered recipes
      */
-    @NotNull
-    public Set<NamespacedKey> getDiscoveredRecipes();
+    @NotNull Set<NamespacedKey> getDiscoveredRecipes();
 
     /**
      * Gets the entity currently perched on the left shoulder or null if no
@@ -518,8 +496,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * serialized entities in Bukkit. Use with care.
      */
     @Deprecated
-    @Nullable
-    public Entity getShoulderEntityLeft();
+    @Nullable Entity getShoulderEntityLeft();
 
     /**
      * Sets the entity currently perched on the left shoulder, or null to
@@ -536,7 +513,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * serialized entities in Bukkit. Use with care.
      */
     @Deprecated
-    public void setShoulderEntityLeft(@Nullable Entity entity);
+    void setShoulderEntityLeft(@Nullable Entity entity);
 
     /**
      * Gets the entity currently perched on the right shoulder or null if no
@@ -550,8 +527,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * serialized entities in Bukkit. Use with care.
      */
     @Deprecated
-    @Nullable
-    public Entity getShoulderEntityRight();
+    @Nullable Entity getShoulderEntityRight();
 
     /**
      * Sets the entity currently perched on the right shoulder, or null to
@@ -568,7 +544,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * serialized entities in Bukkit. Use with care.
      */
     @Deprecated
-    public void setShoulderEntityRight(@Nullable Entity entity);
+    void setShoulderEntityRight(@Nullable Entity entity);
     // Paper start - Add method to open already placed sign
     /**
      * Opens an editor window for the specified sign
@@ -587,7 +563,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      * @param dropAll True to drop entire stack, false to drop 1 of the stack
      * @return True if item was dropped successfully
      */
-    public boolean dropItem(boolean dropAll);
+    boolean dropItem(boolean dropAll);
 
     /**
      * Gets the players current exhaustion level.
@@ -598,14 +574,14 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return Exhaustion level
      */
-    public float getExhaustion();
+    float getExhaustion();
 
     /**
      * Sets the players current exhaustion level
      *
      * @param value Exhaustion level
      */
-    public void setExhaustion(float value);
+    void setExhaustion(float value);
 
     /**
      * Gets the players current saturation level.
@@ -615,28 +591,28 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return Saturation level
      */
-    public float getSaturation();
+    float getSaturation();
 
     /**
      * Sets the players current saturation level
      *
      * @param value Saturation level
      */
-    public void setSaturation(float value);
+    void setSaturation(float value);
 
     /**
      * Gets the players current food level
      *
      * @return Food level
      */
-    public int getFoodLevel();
+    int getFoodLevel();
 
     /**
      * Sets the players current food level
      *
      * @param value New food level
      */
-    public void setFoodLevel(int value);
+    void setFoodLevel(int value);
 
     /**
      * Get the regeneration rate (1 health per x ticks) of
@@ -645,7 +621,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return the regeneration rate
      */
-    public int getSaturatedRegenRate();
+    int getSaturatedRegenRate();
 
     /**
      * Set the regeneration rate (1 health per x ticks) of
@@ -655,7 +631,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @param ticks the amount of ticks to gain 1 health.
      */
-    public void setSaturatedRegenRate(int ticks);
+    void setSaturatedRegenRate(int ticks);
 
     /**
      * Get the regeneration rate (1 health per x ticks) of
@@ -664,7 +640,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return the regeneration rate
      */
-    public int getUnsaturatedRegenRate();
+    int getUnsaturatedRegenRate();
 
     /**
      * Get the regeneration rate (1 health per x ticks) of
@@ -674,7 +650,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @param ticks the amount of ticks to gain 1 health.
      */
-    public void setUnsaturatedRegenRate(int ticks);
+    void setUnsaturatedRegenRate(int ticks);
 
     /**
      * Get the starvation rate (1 health per x ticks) of
@@ -682,7 +658,7 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @return the starvation rate
      */
-    public int getStarvationRate();
+    int getStarvationRate();
 
     /**
      * Get the starvation rate (1 health per x ticks) of
@@ -690,5 +666,5 @@ public interface HumanEntity extends LivingEntity, AnimalTamer, InventoryHolder
      *
      * @param ticks the amount of ticks to lose 1 health
      */
-    public void setStarvationRate(int ticks);
+    void setStarvationRate(int ticks);
 }
diff --git a/src/main/java/org/bukkit/entity/IronGolem.java b/src/main/java/org/bukkit/entity/IronGolem.java
index 655e37cb3a09610a3f3df805d6dcad17d722da62..1eee51a11e3e1595710ebcc159253afbf3d9e785 100644
--- a/src/main/java/org/bukkit/entity/IronGolem.java
+++ b/src/main/java/org/bukkit/entity/IronGolem.java
@@ -10,7 +10,7 @@ public interface IronGolem extends Golem {
      *
      * @return Whether this iron golem was built by a player
      */
-    public boolean isPlayerCreated();
+    boolean isPlayerCreated();
 
     /**
      * Sets whether this iron golem was built by a player or not.
@@ -18,5 +18,5 @@ public interface IronGolem extends Golem {
      * @param playerCreated true if you want to set the iron golem as being
      *     player created, false if you want it to be a natural village golem.
      */
-    public void setPlayerCreated(boolean playerCreated);
+    void setPlayerCreated(boolean playerCreated);
 }
diff --git a/src/main/java/org/bukkit/entity/Item.java b/src/main/java/org/bukkit/entity/Item.java
index 0ee072645ecf1bf5feb74de6960947ef76db366e..37925a3de7ca8d145d8fa7f2b6ea6eb9bd7a9f47 100644
--- a/src/main/java/org/bukkit/entity/Item.java
+++ b/src/main/java/org/bukkit/entity/Item.java
@@ -15,29 +15,28 @@ public interface Item extends Entity {
      *
      * @return An item stack.
      */
-    @NotNull
-    public ItemStack getItemStack();
+    @NotNull ItemStack getItemStack();
 
     /**
      * Sets the item stack associated with this item drop.
      *
      * @param stack An item stack.
      */
-    public void setItemStack(@NotNull ItemStack stack);
+    void setItemStack(@NotNull ItemStack stack);
 
     /**
      * Gets the delay before this Item is available to be picked up by players
      *
      * @return Remaining delay
      */
-    public int getPickupDelay();
+    int getPickupDelay();
 
     /**
      * Sets the delay before this Item is available to be picked up by players
      *
      * @param delay New delay
      */
-    public void setPickupDelay(int delay);
+    void setPickupDelay(int delay);
 
     /**
      * Sets the owner of this item.
@@ -46,15 +45,14 @@ public interface Item extends Entity {
      *
      * @param owner UUID of new owner
      */
-    public void setOwner(@Nullable UUID owner);
+    void setOwner(@Nullable UUID owner);
 
     /**
      * Get the owner of this item.
      *
      * @return UUID of owner
      */
-    @Nullable
-    public UUID getOwner();
+    @Nullable UUID getOwner();
 
     /**
      * Set the thrower of this item.
@@ -64,7 +62,7 @@ public interface Item extends Entity {
      *
      * @param uuid UUID of thrower
      */
-    public void setThrower(@Nullable UUID uuid);
+    void setThrower(@Nullable UUID uuid);
 
     /**
      * Get the thrower of this item.
@@ -73,8 +71,7 @@ public interface Item extends Entity {
      *
      * @return UUID of thrower
      */
-    @Nullable
-    public UUID getThrower();
+    @Nullable UUID getThrower();
 
     // Paper Start
     /**
@@ -82,35 +79,35 @@ public interface Item extends Entity {
      *
      * @return True if non-player entities can pickup
      */
-     public boolean canMobPickup();
+    boolean canMobPickup();
 
     /**
      * Sets if non-player entities can pick this Item up
      *
      * @param canMobPickup True to allow non-player entity pickup
      */
-    public void setCanMobPickup(boolean canMobPickup);
+    void setCanMobPickup(boolean canMobPickup);
 
     /**
      * Gets whether the player can pickup the item or not
      *
      * @return True if a player can pickup the item
      */
-    public boolean canPlayerPickup();
+    boolean canPlayerPickup();
 
     /**
      * Sets whether the item can be picked up or not. Modifies the pickup delay value to do so.
      *
      * @param canPlayerPickup True if the player can pickup the item
      */
-    public void setCanPlayerPickup(boolean canPlayerPickup);
+    void setCanPlayerPickup(boolean canPlayerPickup);
 
     /**
      * Gets whether the item will age and despawn from being on the ground too long
      *
      * @return True if the item will age
      */
-    public boolean willAge();
+    boolean willAge();
 
     /**
      * Sets whether the item will age or not. If the item is not ageing, it will not despawn
@@ -118,6 +115,6 @@ public interface Item extends Entity {
      *
      * @param willAge True if the item should age
      */
-    public void setWillAge(boolean willAge);
+    void setWillAge(boolean willAge);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/ItemFrame.java b/src/main/java/org/bukkit/entity/ItemFrame.java
index 1568bd662747c73a98a02f4e0197d8b14adc1d65..8b79d61c19036066a35b57e4b2ddecbfb26b4721 100644
--- a/src/main/java/org/bukkit/entity/ItemFrame.java
+++ b/src/main/java/org/bukkit/entity/ItemFrame.java
@@ -15,15 +15,14 @@ public interface ItemFrame extends Hanging {
      *
      * @return a defensive copy the item in this item frame
      */
-    @NotNull
-    public ItemStack getItem();
+    @NotNull ItemStack getItem();
 
     /**
      * Set the item in this frame
      *
      * @param item the new item
      */
-    public void setItem(@Nullable ItemStack item);
+    void setItem(@Nullable ItemStack item);
 
     /**
      * Set the item in this frame
@@ -31,7 +30,7 @@ public interface ItemFrame extends Hanging {
      * @param item the new item
      * @param playSound whether or not to play the item placement sound
      */
-    public void setItem(@Nullable ItemStack item, boolean playSound);
+    void setItem(@Nullable ItemStack item, boolean playSound);
 
     /**
      * Gets the chance of the item being dropped upon this frame's destruction.
@@ -63,8 +62,7 @@ public interface ItemFrame extends Hanging {
      *
      * @return the direction
      */
-    @NotNull
-    public Rotation getRotation();
+    @NotNull Rotation getRotation();
 
     /**
      * Set the rotation of the frame's item
@@ -72,7 +70,7 @@ public interface ItemFrame extends Hanging {
      * @param rotation the new rotation
      * @throws IllegalArgumentException if rotation is null
      */
-    public void setRotation(@NotNull Rotation rotation) throws IllegalArgumentException;
+    void setRotation(@NotNull Rotation rotation) throws IllegalArgumentException;
 
     /**
      * Returns whether the item frame is be visible or not.
diff --git a/src/main/java/org/bukkit/entity/LightningStrike.java b/src/main/java/org/bukkit/entity/LightningStrike.java
index 2c81a3f685588431a3c7675c84b35a28975232af..0f540857fec24d7c57c1753e43786c62f8395fe9 100644
--- a/src/main/java/org/bukkit/entity/LightningStrike.java
+++ b/src/main/java/org/bukkit/entity/LightningStrike.java
@@ -12,10 +12,10 @@ public interface LightningStrike extends Entity {
      *
      * @return whether the strike is an effect
      */
-    public boolean isEffect();
+    boolean isEffect();
 
     // Spigot start
-    public class Spigot extends Entity.Spigot {
+    class Spigot extends Entity.Spigot {
 
         /*
          * Returns whether the strike is silent.
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 9f0645dc5f76ee9ef73d88f768025429e5a9edf7..7aee4a34b2070467e1483d983d4f05d2c68d229b 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -31,7 +31,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return height of the living entity's eyes above its location
      */
-    public double getEyeHeight();
+    double getEyeHeight();
 
     /**
      * Gets the height of the living entity's eyes above its Location.
@@ -40,15 +40,14 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     sneaking and gliding will be ignored
      * @return height of the living entity's eyes above its location
      */
-    public double getEyeHeight(boolean ignorePose);
+    double getEyeHeight(boolean ignorePose);
 
     /**
      * Get a Location detailing the current eye position of the living entity.
      *
      * @return a location at the eyes of the living entity
      */
-    @NotNull
-    public Location getEyeLocation();
+    @NotNull Location getEyeLocation();
 
     /**
      * Gets all blocks along the living entity's line of sight.
@@ -63,8 +62,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return list containing all blocks along the living entity's line of
      *     sight
      */
-    @NotNull
-    public List<Block> getLineOfSight(@Nullable Set<Material> transparent, int maxDistance);
+    @NotNull List<Block> getLineOfSight(@Nullable Set<Material> transparent, int maxDistance);
 
     /**
      * Gets the block that the living entity has targeted.
@@ -79,8 +77,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     by server by at least 100 blocks, no less)
      * @return block that the living entity has targeted
      */
-    @NotNull
-    public Block getTargetBlock(@Nullable Set<Material> transparent, int maxDistance);
+    @NotNull Block getTargetBlock(@Nullable Set<Material> transparent, int maxDistance);
 
     // Paper start
     /**
@@ -91,7 +88,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no block is within maxDistance
      */
     @Nullable
-    public default Block getTargetBlock(int maxDistance) {
+    default Block getTargetBlock(int maxDistance) {
         return getTargetBlock(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -103,8 +100,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return block that the living entity has targeted,
      *     or null if no block is within maxDistance
      */
-    @Nullable
-    public Block getTargetBlock(int maxDistance, @NotNull com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode);
+    @Nullable Block getTargetBlock(int maxDistance, @NotNull com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode);
 
     /**
      * Gets the blockface of that block that the living entity has targeted, ignoring fluids
@@ -114,7 +110,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no block is targeted
      */
     @Nullable
-    public default org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance) {
+    default org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance) {
         return getTargetBlockFace(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -126,8 +122,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return blockface of the block that the living entity has targeted,
      *     or null if no block is targeted
      */
-    @Nullable
-    public org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance, @NotNull com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode);
+    @Nullable org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance, @NotNull com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode);
 
     /**
      * Gets information about the block the living entity has targeted, ignoring fluids
@@ -137,7 +132,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no block is targeted
      */
     @Nullable
-    public default com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance) {
+    default com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance) {
         return getTargetBlockInfo(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -149,8 +144,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return TargetBlockInfo about the block the living entity has targeted,
      *     or null if no block is targeted
      */
-    @Nullable
-    public com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance, @NotNull com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode);
+    @Nullable com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance, @NotNull com.destroystokyo.paper.block.TargetBlockInfo.FluidMode fluidMode);
 
     /**
      * Gets information about the entity being targeted
@@ -159,7 +153,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return entity being targeted, or null if no entity is targeted
      */
     @Nullable
-    public default Entity getTargetEntity(int maxDistance) {
+    default Entity getTargetEntity(int maxDistance) {
         return getTargetEntity(maxDistance, false);
     }
 
@@ -170,8 +164,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param ignoreBlocks true to scan through blocks
      * @return entity being targeted, or null if no entity is targeted
      */
-    @Nullable
-    public Entity getTargetEntity(int maxDistance, boolean ignoreBlocks);
+    @Nullable Entity getTargetEntity(int maxDistance, boolean ignoreBlocks);
 
     /**
      * Gets information about the entity being targeted
@@ -181,7 +174,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no entity is targeted
      */
     @Nullable
-    public default com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(int maxDistance) {
+    default com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(int maxDistance) {
         return getTargetEntityInfo(maxDistance, false);
     }
 
@@ -193,8 +186,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return TargetEntityInfo about the entity being targeted,
      *     or null if no entity is targeted
      */
-    @Nullable
-    public com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(int maxDistance, boolean ignoreBlocks);
+    @Nullable com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(int maxDistance, boolean ignoreBlocks);
     // Paper end
 
     /**
@@ -210,8 +202,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return list containing the last 2 blocks along the living entity's
      *     line of sight
      */
-    @NotNull
-    public List<Block> getLastTwoTargetBlocks(@Nullable Set<Material> transparent, int maxDistance);
+    @NotNull List<Block> getLastTwoTargetBlocks(@Nullable Set<Material> transparent, int maxDistance);
 
     /**
      * Gets the block that the living entity has targeted.
@@ -226,8 +217,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return block that the living entity has targeted
      * @see #getTargetBlockExact(int, org.bukkit.FluidCollisionMode)
      */
-    @Nullable
-    public Block getTargetBlockExact(int maxDistance);
+    @Nullable Block getTargetBlockExact(int maxDistance);
 
     /**
      * Gets the block that the living entity has targeted.
@@ -242,8 +232,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return block that the living entity has targeted
      * @see #rayTraceBlocks(double, FluidCollisionMode)
      */
-    @Nullable
-    public Block getTargetBlockExact(int maxDistance, @NotNull FluidCollisionMode fluidCollisionMode);
+    @Nullable Block getTargetBlockExact(int maxDistance, @NotNull FluidCollisionMode fluidCollisionMode);
 
     /**
      * Performs a ray trace that provides information on the targeted block.
@@ -259,8 +248,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     is no targeted block in range
      * @see #rayTraceBlocks(double, FluidCollisionMode)
      */
-    @Nullable
-    public RayTraceResult rayTraceBlocks(double maxDistance);
+    @Nullable RayTraceResult rayTraceBlocks(double maxDistance);
 
     /**
      * Performs a ray trace that provides information on the targeted block.
@@ -276,8 +264,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     is no targeted block in range
      * @see World#rayTraceBlocks(Location, Vector, double, FluidCollisionMode)
      */
-    @Nullable
-    public RayTraceResult rayTraceBlocks(double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode);
+    @Nullable RayTraceResult rayTraceBlocks(double maxDistance, @NotNull FluidCollisionMode fluidCollisionMode);
 
     /**
      * Returns the amount of air that the living entity has remaining, in
@@ -285,56 +272,56 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return amount of air remaining
      */
-    public int getRemainingAir();
+    int getRemainingAir();
 
     /**
      * Sets the amount of air that the living entity has remaining, in ticks.
      *
      * @param ticks amount of air remaining
      */
-    public void setRemainingAir(int ticks);
+    void setRemainingAir(int ticks);
 
     /**
      * Returns the maximum amount of air the living entity can have, in ticks.
      *
      * @return maximum amount of air
      */
-    public int getMaximumAir();
+    int getMaximumAir();
 
     /**
      * Sets the maximum amount of air the living entity can have, in ticks.
      *
      * @param ticks maximum amount of air
      */
-    public void setMaximumAir(int ticks);
+    void setMaximumAir(int ticks);
 
     /**
      * Gets the time in ticks until the next arrow leaves the entity's body.
      *
      * @return ticks until arrow leaves
      */
-    public int getArrowCooldown();
+    int getArrowCooldown();
 
     /**
      * Sets the time in ticks until the next arrow leaves the entity's body.
      *
      * @param ticks time until arrow leaves
      */
-    public void setArrowCooldown(int ticks);
+    void setArrowCooldown(int ticks);
 
     /**
      * Gets the amount of arrows in an entity's body.
      *
      * @return amount of arrows in body
      */
-    public int getArrowsInBody();
+    int getArrowsInBody();
 
     /**
      * Set the amount of arrows in the entity's body.
      *
      * @param count amount of arrows in entity's body
      */
-    public void setArrowsInBody(int count);
+    void setArrowsInBody(int count);
 
     /**
      * Returns the living entity's current maximum no damage ticks.
@@ -344,14 +331,14 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return maximum no damage ticks
      */
-    public int getMaximumNoDamageTicks();
+    int getMaximumNoDamageTicks();
 
     /**
      * Sets the living entity's current maximum no damage ticks.
      *
      * @param ticks maximum amount of no damage ticks
      */
-    public void setMaximumNoDamageTicks(int ticks);
+    void setMaximumNoDamageTicks(int ticks);
 
     /**
      * Returns the living entity's last damage taken in the current no damage
@@ -362,28 +349,28 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return damage taken since the last no damage ticks time period
      */
-    public double getLastDamage();
+    double getLastDamage();
 
     /**
      * Sets the damage dealt within the current no damage ticks time period.
      *
      * @param damage amount of damage
      */
-    public void setLastDamage(double damage);
+    void setLastDamage(double damage);
 
     /**
      * Returns the living entity's current no damage ticks.
      *
      * @return amount of no damage ticks
      */
-    public int getNoDamageTicks();
+    int getNoDamageTicks();
 
     /**
      * Sets the living entity's current no damage ticks.
      *
      * @param ticks amount of no damage ticks
      */
-    public void setNoDamageTicks(int ticks);
+    void setNoDamageTicks(int ticks);
 
     /**
      * Gets the player identified as the killer of the living entity.
@@ -392,8 +379,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return killer player, or null if none found
      */
-    @Nullable
-    public Player getKiller();
+    @Nullable Player getKiller();
 
     // Paper start
     /**
@@ -401,7 +387,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @param killer player
      */
-    public void setKiller(@Nullable Player killer);
+    void setKiller(@Nullable Player killer);
     // Paper end
 
     /**
@@ -410,7 +396,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param effect PotionEffect to be added
      * @return whether the effect could be added
      */
-    public boolean addPotionEffect(@NotNull PotionEffect effect);
+    boolean addPotionEffect(@NotNull PotionEffect effect);
 
     /**
      * Adds the given {@link PotionEffect} to the living entity.
@@ -425,7 +411,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * now supported.
      */
     @Deprecated
-    public boolean addPotionEffect(@NotNull PotionEffect effect, boolean force);
+    boolean addPotionEffect(@NotNull PotionEffect effect, boolean force);
 
     /**
      * Attempts to add all of the given {@link PotionEffect} to the living
@@ -434,7 +420,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param effects the effects to add
      * @return whether all of the effects could be added
      */
-    public boolean addPotionEffects(@NotNull Collection<PotionEffect> effects);
+    boolean addPotionEffects(@NotNull Collection<PotionEffect> effects);
 
     /**
      * Returns whether the living entity already has an existing effect of
@@ -443,7 +429,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param type the potion type to check
      * @return whether the living entity has this potion effect active on them
      */
-    public boolean hasPotionEffect(@NotNull PotionEffectType type);
+    boolean hasPotionEffect(@NotNull PotionEffectType type);
 
     /**
      * Returns the active {@link PotionEffect} of the specified type.
@@ -453,15 +439,14 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param type the potion type to check
      * @return the effect active on this entity, or null if not active.
      */
-    @Nullable
-    public PotionEffect getPotionEffect(@NotNull PotionEffectType type);
+    @Nullable PotionEffect getPotionEffect(@NotNull PotionEffectType type);
 
     /**
      * Removes any effects present of the given {@link PotionEffectType}.
      *
      * @param type the potion type to remove
      */
-    public void removePotionEffect(@NotNull PotionEffectType type);
+    void removePotionEffect(@NotNull PotionEffectType type);
 
     /**
      * Returns all currently active {@link PotionEffect}s on the living
@@ -469,8 +454,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return a collection of {@link PotionEffect}s
      */
-    @NotNull
-    public Collection<PotionEffect> getActivePotionEffects();
+    @NotNull Collection<PotionEffect> getActivePotionEffects();
 
     /**
      * Checks whether the living entity has block line of sight to another.
@@ -481,7 +465,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param other the entity to determine line of sight to
      * @return true if there is a line of sight, false if not
      */
-    public boolean hasLineOfSight(@NotNull Entity other);
+    boolean hasLineOfSight(@NotNull Entity other);
 
     /**
      * Returns if the living entity despawns when away from players or not.
@@ -490,7 +474,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return true if the living entity is removed when away from players
      */
-    public boolean getRemoveWhenFarAway();
+    boolean getRemoveWhenFarAway();
 
     /**
      * Sets whether or not the living entity despawns when away from players
@@ -498,36 +482,35 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @param remove the removal status
      */
-    public void setRemoveWhenFarAway(boolean remove);
+    void setRemoveWhenFarAway(boolean remove);
 
     /**
      * Gets the inventory with the equipment worn by the living entity.
      *
      * @return the living entity's inventory
      */
-    @Nullable
-    public EntityEquipment getEquipment();
+    @Nullable EntityEquipment getEquipment();
 
     /**
      * Sets whether or not the living entity can pick up items.
      *
      * @param pickup whether or not the living entity can pick up items
      */
-    public void setCanPickupItems(boolean pickup);
+    void setCanPickupItems(boolean pickup);
 
     /**
      * Gets if the living entity can pick up items.
      *
      * @return whether or not the living entity can pick up items
      */
-    public boolean getCanPickupItems();
+    boolean getCanPickupItems();
 
     /**
      * Returns whether the entity is currently leashed.
      *
      * @return whether the entity is leashed
      */
-    public boolean isLeashed();
+    boolean isLeashed();
 
     /**
      * Gets the entity that is currently leading this entity.
@@ -535,8 +518,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return the entity holding the leash
      * @throws IllegalStateException if not currently leashed
      */
-    @NotNull
-    public Entity getLeashHolder() throws IllegalStateException;
+    @NotNull Entity getLeashHolder() throws IllegalStateException;
 
     /**
      * Sets the leash on this entity to be held by the supplied entity.
@@ -548,13 +530,13 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param holder the entity to leash this entity to, or null to unleash
      * @return whether the operation was successful
      */
-    public boolean setLeashHolder(@Nullable Entity holder);
+    boolean setLeashHolder(@Nullable Entity holder);
 
     /**
      * Checks to see if an entity is gliding, such as using an Elytra.
      * @return True if this entity is gliding.
      */
-    public boolean isGliding();
+    boolean isGliding();
 
     /**
      * Makes entity start or stop gliding. This will work even if an Elytra
@@ -562,14 +544,14 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * unless an event-cancelling mechanism is put in place.
      * @param gliding True if the entity is gliding.
      */
-    public void setGliding(boolean gliding);
+    void setGliding(boolean gliding);
 
     /**
      * Checks to see if an entity is swimming.
      *
      * @return True if this entity is swimming.
      */
-    public boolean isSwimming();
+    boolean isSwimming();
 
     /**
      * Makes entity start or stop swimming.
@@ -578,21 +560,21 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @param swimming True if the entity is swimming.
      */
-    public void setSwimming(boolean swimming);
+    void setSwimming(boolean swimming);
 
     /**
      * Checks to see if an entity is currently using the Riptide enchantment.
      *
      * @return True if this entity is currently riptiding.
      */
-    public boolean isRiptiding();
+    boolean isRiptiding();
 
     /**
      * Returns whether this entity is slumbering.
      *
      * @return slumber state
      */
-    public boolean isSleeping();
+    boolean isSleeping();
 
     /**
      * Sets whether an entity will have AI.
@@ -621,7 +603,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @param target entity to attack.
      */
-    public void attack(@NotNull Entity target);
+    void attack(@NotNull Entity target);
 
     /**
      * Makes this entity swing their main hand.
@@ -629,7 +611,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * This method does nothing if this entity does not have an animation for
      * swinging their main hand.
      */
-    public void swingMainHand();
+    void swingMainHand();
 
     /**
      * Makes this entity swing their off hand.
@@ -637,7 +619,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * This method does nothing if this entity does not have an animation for
      * swinging their off hand.
      */
-    public void swingOffHand();
+    void swingOffHand();
 
     /**
      * Set if this entity will be subject to collisions with other entities.
@@ -714,22 +696,21 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @return the entity category
      */
-    @NotNull
-    public EntityCategory getCategory();
+    @NotNull EntityCategory getCategory();
 
     /**
      * Sets whether the entity is invisible or not.
      *
      * @param invisible If the entity is invisible
      */
-    public void setInvisible(boolean invisible);
+    void setInvisible(boolean invisible);
 
     /**
      * Gets whether the entity is invisible or not.
      *
      * @return Whether the entity is invisible
      */
-    public boolean isInvisible();
+    boolean isInvisible();
 
     // Paper start
     /**
diff --git a/src/main/java/org/bukkit/entity/Llama.java b/src/main/java/org/bukkit/entity/Llama.java
index d23226ccb0f6c25028f000ce31346cd0a8898e6a..c8687d392a10efd8f11c3592d02211d7d8baf5cb 100644
--- a/src/main/java/org/bukkit/entity/Llama.java
+++ b/src/main/java/org/bukkit/entity/Llama.java
@@ -12,7 +12,7 @@ public interface Llama extends ChestedHorse, RangedEntity { // Paper
     /**
      * Represents the base color that the llama has.
      */
-    public enum Color {
+    enum Color {
 
         /**
          * A cream-colored llama.
@@ -29,7 +29,7 @@ public interface Llama extends ChestedHorse, RangedEntity { // Paper
         /**
          * A gray llama.
          */
-        GRAY;
+        GRAY
     }
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Minecart.java b/src/main/java/org/bukkit/entity/Minecart.java
index 53b042f8ebbbf6ee77435b93d4e89371375cc515..5fde8e8cd3d36bb887944694c2e8307625aaf5fb 100644
--- a/src/main/java/org/bukkit/entity/Minecart.java
+++ b/src/main/java/org/bukkit/entity/Minecart.java
@@ -17,14 +17,14 @@ public interface Minecart extends Vehicle {
      *
      * @param damage over 40 to "kill" a minecart
      */
-    public void setDamage(double damage);
+    void setDamage(double damage);
 
     /**
      * Gets a minecart's damage.
      *
      * @return The damage
      */
-    public double getDamage();
+    double getDamage();
 
     /**
      * Gets the maximum speed of a minecart. The speed is unrelated to the
@@ -32,7 +32,7 @@ public interface Minecart extends Vehicle {
      *
      * @return The max speed
      */
-    public double getMaxSpeed();
+    double getMaxSpeed();
 
     /**
      * Sets the maximum speed of a minecart. Must be nonnegative. Default is
@@ -40,7 +40,7 @@ public interface Minecart extends Vehicle {
      *
      * @param speed The max speed
      */
-    public void setMaxSpeed(double speed);
+    void setMaxSpeed(double speed);
 
     /**
      * Returns whether this minecart will slow down faster without a passenger
@@ -48,7 +48,7 @@ public interface Minecart extends Vehicle {
      *
      * @return Whether it decelerates faster
      */
-    public boolean isSlowWhenEmpty();
+    boolean isSlowWhenEmpty();
 
     /**
      * Sets whether this minecart will slow down faster without a passenger
@@ -56,7 +56,7 @@ public interface Minecart extends Vehicle {
      *
      * @param slow Whether it will decelerate faster
      */
-    public void setSlowWhenEmpty(boolean slow);
+    void setSlowWhenEmpty(boolean slow);
 
     /**
      * Gets the flying velocity modifier. Used for minecarts that are in
@@ -65,8 +65,7 @@ public interface Minecart extends Vehicle {
      *
      * @return The vector factor
      */
-    @NotNull
-    public Vector getFlyingVelocityMod();
+    @NotNull Vector getFlyingVelocityMod();
 
     /**
      * Sets the flying velocity modifier. Used for minecarts that are in
@@ -75,7 +74,7 @@ public interface Minecart extends Vehicle {
      *
      * @param flying velocity modifier vector
      */
-    public void setFlyingVelocityMod(@NotNull Vector flying);
+    void setFlyingVelocityMod(@NotNull Vector flying);
 
     /**
      * Gets the derailed velocity modifier. Used for minecarts that are on the
@@ -85,8 +84,7 @@ public interface Minecart extends Vehicle {
      *
      * @return derailed visible speed
      */
-    @NotNull
-    public Vector getDerailedVelocityMod();
+    @NotNull Vector getDerailedVelocityMod();
 
     /**
      * Sets the derailed velocity modifier. Used for minecarts that are on the
@@ -95,7 +93,7 @@ public interface Minecart extends Vehicle {
      *
      * @param derailed visible speed
      */
-    public void setDerailedVelocityMod(@NotNull Vector derailed);
+    void setDerailedVelocityMod(@NotNull Vector derailed);
 
     /**
      * Sets the display block for this minecart.
@@ -103,7 +101,7 @@ public interface Minecart extends Vehicle {
      *
      * @param material the material to set as display block.
      */
-    public void setDisplayBlock(@Nullable MaterialData material);
+    void setDisplayBlock(@Nullable MaterialData material);
 
     /**
      * Gets the display block for this minecart.
@@ -111,8 +109,7 @@ public interface Minecart extends Vehicle {
      *
      * @return the block displayed by this minecart.
      */
-    @NotNull
-    public MaterialData getDisplayBlock();
+    @NotNull MaterialData getDisplayBlock();
 
     /**
      * Sets the display block for this minecart.
@@ -120,7 +117,7 @@ public interface Minecart extends Vehicle {
      *
      * @param blockData the material to set as display block.
      */
-    public void setDisplayBlockData(@Nullable BlockData blockData);
+    void setDisplayBlockData(@Nullable BlockData blockData);
 
     /**
      * Gets the display block for this minecart.
@@ -128,22 +125,21 @@ public interface Minecart extends Vehicle {
      *
      * @return the block displayed by this minecart.
      */
-    @NotNull
-    public BlockData getDisplayBlockData();
+    @NotNull BlockData getDisplayBlockData();
 
     /**
      * Sets the offset of the display block.
      *
      * @param offset the block offset to set for this minecart.
      */
-    public void setDisplayBlockOffset(int offset);
+    void setDisplayBlockOffset(int offset);
 
     /**
      * Gets the offset of the display block.
      *
      * @return the current block offset for this minecart.
      */
-    public int getDisplayBlockOffset();
+    int getDisplayBlockOffset();
 
     // Paper start
     /**
@@ -151,7 +147,6 @@ public interface Minecart extends Vehicle {
      *
      * @return the minecart material.
      */
-    @NotNull
-    public Material getMinecartMaterial();
+    @NotNull Material getMinecartMaterial();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/Mob.java b/src/main/java/org/bukkit/entity/Mob.java
index d726453c041a980576312b6bee96a07837f37974..83c7f722ecadbafcf25799c514aaad0cb7ae2c67 100644
--- a/src/main/java/org/bukkit/entity/Mob.java
+++ b/src/main/java/org/bukkit/entity/Mob.java
@@ -33,15 +33,14 @@ public interface Mob extends LivingEntity, Lootable {
      *
      * @param target New LivingEntity to target, or null to clear the target
      */
-    public void setTarget(@Nullable LivingEntity target);
+    void setTarget(@Nullable LivingEntity target);
 
     /**
      * Gets the current target of this Mob
      *
      * @return Current target of this creature, or null if none exists
      */
-    @Nullable
-    public LivingEntity getTarget();
+    @Nullable LivingEntity getTarget();
 
     /**
      * Sets whether this mob is aware of its surroundings.
@@ -52,7 +51,7 @@ public interface Mob extends LivingEntity, Lootable {
      *
      * @param aware whether the mob is aware
      */
-    public void setAware(boolean aware);
+    void setAware(boolean aware);
 
     /**
      * Gets whether this mob is aware of its surroundings.
@@ -63,5 +62,5 @@ public interface Mob extends LivingEntity, Lootable {
      *
      * @return whether the mob is aware
      */
-    public boolean isAware();
+    boolean isAware();
 }
diff --git a/src/main/java/org/bukkit/entity/MushroomCow.java b/src/main/java/org/bukkit/entity/MushroomCow.java
index 939a3dbfcf38f38e4e39d28973ef723157ce0a50..48233dd2d2c0185ae08c25077cb2f6e9a41126ae 100644
--- a/src/main/java/org/bukkit/entity/MushroomCow.java
+++ b/src/main/java/org/bukkit/entity/MushroomCow.java
@@ -12,20 +12,19 @@ public interface MushroomCow extends Cow {
      *
      * @return cow variant
      */
-    @NotNull
-    public Variant getVariant();
+    @NotNull Variant getVariant();
 
     /**
      * Set the variant of this cow.
      *
      * @param variant cow variant
      */
-    public void setVariant(@NotNull Variant variant);
+    void setVariant(@NotNull Variant variant);
 
     /**
      * Represents the variant of a cow - ie its color.
      */
-    public enum Variant {
+    enum Variant {
         /**
          * Red mushroom cow.
          */
@@ -33,6 +32,6 @@ public interface MushroomCow extends Cow {
         /**
          * Brown mushroom cow.
          */
-        BROWN;
+        BROWN
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Ocelot.java b/src/main/java/org/bukkit/entity/Ocelot.java
index c20b8e559badb8feb97c2c069e2c36de73ce10ae..b9c44cda331d31ce3db6dda6df776b87375f1e2e 100644
--- a/src/main/java/org/bukkit/entity/Ocelot.java
+++ b/src/main/java/org/bukkit/entity/Ocelot.java
@@ -14,15 +14,14 @@ public interface Ocelot extends Animals {
      *
      * @return Type of the cat.
      */
-    @NotNull
-    public Type getCatType();
+    @NotNull Type getCatType();
 
     /**
      * Sets the current type of this cat.
      *
      * @param type New type of this cat.
      */
-    public void setCatType(@NotNull Type type);
+    void setCatType(@NotNull Type type);
 
     /**
      * Represents the various different cat types there are.
@@ -30,7 +29,7 @@ public interface Ocelot extends Animals {
      * @deprecated Cats are now a separate entity.
      */
     @Deprecated
-    public enum Type {
+    enum Type {
         WILD_OCELOT(0),
         BLACK_CAT(1),
         RED_CAT(2),
@@ -45,7 +44,7 @@ public interface Ocelot extends Animals {
             }
         }
 
-        private Type(int id) {
+        Type(int id) {
             this.id = id;
         }
 
diff --git a/src/main/java/org/bukkit/entity/Painting.java b/src/main/java/org/bukkit/entity/Painting.java
index 19e9582017fb2ac6281fb6992e24f1eaa79906f4..7dbb55b515042f0bcfaceb65fadb3e7f71934139 100644
--- a/src/main/java/org/bukkit/entity/Painting.java
+++ b/src/main/java/org/bukkit/entity/Painting.java
@@ -14,8 +14,7 @@ public interface Painting extends Hanging {
      *
      * @return The art
      */
-    @NotNull
-    public Art getArt();
+    @NotNull Art getArt();
 
     /**
      * Set the art on this painting
@@ -24,7 +23,7 @@ public interface Painting extends Hanging {
      * @return False if the new art won't fit at the painting's current
      *     location
      */
-    public boolean setArt(@NotNull Art art);
+    boolean setArt(@NotNull Art art);
 
     /**
      * Set the art on this painting
@@ -37,5 +36,5 @@ public interface Painting extends Hanging {
      * @return False if force was false and the new art won't fit at the
      *     painting's current location
      */
-    public boolean setArt(@NotNull Art art, boolean force);
+    boolean setArt(@NotNull Art art, boolean force);
 }
diff --git a/src/main/java/org/bukkit/entity/Panda.java b/src/main/java/org/bukkit/entity/Panda.java
index a6a7429ed2e1eefb2b12b7480ed74fcc3963a864..a73dab225f715559600af18cd811a73bcc6a7268 100644
--- a/src/main/java/org/bukkit/entity/Panda.java
+++ b/src/main/java/org/bukkit/entity/Panda.java
@@ -37,7 +37,7 @@ public interface Panda extends Animals {
      */
     void setHiddenGene(@NotNull Gene gene);
 
-    public enum Gene {
+    enum Gene {
 
         NORMAL(false),
         LAZY(false),
@@ -49,7 +49,7 @@ public interface Panda extends Animals {
 
         private final boolean recessive;
 
-        private Gene(boolean recessive) {
+        Gene(boolean recessive) {
             this.recessive = recessive;
         }
 
diff --git a/src/main/java/org/bukkit/entity/Parrot.java b/src/main/java/org/bukkit/entity/Parrot.java
index 46c295cfad992e8e1b04e9fc1cbb9dfd9bbe084e..959a5163c4a870936113bc2a90c844ce0b3518c3 100644
--- a/src/main/java/org/bukkit/entity/Parrot.java
+++ b/src/main/java/org/bukkit/entity/Parrot.java
@@ -12,20 +12,19 @@ public interface Parrot extends Tameable, Sittable {
      *
      * @return parrot variant
      */
-    @NotNull
-    public Variant getVariant();
+    @NotNull Variant getVariant();
 
     /**
      * Set the variant of this parrot.
      *
      * @param variant parrot variant
      */
-    public void setVariant(@NotNull Variant variant);
+    void setVariant(@NotNull Variant variant);
 
     /**
      * Represents the variant of a parrot - ie its color.
      */
-    public enum Variant {
+    enum Variant {
         /**
          * Classic parrot - red with colored wingtips.
          */
@@ -45,6 +44,6 @@ public interface Parrot extends Tameable, Sittable {
         /**
          * Gray colored parrot.
          */
-        GRAY;
+        GRAY
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Phantom.java b/src/main/java/org/bukkit/entity/Phantom.java
index ed4d417c2deefb78807cb61b01df5afcd334d754..d48cf3da61de3c00e04faf3ed2895ea7f9b77883 100644
--- a/src/main/java/org/bukkit/entity/Phantom.java
+++ b/src/main/java/org/bukkit/entity/Phantom.java
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -11,12 +10,12 @@ public interface Phantom extends Flying {
     /**
      * @return The size of the phantom
      */
-    public int getSize();
+    int getSize();
 
     /**
      * @param sz The new size of the phantom.
      */
-    public void setSize(int sz);
+    void setSize(int sz);
 
     // Paper start
     /**
@@ -24,7 +23,6 @@ public interface Phantom extends Flying {
      *
      * @return UUID
      */
-    @Nullable
-    public java.util.UUID getSpawningEntity();
+    @Nullable java.util.UUID getSpawningEntity();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/PigZombie.java b/src/main/java/org/bukkit/entity/PigZombie.java
index ae9eaaa8e38e1d9dfc459926c7fc51ddb89de84a..4557533c794310235437a8c32d135ae2e4fdd007 100644
--- a/src/main/java/org/bukkit/entity/PigZombie.java
+++ b/src/main/java/org/bukkit/entity/PigZombie.java
@@ -40,7 +40,7 @@ public interface PigZombie extends Zombie {
      * @return false
      */
     @Override
-    public boolean isConverting();
+    boolean isConverting();
 
     /**
      * <b>Not applicable to this entity</b>
@@ -48,7 +48,7 @@ public interface PigZombie extends Zombie {
      * @return UnsuppotedOperationException
      */
     @Override
-    public int getConversionTime();
+    int getConversionTime();
 
     /**
      * <b>Not applicable to this entity</b>
@@ -56,5 +56,5 @@ public interface PigZombie extends Zombie {
      * @param time unused
      */
     @Override
-    public void setConversionTime(int time);
+    void setConversionTime(int time);
 }
diff --git a/src/main/java/org/bukkit/entity/Piglin.java b/src/main/java/org/bukkit/entity/Piglin.java
index 6e106e1291370416f53a597b48822d3e839ee73d..f15d775379cf22c23c33f173c9430d427602ced1 100644
--- a/src/main/java/org/bukkit/entity/Piglin.java
+++ b/src/main/java/org/bukkit/entity/Piglin.java
@@ -12,12 +12,12 @@ public interface Piglin extends PiglinAbstract, RangedEntity { // Paper
      *
      * @return Whether the piglin is able to hunt hoglins
      */
-    public boolean isAbleToHunt();
+    boolean isAbleToHunt();
 
     /**
      * Sets whether the piglin is able to hunt hoglins.
      *
      * @param flag Whether the piglin is able to hunt hoglins.
      */
-    public void setIsAbleToHunt(boolean flag);
+    void setIsAbleToHunt(boolean flag);
 }
diff --git a/src/main/java/org/bukkit/entity/PiglinAbstract.java b/src/main/java/org/bukkit/entity/PiglinAbstract.java
index 87f4b7ad7c0a95a7123d142fa023c5da5c760341..bf9ede3a041e2d5619bce5f798704a51bba8804d 100644
--- a/src/main/java/org/bukkit/entity/PiglinAbstract.java
+++ b/src/main/java/org/bukkit/entity/PiglinAbstract.java
@@ -10,14 +10,14 @@ public interface PiglinAbstract extends Monster, Ageable {
      *
      * @return Whether the piglin is immune to zombification
      */
-    public boolean isImmuneToZombification();
+    boolean isImmuneToZombification();
 
     /**
      * Sets whether the piglin is immune to zombification.
      *
      * @param flag Whether the piglin is immune to zombification
      */
-    public void setImmuneToZombification(boolean flag);
+    void setImmuneToZombification(boolean flag);
 
     /**
      * Gets the amount of ticks until this entity will be converted to a
@@ -28,7 +28,7 @@ public interface PiglinAbstract extends Monster, Ageable {
      * @return conversion time
      * @throws IllegalStateException if {@link #isConverting()} is false.
      */
-    public int getConversionTime();
+    int getConversionTime();
 
     /**
      * Sets the amount of ticks until this entity will be converted to a
@@ -40,7 +40,7 @@ public interface PiglinAbstract extends Monster, Ageable {
      *
      * @param time new conversion time
      */
-    public void setConversionTime(int time);
+    void setConversionTime(int time);
 
     /**
      * Get if this entity is in the process of converting to a Zombified Piglin.
@@ -56,7 +56,7 @@ public interface PiglinAbstract extends Monster, Ageable {
      * @deprecated see {@link Ageable#isAdult()}
      */
     @Deprecated
-    public boolean isBaby();
+    boolean isBaby();
 
     /**
      * Sets whether the piglin is a baby
@@ -65,5 +65,5 @@ public interface PiglinAbstract extends Monster, Ageable {
      * @deprecated see {@link Ageable#setBaby()} and {@link Ageable#setAdult()}
      */
     @Deprecated
-    public void setBaby(boolean flag);
+    void setBaby(boolean flag);
 }
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 2ea531eaef8c455fdd503f0c0258813fe9136085..344f68a1ea7bd11815f459cf798fed376df6a6c2 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -73,8 +73,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #displayName()}
      */
     @Deprecated // Paper
-    @NotNull
-    public String getDisplayName();
+    @NotNull String getDisplayName();
 
     /**
      * Sets the "friendly" name to display of this player. This may include
@@ -87,7 +86,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #displayName(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setDisplayName(@Nullable String name);
+    void setDisplayName(@Nullable String name);
 
     // Paper start
     /**
@@ -128,7 +127,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @NotNull
     @Deprecated // Paper
-    public String getPlayerListName();
+    String getPlayerListName();
 
     /**
      * Sets the name that is shown on the in-game player list.
@@ -139,7 +138,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #playerListName(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setPlayerListName(@Nullable String name);
+    void setPlayerListName(@Nullable String name);
 
     /**
      * Gets the currently displayed player list header for this player.
@@ -148,8 +147,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #playerListHeader()}
      */
     @Deprecated // Paper
-    @Nullable
-    public String getPlayerListHeader();
+    @Nullable String getPlayerListHeader();
 
     /**
      * Gets the currently displayed player list footer for this player.
@@ -158,8 +156,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #playerListFooter()}
      */
     @Deprecated // Paper
-    @Nullable
-    public String getPlayerListFooter();
+    @Nullable String getPlayerListFooter();
 
     /**
      * Sets the currently displayed player list header for this player.
@@ -168,7 +165,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #sendPlayerListHeader(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setPlayerListHeader(@Nullable String header);
+    void setPlayerListHeader(@Nullable String header);
 
     /**
      * Sets the currently displayed player list footer for this player.
@@ -177,7 +174,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #sendPlayerListFooter(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setPlayerListFooter(@Nullable String footer);
+    void setPlayerListFooter(@Nullable String footer);
 
     /**
      * Sets the currently displayed player list header and footer for this
@@ -188,30 +185,28 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);
+    void setPlayerListHeaderFooter(@Nullable String header, @Nullable String footer);
 
     /**
      * Set the target of the player's compass.
      *
      * @param loc Location to point to
      */
-    public void setCompassTarget(@NotNull Location loc);
+    void setCompassTarget(@NotNull Location loc);
 
     /**
      * Get the previously set compass target.
      *
      * @return location of the target
      */
-    @NotNull
-    public Location getCompassTarget();
+    @NotNull Location getCompassTarget();
 
     /**
      * Gets the socket address of this player
      *
      * @return the player's address
      */
-    @Nullable
-    public InetSocketAddress getAddress();
+    @Nullable InetSocketAddress getAddress();
 
     /**
      * Sends this sender a message raw
@@ -219,7 +214,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param message Message to be displayed
      */
     @Override
-    public void sendRawMessage(@NotNull String message);
+    void sendRawMessage(@NotNull String message);
 
     /**
      * Kicks player with custom kick message.
@@ -228,7 +223,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #kick(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void kickPlayer(@Nullable String message);
+    void kickPlayer(@Nullable String message);
 
     // Paper start
     /**
@@ -244,7 +239,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param msg message to print
      */
-    public void chat(@NotNull String msg);
+    void chat(@NotNull String msg);
 
     /**
      * Makes the player perform the given command
@@ -252,7 +247,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param command Command to perform
      * @return true if the command was successful, otherwise false
      */
-    public boolean performCommand(@NotNull String command);
+    boolean performCommand(@NotNull String command);
 
     /**
      * Returns true if the entity is supported by a block.
@@ -266,42 +261,42 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Override
     @Deprecated
-    public boolean isOnGround();
+    boolean isOnGround();
 
     /**
      * Returns if the player is in sneak mode
      *
      * @return true if player is in sneak mode
      */
-    public boolean isSneaking();
+    boolean isSneaking();
 
     /**
      * Sets the sneak mode the player
      *
      * @param sneak true if player should appear sneaking
      */
-    public void setSneaking(boolean sneak);
+    void setSneaking(boolean sneak);
 
     /**
      * Gets whether the player is sprinting or not.
      *
      * @return true if player is sprinting.
      */
-    public boolean isSprinting();
+    boolean isSprinting();
 
     /**
      * Sets whether the player is sprinting or not.
      *
      * @param sprinting true if the player should be sprinting
      */
-    public void setSprinting(boolean sprinting);
+    void setSprinting(boolean sprinting);
 
     /**
      * Saves the players current location, health, inventory, motion, and
      * other information into the username.dat file, in the world/player
      * folder
      */
-    public void saveData();
+    void saveData();
 
     /**
      * Loads the players current location, health, inventory, motion, and
@@ -311,7 +306,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Note: This will overwrite the players current inventory, health,
      * motion, etc, with the state from the saved dat file.
      */
-    public void loadData();
+    void loadData();
 
     /**
      * Sets whether the player is ignored as not sleeping. If everyone is
@@ -321,14 +316,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param isSleeping Whether to ignore.
      */
-    public void setSleepingIgnored(boolean isSleeping);
+    void setSleepingIgnored(boolean isSleeping);
 
     /**
      * Returns whether the player is sleeping ignored.
      *
      * @return Whether player is ignoring sleep.
      */
-    public boolean isSleepingIgnored();
+    boolean isSleepingIgnored();
 
     /**
      * Gets the Location where the player will spawn at their bed, null if
@@ -338,14 +333,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Nullable
     @Override
-    public Location getBedSpawnLocation();
+    Location getBedSpawnLocation();
 
     /**
      * Sets the Location where the player will spawn at their bed.
      *
      * @param location where to set the respawn location
      */
-    public void setBedSpawnLocation(@Nullable Location location);
+    void setBedSpawnLocation(@Nullable Location location);
 
     /**
      * Sets the Location where the player will spawn at their bed.
@@ -354,7 +349,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param force whether to forcefully set the respawn location even if a
      *     valid bed is not present
      */
-    public void setBedSpawnLocation(@Nullable Location location, boolean force);
+    void setBedSpawnLocation(@Nullable Location location, boolean force);
 
     /**
      * Play a note for a player at a location. This requires a note block
@@ -367,7 +362,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Magic value
      */
     @Deprecated
-    public void playNote(@NotNull Location loc, byte instrument, byte note);
+    void playNote(@NotNull Location loc, byte instrument, byte note);
 
     /**
      * Play a note for a player at a location. This requires a note block
@@ -378,7 +373,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param instrument The instrument
      * @param note The note
      */
-    public void playNote(@NotNull Location loc, @NotNull Instrument instrument, @NotNull Note note);
+    void playNote(@NotNull Location loc, @NotNull Instrument instrument, @NotNull Note note);
 
 
     /**
@@ -391,7 +386,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param volume The volume of the sound
      * @param pitch The pitch of the sound
      */
-    public void playSound(@NotNull Location location, @NotNull Sound sound, float volume, float pitch);
+    void playSound(@NotNull Location location, @NotNull Sound sound, float volume, float pitch);
 
     /**
      * Play a sound for a player at the location.
@@ -405,7 +400,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param volume the volume of the sound
      * @param pitch the pitch of the sound
      */
-    public void playSound(@NotNull Location location, @NotNull String sound, float volume, float pitch);
+    void playSound(@NotNull Location location, @NotNull String sound, float volume, float pitch);
 
     /**
      * Play a sound for a player at the location.
@@ -418,7 +413,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param volume The volume of the sound
      * @param pitch The pitch of the sound
      */
-    public void playSound(@NotNull Location location, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch);
+    void playSound(@NotNull Location location, @NotNull Sound sound, @NotNull SoundCategory category, float volume, float pitch);
 
     /**
      * Play a sound for a player at the location.
@@ -433,21 +428,21 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param volume the volume of the sound
      * @param pitch the pitch of the sound
      */
-    public void playSound(@NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
+    void playSound(@NotNull Location location, @NotNull String sound, @NotNull SoundCategory category, float volume, float pitch);
 
     /**
      * Stop the specified sound from playing.
      *
      * @param sound the sound to stop
      */
-    public void stopSound(@NotNull Sound sound);
+    void stopSound(@NotNull Sound sound);
 
     /**
      * Stop the specified sound from playing.
      *
      * @param sound the sound to stop
      */
-    public void stopSound(@NotNull String sound);
+    void stopSound(@NotNull String sound);
 
     /**
      * Stop the specified sound from playing.
@@ -455,7 +450,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param sound the sound to stop
      * @param category the category of the sound
      */
-    public void stopSound(@NotNull Sound sound, @Nullable SoundCategory category);
+    void stopSound(@NotNull Sound sound, @Nullable SoundCategory category);
 
     /**
      * Stop the specified sound from playing.
@@ -463,7 +458,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param sound the sound to stop
      * @param category the category of the sound
      */
-    public void stopSound(@NotNull String sound, @Nullable SoundCategory category);
+    void stopSound(@NotNull String sound, @Nullable SoundCategory category);
 
     /**
      * Plays an effect to just this player.
@@ -474,7 +469,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Magic value
      */
     @Deprecated
-    public void playEffect(@NotNull Location loc, @NotNull Effect effect, int data);
+    void playEffect(@NotNull Location loc, @NotNull Effect effect, int data);
 
     /**
      * Plays an effect to just this player.
@@ -484,7 +479,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param effect the {@link Effect}
      * @param data a data bit needed for some effects
      */
-    public <T> void playEffect(@NotNull Location loc, @NotNull Effect effect, @Nullable T data);
+    <T> void playEffect(@NotNull Location loc, @NotNull Effect effect, @Nullable T data);
 
     /**
      * Send a block change. This fakes a block change packet for a user at a
@@ -496,7 +491,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Magic value
      */
     @Deprecated
-    public void sendBlockChange(@NotNull Location loc, @NotNull Material material, byte data);
+    void sendBlockChange(@NotNull Location loc, @NotNull Material material, byte data);
 
     /**
      * Send a block change. This fakes a block change packet for a user at a
@@ -505,7 +500,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param loc The location of the changed block
      * @param block The new block
      */
-    public void sendBlockChange(@NotNull Location loc, @NotNull BlockData block);
+    void sendBlockChange(@NotNull Location loc, @NotNull BlockData block);
 
     /**
      * Send block damage. This fakes block break progress for a user at a
@@ -516,7 +511,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param progress the progress from 0.0 - 1.0 where 0 is no damage and
      * 1.0 is the most damaged
      */
-    public void sendBlockDamage(@NotNull Location loc, float progress);
+    void sendBlockDamage(@NotNull Location loc, float progress);
 
     /**
      * Send a chunk change. This fakes a chunk change packet for a user at a
@@ -536,7 +531,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Magic value
      */
     @Deprecated
-    public boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);
+    boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);
 
     // Paper start
     /**
@@ -591,7 +586,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List)}
      */
     @Deprecated // Paper
-    public void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;
+    void sendSignChange(@NotNull Location loc, @Nullable String[] lines) throws IllegalArgumentException;
 
 
     /**
@@ -613,7 +608,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #sendSignChange(org.bukkit.Location, java.util.List, org.bukkit.DyeColor)}
      */
     @Deprecated // Paper
-    public void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;
+    void sendSignChange(@NotNull Location loc, @Nullable String[] lines, @NotNull DyeColor dyeColor) throws IllegalArgumentException;
 
     /**
      * Render a map and send it to the player in its entirety. This may be
@@ -621,7 +616,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param map The map to be sent
      */
-    public void sendMap(@NotNull MapView map);
+    void sendMap(@NotNull MapView map);
 
     // Paper start
     /**
@@ -632,7 +627,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     // For reference, Bukkit defines this as nullable, while they impl isn't, we'll follow API.
     @Nullable
-    public default BanEntry banPlayerFull(@Nullable String reason) {
+    default BanEntry banPlayerFull(@Nullable String reason) {
         return banPlayerFull(reason, null, null);
     }
 
@@ -644,7 +639,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerFull(@Nullable String reason, @Nullable String source) {
+    default BanEntry banPlayerFull(@Nullable String reason, @Nullable String source) {
         return banPlayerFull(reason, null, source);
     }
 
@@ -656,7 +651,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerFull(@Nullable String reason, @Nullable Date expires) {
+    default BanEntry banPlayerFull(@Nullable String reason, @Nullable Date expires) {
         return banPlayerFull(reason, expires, null);
     }
 
@@ -669,7 +664,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerFull(@Nullable String reason, @Nullable Date expires, @Nullable String source) {
+    default BanEntry banPlayerFull(@Nullable String reason, @Nullable Date expires, @Nullable String source) {
         banPlayer(reason, expires, source);
         return banPlayerIP(reason, expires, source, true);
     }
@@ -683,7 +678,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason, boolean kickPlayer) {
+    default BanEntry banPlayerIP(@Nullable String reason, boolean kickPlayer) {
         return banPlayerIP(reason, null, null, kickPlayer);
     }
 
@@ -696,7 +691,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason, @Nullable String source, boolean kickPlayer) {
+    default BanEntry banPlayerIP(@Nullable String reason, @Nullable String source, boolean kickPlayer) {
         return banPlayerIP(reason, null, source, kickPlayer);
     }
 
@@ -709,7 +704,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, boolean kickPlayer) {
+    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, boolean kickPlayer) {
         return banPlayerIP(reason, expires, null, kickPlayer);
     }
 
@@ -721,7 +716,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason) {
+    default BanEntry banPlayerIP(@Nullable String reason) {
         return banPlayerIP(reason, null, null);
     }
 
@@ -733,7 +728,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason, @Nullable String source) {
+    default BanEntry banPlayerIP(@Nullable String reason, @Nullable String source) {
         return banPlayerIP(reason, null, source);
     }
 
@@ -745,7 +740,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires) {
+    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires) {
         return banPlayerIP(reason, expires, null);
     }
 
@@ -758,7 +753,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, @Nullable String source) {
+    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, @Nullable String source) {
         return banPlayerIP(reason, expires, source, true);
     }
 
@@ -772,7 +767,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    public default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, @Nullable String source, boolean kickPlayer) {
+    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, @Nullable String source, boolean kickPlayer) {
         BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.IP).addBan(getAddress().getAddress().getHostAddress(), reason, expires, source);
         if (kickPlayer && isOnline()) {
             getPlayer().kickPlayer(reason);
@@ -790,7 +785,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated use {@link #sendActionBar(Component)}
      */
     @Deprecated
-    public void sendActionBar(@NotNull String message);
+    void sendActionBar(@NotNull String message);
 
     /**
      * Sends an Action Bar message to the client.
@@ -802,7 +797,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated use {@link #sendActionBar(Component)}
      */
     @Deprecated
-    public void sendActionBar(char alternateChar, @NotNull String message);
+    void sendActionBar(char alternateChar, @NotNull String message);
 
     /**
      * Sends an Action Bar message to the client.
@@ -811,7 +806,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated use {@link #sendActionBar(Component)}
      */
     @Deprecated
-    public void sendActionBar(@NotNull net.md_5.bungee.api.chat.BaseComponent... message);
+    void sendActionBar(@NotNull net.md_5.bungee.api.chat.BaseComponent... message);
 
     /**
      * Sends the component to the player
@@ -821,7 +816,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Override
     @Deprecated
-    public default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
         spigot().sendMessage(component);
     }
 
@@ -833,7 +828,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Override
     @Deprecated
-    public default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().sendMessage(components);
     }
 
@@ -845,7 +840,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param components the components to send
      */
     @Deprecated
-    public default void sendMessage(net.md_5.bungee.api.ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void sendMessage(net.md_5.bungee.api.ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().sendMessage(position, components);
     }
 
@@ -857,7 +852,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}
      */
     @Deprecated
-    public void setPlayerListHeaderFooter(@Nullable net.md_5.bungee.api.chat.BaseComponent[] header, @Nullable net.md_5.bungee.api.chat.BaseComponent[] footer);
+    void setPlayerListHeaderFooter(@Nullable net.md_5.bungee.api.chat.BaseComponent[] header, @Nullable net.md_5.bungee.api.chat.BaseComponent[] footer);
 
     /**
      * Set the text displayed in the player list header and footer for this player
@@ -867,7 +862,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated in favour of {@link #sendPlayerListHeaderAndFooter(net.kyori.adventure.text.Component, net.kyori.adventure.text.Component)}
      */
     @Deprecated
-    public void setPlayerListHeaderFooter(@Nullable net.md_5.bungee.api.chat.BaseComponent header, @Nullable net.md_5.bungee.api.chat.BaseComponent footer);
+    void setPlayerListHeaderFooter(@Nullable net.md_5.bungee.api.chat.BaseComponent header, @Nullable net.md_5.bungee.api.chat.BaseComponent footer);
 
     /**
      * Update the times for titles displayed to the player
@@ -878,7 +873,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)} 
      */
     @Deprecated
-    public void setTitleTimes(int fadeInTicks, int stayTicks, int fadeOutTicks);
+    void setTitleTimes(int fadeInTicks, int stayTicks, int fadeOutTicks);
 
     /**
      * Update the subtitle of titles displayed to the player
@@ -887,7 +882,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
      */
     @Deprecated
-    public void setSubtitle(net.md_5.bungee.api.chat.BaseComponent[] subtitle);
+    void setSubtitle(net.md_5.bungee.api.chat.BaseComponent[] subtitle);
 
     /**
      * Update the subtitle of titles displayed to the player
@@ -896,7 +891,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
      */
     @Deprecated
-    public void setSubtitle(net.md_5.bungee.api.chat.BaseComponent subtitle);
+    void setSubtitle(net.md_5.bungee.api.chat.BaseComponent subtitle);
 
     /**
      * Show the given title to the player, along with the last subtitle set, using the last set times
@@ -905,7 +900,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
      */
     @Deprecated
-    public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent[] title);
+    void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent[] title);
 
     /**
      * Show the given title to the player, along with the last subtitle set, using the last set times
@@ -914,7 +909,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
      */
     @Deprecated
-    public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent title);
+    void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent title);
 
     /**
      * Show the given title and subtitle to the player using the given times
@@ -927,7 +922,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
      */
     @Deprecated
-    public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent[] title, @Nullable net.md_5.bungee.api.chat.BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks);
+    void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent[] title, @Nullable net.md_5.bungee.api.chat.BaseComponent[] subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks);
 
     /**
      * Show the given title and subtitle to the player using the given times
@@ -940,7 +935,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Use {@link #showTitle(net.kyori.adventure.title.Title)}
      */
     @Deprecated
-    public void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent title, @Nullable net.md_5.bungee.api.chat.BaseComponent subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks);
+    void showTitle(@Nullable net.md_5.bungee.api.chat.BaseComponent title, @Nullable net.md_5.bungee.api.chat.BaseComponent subtitle, int fadeInTicks, int stayTicks, int fadeOutTicks);
 
     /**
      * Show the title to the player, overriding any previously displayed title.
@@ -972,7 +967,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated use {@link #clearTitle()}
      */
     @Deprecated
-    public void hideTitle();
+    void hideTitle();
     // Paper end
 
     /**
@@ -980,7 +975,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      */
     //@Deprecated // Spigot - undeprecate
-    public void updateInventory();
+    void updateInventory();
 
     /**
      * Sets the current time on the player's client. When relative is true the
@@ -997,14 +992,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param relative When true the player time is kept relative to its world
      *     time.
      */
-    public void setPlayerTime(long time, boolean relative);
+    void setPlayerTime(long time, boolean relative);
 
     /**
      * Returns the player's current timestamp.
      *
      * @return The player's time
      */
-    public long getPlayerTime();
+    long getPlayerTime();
 
     /**
      * Returns the player's current time offset relative to server time, or
@@ -1012,7 +1007,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return The player's time
      */
-    public long getPlayerTimeOffset();
+    long getPlayerTimeOffset();
 
     /**
      * Returns true if the player's time is relative to the server time,
@@ -1021,7 +1016,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return true if the player's time is relative to the server time.
      */
-    public boolean isPlayerTimeRelative();
+    boolean isPlayerTimeRelative();
 
     /**
      * Restores the normal condition where the player's time is synchronized
@@ -1029,7 +1024,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * <p>
      * Equivalent to calling setPlayerTime(0, true).
      */
-    public void resetPlayerTime();
+    void resetPlayerTime();
 
     /**
      * Sets the type of weather the player will see.  When used, the weather
@@ -1038,7 +1033,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param type The WeatherType enum type the player should experience
      */
-    public void setPlayerWeather(@NotNull WeatherType type);
+    void setPlayerWeather(@NotNull WeatherType type);
 
     /**
      * Returns the type of weather the player is currently experiencing.
@@ -1046,14 +1041,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return The WeatherType that the player is currently experiencing or
      *     null if player is seeing server weather.
      */
-    @Nullable
-    public WeatherType getPlayerWeather();
+    @Nullable WeatherType getPlayerWeather();
 
     /**
      * Restores the normal condition where the player's weather is controlled
      * by server conditions.
      */
-    public void resetPlayerWeather();
+    void resetPlayerWeather();
 
     // Paper start
     /**
@@ -1061,7 +1055,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param amount Exp amount to give
      */
-    public default void giveExp(int amount) {
+    default void giveExp(int amount) {
         giveExp(amount, false);
     }
     /**
@@ -1070,7 +1064,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param amount Exp amount to give
      * @param applyMending Mend players items with mending, with same behavior as picking up orbs. calls {@link #applyMending(int)}
      */
-    public void giveExp(int amount, boolean applyMending);
+    void giveExp(int amount, boolean applyMending);
 
     /**
      * Applies the mending effect to any items just as picking up an orb would.
@@ -1080,7 +1074,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param amount Exp to apply
      * @return the remaining experience
      */
-    public int applyMending(int amount);
+    int applyMending(int amount);
     // Paper end
 
     /**
@@ -1089,7 +1083,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param amount amount of experience levels to give or take
      */
-    public void giveExpLevels(int amount);
+    void giveExpLevels(int amount);
 
     /**
      * Gets the players current experience points towards the next level.
@@ -1098,7 +1092,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return Current experience points
      */
-    public float getExp();
+    float getExp();
 
     /**
      * Sets the players current experience points towards the next level
@@ -1107,21 +1101,21 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param exp New experience points
      */
-    public void setExp(float exp);
+    void setExp(float exp);
 
     /**
      * Gets the players current experience level
      *
      * @return Current experience level
      */
-    public int getLevel();
+    int getLevel();
 
     /**
      * Sets the players current experience level
      *
      * @param level New experience level
      */
-    public void setLevel(int level);
+    void setLevel(int level);
 
     /**
      * Gets the players total experience points.
@@ -1131,7 +1125,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return Current total experience points
      */
-    public int getTotalExperience();
+    int getTotalExperience();
 
     /**
      * Sets the players current experience points.
@@ -1141,7 +1135,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param exp New total experience points
      */
-    public void setTotalExperience(int exp);
+    void setTotalExperience(int exp);
 
     /**
      * Send an experience change.
@@ -1152,7 +1146,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param progress Experience progress percentage (between 0.0 and 1.0)
      * @see #setExp(float)
      */
-    public void sendExperienceChange(float progress);
+    void sendExperienceChange(float progress);
 
     /**
      * Send an experience change.
@@ -1166,7 +1160,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @see #setExp(float)
      * @see #setLevel(int)
      */
-    public void sendExperienceChange(float progress, int level);
+    void sendExperienceChange(float progress, int level);
 
     /**
      * Determines if the Player is allowed to fly via jump key double-tap like
@@ -1174,7 +1168,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return True if the player is allowed to fly.
      */
-    public boolean getAllowFlight();
+    boolean getAllowFlight();
 
     /**
      * Sets if the Player is allowed to fly via jump key double-tap like in
@@ -1182,7 +1176,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param flight If flight should be allowed.
      */
-    public void setAllowFlight(boolean flight);
+    void setAllowFlight(boolean flight);
 
     /**
      * Hides a player from this player
@@ -1191,7 +1185,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated see {@link #hidePlayer(Plugin, Player)}
      */
     @Deprecated
-    public void hidePlayer(@NotNull Player player);
+    void hidePlayer(@NotNull Player player);
 
     /**
      * Hides a player from this player
@@ -1199,7 +1193,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param plugin Plugin that wants to hide the player
      * @param player Player to hide
      */
-    public void hidePlayer(@NotNull Plugin plugin, @NotNull Player player);
+    void hidePlayer(@NotNull Plugin plugin, @NotNull Player player);
 
     /**
      * Allows this player to see a player that was previously hidden
@@ -1208,7 +1202,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated see {@link #showPlayer(Plugin, Player)}
      */
     @Deprecated
-    public void showPlayer(@NotNull Player player);
+    void showPlayer(@NotNull Player player);
 
     /**
      * Allows this player to see a player that was previously hidden. If
@@ -1218,7 +1212,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param plugin Plugin that wants to show the player
      * @param player Player to show
      */
-    public void showPlayer(@NotNull Plugin plugin, @NotNull Player player);
+    void showPlayer(@NotNull Plugin plugin, @NotNull Player player);
 
     /**
      * Checks to see if a player has been hidden from this player
@@ -1227,21 +1221,21 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return True if the provided player is not being hidden from this
      *     player
      */
-    public boolean canSee(@NotNull Player player);
+    boolean canSee(@NotNull Player player);
 
     /**
      * Checks to see if this player is currently flying or not.
      *
      * @return True if the player is flying, else false.
      */
-    public boolean isFlying();
+    boolean isFlying();
 
     /**
      * Makes this player start or stop flying.
      *
      * @param value True to fly.
      */
-    public void setFlying(boolean value);
+    void setFlying(boolean value);
 
     /**
      * Sets the speed at which a client will fly. Negative values indicate
@@ -1251,7 +1245,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException If new speed is less than -1 or
      *     greater than 1
      */
-    public void setFlySpeed(float value) throws IllegalArgumentException;
+    void setFlySpeed(float value) throws IllegalArgumentException;
 
     /**
      * Sets the speed at which a client will walk. Negative values indicate
@@ -1261,21 +1255,21 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException If new speed is less than -1 or
      *     greater than 1
      */
-    public void setWalkSpeed(float value) throws IllegalArgumentException;
+    void setWalkSpeed(float value) throws IllegalArgumentException;
 
     /**
      * Gets the current allowed speed that a client can fly.
      *
      * @return The current allowed speed, from -1 to 1
      */
-    public float getFlySpeed();
+    float getFlySpeed();
 
     /**
      * Gets the current allowed speed that a client can walk.
      *
      * @return The current allowed speed, from -1 to 1
      */
-    public float getWalkSpeed();
+    float getWalkSpeed();
 
     /**
      * Request that the player's client download and switch texture packs.
@@ -1311,7 +1305,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *     should use {@link #setResourcePack(String)}.
      */
     @Deprecated
-    public void setTexturePack(@NotNull String url);
+    void setTexturePack(@NotNull String url);
 
     /**
      * Request that the player's client download and switch resource packs.
@@ -1347,7 +1341,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated use {@link #setResourcePack(String, String)}
      */
     @Deprecated // Paper
-    public void setResourcePack(@NotNull String url);
+    void setResourcePack(@NotNull String url);
 
     /**
      * Request that the player's client download and switch resource packs.
@@ -1384,15 +1378,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
      *     long.
      */
-    public void setResourcePack(@NotNull String url, @NotNull byte[] hash);
+    void setResourcePack(@NotNull String url, @NotNull byte[] hash);
 
     /**
      * Gets the Scoreboard displayed to this player
      *
      * @return The current scoreboard seen by this player
      */
-    @NotNull
-    public Scoreboard getScoreboard();
+    @NotNull Scoreboard getScoreboard();
 
     /**
      * Sets the player's visible Scoreboard.
@@ -1404,7 +1397,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalStateException if this is a player that is not logged
      *     yet or has logged out
      */
-    public void setScoreboard(@NotNull Scoreboard scoreboard) throws IllegalArgumentException, IllegalStateException;
+    void setScoreboard(@NotNull Scoreboard scoreboard) throws IllegalArgumentException, IllegalStateException;
 
     /**
      * Gets if the client is displayed a 'scaled' health, that is, health on a
@@ -1413,7 +1406,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return if client health display is scaled
      * @see Player#setHealthScaled(boolean)
      */
-    public boolean isHealthScaled();
+    boolean isHealthScaled();
 
     /**
      * Sets if the client is displayed a 'scaled' health, that is, health on a
@@ -1424,7 +1417,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param scale if the client health display is scaled
      */
-    public void setHealthScaled(boolean scale);
+    void setHealthScaled(boolean scale);
 
     /**
      * Sets the number to scale health to for the client; this will also
@@ -1438,7 +1431,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException if scale is {@link Double#NaN}
      * @throws IllegalArgumentException if scale is too high
      */
-    public void setHealthScale(double scale) throws IllegalArgumentException;
+    void setHealthScale(double scale) throws IllegalArgumentException;
 
     /**
      * Gets the number that health is scaled to for the client.
@@ -1448,7 +1441,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @see Player#setHealthScale(double)
      * @see Player#setHealthScaled(boolean)
      */
-    public double getHealthScale();
+    double getHealthScale();
 
     /**
      * Gets the entity which is followed by the camera when in
@@ -1457,8 +1450,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return the followed entity, or null if not in spectator mode or not
      * following a specific entity.
      */
-    @Nullable
-    public Entity getSpectatorTarget();
+    @Nullable Entity getSpectatorTarget();
 
     /**
      * Sets the entity which is followed by the camera when in
@@ -1468,7 +1460,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalStateException if the player is not in
      * {@link GameMode#SPECTATOR}
      */
-    public void setSpectatorTarget(@Nullable Entity entity);
+    void setSpectatorTarget(@Nullable Entity entity);
 
     /**
      * Sends a title and a subtitle message to the player. If either of these
@@ -1482,7 +1474,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated API behavior subject to change
      */
     @Deprecated
-    public void sendTitle(@Nullable String title, @Nullable String subtitle);
+    void sendTitle(@Nullable String title, @Nullable String subtitle);
 
     /**
      * Sends a title and a subtitle message to the player. If either of these
@@ -1499,13 +1491,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param stay time in ticks for titles to stay. Defaults to 70.
      * @param fadeOut time in ticks for titles to fade out. Defaults to 20.
      */
-    public void sendTitle(@Nullable String title, @Nullable String subtitle, int fadeIn, int stay, int fadeOut);
+    void sendTitle(@Nullable String title, @Nullable String subtitle, int fadeIn, int stay, int fadeOut);
 
     /**
      * Resets the title displayed to the player. This will clear the displayed
      * title / subtitle and reset timings to their default values.
      */
-    public void resetTitle();
+    void resetTitle();
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1515,7 +1507,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param location the location to spawn at
      * @param count the number of particles
      */
-    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count);
+    void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1527,7 +1519,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param z the position on the z axis to spawn at
      * @param count the number of particles
      */
-    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count);
+    void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1540,7 +1532,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, @Nullable T data);
 
 
     /**
@@ -1556,7 +1548,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1571,7 +1563,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param offsetY the maximum random offset on the Y axis
      * @param offsetZ the maximum random offset on the Z axis
      */
-    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ);
+    void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1588,7 +1580,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param offsetY the maximum random offset on the Y axis
      * @param offsetZ the maximum random offset on the Z axis
      */
-    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ);
+    void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1606,7 +1598,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1626,7 +1618,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1643,7 +1635,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param extra the extra data for this particle, depends on the
      *              particle used (normally speed)
      */
-    public void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra);
+    void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1662,7 +1654,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param extra the extra data for this particle, depends on the
      *              particle used (normally speed)
      */
-    public void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra);
+    void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1682,7 +1674,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, @NotNull Location location, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
 
     /**
      * Spawns the particle (the number of times specified by count)
@@ -1704,7 +1696,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    public <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
+    <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data);
 
     /**
      * Return the player's progression on the specified advancement.
@@ -1712,8 +1704,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param advancement advancement
      * @return object detailing the player's progress
      */
-    @NotNull
-    public AdvancementProgress getAdvancementProgress(@NotNull Advancement advancement);
+    @NotNull AdvancementProgress getAdvancementProgress(@NotNull Advancement advancement);
 
     /**
      * Get the player's current client side view distance.
@@ -1723,7 +1714,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return client view distance as above
      */
-    public int getClientViewDistance();
+    int getClientViewDistance();
 
     // Paper start
     /**
@@ -1747,7 +1738,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @NotNull
     @Deprecated // Paper
-    public String getLocale();
+    String getLocale();
 
     // Paper start
     /**
@@ -1755,14 +1746,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return if the player can affect mob spawning
      */
-    public boolean getAffectsSpawning();
+    boolean getAffectsSpawning();
 
     /**
      * Set whether the player can affect mob spawning
      *
      * @param affects Whether the player can affect mob spawning
      */
-    public void setAffectsSpawning(boolean affects);
+    void setAffectsSpawning(boolean affects);
 
     /**
      * Gets the view distance for this player
@@ -1773,7 +1764,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @see org.bukkit.World#getNoTickViewDistance()
      */
     @Deprecated
-    public int getViewDistance();
+    int getViewDistance();
 
     /**
      * Sets the view distance for this player
@@ -1784,7 +1775,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @see org.bukkit.World#setNoTickViewDistance(int)
      */
     @Deprecated
-    public void setViewDistance(int viewDistance);
+    void setViewDistance(int viewDistance);
     // Paper end
 
     /**
@@ -1793,14 +1784,14 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * Generally useful to ensure the client has a complete list of commands
      * after permission changes are done.
      */
-    public void updateCommands();
+    void updateCommands();
 
     /**
      * Open a {@link Material#WRITTEN_BOOK} for a Player
      *
      * @param book The book to open for this player
      */
-    public void openBook(@NotNull ItemStack book);
+    void openBook(@NotNull ItemStack book);
 
     // Paper start
     @NotNull
@@ -1937,7 +1928,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
     // Paper end
 
     // Spigot start
-    public class Spigot extends Entity.Spigot {
+    class Spigot extends Entity.Spigot {
 
         /**
          * Gets the connection address of this player, regardless of whether it
diff --git a/src/main/java/org/bukkit/entity/Pose.java b/src/main/java/org/bukkit/entity/Pose.java
index b6e0c6f534f54bdd05cbc2a7a9ae69a278a76533..bcbc4f1b6d635bd0008f84762cc40f3da856a451 100644
--- a/src/main/java/org/bukkit/entity/Pose.java
+++ b/src/main/java/org/bukkit/entity/Pose.java
@@ -33,5 +33,5 @@ public enum Pose {
     /**
      * Entity is dead.
      */
-    DYING;
+    DYING
 }
diff --git a/src/main/java/org/bukkit/entity/Projectile.java b/src/main/java/org/bukkit/entity/Projectile.java
index c854860c13912f9a8707eb825cca23763d1323a6..08ec9a22a9a5de25e36c4c578c1b4eea4e2db62a 100644
--- a/src/main/java/org/bukkit/entity/Projectile.java
+++ b/src/main/java/org/bukkit/entity/Projectile.java
@@ -13,15 +13,14 @@ public interface Projectile extends Entity {
      *
      * @return the {@link ProjectileSource} that shot this projectile
      */
-    @Nullable
-    public ProjectileSource getShooter();
+    @Nullable ProjectileSource getShooter();
 
     /**
      * Set the shooter of this projectile.
      *
      * @param source the {@link ProjectileSource} that shot this projectile
      */
-    public void setShooter(@Nullable ProjectileSource source);
+    void setShooter(@Nullable ProjectileSource source);
 
     /**
      * Determine if this projectile should bounce or not when it hits.
@@ -30,7 +29,7 @@ public interface Projectile extends Entity {
      *
      * @return true if it should bounce.
      */
-    public boolean doesBounce();
+    boolean doesBounce();
 
     /**
      * Set whether or not this projectile should bounce or not when it hits
@@ -38,5 +37,5 @@ public interface Projectile extends Entity {
      *
      * @param doesBounce whether or not it should bounce.
      */
-    public void setBounce(boolean doesBounce);
+    void setBounce(boolean doesBounce);
 }
diff --git a/src/main/java/org/bukkit/entity/Rabbit.java b/src/main/java/org/bukkit/entity/Rabbit.java
index e88154283a8ef594e160d25005870053de15568a..3825811a86c0caf3334d06869c9f12376eace39a 100644
--- a/src/main/java/org/bukkit/entity/Rabbit.java
+++ b/src/main/java/org/bukkit/entity/Rabbit.java
@@ -7,18 +7,17 @@ public interface Rabbit extends Animals {
     /**
      * @return The type of rabbit.
      */
-    @NotNull
-    public Type getRabbitType();
+    @NotNull Type getRabbitType();
 
     /**
      * @param type Sets the type of rabbit for this entity.
      */
-    public void setRabbitType(@NotNull Type type);
+    void setRabbitType(@NotNull Type type);
 
     /**
      * Represents the various types a Rabbit might be.
      */
-    public enum Type {
+    enum Type {
 
         /**
          * Chocolate colored rabbit.
diff --git a/src/main/java/org/bukkit/entity/Sheep.java b/src/main/java/org/bukkit/entity/Sheep.java
index f4ce312ccd927a8b64f4266b35a0a53b85e591f3..83f07214610dafe4b3d05c9e88f799606f64ee5b 100644
--- a/src/main/java/org/bukkit/entity/Sheep.java
+++ b/src/main/java/org/bukkit/entity/Sheep.java
@@ -10,10 +10,10 @@ public interface Sheep extends Animals, Colorable {
     /**
      * @return Whether the sheep is sheared.
      */
-    public boolean isSheared();
+    boolean isSheared();
 
     /**
      * @param flag Whether to shear the sheep
      */
-    public void setSheared(boolean flag);
+    void setSheared(boolean flag);
 }
diff --git a/src/main/java/org/bukkit/entity/Skeleton.java b/src/main/java/org/bukkit/entity/Skeleton.java
index 1c367f78eadf24850061a84ce63b950b79d3c435..a5644774197f37147a2835e1e0c597482c15763c 100644
--- a/src/main/java/org/bukkit/entity/Skeleton.java
+++ b/src/main/java/org/bukkit/entity/Skeleton.java
@@ -16,8 +16,7 @@ public interface Skeleton extends Monster, RangedEntity { // Paper
      * @deprecated should check what class instance this is
      */
     @Deprecated
-    @NotNull
-    public SkeletonType getSkeletonType();
+    @NotNull SkeletonType getSkeletonType();
 
     /**
      * @param type type
@@ -25,13 +24,13 @@ public interface Skeleton extends Monster, RangedEntity { // Paper
      */
     @Deprecated
     @Contract("_ -> fail")
-    public void setSkeletonType(SkeletonType type);
+    void setSkeletonType(SkeletonType type);
 
     /*
      * @deprecated classes are different types
      */
     @Deprecated
-    public enum SkeletonType {
+    enum SkeletonType {
 
         /**
          * Standard skeleton type.
@@ -44,6 +43,6 @@ public interface Skeleton extends Monster, RangedEntity { // Paper
         /**
          * Stray skeleton. Generally found in ice biomes. Shoots tipped arrows.
          */
-        STRAY;
+        STRAY
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Slime.java b/src/main/java/org/bukkit/entity/Slime.java
index c4791f95d788d3a9e013dc89d8e64103ad8480a1..039c29bf8b5f74e3c686c4c68862deebd207a516 100644
--- a/src/main/java/org/bukkit/entity/Slime.java
+++ b/src/main/java/org/bukkit/entity/Slime.java
@@ -8,12 +8,12 @@ public interface Slime extends Mob {
     /**
      * @return The size of the slime
      */
-    public int getSize();
+    int getSize();
 
     /**
      * @param sz The new size of the slime.
      */
-    public void setSize(int sz);
+    void setSize(int sz);
 
     // Paper start
     /**
@@ -21,13 +21,13 @@ public interface Slime extends Mob {
      *
      * @return true if can wander
      */
-    public boolean canWander();
+    boolean canWander();
 
     /**
      * Set whether this slime can randomly wander/jump around on its own
      *
      * @param canWander true if can wander
      */
-    public void setWander(boolean canWander);
+    void setWander(boolean canWander);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/Spellcaster.java b/src/main/java/org/bukkit/entity/Spellcaster.java
index d5c107d4f3d1a03d714b2acc1198b9c5124b78d7..6eadeb3685a6e0857cb0fee2d349c5bfc17fa659 100644
--- a/src/main/java/org/bukkit/entity/Spellcaster.java
+++ b/src/main/java/org/bukkit/entity/Spellcaster.java
@@ -10,7 +10,7 @@ public interface Spellcaster extends Illager {
     /**
      * Represents the current spell the entity is using.
      */
-    public enum Spell {
+    enum Spell {
 
         /**
          * No spell is being used..
@@ -35,7 +35,7 @@ public interface Spellcaster extends Illager {
         /**
          * The spell that makes the target blind.
          */
-        BLINDNESS;
+        BLINDNESS
     }
 
     /**
diff --git a/src/main/java/org/bukkit/entity/Steerable.java b/src/main/java/org/bukkit/entity/Steerable.java
index da77a7188b92386fd07304b5e2bf385bd77f80d9..37e327cb2221e65a3a61a77907edaebcd924202a 100644
--- a/src/main/java/org/bukkit/entity/Steerable.java
+++ b/src/main/java/org/bukkit/entity/Steerable.java
@@ -13,14 +13,14 @@ public interface Steerable extends Animals {
      *
      * @return if the pig has been saddled.
      */
-    public boolean hasSaddle();
+    boolean hasSaddle();
 
     /**
      * Sets if the pig has a saddle or not
      *
      * @param saddled set if the pig has a saddle or not.
      */
-    public void setSaddle(boolean saddled);
+    void setSaddle(boolean saddled);
 
     /**
      * Get the time in ticks this entity's movement is being increased.
@@ -30,7 +30,7 @@ public interface Steerable extends Animals {
      *
      * @return the current boost ticks
      */
-    public int getBoostTicks();
+    int getBoostTicks();
 
     /**
      * Set the time in ticks this entity's movement will be increased.
@@ -40,7 +40,7 @@ public interface Steerable extends Animals {
      *
      * @param ticks the boost time
      */
-    public void setBoostTicks(int ticks);
+    void setBoostTicks(int ticks);
 
     /**
      * Get the time in ticks this entity's movement has been increased as of the
@@ -50,7 +50,7 @@ public interface Steerable extends Animals {
      *
      * @return the current boost ticks
      */
-    public int getCurrentBoostTicks();
+    int getCurrentBoostTicks();
 
     /**
      * Set the time in ticks this entity's movement has been increased relative
@@ -59,13 +59,12 @@ public interface Steerable extends Animals {
      * @param ticks the current boost ticks. Must be {@literal >=} 0 and {@literal <=}
      * {@link #getBoostTicks()}
      */
-    public void setCurrentBoostTicks(int ticks);
+    void setCurrentBoostTicks(int ticks);
 
     /**
      * Get the material used to steer this entity when ridden by a player.
      *
      * @return the lure material
      */
-    @NotNull
-    public Material getSteerMaterial();
+    @NotNull Material getSteerMaterial();
 }
diff --git a/src/main/java/org/bukkit/entity/Strider.java b/src/main/java/org/bukkit/entity/Strider.java
index e84baaf95e347d8c6b6dde5604758a3c50dd8f8f..10cbecbe27dd608d47845d251426b153ae0f0229 100644
--- a/src/main/java/org/bukkit/entity/Strider.java
+++ b/src/main/java/org/bukkit/entity/Strider.java
@@ -10,7 +10,7 @@ public interface Strider extends Steerable, Vehicle {
      *
      * @return true if shivering, false otherwise
      */
-    public boolean isShivering();
+    boolean isShivering();
 
     /**
      * Set whether or not this strider is shivering.
@@ -21,5 +21,5 @@ public interface Strider extends Steerable, Vehicle {
      *
      * @param shivering its new shivering state
      */
-    public void setShivering(boolean shivering);
+    void setShivering(boolean shivering);
 }
diff --git a/src/main/java/org/bukkit/entity/TNTPrimed.java b/src/main/java/org/bukkit/entity/TNTPrimed.java
index 0813bd913c8fdb2001963ce3e82c07c2af105418..10c8f78f20a3ce9e7412736588ca92448a2896a5 100644
--- a/src/main/java/org/bukkit/entity/TNTPrimed.java
+++ b/src/main/java/org/bukkit/entity/TNTPrimed.java
@@ -13,7 +13,7 @@ public interface TNTPrimed extends Explosive {
      *
      * @param fuseTicks The fuse ticks
      */
-    public void setFuseTicks(int fuseTicks);
+    void setFuseTicks(int fuseTicks);
 
     /**
      * Retrieve the number of ticks until the explosion of this TNTPrimed
@@ -21,7 +21,7 @@ public interface TNTPrimed extends Explosive {
      *
      * @return the number of ticks until this TNTPrimed explodes
      */
-    public int getFuseTicks();
+    int getFuseTicks();
 
     /**
      * Gets the source of this primed TNT. The source is the entity
@@ -37,8 +37,7 @@ public interface TNTPrimed extends Explosive {
      *
      * @return the source of this primed TNT
      */
-    @Nullable
-    public Entity getSource();
+    @Nullable Entity getSource();
 
     /**
      * Sets the source of this primed TNT.
@@ -52,7 +51,7 @@ public interface TNTPrimed extends Explosive {
      *
      * @param source the source of this primed TNT
      */
-    public void setSource(@Nullable Entity source);
+    void setSource(@Nullable Entity source);
 
     /**
      * Gets the source block location of the TNTPrimed
diff --git a/src/main/java/org/bukkit/entity/Tameable.java b/src/main/java/org/bukkit/entity/Tameable.java
index 65e68da98ab66ed781bce2f0dbe0913be48d2990..76113178c1859ab3b91724ea660020f8d762eb22 100644
--- a/src/main/java/org/bukkit/entity/Tameable.java
+++ b/src/main/java/org/bukkit/entity/Tameable.java
@@ -1,6 +1,5 @@
 package org.bukkit.entity;
 
-import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 public interface Tameable extends Animals {
@@ -13,7 +12,7 @@ public interface Tameable extends Animals {
      *
      * @return true if this has been tamed
      */
-    public boolean isTamed();
+    boolean isTamed();
 
     /**
      * Sets if this has been tamed. Not necessary if the method setOwner has
@@ -24,7 +23,7 @@ public interface Tameable extends Animals {
      *
      * @param tame true if tame
      */
-    public void setTamed(boolean tame);
+    void setTamed(boolean tame);
 
     // Paper start
     /**
@@ -32,8 +31,7 @@ public interface Tameable extends Animals {
      *
      * @return the owners UUID, or null if not owned
      */
-    @Nullable
-    public java.util.UUID getOwnerUniqueId();
+    @Nullable java.util.UUID getOwnerUniqueId();
     // Paper end
 
     /**
@@ -44,8 +42,7 @@ public interface Tameable extends Animals {
      *
      * @return the owning AnimalTamer, or null if not owned
      */
-    @Nullable
-    public AnimalTamer getOwner();
+    @Nullable AnimalTamer getOwner();
 
     /**
      * Set this to be owned by given AnimalTamer.
@@ -56,6 +53,6 @@ public interface Tameable extends Animals {
      *
      * @param tamer the AnimalTamer who should own this
      */
-    public void setOwner(@Nullable AnimalTamer tamer);
+    void setOwner(@Nullable AnimalTamer tamer);
 
 }
diff --git a/src/main/java/org/bukkit/entity/ThrownPotion.java b/src/main/java/org/bukkit/entity/ThrownPotion.java
index 10a3c297bd87ad3ab4555054858f47a479e76e1a..307b027b467cdaa267463aa6f3a582686fecbc01 100644
--- a/src/main/java/org/bukkit/entity/ThrownPotion.java
+++ b/src/main/java/org/bukkit/entity/ThrownPotion.java
@@ -15,8 +15,7 @@ public interface ThrownPotion extends Projectile {
      *
      * @return The potion effects
      */
-    @NotNull
-    public Collection<PotionEffect> getEffects();
+    @NotNull Collection<PotionEffect> getEffects();
 
     /**
      * Returns a copy of the ItemStack for this thrown potion.
@@ -27,8 +26,7 @@ public interface ThrownPotion extends Projectile {
      *
      * @return A copy of the ItemStack for this thrown potion.
      */
-    @NotNull
-    public ItemStack getItem();
+    @NotNull ItemStack getItem();
 
     /**
      * Set the ItemStack for this thrown potion.
@@ -39,5 +37,5 @@ public interface ThrownPotion extends Projectile {
      *
      * @param item New ItemStack
      */
-    public void setItem(@NotNull ItemStack item);
+    void setItem(@NotNull ItemStack item);
 }
diff --git a/src/main/java/org/bukkit/entity/TropicalFish.java b/src/main/java/org/bukkit/entity/TropicalFish.java
index bc5055f2d96addb722d576a9ed1dfad3deb203ed..606568da6ac150d5990026f31738bc1335725d4c 100644
--- a/src/main/java/org/bukkit/entity/TropicalFish.java
+++ b/src/main/java/org/bukkit/entity/TropicalFish.java
@@ -58,7 +58,7 @@ public interface TropicalFish extends Fish {
      * <a href="https://minecraft.gamepedia.com/Fish_(mob)">Minecraft Wiki</a>
      * for pictures.
      */
-    public static enum Pattern {
+    enum Pattern {
 
         KOB,
         SUNSTREAK,
@@ -71,6 +71,6 @@ public interface TropicalFish extends Fish {
         GLITTER,
         BLOCKFISH,
         BETTY,
-        CLAYFISH;
+        CLAYFISH
     }
 }
diff --git a/src/main/java/org/bukkit/entity/Vehicle.java b/src/main/java/org/bukkit/entity/Vehicle.java
index 771a27304e4dd50f27f572ac3cfbc8372615006f..84e0479eb165b104dc45c27aa2db5325b9da8c6a 100644
--- a/src/main/java/org/bukkit/entity/Vehicle.java
+++ b/src/main/java/org/bukkit/entity/Vehicle.java
@@ -14,8 +14,7 @@ public interface Vehicle extends Entity {
      * @return velocity vector
      */
     @Override
-    @NotNull
-    public Vector getVelocity();
+    @NotNull Vector getVelocity();
 
     /**
      * Sets the vehicle's velocity.
@@ -23,5 +22,5 @@ public interface Vehicle extends Entity {
      * @param vel velocity vector
      */
     @Override
-    public void setVelocity(@NotNull Vector vel);
+    void setVelocity(@NotNull Vector vel);
 }
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index c8777a476e38ef5e72b6709761990a339eb43d2b..8852183ef3fe5bde1a39dd72dd2f802c4a8ddbdf 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -19,30 +19,28 @@ public interface Villager extends AbstractVillager {
      *
      * @return Current profession.
      */
-    @NotNull
-    public Profession getProfession();
+    @NotNull Profession getProfession();
 
     /**
      * Sets the new profession of this villager.
      *
      * @param profession New profession.
      */
-    public void setProfession(@NotNull Profession profession);
+    void setProfession(@NotNull Profession profession);
 
     /**
      * Gets the current type of this villager.
      *
      * @return Current type.
      */
-    @NotNull
-    public Type getVillagerType();
+    @NotNull Type getVillagerType();
 
     /**
      * Sets the new type of this villager.
      *
      * @param type New type.
      */
-    public void setVillagerType(@NotNull Type type);
+    void setVillagerType(@NotNull Type type);
 
     /**
      * Gets the level of this villager.
@@ -52,7 +50,7 @@ public interface Villager extends AbstractVillager {
      *
      * @return this villager's level
      */
-    public int getVillagerLevel();
+    int getVillagerLevel();
 
     /**
      * Sets the level of this villager.
@@ -63,14 +61,14 @@ public interface Villager extends AbstractVillager {
      * @param level the new level
      * @throws IllegalArgumentException if level not between [1, 5]
      */
-    public void setVillagerLevel(int level);
+    void setVillagerLevel(int level);
 
     /**
      * Gets the trading experience of this villager.
      *
      * @return trading experience
      */
-    public int getVillagerExperience();
+    int getVillagerExperience();
 
     /**
      * Sets the trading experience of this villager.
@@ -78,20 +76,20 @@ public interface Villager extends AbstractVillager {
      * @param experience new experience
      * @throws IllegalArgumentException if experience &lt; 0
      */
-    public void setVillagerExperience(int experience);
+    void setVillagerExperience(int experience);
 
     // Paper start
     /**
      * Gets the amount of times a villager has restocked their trades today
      * @return The amount of trade restocks.
      */
-    public int getRestocksToday();
+    int getRestocksToday();
 
     /**
      * Sets the amount of times a villager has restocked their trades today
      * @param restocksToday new restock count
      */
-    public void setRestocksToday(int restocksToday);
+    void setRestocksToday(int restocksToday);
     // Paper end
 
     /**
@@ -104,20 +102,20 @@ public interface Villager extends AbstractVillager {
      * @param location the location of the bed
      * @return whether the sleep was successful
      */
-    public boolean sleep(@NotNull Location location);
+    boolean sleep(@NotNull Location location);
 
     /**
      * Causes this villager to wake up if he's currently sleeping.
      *
      * @throws IllegalStateException if not sleeping
      */
-    public void wakeup();
+    void wakeup();
 
     /**
      * Represents Villager type, usually corresponding to what biome they spawn
      * in.
      */
-    public enum Type implements Keyed {
+    enum Type implements Keyed {
 
         DESERT,
         JUNGLE,
@@ -128,7 +126,7 @@ public interface Villager extends AbstractVillager {
         TAIGA;
         private final NamespacedKey key;
 
-        private Type() {
+        Type() {
             this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
         }
 
@@ -143,7 +141,7 @@ public interface Villager extends AbstractVillager {
      * Represents the various different Villager professions there may be.
      * Villagers have different trading options depending on their profession,
      */
-    public enum Profession implements Keyed {
+    enum Profession implements Keyed {
         NONE,
         /**
          * Armorer profession. Wears a black apron. Armorers primarily trade for
@@ -217,7 +215,7 @@ public interface Villager extends AbstractVillager {
         WEAPONSMITH;
         private final NamespacedKey key;
 
-        private Profession() {
+        Profession() {
             this.key = NamespacedKey.minecraft(this.name().toLowerCase(Locale.ROOT));
         }
 
@@ -236,8 +234,7 @@ public interface Villager extends AbstractVillager {
      * @param uniqueId The {@link UUID} of the player to get the reputation of.
      * @return The player's copied reputation with this villager.
      */
-    @Nullable
-    public com.destroystokyo.paper.entity.villager.Reputation getReputation(@NotNull UUID uniqueId);
+    @Nullable com.destroystokyo.paper.entity.villager.Reputation getReputation(@NotNull UUID uniqueId);
 
     /**
      * Get all {@link com.destroystokyo.paper.entity.villager.Reputation reputations}
@@ -246,8 +243,7 @@ public interface Villager extends AbstractVillager {
      * @return All {@link com.destroystokyo.paper.entity.villager.Reputation reputations} for all players
      * in a copied map.
      */
-    @NotNull
-    public Map<UUID, com.destroystokyo.paper.entity.villager.Reputation> getReputations();
+    @NotNull Map<UUID, com.destroystokyo.paper.entity.villager.Reputation> getReputations();
 
     /**
      * Set the {@link com.destroystokyo.paper.entity.villager.Reputation reputation}
@@ -256,7 +252,7 @@ public interface Villager extends AbstractVillager {
      * @param uniqueId The {@link UUID} of the player to set the reputation of.
      * @param reputation The {@link com.destroystokyo.paper.entity.villager.Reputation reputation} to set.
      */
-    public void setReputation(@NotNull UUID uniqueId, @NotNull com.destroystokyo.paper.entity.villager.Reputation reputation);
+    void setReputation(@NotNull UUID uniqueId, @NotNull com.destroystokyo.paper.entity.villager.Reputation reputation);
 
     /**
      * Set all {@link com.destroystokyo.paper.entity.villager.Reputation reputations}
@@ -265,12 +261,12 @@ public interface Villager extends AbstractVillager {
      * @param reputations All {@link com.destroystokyo.paper.entity.villager.Reputation reputations}
      * for all players mapped by their {@link UUID unique IDs}.
      */
-    public void setReputations(@NotNull Map<UUID, com.destroystokyo.paper.entity.villager.Reputation> reputations);
+    void setReputations(@NotNull Map<UUID, com.destroystokyo.paper.entity.villager.Reputation> reputations);
 
     /**
      * Clear all reputations from this villager. This removes every single
      * reputation regardless of its impact and the player associated.
      */
-    public void clearReputations();
+    void clearReputations();
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/entity/WanderingTrader.java b/src/main/java/org/bukkit/entity/WanderingTrader.java
index 55394ed5c68cb0bf4333fc918e3b4c8c4e3db0c6..8562bda1907e1243bda1bf9baaa920ab5b3a1091 100644
--- a/src/main/java/org/bukkit/entity/WanderingTrader.java
+++ b/src/main/java/org/bukkit/entity/WanderingTrader.java
@@ -15,7 +15,7 @@ public interface WanderingTrader extends AbstractVillager {
      * @return The despawn delay before this {@link WanderingTrader} is forcibly
      * despawned
      */
-    public int getDespawnDelay();
+    int getDespawnDelay();
 
     /**
      * Sets the despawn delay before this {@link WanderingTrader} is forcibly
@@ -27,5 +27,5 @@ public interface WanderingTrader extends AbstractVillager {
      * @param despawnDelay The new despawn delay before this
      * {@link WanderingTrader} is forcibly despawned
      */
-    public void setDespawnDelay(int despawnDelay);
+    void setDespawnDelay(int despawnDelay);
 }
diff --git a/src/main/java/org/bukkit/entity/WitherSkull.java b/src/main/java/org/bukkit/entity/WitherSkull.java
index 33d20abc04a6629b67668f3267e527abe1d05a26..baa5e32f6e5580c27bb423f7415aeb659ac382a7 100644
--- a/src/main/java/org/bukkit/entity/WitherSkull.java
+++ b/src/main/java/org/bukkit/entity/WitherSkull.java
@@ -10,12 +10,12 @@ public interface WitherSkull extends Fireball {
      *
      * @param charged whether it should be charged
      */
-    public void setCharged(boolean charged);
+    void setCharged(boolean charged);
 
     /**
      * Gets whether or not the wither skull is charged.
      *
      * @return whether the wither skull is charged
      */
-    public boolean isCharged();
+    boolean isCharged();
 }
diff --git a/src/main/java/org/bukkit/entity/Wolf.java b/src/main/java/org/bukkit/entity/Wolf.java
index 0e5decadf31140d6cb121c298f935ccc12c7a7e7..167073bc5d2f6dcad44c8e1a8e8fc75cf2a04023 100644
--- a/src/main/java/org/bukkit/entity/Wolf.java
+++ b/src/main/java/org/bukkit/entity/Wolf.java
@@ -13,7 +13,7 @@ public interface Wolf extends Tameable, Sittable {
      *
      * @return Anger true if angry
      */
-    public boolean isAngry();
+    boolean isAngry();
 
     /**
      * Sets the anger of this wolf.
@@ -23,20 +23,19 @@ public interface Wolf extends Tameable, Sittable {
      * @param angry true if angry
      * @see #setTarget(org.bukkit.entity.LivingEntity)
      */
-    public void setAngry(boolean angry);
+    void setAngry(boolean angry);
 
     /**
      * Get the collar color of this wolf
      *
      * @return the color of the collar
      */
-    @NotNull
-    public DyeColor getCollarColor();
+    @NotNull DyeColor getCollarColor();
 
     /**
      * Set the collar color of this wolf
      *
      * @param color the color to apply
      */
-    public void setCollarColor(@NotNull DyeColor color);
+    void setCollarColor(@NotNull DyeColor color);
 }
diff --git a/src/main/java/org/bukkit/entity/Zoglin.java b/src/main/java/org/bukkit/entity/Zoglin.java
index ebf4ffac777a815d516d9e9b0d2aa6b85d8376ab..fd1642c77b256674bb79e6b60abb72018fcb4629 100644
--- a/src/main/java/org/bukkit/entity/Zoglin.java
+++ b/src/main/java/org/bukkit/entity/Zoglin.java
@@ -12,7 +12,7 @@ public interface Zoglin extends Monster, Ageable {
      * @deprecated see {@link Ageable#isAdult()}
      */
     @Deprecated
-    public boolean isBaby();
+    boolean isBaby();
 
     /**
      * Sets whether the zoglin is a baby
@@ -21,5 +21,5 @@ public interface Zoglin extends Monster, Ageable {
      * @deprecated see {@link Ageable#setBaby()} and {@link Ageable#setAdult()}
      */
     @Deprecated
-    public void setBaby(boolean flag);
+    void setBaby(boolean flag);
 }
diff --git a/src/main/java/org/bukkit/entity/Zombie.java b/src/main/java/org/bukkit/entity/Zombie.java
index a39fbc9fa0903be8ed8e89f3ef39f93c02dfc90b..f1915b9da197288778f824d4376ba232016bdf49 100644
--- a/src/main/java/org/bukkit/entity/Zombie.java
+++ b/src/main/java/org/bukkit/entity/Zombie.java
@@ -15,7 +15,7 @@ public interface Zombie extends Monster, Ageable {
      * @deprecated see {@link Ageable#isAdult()}
      */
     @Deprecated
-    public boolean isBaby();
+    boolean isBaby();
 
     /**
      * Sets whether the zombie is a baby
@@ -24,7 +24,7 @@ public interface Zombie extends Monster, Ageable {
      * @deprecated see {@link Ageable#setBaby()} and {@link Ageable#setAdult()}
      */
     @Deprecated
-    public void setBaby(boolean flag);
+    void setBaby(boolean flag);
 
     /**
      * Gets whether the zombie is a villager
@@ -33,7 +33,7 @@ public interface Zombie extends Monster, Ageable {
      * @deprecated check if instanceof {@link ZombieVillager}.
      */
     @Deprecated
-    public boolean isVillager();
+    boolean isVillager();
 
     /**
      * @param flag flag
@@ -41,7 +41,7 @@ public interface Zombie extends Monster, Ageable {
      */
     @Deprecated
     @Contract("_ -> fail")
-    public void setVillager(boolean flag);
+    void setVillager(boolean flag);
 
     /**
      * @param profession profession
@@ -49,7 +49,7 @@ public interface Zombie extends Monster, Ageable {
      */
     @Deprecated
     @Contract("_ -> fail")
-    public void setVillagerProfession(Villager.Profession profession);
+    void setVillagerProfession(Villager.Profession profession);
 
     /**
      * @return profession
@@ -58,7 +58,7 @@ public interface Zombie extends Monster, Ageable {
     @Deprecated
     @Nullable
     @Contract("-> null")
-    public Villager.Profession getVillagerProfession();
+    Villager.Profession getVillagerProfession();
 
     /**
      * Get if this entity is in the process of converting to a Drowned as a
diff --git a/src/main/java/org/bukkit/entity/ZombieVillager.java b/src/main/java/org/bukkit/entity/ZombieVillager.java
index 7cc1d9a966454af70b7c25735fe474fe3eb97eb4..5d203a33bb68432bf7d2ad899c5de0aa7f17ea89 100644
--- a/src/main/java/org/bukkit/entity/ZombieVillager.java
+++ b/src/main/java/org/bukkit/entity/ZombieVillager.java
@@ -29,15 +29,14 @@ public interface ZombieVillager extends Zombie {
      *
      * @return Current type.
      */
-    @NotNull
-    public Villager.Type getVillagerType();
+    @NotNull Villager.Type getVillagerType();
 
     /**
      * Sets the new type of this villager.
      *
      * @param type New type.
      */
-    public void setVillagerType(@NotNull Villager.Type type);
+    void setVillagerType(@NotNull Villager.Type type);
 
     /**
      * Get if this entity is in the process of converting to a Villager as a
diff --git a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
index 91cab8b13d5bba34007f124838b32a1df58c5ac7..27363eeeccc9456ff2c557c0cb9eb149facde3d8 100644
--- a/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/CommandMinecart.java
@@ -13,8 +13,7 @@ public interface CommandMinecart extends Minecart {
      *
      * @return Command that this CommandMinecart will run when powered.
      */
-    @NotNull
-    public String getCommand();
+    @NotNull String getCommand();
 
     /**
      * Sets the command that this CommandMinecart will run when activated.
@@ -24,7 +23,7 @@ public interface CommandMinecart extends Minecart {
      * @param command Command that this CommandMinecart will run when
      *     activated.
      */
-    public void setCommand(@Nullable String command);
+    void setCommand(@Nullable String command);
 
     /**
      * Sets the name of this CommandMinecart.  The name is used with commands
@@ -35,6 +34,6 @@ public interface CommandMinecart extends Minecart {
      * @deprecated in favour of {@link #customName(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setName(@Nullable String name);
+    void setName(@Nullable String name);
 
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java b/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
index db69687a7ad4b18d17ab1677cae5d8dd4dcd3678..91c82d6192bf04ba1d288e3a4af47239b5c9b416 100644
--- a/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/HopperMinecart.java
@@ -3,7 +3,7 @@ package org.bukkit.entity.minecart;
 import com.destroystokyo.paper.loottable.LootableEntityInventory;
 import org.bukkit.entity.Minecart;
 import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.loot.Lootable;
+
 
 /**
  * Represents a Minecart with a Hopper inside it
diff --git a/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java b/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java
index 2076af6c029027d3243ebfa518f4d69b716de7fe..44df6833e2709f1cff86fbe8e6e5ace39a4b9cbc 100644
--- a/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/PoweredMinecart.java
@@ -13,12 +13,12 @@ public interface PoweredMinecart extends Minecart {
      *
      * @return Number of ticks until the minecart runs out of fuel
      */
-    public int getFuel();
+    int getFuel();
 
     /**
      * Set the number of ticks until the minecart runs out of fuel.
      *
      * @param fuel Number of ticks until the minecart runs out of fuel
      */
-    public void setFuel(int fuel);
+    void setFuel(int fuel);
 }
diff --git a/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java b/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
index 238d118f7788b13cd86b7e9ea3a0fc38e2e09715..16ca1d622b967e9ce6a298b7b8f0c4977029a41d 100644
--- a/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
+++ b/src/main/java/org/bukkit/entity/minecart/StorageMinecart.java
@@ -3,7 +3,7 @@ package org.bukkit.entity.minecart;
 import com.destroystokyo.paper.loottable.LootableEntityInventory;
 import org.bukkit.entity.Minecart;
 import org.bukkit.inventory.InventoryHolder;
-import org.bukkit.loot.Lootable;
+
 
 /**
  * Represents a minecart with a chest. These types of {@link Minecart
diff --git a/src/main/java/org/bukkit/event/Cancellable.java b/src/main/java/org/bukkit/event/Cancellable.java
index 799b0b0f3cd842edd2bc1005c2e848f9a0b7b43c..fb1bc0530df153af1d98131f6459de0214e197b4 100644
--- a/src/main/java/org/bukkit/event/Cancellable.java
+++ b/src/main/java/org/bukkit/event/Cancellable.java
@@ -8,7 +8,7 @@ public interface Cancellable {
      *
      * @return true if this event is cancelled
      */
-    public boolean isCancelled();
+    boolean isCancelled();
 
     /**
      * Sets the cancellation state of this event. A cancelled event will not
@@ -16,5 +16,5 @@ public interface Cancellable {
      *
      * @param cancel true if you wish to cancel this event
      */
-    public void setCancelled(boolean cancel);
+    void setCancelled(boolean cancel);
 }
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index 8ec56cd6b8e0f5c5dd8c7c88b4671e18dcf109d0..a71ff8fbe5dd3e30f349a160fb87becd148285f5 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -113,6 +113,6 @@ public abstract class Event {
          * take place if possible, even if the server would not normally allow
          * the action. Some actions may not be allowed.
          */
-        ALLOW;
+        ALLOW
     }
 }
diff --git a/src/main/java/org/bukkit/event/EventPriority.java b/src/main/java/org/bukkit/event/EventPriority.java
index 61ffa50f2288609cd59c3a75d2ebe81ef735fed9..7bc7e0a422cfb93eeedcbad3e2c177313a773cc1 100644
--- a/src/main/java/org/bukkit/event/EventPriority.java
+++ b/src/main/java/org/bukkit/event/EventPriority.java
@@ -37,7 +37,7 @@ public enum EventPriority {
 
     private final int slot;
 
-    private EventPriority(int slot) {
+    EventPriority(int slot) {
         this.slot = slot;
     }
 
diff --git a/src/main/java/org/bukkit/event/HandlerList.java b/src/main/java/org/bukkit/event/HandlerList.java
index ed78cca71f83b296d082d0af147ca8d622c7606a..9ef6901e1f19f68d6c2459c2a876daa91c8fdbd7 100644
--- a/src/main/java/org/bukkit/event/HandlerList.java
+++ b/src/main/java/org/bukkit/event/HandlerList.java
@@ -31,7 +31,7 @@ public class HandlerList {
     /**
      * List of all HandlerLists which have been created, for use in bakeAll()
      */
-    private static ArrayList<HandlerList> allLists = new ArrayList<HandlerList>();
+    private static final ArrayList<HandlerList> allLists = new ArrayList<>();
 
     /**
      * Bake all handler lists. Best used just after all normal event
@@ -94,9 +94,9 @@ public class HandlerList {
      * The HandlerList is then added to meta-list for use in bakeAll()
      */
     public HandlerList() {
-        handlerslots = new EnumMap<EventPriority, ArrayList<RegisteredListener>>(EventPriority.class);
+        handlerslots = new EnumMap<>(EventPriority.class);
         for (EventPriority o : EventPriority.values()) {
-            handlerslots.put(o, new ArrayList<RegisteredListener>());
+            handlerslots.put(o, new ArrayList<>());
         }
         synchronized (allLists) {
             allLists.add(this);
@@ -178,11 +178,11 @@ public class HandlerList {
      */
     public synchronized void bake() {
         if (handlers != null) return; // don't re-bake when still valid
-        List<RegisteredListener> entries = new ArrayList<RegisteredListener>();
+        List<RegisteredListener> entries = new ArrayList<>();
         for (Entry<EventPriority, ArrayList<RegisteredListener>> entry : handlerslots.entrySet()) {
             entries.addAll(entry.getValue());
         }
-        handlers = entries.toArray(new RegisteredListener[entries.size()]);
+        handlers = entries.toArray(new RegisteredListener[0]);
     }
 
     /**
@@ -206,7 +206,7 @@ public class HandlerList {
      */
     @NotNull
     public static ArrayList<RegisteredListener> getRegisteredListeners(@NotNull Plugin plugin) {
-        ArrayList<RegisteredListener> listeners = new ArrayList<RegisteredListener>();
+        ArrayList<RegisteredListener> listeners = new ArrayList<>();
         synchronized (allLists) {
             for (HandlerList h : allLists) {
                 synchronized (h) {
diff --git a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
index a1350c0f74d445dca09eea6e10abac050bb06990..f82e5694d7bc245f5a1375f1b68e441a052e7bfa 100644
--- a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
@@ -23,7 +23,7 @@ public class BlockCanBuildEvent extends BlockEvent {
     private static final HandlerList handlers = new HandlerList();
     protected boolean buildable;
 
-    protected BlockData blockData;
+    protected final BlockData blockData;
     private final Player player;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/block/BlockEvent.java b/src/main/java/org/bukkit/event/block/BlockEvent.java
index 62a4d13453e5430020933471efa938ceb689baaa..600874ae3e83870c410ec754ff989cb0cff1d6e3 100644
--- a/src/main/java/org/bukkit/event/block/BlockEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents a block related event.
  */
 public abstract class BlockEvent extends Event {
-    protected Block block;
+    protected final Block block;
 
     public BlockEvent(@NotNull final Block theBlock) {
         block = theBlock;
diff --git a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
index 1af39280568e8da784ea8d584b7e3fcca2ee60b5..dce16072aee6e524b968b15760e0e05fbd6fde16 100644
--- a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
@@ -16,7 +16,7 @@ import org.jetbrains.annotations.NotNull;
 public class BlockFromToEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     protected Block to;
-    protected BlockFace face;
+    protected final BlockFace face;
     protected boolean cancel;
 
     public BlockFromToEvent(@NotNull final Block block, @NotNull final BlockFace face) {
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
index 40ddc364971af1f266ee367f4d09d83a8e914e23..a91499078550de4f4ae9b080547a58c23914ff45 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
@@ -1,13 +1,14 @@
 package org.bukkit.event.block;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.List;
+
 /**
  * Called when a piston extends
  */
@@ -51,7 +52,7 @@ public class BlockPistonExtendEvent extends BlockPistonEvent {
     @NotNull
     public List<Block> getBlocks() {
         if (blocks == null) {
-            ArrayList<Block> tmp = new ArrayList<Block>();
+            ArrayList<Block> tmp = new ArrayList<>();
             for (int i = 0; i < this.getLength(); i++) {
                 tmp.add(block.getRelative(getDirection(), i + 1));
             }
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
index 340fa397e68c024df380a28db21545a0c83d9fa6..1377505d0bb40b00c1d5e824db5aa973ae838ba9 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonRetractEvent.java
@@ -1,18 +1,19 @@
 package org.bukkit.event.block;
 
-import java.util.List;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockFace;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.List;
+
 /**
  * Called when a piston retracts
  */
 public class BlockPistonRetractEvent extends BlockPistonEvent {
     private static final HandlerList handlers = new HandlerList();
-    private List<Block> blocks;
+    private final List<Block> blocks;
 
     public BlockPistonRetractEvent(@NotNull final Block block, @NotNull final List<Block> blocks, @NotNull final BlockFace direction) {
         super(block, direction);
diff --git a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
index be0a2d1f234d8265d98e54e518a994957b1f3ab7..82e383725788a2a7311d51208243b3713dcf8eea 100644
--- a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
@@ -18,11 +18,11 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     protected boolean cancel;
     protected boolean canBuild;
-    protected Block placedAgainst;
-    protected BlockState replacedBlockState;
-    protected ItemStack itemInHand;
-    protected Player player;
-    protected EquipmentSlot hand;
+    protected final Block placedAgainst;
+    protected final BlockState replacedBlockState;
+    protected final ItemStack itemInHand;
+    protected final Player player;
+    protected final EquipmentSlot hand;
 
     @Deprecated
     public BlockPlaceEvent(@NotNull final Block placedBlock, @NotNull final BlockState replacedBlockState, @NotNull final Block placedAgainst, @NotNull final ItemStack itemInHand, @NotNull final Player thePlayer, final boolean canBuild) {
@@ -122,7 +122,7 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
      * @return boolean whether the server would allow a player to build here
      */
     public boolean canBuild() {
-        return this.canBuild;
+        return !this.canBuild;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
index 9bd0440c3776c0b73c6eb11274070b11d0ade856..8869850d867c4b7363d9bc792ff61852d183f851 100644
--- a/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
@@ -40,7 +40,7 @@ public class FluidLevelChangeEvent extends BlockEvent implements Cancellable {
      * @param newData the new data
      */
     public void setNewData(@NotNull BlockData newData) {
-        Preconditions.checkArgument(newData != null, "newData null");
+        Preconditions.checkArgument(true, "newData null");
         Preconditions.checkArgument(this.newData.getMaterial().equals(newData.getMaterial()), "Cannot change fluid type");
 
         this.newData = newData;
diff --git a/src/main/java/org/bukkit/event/block/NotePlayEvent.java b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
index a3887067d1b65fb100ac1407a43c455f5d215510..9b1d408e76453fd96615d883ebc5427afec4c67f 100644
--- a/src/main/java/org/bukkit/event/block/NotePlayEvent.java
+++ b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class NotePlayEvent extends BlockEvent implements Cancellable {
 
-    private static HandlerList handlers = new HandlerList();
+    private static final HandlerList handlers = new HandlerList();
     private Instrument instrument;
     private Note note;
     private boolean cancelled = false;
@@ -62,9 +62,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
      */
     @Deprecated
     public void setInstrument(@NotNull Instrument instrument) {
-        if (instrument != null) {
-            this.instrument = instrument;
-        }
+	    this.instrument = instrument;
     }
 
     /**
@@ -75,9 +73,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
      */
     @Deprecated
     public void setNote(@NotNull Note note) {
-        if (note != null) {
-            this.note = note;
-        }
+	    this.note = note;
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
index d5632d352590dec6982a372b285a8d4a332fa589..84172babb4435a5106b266c9c15f89c3c7922d1d 100644
--- a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
+++ b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
@@ -14,8 +14,8 @@ import org.jetbrains.annotations.Nullable;
  */
 public class UnknownCommandEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
-    @NotNull private CommandSender sender;
-    @NotNull private String commandLine;
+    @NotNull private final CommandSender sender;
+    @NotNull private final String commandLine;
     @Nullable private Component message;
 
     @Deprecated
diff --git a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
index b898fdefc77e961b03977c1dd70fb8b8bf320871..58635b810c45c16e36611edc064641fc55fd9ad0 100644
--- a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
@@ -1,7 +1,5 @@
 package org.bukkit.event.enchantment;
 
-import java.util.HashMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.block.Block;
 import org.bukkit.enchantments.Enchantment;
@@ -13,6 +11,9 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.HashMap;
+import java.util.Map;
+
 /**
  * Called when an ItemStack is successfully enchanted (currently at
  * enchantment table)
@@ -33,7 +34,7 @@ public class EnchantItemEvent extends InventoryEvent implements Cancellable {
         this.table = table;
         this.item = item;
         this.level = level;
-        this.enchants = new HashMap<Enchantment, Integer>(enchants);
+        this.enchants = new HashMap<>(enchants);
         this.cancelled = false;
         this.button = i;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index feec8b1e15cd407b7a50cfcfaba11374c0e37e82..ef476eddc77e4341a5929bd916756d3e2102eb2f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -3,8 +3,6 @@ package org.bukkit.event.entity;
 import com.google.common.base.Function;
 import com.google.common.base.Functions;
 import com.google.common.collect.ImmutableMap;
-import java.util.EnumMap;
-import java.util.Map;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.entity.Entity;
@@ -13,6 +11,9 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.EnumMap;
+import java.util.Map;
+
 /**
  * Stores data for damage events
  */
@@ -27,7 +28,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     private final DamageCause cause;
 
     public EntityDamageEvent(@NotNull final Entity damagee, @NotNull final DamageCause cause, final double damage) {
-        this(damagee, cause, new EnumMap<DamageModifier, Double>(ImmutableMap.of(DamageModifier.BASE, damage)), new EnumMap<DamageModifier, Function<? super Double, Double>>(ImmutableMap.of(DamageModifier.BASE, ZERO)));
+        this(damagee, cause, new EnumMap<>(ImmutableMap.of(DamageModifier.BASE, damage)), new EnumMap<DamageModifier, Function<? super Double, Double>>(ImmutableMap.of(DamageModifier.BASE, ZERO)));
     }
 
     public EntityDamageEvent(@NotNull final Entity damagee, @NotNull final DamageCause cause, @NotNull final Map<DamageModifier, Double> modifiers, @NotNull final Map<DamageModifier, ? extends Function<? super Double, Double>> modifierFunctions) {
@@ -37,7 +38,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         Validate.noNullElements(modifiers.values(), "Cannot have null modifier values");
         Validate.isTrue(modifiers.keySet().equals(modifierFunctions.keySet()), "Must have a modifier function for each DamageModifier");
         Validate.noNullElements(modifierFunctions.values(), "Cannot have null modifier function");
-        this.originals = new EnumMap<DamageModifier, Double>(modifiers);
+        this.originals = new EnumMap<>(modifiers);
         this.cause = cause;
         this.modifiers = modifiers;
         this.modifierFunctions = modifierFunctions;
@@ -66,10 +67,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
         if (damage != null) {
             return damage;
         }
-        if (type == null) {
-            throw new IllegalArgumentException("Cannot have null DamageModifier");
-        }
-        return 0;
+	    return 0;
     }
 
     /**
@@ -85,7 +83,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      */
     public void setDamage(@NotNull DamageModifier type, double damage) throws IllegalArgumentException, UnsupportedOperationException {
         if (!modifiers.containsKey(type)) {
-            throw type == null ? new IllegalArgumentException("Cannot have null DamageModifier") : new UnsupportedOperationException(type + " is not applicable to " + getEntity());
+            throw new UnsupportedOperationException(type + " is not applicable to " + getEntity());
         }
         modifiers.put(type, damage);
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityEvent.java
index e3a9e32933fe84644f7458d2e0b8b09d3eacb21c..2340a69fd08bebe68d88767629686c305aa44cb6 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents an Entity-related event
  */
 public abstract class EntityEvent extends Event {
-    protected Entity entity;
+    protected final Entity entity;
 
     public EntityEvent(@NotNull final Entity what) {
         entity = what;
diff --git a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
index e2c0cb33938c67bab58341ec2d7a172e9ddb4d38..23d5d9b4308e631751bc9db6c5507bac2b8dbf64 100644
--- a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityInteractEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    protected Block block;
+    protected final Block block;
     private boolean cancelled;
 
     public EntityInteractEvent(@NotNull final Entity entity, @NotNull final Block block) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
index 869ad3b12ebd8275d04b0c21b5ecc0389da01490..8884dd0eff2011ff1913c66f871994128b370c84 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityPortalExitEvent extends EntityTeleportEvent {
     private static final HandlerList handlers = new HandlerList();
-    private Vector before;
+    private final Vector before;
     private Vector after;
 
     public EntityPortalExitEvent(@NotNull final Entity entity, @NotNull final Location from, @NotNull final Location to, @NotNull final Vector before, @NotNull final Vector after) {
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
index 601904150156d475c18286b485f3409307a75950..f70ad2b44707d167f7b70cb0c2436a732e3b93b1 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
@@ -170,6 +170,6 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
         /**
          * A currently unknown reason for the entity changing target.
          */
-        UNKNOWN;
+        UNKNOWN
     }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
index e0e068799a1868c8e561869015f41f553ef4fbdb..72704d7e98be1269ac118b5f0a1a65b6d18c3a8b 100644
--- a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
@@ -80,6 +80,6 @@ public class EntityUnleashEvent extends EntityEvent {
          * When the entity's leashholder is more than 10 blocks away
          */
         DISTANCE,
-        UNKNOWN;
+        UNKNOWN
     }
 }
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
index d3949edfc736b3d67a627ef378748b374769e183..f7829a522e17228431022c2923bdd6c9f3ba2ed3 100644
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
@@ -1,13 +1,10 @@
 package org.bukkit.event.entity;
 
-import java.util.Collections;
-import org.bukkit.entity.Entity;
 import com.destroystokyo.paper.event.entity.EntityZapEvent;
 import org.bukkit.entity.LightningStrike;
 import org.bukkit.entity.Pig;
 import org.bukkit.entity.PigZombie;
 import org.bukkit.event.Cancellable;
-import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
 /**
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index 3d45d2e41aad6992b40a22030f2a63baeec78757..8f993b3007cc71c40e395c42363d4089c1bb9ba1 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -2,7 +2,6 @@ package org.bukkit.event.entity;
 
 import java.util.List;
 
-import org.bukkit.GameMode;
 import org.bukkit.entity.Player;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
@@ -71,7 +70,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
 
     @Deprecated // Paper
     // Paper start
-    private List<ItemStack> itemsToKeep = new java.util.ArrayList<>();
+    private final List<ItemStack> itemsToKeep = new java.util.ArrayList<>();
 
     /**
      * A mutable collection to add items that the player should retain in their inventory on death (Similar to KeepInventory game rule)
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
index 90d7e8141a18ec7dd97288e90803e37591a51a4f..ddfee62366a9abffbe99cef1bc5cb684fb2d2a79 100644
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
@@ -37,7 +37,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      */
     @NotNull
     public ThrownPotion getPotion() {
-        return (ThrownPotion) getEntity();
+        return getEntity();
     }
 
     /**
@@ -47,7 +47,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      */
     @NotNull
     public Collection<LivingEntity> getAffectedEntities() {
-        return new ArrayList<LivingEntity>(affectedEntities.keySet());
+        return new ArrayList<>(affectedEntities.keySet());
     }
 
     /**
diff --git a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
index b550029cf3a7bc55137851eab734abab8965306d..28cd77e74e2065ce0886df967050f1435ef8c3b3 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
@@ -87,6 +87,6 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
         /**
          * Villager gained employment.
          */
-        EMPLOYED;
+        EMPLOYED
     }
 }
diff --git a/src/main/java/org/bukkit/event/hanging/HangingEvent.java b/src/main/java/org/bukkit/event/hanging/HangingEvent.java
index f01a1a0f043f2ba832ffd1b1de4b6ee48c375135..2bff94de4bd00cb19688bea6e1136cdb19f7e0fb 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents a hanging entity-related event.
  */
 public abstract class HangingEvent extends Event {
-    protected Hanging hanging;
+    protected final Hanging hanging;
 
     protected HangingEvent(@NotNull final Hanging painting) {
         this.hanging = painting;
diff --git a/src/main/java/org/bukkit/event/inventory/BrewEvent.java b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
index 8fbfad91b0574a7c2736cbd265d88400465d9ffc..e50aee8c03b1cb145f667e3259cbad6abff76d6e 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
@@ -13,8 +13,8 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BrewEvent extends BlockEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    private BrewerInventory contents;
-    private int fuelLevel;
+    private final BrewerInventory contents;
+    private final int fuelLevel;
     private boolean cancelled;
 
     public BrewEvent(@NotNull Block brewer, @NotNull BrewerInventory contents, int fuelLevel) {
diff --git a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
index cab13877fb38c361f18ce9a433e98fea689c9722..395f8a6eb09c3904659c0eb366e817ae7028b49e 100644
--- a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  * Called when the recipe of an Item is completed inside a crafting matrix.
  */
 public class CraftItemEvent extends InventoryClickEvent {
-    private Recipe recipe;
+    private final Recipe recipe;
 
     public CraftItemEvent(@NotNull Recipe recipe, @NotNull InventoryView what, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action) {
         super(what, type, slot, click, action);
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
index d28bf1fc0c435b5710adc053b09182cedef1ae44..32b8b248a918efc36cd84dde19f4b9804b3358b0 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
@@ -49,9 +49,9 @@ public class InventoryClickEvent extends InventoryInteractEvent {
     private static final HandlerList handlers = new HandlerList();
     private final ClickType click;
     private final InventoryAction action;
-    private SlotType slot_type;
-    private int whichSlot;
-    private int rawSlot;
+    private final SlotType slot_type;
+    private final int whichSlot;
+    private final int rawSlot;
     private ItemStack current = null;
     private int hotbarKey = -1;
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
index 5d3fe64ab9c5d6a9d0525495c52b77cedcb880b0..8c7012e8426962a7e986bc5af915df63fdefb07e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class InventoryEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
-    protected InventoryView transaction;
+    protected final InventoryView transaction;
 
     public InventoryEvent(@NotNull InventoryView transaction) {
         this.transaction = transaction;
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index 090d22bd30f7947103771aaaf09a2398970ac337..d59a69410872cdf8b6195e6bb49e30123259a00a 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -148,11 +148,11 @@ public enum InventoryType {
         return defaultTitleComponent;
     }
     // Paper end
-    private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {
+    InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {
         this(defaultSize, defaultTitle, true);
     }
 
-    private InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle, boolean isCreatable) {
+    InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle, boolean isCreatable) {
         size = defaultSize;
         title = defaultTitle;
         this.isCreatable = isCreatable;
@@ -209,6 +209,6 @@ public enum InventoryType {
          * The fuel slot in a furnace inventory, or the ingredient slot in a
          * brewing stand inventory.
          */
-        FUEL;
+        FUEL
     }
 }
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
index f1f6f4ab4f81a3f21e757fef4a30b00e94371f8d..04e9626ef920f90a8e287a36e003bc4c4a6c5ede 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
@@ -1,7 +1,6 @@
 package org.bukkit.event.inventory;
 
 import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
-import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.AnvilInventory;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
index efd29d198dd847e22988963f70ad57e1b810aeb7..82a8dda53ff613b1fd171d91d693749bb88c8d09 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
@@ -9,8 +9,8 @@ import org.jetbrains.annotations.Nullable;
 
 public class PrepareItemCraftEvent extends InventoryEvent {
     private static final HandlerList handlers = new HandlerList();
-    private boolean repair;
-    private CraftingInventory matrix;
+    private final boolean repair;
+    private final CraftingInventory matrix;
 
     public PrepareItemCraftEvent(@NotNull CraftingInventory what, @NotNull InventoryView view, boolean isRepair) {
         super(view);
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
index 0bc0ca4f96c800e9c46c61710f44446691d8b93f..4c8659b479842853739b43d685f5bc82820639c7 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
@@ -1,7 +1,6 @@
 package org.bukkit.event.inventory;
 
 import com.destroystokyo.paper.event.inventory.PrepareResultEvent;
-import org.bukkit.event.HandlerList;
 import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.SmithingInventory;
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index c9af02b0f62b3d18da1e91d1ea02ce0864fc60b9..f1d8b3c39fd84dabb5499564d8ab73d34cbd267c 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -1,14 +1,14 @@
 package org.bukkit.event.player;
 
-import java.net.InetAddress;
-import java.util.UUID;
-
 import com.destroystokyo.paper.profile.PlayerProfile;
 import org.bukkit.Bukkit;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
 import org.jetbrains.annotations.NotNull;
 
+import java.net.InetAddress;
+import java.util.UUID;
+
 /**
  * Stores details for players attempting to log in.
  * <p>
@@ -103,7 +103,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      */
     @Deprecated
     public void setResult(@NotNull final PlayerPreLoginEvent.Result result) {
-        this.result = result == null ? null : Result.valueOf(result.name());
+        this.result = Result.valueOf(result.name());
     }
 
     // Paper start
@@ -149,7 +149,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      */
     @Deprecated
     public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final net.kyori.adventure.text.Component message) {
-        this.result = result == null ? null : Result.valueOf(result.name());
+        this.result = Result.valueOf(result.name());
         this.message = message;
     }
     // Paper end
@@ -209,7 +209,7 @@ public class AsyncPlayerPreLoginEvent extends Event {
      */
     @Deprecated
     public void disallow(@NotNull final PlayerPreLoginEvent.Result result, @NotNull final String message) {
-        this.result = result == null ? null : Result.valueOf(result.name());
+        this.result = Result.valueOf(result.name());
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
index 24b371b11347abf31fda4dadde8e0a7af60b181b..fe2dfaf70160f04e446023481da4eb7b28ce0bba 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
@@ -50,7 +50,7 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
         /**
          * Entering the bed is prevented due to there being some other problem.
          */
-        OTHER_PROBLEM;
+        OTHER_PROBLEM
     }
 
     private static final HandlerList handlers = new HandlerList();
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
index 213837794c603cb9f152f917941b912326a08030..37532a7672f5785de557380a8af5b8ba28417425 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
@@ -33,7 +33,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
         super(player);
         this.message = message;
         this.format = "<%1$s> %2$s";
-        this.recipients = new HashSet<Player>(player.getServer().getOnlinePlayers());
+        this.recipients = new HashSet<>(player.getServer().getOnlinePlayers());
     }
 
     public PlayerChatEvent(@NotNull final Player player, @NotNull final String message, @NotNull final String format, @NotNull final Set<Player> recipients) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
index a6dae91073ffc054d616d73941ff4d033989f5f3..7fc17fcccdf59d09194940daf9ca59fb3dfd9157 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
@@ -53,7 +53,7 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
 
     public PlayerCommandPreprocessEvent(@NotNull final Player player, @NotNull final String message) {
         super(player);
-        this.recipients = new HashSet<Player>(player.getServer().getOnlinePlayers());
+        this.recipients = new HashSet<>(player.getServer().getOnlinePlayers());
         this.message = message;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
index 917338044bfffe865af76c16616133970d0cb268..cfc124008a702a8c38cfd6d70863416b62d4ad0d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
@@ -70,7 +70,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      * @param hatchType The type of the mob being hatched by the egg
      */
     public void setHatchingType(@NotNull EntityType hatchType) {
-        if (!hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
+        if (hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
         this.hatchType = hatchType;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
index 1d3d62969c3b1a833b156c972586ac412589b4d4..c7eb462d9dc97e94420d3d0ad94b17862984cc10 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
@@ -12,9 +12,9 @@ import org.jetbrains.annotations.NotNull;
  */
 public class PlayerInteractEntityEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    protected Entity clickedEntity;
+    protected final Entity clickedEntity;
     boolean cancelled = false;
-    private EquipmentSlot hand;
+    private final EquipmentSlot hand;
 
     public PlayerInteractEntityEvent(@NotNull final Player who, @NotNull final Entity clickedEntity) {
         this(who, clickedEntity, EquipmentSlot.HAND);
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
index a01f86e6aba8b66ecc713da0787cd861e2930a2a..b80cc0e3ec77d3f90b2eed3ab7edb5518bf921ea 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
@@ -28,14 +28,14 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
-    protected ItemStack item;
-    protected Action action;
-    protected Block blockClicked;
-    protected BlockFace blockFace;
+    protected final ItemStack item;
+    protected final Action action;
+    protected final Block blockClicked;
+    protected final BlockFace blockFace;
     private Result useClickedBlock;
     private Result useItemInHand;
-    private EquipmentSlot hand;
-    private Location interactionPoint; // Paper
+    private final EquipmentSlot hand;
+    private final Location interactionPoint; // Paper
 
     public PlayerInteractEvent(@NotNull final Player who, @NotNull final Action action, @Nullable final ItemStack item, @Nullable final Block clickedBlock, @NotNull final BlockFace clickedFace) {
         this(who, action, item, clickedBlock, clickedFace, EquipmentSlot.HAND);
@@ -121,7 +121,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
      */
     @NotNull
     public Material getMaterial() {
-        if (!hasItem()) {
+        if (hasItem()) {
             return Material.AIR;
         }
 
@@ -143,7 +143,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
      * @return boolean true if it did
      */
     public boolean hasItem() {
-        return this.item != null;
+        return this.item == null;
     }
 
     /**
@@ -153,7 +153,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
      * @return boolean true if the item in hand was a block
      */
     public boolean isBlockInHand() {
-        if (!hasItem()) {
+        if (hasItem()) {
             return false;
         }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
index 373f4b5b5185aa81ff728da89c9cc4e0ccf87889..44efdf074c951a1772712b553e00017fe7ddaf89 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
@@ -8,6 +8,9 @@ import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Objects;
+
+
 /**
  * This event will fire when a player is finishing consuming an item (food,
  * potion, milk bucket).
@@ -52,11 +55,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
      * @param item the item being consumed
      */
     public void setItem(@Nullable ItemStack item) {
-        if (item == null) {
-            this.item = new ItemStack(Material.AIR);
-        } else {
-            this.item = item;
-        }
+	    this.item = Objects.requireNonNullElseGet(item, () -> new ItemStack(Material.AIR));
     }
 
     // Paper start
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index 1a58734d919fae247eeb85dd785fd59990856505..59f86861920e57e3ef7977c263596cfc514ce418 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -94,7 +94,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
     }
 
     private void validateLocation(@NotNull Location loc) {
-        Preconditions.checkArgument(loc != null, "Cannot use null location!");
+        Preconditions.checkArgument(true, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
index 4c2102a11c3d682d98f0db4ccafa35231e66bcdd..dc5755670dacd27ab859e39ac1db91875a3d4698 100644
--- a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
@@ -79,6 +79,6 @@ public class PlayerResourcePackStatusEvent extends PlayerEvent {
         /**
          * The client accepted the pack and is beginning a download of it.
          */
-        ACCEPTED;
+        ACCEPTED
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
index 553d7740489fe729166c8ca8ef8c7834db3663ad..e2a130b01f83efebfe77690b049fdb5a377e80de 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTeleportEvent.java
@@ -77,7 +77,7 @@ public class PlayerTeleportEvent extends PlayerMoveEvent {
          * Indicates the teleportation was caused by an event not covered by
          * this enum
          */
-        UNKNOWN;
+        UNKNOWN
     }
 
     @NotNull
diff --git a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
index c9a252d7e2f8c82b8ce10c02a92ada4529495f71..3fbcd49bee41bbc4f4e390d1bf1b06ff32123fd4 100644
--- a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
@@ -12,7 +12,7 @@ public class ServerLoadEvent extends ServerEvent {
      * Represents the context in which the enclosing event has been completed.
      */
     public enum LoadType {
-        STARTUP, RELOAD;
+        STARTUP, RELOAD
     }
 
     private static final HandlerList handlers = new HandlerList();
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
index 63df270565ed717574d6baa7839d43350944b281..47942a49a7018162c11071b2e0035165928de03c 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents a vehicle-related event.
  */
 public abstract class VehicleEvent extends Event {
-    protected Vehicle vehicle;
+    protected final Vehicle vehicle;
 
     public VehicleEvent(@NotNull final Vehicle vehicle) {
         this.vehicle = vehicle;
diff --git a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
index 418f9391d86fff0d0a75da0574edccbb29aa9931..76e7571e2ffa83c63a98c8bbd0b417811ad315f5 100644
--- a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
@@ -87,6 +87,6 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
         /**
          * Unknown trigger.
          */
-        UNKNOWN;
+        UNKNOWN
     }
 }
diff --git a/src/main/java/org/bukkit/event/weather/WeatherEvent.java b/src/main/java/org/bukkit/event/weather/WeatherEvent.java
index e1854d80736494ef51e47c9470a73ef38894b6b1..fe252474aef39b61e034e8472061ff69393596f8 100644
--- a/src/main/java/org/bukkit/event/weather/WeatherEvent.java
+++ b/src/main/java/org/bukkit/event/weather/WeatherEvent.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents a Weather-related event
  */
 public abstract class WeatherEvent extends Event {
-    protected World world;
+    protected final World world;
 
     public WeatherEvent(@NotNull final World where) {
         world = where;
diff --git a/src/main/java/org/bukkit/event/world/ChunkEvent.java b/src/main/java/org/bukkit/event/world/ChunkEvent.java
index 7ffc6a77bae33559dffc97d4df86ed3c2a17148c..fdadc7b07c77cae047eb63abcd1838bd3f0f910c 100644
--- a/src/main/java/org/bukkit/event/world/ChunkEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkEvent.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
  * Represents a Chunk related event
  */
 public abstract class ChunkEvent extends WorldEvent {
-    protected Chunk chunk;
+    protected final Chunk chunk;
 
     protected ChunkEvent(@NotNull final Chunk chunk) {
         super(chunk.getWorld());
diff --git a/src/main/java/org/bukkit/generator/ChunkGenerator.java b/src/main/java/org/bukkit/generator/ChunkGenerator.java
index 5ba77d40a38e5e592ee265e4fbd510043a0b4345..83b0e8c89b2d6b9726c34d51c421d8ca428f7087 100644
--- a/src/main/java/org/bukkit/generator/ChunkGenerator.java
+++ b/src/main/java/org/bukkit/generator/ChunkGenerator.java
@@ -1,8 +1,5 @@
 package org.bukkit.generator;
 
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Random;
 import org.bukkit.Bukkit;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -14,6 +11,10 @@ import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
 /**
  * A chunk generator is responsible for the initial shaping of an entire
  * chunk. For example, the nether chunk generator should shape netherrack and
@@ -138,15 +139,11 @@ public abstract class ChunkGenerator {
     public boolean canSpawn(@NotNull World world, int x, int z) {
         Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
 
-        switch (world.getEnvironment()) {
-        case NETHER:
-            return true;
-        case THE_END:
-            return highest.getType() != Material.AIR && highest.getType() != Material.WATER && highest.getType() != Material.LAVA;
-        case NORMAL:
-        default:
-            return highest.getType() == Material.SAND || highest.getType() == Material.GRAVEL;
-        }
+        return switch (world.getEnvironment()) {
+            case NETHER -> true;
+            case THE_END -> highest.getType() != Material.AIR && highest.getType() != Material.WATER && highest.getType() != Material.LAVA;
+            default -> highest.getType() == Material.SAND || highest.getType() == Material.GRAVEL;
+        };
     }
 
     /**
@@ -158,7 +155,7 @@ public abstract class ChunkGenerator {
      */
     @NotNull
     public List<BlockPopulator> getDefaultPopulators(@NotNull World world) {
-        return new ArrayList<BlockPopulator>();
+        return new ArrayList<>();
     }
 
     /**
@@ -246,7 +243,7 @@ public abstract class ChunkGenerator {
     /**
      * Data for a Chunk.
      */
-    public static interface ChunkData {
+    public interface ChunkData {
         /**
          * Get the maximum height for the chunk.
          *
@@ -254,7 +251,7 @@ public abstract class ChunkGenerator {
          *
          * @return the maximum height
          */
-        public int getMaxHeight();
+        int getMaxHeight();
 
         /**
          * Set the block at x,y,z in the chunk data to material.
@@ -266,7 +263,7 @@ public abstract class ChunkGenerator {
          * @param z the z location in the chunk from 0-15 inclusive
          * @param material the type to set the block to
          */
-        public void setBlock(int x, int y, int z, @NotNull Material material);
+        void setBlock(int x, int y, int z, @NotNull Material material);
 
         /**
          * Set the block at x,y,z in the chunk data to material.
@@ -278,7 +275,7 @@ public abstract class ChunkGenerator {
          * @param z the z location in the chunk from 0-15 inclusive
          * @param material the type to set the block to
          */
-        public void setBlock(int x, int y, int z, @NotNull MaterialData material);
+        void setBlock(int x, int y, int z, @NotNull MaterialData material);
 
         /**
          * Set the block at x,y,z in the chunk data to material.
@@ -290,7 +287,7 @@ public abstract class ChunkGenerator {
          * @param z the z location in the chunk from 0-15 inclusive
          * @param blockData the type to set the block to
          */
-        public void setBlock(int x, int y, int z, @NotNull BlockData blockData);
+        void setBlock(int x, int y, int z, @NotNull BlockData blockData);
 
         /**
          * Set a region of this chunk from xMin, yMin, zMin (inclusive)
@@ -306,7 +303,7 @@ public abstract class ChunkGenerator {
          * @param zMax maximum z location (exclusive) in the chunk to set
          * @param material the type to set the blocks to
          */
-        public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull Material material);
+        void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull Material material);
 
         /**
          * Set a region of this chunk from xMin, yMin, zMin (inclusive)
@@ -322,7 +319,7 @@ public abstract class ChunkGenerator {
          * @param zMax maximum z location (exclusive) in the chunk to set
          * @param material the type to set the blocks to
          */
-        public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull MaterialData material);
+        void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull MaterialData material);
 
         /**
          * Set a region of this chunk from xMin, yMin, zMin (inclusive) to xMax,
@@ -338,7 +335,7 @@ public abstract class ChunkGenerator {
          * @param zMax maximum z location (exclusive) in the chunk to set
          * @param blockData the type to set the blocks to
          */
-        public void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull BlockData blockData);
+        void setRegion(int xMin, int yMin, int zMin, int xMax, int yMax, int zMax, @NotNull BlockData blockData);
 
         /**
          * Get the type of the block at x, y, z.
@@ -350,8 +347,7 @@ public abstract class ChunkGenerator {
          * @param z the z location in the chunk from 0-15 inclusive
          * @return the type of the block or Material.AIR if x, y or z are outside the chunk's bounds
          */
-        @NotNull
-        public Material getType(int x, int y, int z);
+        @NotNull Material getType(int x, int y, int z);
 
         /**
          * Get the type and data of the block at x, y, z.
@@ -363,8 +359,7 @@ public abstract class ChunkGenerator {
          * @param z the z location in the chunk from 0-15 inclusive
          * @return the type and data of the block or the MaterialData for air if x, y or z are outside the chunk's bounds
          */
-        @NotNull
-        public MaterialData getTypeAndData(int x, int y, int z);
+        @NotNull MaterialData getTypeAndData(int x, int y, int z);
 
         /**
          * Get the type and data of the block at x, y, z.
@@ -376,8 +371,7 @@ public abstract class ChunkGenerator {
          * @param z the z location in the chunk from 0-15 inclusive
          * @return the data of the block or the BlockData for air if x, y or z are outside the chunk's bounds
          */
-        @NotNull
-        public BlockData getBlockData(int x, int y, int z);
+        @NotNull BlockData getBlockData(int x, int y, int z);
 
         /**
          * Get the block data at x,y,z in the chunk data.
@@ -391,6 +385,6 @@ public abstract class ChunkGenerator {
          * @deprecated Uses magic values
          */
         @Deprecated
-        public byte getData(int x, int y, int z);
+        byte getData(int x, int y, int z);
     }
 }
diff --git a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
index 1d862c23d482e54443f87c776e603ee2b74a488b..37b8e1d610aa3c41b37a67e0144e2e2d248a2a68 100644
--- a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
+++ b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
@@ -15,7 +15,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class GenericCommandHelpTopic extends HelpTopic {
 
-    protected Command command;
+    protected final Command command;
 
     public GenericCommandHelpTopic(@NotNull Command command) {
         this.command = command;
@@ -54,14 +54,14 @@ public class GenericCommandHelpTopic extends HelpTopic {
             sb.append(ChatColor.GOLD);
             sb.append("Aliases: ");
             sb.append(ChatColor.WHITE);
-            sb.append(ChatColor.WHITE + StringUtils.join(command.getAliases(), ", "));
+            sb.append(ChatColor.WHITE).append(StringUtils.join(command.getAliases(), ", "));
         }
         fullText = sb.toString();
     }
 
     @Override
     public boolean canSee(@NotNull CommandSender sender) {
-        if (!command.isRegistered()) {
+        if (command.isRegistered()) {
             // Unregistered commands should not show up in the help
             return false;
         }
diff --git a/src/main/java/org/bukkit/help/HelpMap.java b/src/main/java/org/bukkit/help/HelpMap.java
index 48997b5c8ef15f11328868e35b487d2b64975ab0..9f10c2b0f36ba97b91105c306ec2b04bdbc16bd6 100644
--- a/src/main/java/org/bukkit/help/HelpMap.java
+++ b/src/main/java/org/bukkit/help/HelpMap.java
@@ -26,29 +26,27 @@ public interface HelpMap {
      * @return A {@link HelpTopic} object matching the topic name or null if
      *     none can be found.
      */
-    @Nullable
-    public HelpTopic getHelpTopic(@NotNull String topicName);
+    @Nullable HelpTopic getHelpTopic(@NotNull String topicName);
 
     /**
      * Returns a collection of all the registered help topics.
      *
      * @return All the registered help topics.
      */
-    @NotNull
-    public Collection<HelpTopic> getHelpTopics();
+    @NotNull Collection<HelpTopic> getHelpTopics();
 
     /**
      * Adds a topic to the server's help index.
      *
      * @param topic The new help topic to add.
      */
-    public void addTopic(@NotNull HelpTopic topic);
+    void addTopic(@NotNull HelpTopic topic);
 
     /**
      * Clears out the contents of the help index. Normally called during
      * server reload.
      */
-    public void clear();
+    void clear();
 
     /**
      * Associates a {@link HelpTopicFactory} object with given command base
@@ -67,7 +65,7 @@ public interface HelpMap {
      * @throws IllegalArgumentException Thrown if {@code commandClass} does
      *     not derive from a legal base class.
      */
-    public void registerHelpTopicFactory(@NotNull Class<?> commandClass, @NotNull HelpTopicFactory<?> factory);
+    void registerHelpTopicFactory(@NotNull Class<?> commandClass, @NotNull HelpTopicFactory<?> factory);
 
     /**
      * Gets the list of plugins the server administrator has chosen to exclude
@@ -79,6 +77,5 @@ public interface HelpMap {
      *
      * @return A list of plugins that should be excluded from the help index.
      */
-    @NotNull
-    public List<String> getIgnoredPlugins();
+    @NotNull List<String> getIgnoredPlugins();
 }
diff --git a/src/main/java/org/bukkit/help/HelpTopicFactory.java b/src/main/java/org/bukkit/help/HelpTopicFactory.java
index b85da3f6dcb14b29d83b537bd5c88027a35e541b..0912daec0ba2e170081847ff868f368971bc4e75 100644
--- a/src/main/java/org/bukkit/help/HelpTopicFactory.java
+++ b/src/main/java/org/bukkit/help/HelpTopicFactory.java
@@ -40,6 +40,5 @@ public interface HelpTopicFactory<TCommand extends Command> {
      * @return A new custom help topic or {@code null} to intentionally NOT
      *     create a topic.
      */
-    @Nullable
-    public HelpTopic createTopic(@NotNull TCommand command);
+    @Nullable HelpTopic createTopic(@NotNull TCommand command);
 }
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
index 88a812d66b7eea7389103b9c2776a8adcfc141c7..9e2b39898c0406ee3ac2392933d7b1b897b5eb03 100644
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java
@@ -20,7 +20,7 @@ import org.jetbrains.annotations.Nullable;
 public class IndexHelpTopic extends HelpTopic {
 
     protected String permission;
-    protected String preamble;
+    protected final String preamble;
     protected Collection<HelpTopic> allTopics;
 
     public IndexHelpTopic(@NotNull String name, @Nullable String shortText, @Nullable String permission, @NotNull Collection<HelpTopic> topics) {
@@ -107,12 +107,11 @@ public class IndexHelpTopic extends HelpTopic {
      */
     @NotNull
     protected String buildIndexLine(@NotNull CommandSender sender, @NotNull HelpTopic topic) {
-        StringBuilder line = new StringBuilder();
-        line.append(ChatColor.GOLD);
-        line.append(topic.getName());
-        line.append(": ");
-        line.append(ChatColor.WHITE);
-        line.append(topic.getShortText());
-        return line.toString();
+	    String line = ChatColor.GOLD +
+		    topic.getName() +
+		    ": " +
+		    ChatColor.WHITE +
+		    topic.getShortText();
+	    return line;
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/CookingRecipe.java b/src/main/java/org/bukkit/inventory/CookingRecipe.java
index 6f251252aa96f202139103c657a81c71a0ffbfaf..b8762a5ac952c97cb98898d485f320906dff048c 100644
--- a/src/main/java/org/bukkit/inventory/CookingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/CookingRecipe.java
@@ -1,19 +1,20 @@
 package org.bukkit.inventory;
 
 import com.google.common.base.Preconditions;
-import java.util.Collections;
 import org.bukkit.Keyed;
 import org.bukkit.Material;
 import org.bukkit.NamespacedKey;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Collections;
+
 /**
  * Represents a cooking recipe.
  * @param <T> type of recipe
  */
 public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe, Keyed {
     private final NamespacedKey key;
-    private ItemStack output;
+    private final ItemStack output;
     private RecipeChoice ingredient;
     private float experience;
     private int cookingTime;
@@ -167,7 +168,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * null.
      */
     public void setGroup(@NotNull String group) {
-        Preconditions.checkArgument(group != null, "group");
+        Preconditions.checkArgument(true, "group");
         this.group = group;
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/EntityEquipment.java b/src/main/java/org/bukkit/inventory/EntityEquipment.java
index f905bf7a28a42d8bd2aecd42030d2b2092696fc3..4f05ab8f9354f7e97451b672908e5daaf262e1bf 100644
--- a/src/main/java/org/bukkit/inventory/EntityEquipment.java
+++ b/src/main/java/org/bukkit/inventory/EntityEquipment.java
@@ -15,7 +15,7 @@ public interface EntityEquipment {
      * @param slot the slot to put the ItemStack
      * @param item the ItemStack to set
      */
-    public void setItem(@NotNull EquipmentSlot slot, @Nullable ItemStack item);
+    void setItem(@NotNull EquipmentSlot slot, @Nullable ItemStack item);
 
     /**
      * Stores the ItemStack at the given equipment slot in the inventory.
@@ -24,7 +24,7 @@ public interface EntityEquipment {
      * @param item the ItemStack to set
      * @param silent whether or not the equip sound should be silenced
      */
-    public void setItem(@NotNull EquipmentSlot slot, @Nullable ItemStack item, boolean silent);
+    void setItem(@NotNull EquipmentSlot slot, @Nullable ItemStack item, boolean silent);
 
     /**
      * Gets the ItemStack at the given equipment slot in the inventory.
@@ -32,8 +32,7 @@ public interface EntityEquipment {
      * @param slot the slot to get the ItemStack
      * @return the ItemStack in the given slot
      */
-    @NotNull
-    public ItemStack getItem(@NotNull EquipmentSlot slot);
+    @NotNull ItemStack getItem(@NotNull EquipmentSlot slot);
 
     /**
      * Gets a copy of the item the entity is currently holding
diff --git a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
index 1d442dc16cbb0fed21714d47007f3f11e30c57d4..4d93cd705c79e3c5fb4ccd57384ce4ab54f4b705 100644
--- a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
+++ b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
@@ -96,6 +96,6 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
     @NotNull
     @Override
     public FurnaceRecipe setInputChoice(@NotNull RecipeChoice input) {
-        return (FurnaceRecipe) super.setInputChoice(input);
+        return super.setInputChoice(input);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/HorseInventory.java b/src/main/java/org/bukkit/inventory/HorseInventory.java
index 53498debe4cfb80592ef3025270bc8e5df4a5fec..e14c1277c3051acd1aa47658f58e3ef3e4a3662f 100644
--- a/src/main/java/org/bukkit/inventory/HorseInventory.java
+++ b/src/main/java/org/bukkit/inventory/HorseInventory.java
@@ -1,7 +1,5 @@
 package org.bukkit.inventory;
 
-import org.jetbrains.annotations.Nullable;
-
 /**
  * An interface to the inventory of a Horse.
  */
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
index 7956aebcb390379677dccf7c9561866cf94c024c..367668be0c37952edb147611e536422f322d99c1 100644
--- a/src/main/java/org/bukkit/inventory/Inventory.java
+++ b/src/main/java/org/bukkit/inventory/Inventory.java
@@ -32,14 +32,14 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return The size of the inventory
      */
-    public int getSize();
+    int getSize();
 
     /**
      * Returns the maximum stack size for an ItemStack in this inventory.
      *
      * @return The maximum size for an ItemStack in this inventory.
      */
-    public int getMaxStackSize();
+    int getMaxStackSize();
 
     /**
      * This method allows you to change the maximum stack size for an
@@ -57,7 +57,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @param size The new maximum stack size for items in this inventory.
      */
-    public void setMaxStackSize(int size);
+    void setMaxStackSize(int size);
 
     /**
      * Returns the ItemStack found in the slot at the given index
@@ -65,8 +65,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param index The index of the Slot's ItemStack to return
      * @return The ItemStack in the slot
      */
-    @Nullable
-    public ItemStack getItem(int index);
+    @Nullable ItemStack getItem(int index);
 
     /**
      * Stores the ItemStack at the given index of the inventory.
@@ -74,7 +73,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param index The index where to put the ItemStack
      * @param item The ItemStack to set
      */
-    public void setItem(int index, @Nullable ItemStack item);
+    void setItem(int index, @Nullable ItemStack item);
 
     /**
      * Stores the given ItemStacks in the inventory. This will try to fill
@@ -100,8 +99,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A HashMap containing items that didn't fit.
      * @throws IllegalArgumentException if items or any element in it is null
      */
-    @NotNull
-    public HashMap<Integer, ItemStack> addItem(@NotNull ItemStack... items) throws IllegalArgumentException;
+    @NotNull HashMap<Integer, ItemStack> addItem(@NotNull ItemStack... items) throws IllegalArgumentException;
 
     /**
      * Removes the given ItemStacks from the inventory.
@@ -122,8 +120,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A HashMap containing items that couldn't be removed.
      * @throws IllegalArgumentException if items is null
      */
-    @NotNull
-    public HashMap<Integer, ItemStack> removeItem(@NotNull ItemStack... items) throws IllegalArgumentException;
+    @NotNull HashMap<Integer, ItemStack> removeItem(@NotNull ItemStack... items) throws IllegalArgumentException;
 
     // Paper start
     /**
@@ -149,8 +146,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A HashMap containing items that couldn't be removed.
      * @throws IllegalArgumentException if items is null
      */
-    @NotNull
-    public HashMap<Integer, ItemStack> removeItemAnySlot(@NotNull ItemStack... items) throws IllegalArgumentException;
+    @NotNull HashMap<Integer, ItemStack> removeItemAnySlot(@NotNull ItemStack... items) throws IllegalArgumentException;
     // Paper end
 
     /**
@@ -158,7 +154,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return An array of ItemStacks from the inventory. Individual items may be null.
      */
-    public @org.checkerframework.checker.nullness.qual.Nullable ItemStack @org.checkerframework.checker.nullness.qual.NonNull [] getContents(); // Paper - make array elements nullable instead array
+    @org.checkerframework.checker.nullness.qual.Nullable ItemStack @org.checkerframework.checker.nullness.qual.NonNull [] getContents(); // Paper - make array elements nullable instead array
     
     /**
      * Completely replaces the inventory's contents. Removes all existing
@@ -169,7 +165,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @throws IllegalArgumentException If the array has more items than the
      *     inventory.
      */
-    public void setContents(@NotNull ItemStack[] items) throws IllegalArgumentException;
+    void setContents(@NotNull ItemStack[] items) throws IllegalArgumentException;
 
     /**
      * Return the contents from the section of the inventory where items can
@@ -182,8 +178,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return inventory storage contents. Individual items may be null.
      */
-    @NotNull
-    public ItemStack[] getStorageContents();
+    @NotNull ItemStack[] getStorageContents();
 
     /**
      * Put the given ItemStacks into the storage slots
@@ -192,7 +187,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @throws IllegalArgumentException If the array has more items than the
      * inventory.
      */
-    public void setStorageContents(@NotNull ItemStack[] items) throws IllegalArgumentException;
+    void setStorageContents(@NotNull ItemStack[] items) throws IllegalArgumentException;
 
     /**
      * Checks if the inventory contains any ItemStacks with the given
@@ -202,7 +197,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return true if an ItemStack is found with the given Material
      * @throws IllegalArgumentException if material is null
      */
-    public boolean contains(@NotNull Material material) throws IllegalArgumentException;
+    boolean contains(@NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Checks if the inventory contains any ItemStacks matching the given
@@ -216,7 +211,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *     were found
      */
     @Contract("null -> false")
-    public boolean contains(@Nullable ItemStack item);
+    boolean contains(@Nullable ItemStack item);
 
     /**
      * Checks if the inventory contains any ItemStacks with the given
@@ -228,7 +223,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *     found to add to the given amount
      * @throws IllegalArgumentException if material is null
      */
-    public boolean contains(@NotNull Material material, int amount) throws IllegalArgumentException;
+    boolean contains(@NotNull Material material, int amount) throws IllegalArgumentException;
 
     /**
      * Checks if the inventory contains at least the minimum amount specified
@@ -244,7 +239,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @see #containsAtLeast(ItemStack, int)
      */
     @Contract("null, _ -> false")
-    public boolean contains(@Nullable ItemStack item, int amount);
+    boolean contains(@Nullable ItemStack item, int amount);
 
     /**
      * Checks if the inventory contains ItemStacks matching the given
@@ -256,7 +251,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *     enough ItemStacks were found to add to the given amount
      */
     @Contract("null, _ -> false")
-    public boolean containsAtLeast(@Nullable ItemStack item, int amount);
+    boolean containsAtLeast(@Nullable ItemStack item, int amount);
 
     /**
      * Returns a HashMap with all slots and ItemStacks in the inventory with
@@ -270,8 +265,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return A HashMap containing the slot index, ItemStack pairs
      * @throws IllegalArgumentException if material is null
      */
-    @NotNull
-    public HashMap<Integer, ? extends ItemStack> all(@NotNull Material material) throws IllegalArgumentException;
+    @NotNull HashMap<Integer, ? extends ItemStack> all(@NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Finds all slots in the inventory containing any ItemStacks with the
@@ -285,8 +279,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param item The ItemStack to match against
      * @return A map from slot indexes to item at index
      */
-    @NotNull
-    public HashMap<Integer, ? extends ItemStack> all(@Nullable ItemStack item);
+    @NotNull HashMap<Integer, ? extends ItemStack> all(@Nullable ItemStack item);
 
     /**
      * Finds the first slot in the inventory containing an ItemStack with the
@@ -296,7 +289,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @return The slot index of the given Material or -1 if not found
      * @throws IllegalArgumentException if material is null
      */
-    public int first(@NotNull Material material) throws IllegalArgumentException;
+    int first(@NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Returns the first slot in the inventory containing an ItemStack with
@@ -306,14 +299,14 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param item The ItemStack to match against
      * @return The slot index of the given ItemStack or -1 if not found
      */
-    public int first(@NotNull ItemStack item);
+    int first(@NotNull ItemStack item);
 
     /**
      * Returns the first empty Slot.
      *
      * @return The first empty Slot found, or -1 if no empty slots.
      */
-    public int firstEmpty();
+    int firstEmpty();
 
     /**
      * Check whether or not this inventory is empty. An inventory is considered
@@ -321,7 +314,7 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return true if empty, false otherwise
      */
-    public boolean isEmpty();
+    boolean isEmpty();
 
     /**
      * Removes all stacks in the inventory matching the given material.
@@ -329,7 +322,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param material The material to remove
      * @throws IllegalArgumentException if material is null
      */
-    public void remove(@NotNull Material material) throws IllegalArgumentException;
+    void remove(@NotNull Material material) throws IllegalArgumentException;
 
     /**
      * Removes all stacks in the inventory matching the given stack.
@@ -339,19 +332,19 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @param item The ItemStack to match against
      */
-    public void remove(@NotNull ItemStack item);
+    void remove(@NotNull ItemStack item);
 
     /**
      * Clears out a particular slot in the index.
      *
      * @param index The index to empty.
      */
-    public void clear(int index);
+    void clear(int index);
 
     /**
      * Clears out the whole Inventory.
      */
-    public void clear();
+    void clear();
 
     /**
      * Gets a list of players viewing the inventory. Note that a player is
@@ -364,24 +357,21 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return A list of HumanEntities who are viewing this Inventory.
      */
-    @NotNull
-    public List<HumanEntity> getViewers();
+    @NotNull List<HumanEntity> getViewers();
 
     /**
      * Returns what type of inventory this is.
      *
      * @return The InventoryType representing the type of inventory.
      */
-    @NotNull
-    public InventoryType getType();
+    @NotNull InventoryType getType();
 
     /**
      * Gets the block or entity belonging to the open inventory
      *
      * @return The holder of the inventory; null if it has no holder.
      */
-    @Nullable
-    public InventoryHolder getHolder();
+    @Nullable InventoryHolder getHolder();
 
     // Paper start - getHolder without snapshot
     /**
@@ -390,13 +380,12 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param useSnapshot Create a snapshot if the holder is a tile entity
      * @return The holder of the inventory; null if it has no holder.
      */
-    @Nullable
-    public InventoryHolder getHolder(boolean useSnapshot);
+    @Nullable InventoryHolder getHolder(boolean useSnapshot);
     // Paper end
 
     @NotNull
     @Override
-    public ListIterator<ItemStack> iterator();
+    ListIterator<ItemStack> iterator();
 
     /**
      * Returns an iterator starting at the given index. If the index is
@@ -407,8 +396,7 @@ public interface Inventory extends Iterable<ItemStack> {
      * @param index The index.
      * @return An iterator.
      */
-    @NotNull
-    public ListIterator<ItemStack> iterator(int index);
+    @NotNull ListIterator<ItemStack> iterator(int index);
 
     /**
      * Get the location of the block or entity which corresponds to this inventory. May return null if this container
@@ -416,6 +404,5 @@ public interface Inventory extends Iterable<ItemStack> {
      *
      * @return location or null if not applicable.
      */
-    @Nullable
-    public Location getLocation();
+    @Nullable Location getLocation();
 }
diff --git a/src/main/java/org/bukkit/inventory/InventoryHolder.java b/src/main/java/org/bukkit/inventory/InventoryHolder.java
index c7b17eabf07b829a02afe7c1f27a5127b6bfea70..d7b418f3000031ddd09a25f06979f8523f83b5d9 100644
--- a/src/main/java/org/bukkit/inventory/InventoryHolder.java
+++ b/src/main/java/org/bukkit/inventory/InventoryHolder.java
@@ -9,6 +9,5 @@ public interface InventoryHolder {
      *
      * @return The inventory.
      */
-    @NotNull
-    public Inventory getInventory();
+    @NotNull Inventory getInventory();
 }
diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java
index b06995aa57aa9cba0bb59f1d26d81015619a08e6..be39e5a1a341e3ed60cbe1ae667db69fc8588f19 100644
--- a/src/main/java/org/bukkit/inventory/InventoryView.java
+++ b/src/main/java/org/bukkit/inventory/InventoryView.java
@@ -110,9 +110,9 @@ public abstract class InventoryView {
          * The lectern's current open book page
          */
         BOOK_PAGE(0, InventoryType.LECTERN);
-        int id;
-        InventoryType style;
-        private Property(int id, /*@NotNull*/ InventoryType appliesTo) {
+        final int id;
+        final InventoryType style;
+        Property(int id, /*@NotNull*/ InventoryType appliesTo) {
             this.id = id;
             style = appliesTo;
         }
@@ -356,7 +356,8 @@ public abstract class InventoryView {
                 }
                 break;
             case ENCHANTING:
-                type = InventoryType.SlotType.CRAFTING;
+	            case BEACON:
+		            type = InventoryType.SlotType.CRAFTING;
                 break;
             case WORKBENCH:
             case CRAFTING:
@@ -366,10 +367,7 @@ public abstract class InventoryView {
                     type = InventoryType.SlotType.CRAFTING;
                 }
                 break;
-            case BEACON:
-                type = InventoryType.SlotType.CRAFTING;
-                break;
-            case ANVIL:
+	            case ANVIL:
             case SMITHING:
             case CARTOGRAPHY:
             case GRINDSTONE:
diff --git a/src/main/java/org/bukkit/inventory/ItemFlag.java b/src/main/java/org/bukkit/inventory/ItemFlag.java
index e2434e96d84851d93906f705c372f0b85395aea4..abaa77383d4e7a6aa5335df485a2a33ff98d08fb 100644
--- a/src/main/java/org/bukkit/inventory/ItemFlag.java
+++ b/src/main/java/org/bukkit/inventory/ItemFlag.java
@@ -32,5 +32,5 @@ public enum ItemFlag {
     /**
      * Setting to show/hide dyes from coloured leather armour
      */
-    HIDE_DYE;
+    HIDE_DYE
 }
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 58f99e3ebac9a01ebffe4d208e16cbee474d4aa3..711fee5278d56b6cf8564c3b06b03ed1ec5b5970 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -174,8 +174,9 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @Nullable
     public MaterialData getData() {
         Material mat = Bukkit.getUnsafe().toLegacy(getType());
-        if (data == null && mat != null && mat.getData() != null) {
-            data = mat.getNewData((byte) this.getDurability());
+        if (data == null && mat != null) {
+	        mat.getData();
+	        data = mat.getNewData((byte) this.getDurability());
         }
 
         return data;
@@ -240,10 +241,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @Utility
     public int getMaxStackSize() {
         Material material = getType();
-        if (material != null) {
-            return material.getMaxStackSize();
-        }
-        return -1;
+	    return material.getMaxStackSize();
     }
 
     private void createData(final byte data) {
@@ -290,7 +288,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             return true;
         }
         Material comparisonType = (this.type.isLegacy()) ? Bukkit.getUnsafe().fromLegacy(this.getData(), true) : this.type; // This may be called from legacy item stacks, try to get the right material
-        return comparisonType == stack.getType() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (hasItemMeta() ? Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()) : true);
+        return comparisonType == stack.getType() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (!hasItemMeta() || Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()));
     }
 
     @NotNull
@@ -333,7 +331,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return True if this has the given enchantment
      */
     public boolean containsEnchantment(@NotNull Enchantment ench) {
-        return meta == null ? false : meta.hasEnchant(ench);
+        return meta != null && meta.hasEnchant(ench);
     }
 
     /**
@@ -353,7 +351,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @NotNull
     public Map<Enchantment, Integer> getEnchantments() {
-        return meta == null ? ImmutableMap.<Enchantment, Integer>of() : meta.getEnchants();
+        return meta == null ? ImmutableMap.of() : meta.getEnchants();
     }
 
     /**
@@ -455,7 +453,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @NotNull
     @Utility
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        Map<String, Object> result = new LinkedHashMap<>();
 
         result.put("v", Bukkit.getUnsafe().getDataVersion()); // Include version to indicate we are using modern material names (or LEGACY prefix)
         result.put("type", getType().name());
@@ -491,7 +489,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
 
         Material type;
         if (version < 0) {
-            type = Material.getMaterial(Material.LEGACY_PREFIX + (String) args.get("type"));
+            type = Material.getMaterial(Material.LEGACY_PREFIX + args.get("type"));
 
             byte dataVal = (type != null && type.getMaxDurability() == 0) ? (byte) damage : 0; // Actually durable items get a 0 passed into conversion
             type = Bukkit.getUnsafe().fromLegacy(new MaterialData(type, dataVal), true);
@@ -737,7 +735,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             return null;
         }
         ItemMeta itemMeta = getItemMeta();
-        if (!itemMeta.hasLore()) {
+        if (itemMeta.hasLore()) {
             return null;
         }
         return itemMeta.getLore();
@@ -752,7 +750,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             return null;
         }
         final ItemMeta itemMeta = getItemMeta();
-        if (!itemMeta.hasLore()) {
+        if (itemMeta.hasLore()) {
             return null;
         }
         return itemMeta.lore();
diff --git a/src/main/java/org/bukkit/inventory/LecternInventory.java b/src/main/java/org/bukkit/inventory/LecternInventory.java
index acf2244f77133df53eb5f862c8e713c85192f13d..e84cceca6836c5f5699d187d543d1f4802528848 100644
--- a/src/main/java/org/bukkit/inventory/LecternInventory.java
+++ b/src/main/java/org/bukkit/inventory/LecternInventory.java
@@ -10,7 +10,7 @@ public interface LecternInventory extends Inventory {
 
     @Nullable
     @Override
-    public Lectern getHolder();
+    Lectern getHolder();
 
     // Paper start
     /**
diff --git a/src/main/java/org/bukkit/inventory/MerchantRecipe.java b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
index 2be2f3fe655c417bfc8f8e840f9e9415d168f37e..76a507d2a22a30079616e6324ab6d261f320a5a6 100644
--- a/src/main/java/org/bukkit/inventory/MerchantRecipe.java
+++ b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
@@ -21,8 +21,8 @@ import org.jetbrains.annotations.NotNull;
  */
 public class MerchantRecipe implements Recipe {
 
-    private ItemStack result;
-    private List<ItemStack> ingredients = new ArrayList<ItemStack>();
+    private final ItemStack result;
+    private List<ItemStack> ingredients = new ArrayList<>();
     private int uses;
     private int maxUses;
     private boolean experienceReward;
@@ -70,7 +70,7 @@ public class MerchantRecipe implements Recipe {
 
     public void setIngredients(@NotNull List<ItemStack> ingredients) {
         Preconditions.checkState(ingredients.size() <= 2, "MerchantRecipe can only have maximum 2 ingredients");
-        this.ingredients = new ArrayList<ItemStack>();
+        this.ingredients = new ArrayList<>();
         for (ItemStack item : ingredients) {
             this.ingredients.add(item.clone());
         }
@@ -78,7 +78,7 @@ public class MerchantRecipe implements Recipe {
 
     @NotNull
     public List<ItemStack> getIngredients() {
-        List<ItemStack> copy = new ArrayList<ItemStack>();
+        List<ItemStack> copy = new ArrayList<>();
         for (ItemStack item : ingredients) {
             copy.add(item.clone());
         }
diff --git a/src/main/java/org/bukkit/inventory/PlayerInventory.java b/src/main/java/org/bukkit/inventory/PlayerInventory.java
index 1e45c9078ffffe9d3c25538fdd433780ae751270..489e295e6d9b8c7dd09b3e516731f723a2e025c8 100644
--- a/src/main/java/org/bukkit/inventory/PlayerInventory.java
+++ b/src/main/java/org/bukkit/inventory/PlayerInventory.java
@@ -14,8 +14,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @return All the ItemStacks from the armor slots. Individual items can be null.
      */
-    @NotNull
-    public ItemStack[] getArmorContents();
+    @NotNull ItemStack[] getArmorContents();
 
     /**
      * Get all additional ItemStacks stored in this inventory.
@@ -26,40 +25,35 @@ public interface PlayerInventory extends Inventory {
      *
      * @return All additional ItemStacks. Individual items can be null.
      */
-    @NotNull
-    public ItemStack[] getExtraContents();
+    @NotNull ItemStack[] getExtraContents();
 
     /**
      * Return the ItemStack from the helmet slot
      *
      * @return The ItemStack in the helmet slot
      */
-    @Nullable
-    public ItemStack getHelmet();
+    @Nullable ItemStack getHelmet();
 
     /**
      * Return the ItemStack from the chestplate slot
      *
      * @return The ItemStack in the chestplate slot
      */
-    @Nullable
-    public ItemStack getChestplate();
+    @Nullable ItemStack getChestplate();
 
     /**
      * Return the ItemStack from the leg slot
      *
      * @return The ItemStack in the leg slot
      */
-    @Nullable
-    public ItemStack getLeggings();
+    @Nullable ItemStack getLeggings();
 
     /**
      * Return the ItemStack from the boots slot
      *
      * @return The ItemStack in the boots slot
      */
-    @Nullable
-    public ItemStack getBoots();
+    @Nullable ItemStack getBoots();
 
     /**
      * Stores the ItemStack at the given index of the inventory.
@@ -87,7 +81,7 @@ public interface PlayerInventory extends Inventory {
      * @see #setItemInOffHand(ItemStack)
      */
     @Override
-    public void setItem(int index, @Nullable ItemStack item);
+    void setItem(int index, @Nullable ItemStack item);
 
     /**
      * Stores the ItemStack at the given equipment slot in the inventory.
@@ -97,7 +91,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @see #setItem(int, ItemStack)
      */
-    public void setItem(@NotNull EquipmentSlot slot, @Nullable ItemStack item);
+    void setItem(@NotNull EquipmentSlot slot, @Nullable ItemStack item);
 
     /**
      * Gets the ItemStack at the given equipment slot in the inventory.
@@ -106,15 +100,14 @@ public interface PlayerInventory extends Inventory {
      *
      * @return the ItemStack in the given slot
      */
-    @Nullable
-    public ItemStack getItem(@NotNull EquipmentSlot slot);
+    @Nullable ItemStack getItem(@NotNull EquipmentSlot slot);
 
     /**
      * Put the given ItemStacks into the armor slots
      *
      * @param items The ItemStacks to use as armour
      */
-    public void setArmorContents(@Nullable ItemStack[] items);
+    void setArmorContents(@Nullable ItemStack[] items);
 
     /**
      * Put the given ItemStacks into the extra slots
@@ -123,7 +116,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param items The ItemStacks to use as extra
      */
-    public void setExtraContents(@Nullable ItemStack[] items);
+    void setExtraContents(@Nullable ItemStack[] items);
 
     /**
      * Put the given ItemStack into the helmet slot. This does not check if
@@ -131,7 +124,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param helmet The ItemStack to use as helmet
      */
-    public void setHelmet(@Nullable ItemStack helmet);
+    void setHelmet(@Nullable ItemStack helmet);
 
     /**
      * Put the given ItemStack into the chestplate slot. This does not check
@@ -139,7 +132,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param chestplate The ItemStack to use as chestplate
      */
-    public void setChestplate(@Nullable ItemStack chestplate);
+    void setChestplate(@Nullable ItemStack chestplate);
 
     /**
      * Put the given ItemStack into the leg slot. This does not check if the
@@ -147,7 +140,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param leggings The ItemStack to use as leggings
      */
-    public void setLeggings(@Nullable ItemStack leggings);
+    void setLeggings(@Nullable ItemStack leggings);
 
     /**
      * Put the given ItemStack into the boots slot. This does not check if the
@@ -155,7 +148,7 @@ public interface PlayerInventory extends Inventory {
      *
      * @param boots The ItemStack to use as boots
      */
-    public void setBoots(@Nullable ItemStack boots);
+    void setBoots(@Nullable ItemStack boots);
 
     /**
      * Gets a copy of the item the player is currently holding
@@ -199,8 +192,7 @@ public interface PlayerInventory extends Inventory {
      * @return the currently held item
      */
     @Deprecated
-    @NotNull
-    public ItemStack getItemInHand();
+    @NotNull ItemStack getItemInHand();
 
     /**
      * Sets the item the player is holding
@@ -212,14 +204,14 @@ public interface PlayerInventory extends Inventory {
      * @param stack The item to put into the player's hand
      */
     @Deprecated
-    public void setItemInHand(@Nullable ItemStack stack);
+    void setItemInHand(@Nullable ItemStack stack);
 
     /**
      * Get the slot number of the currently held item
      *
      * @return Held item slot number
      */
-    public int getHeldItemSlot();
+    int getHeldItemSlot();
 
     /**
      * Set the slot number of the currently held item.
@@ -230,9 +222,8 @@ public interface PlayerInventory extends Inventory {
      * @throws IllegalArgumentException Thrown if slot is not between 0 and 8
      *     inclusive
      */
-    public void setHeldItemSlot(int slot);
+    void setHeldItemSlot(int slot);
 
     @Override
-    @Nullable
-    public HumanEntity getHolder();
+    @Nullable HumanEntity getHolder();
 }
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index 3d325cab6b106ce8617e321d7a733eca91ba93e5..18d4fa5ac5beb6a09f4aa97df97046c710317c10 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -38,12 +38,12 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
     /**
      * Represents a choice of multiple matching Materials.
      */
-    public static class MaterialChoice implements RecipeChoice {
+    class MaterialChoice implements RecipeChoice {
 
         private List<Material> choices;
 
         public MaterialChoice(@NotNull Material choice) {
-            this(Arrays.asList(choice));
+            this(Collections.singletonList(choice));
         }
 
         public MaterialChoice(@NotNull Material... choices) {
@@ -57,12 +57,12 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
          * @param choices the tag
          */
         public MaterialChoice(@NotNull Tag<Material> choices) {
-            Preconditions.checkArgument(choices != null, "choices");
+            Preconditions.checkArgument(true, "choices");
             this.choices = new ArrayList<>(choices.getValues());
         }
 
         public MaterialChoice(@NotNull List<Material> choices) {
-            Preconditions.checkArgument(choices != null, "choices");
+            Preconditions.checkArgument(true, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
             for (Material choice : choices) {
                 Preconditions.checkArgument(choice != null, "Cannot have null choice");
@@ -131,10 +131,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
                 return false;
             }
             final MaterialChoice other = (MaterialChoice) obj;
-            if (!Objects.equals(this.choices, other.choices)) {
-                return false;
-            }
-            return true;
+            return Objects.equals(this.choices, other.choices);
         }
 
         @Override
@@ -152,12 +149,12 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
      * @deprecated draft API
      */
     @Deprecated
-    public static class ExactChoice implements RecipeChoice {
+    class ExactChoice implements RecipeChoice {
 
         private List<ItemStack> choices;
 
         public ExactChoice(@NotNull ItemStack stack) {
-            this(Arrays.asList(stack));
+            this(Collections.singletonList(stack));
         }
 
         public ExactChoice(@NotNull ItemStack... stacks) {
@@ -165,7 +162,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         public ExactChoice(@NotNull List<ItemStack> choices) {
-            Preconditions.checkArgument(choices != null, "choices");
+            Preconditions.checkArgument(true, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
             for (ItemStack choice : choices) {
                 Preconditions.checkArgument(choice != null, "Cannot have null choice");
@@ -227,10 +224,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
                 return false;
             }
             final ExactChoice other = (ExactChoice) obj;
-            if (!Objects.equals(this.choices, other.choices)) {
-                return false;
-            }
-            return true;
+            return Objects.equals(this.choices, other.choices);
         }
 
         @Override
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 222a12baa8e93ad686ab59426653f066d5876e38..40c01b5d453e6d242991835d9ae5acec2520f69e 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -42,7 +42,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @see ShapedRecipe#setIngredient(char, MaterialData)
      */
     public ShapedRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
-        Preconditions.checkArgument(key != null, "key");
+        Preconditions.checkArgument(true, "key");
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
 
         this.key = key;
@@ -74,9 +74,7 @@ public class ShapedRecipe implements Recipe, Keyed {
             lastLen = row.length();
         }
         this.rows = new String[shape.length];
-        for (int i = 0; i < shape.length; i++) {
-            this.rows[i] = shape[i];
-        }
+        System.arraycopy(shape, 0, this.rows, 0, shape.length);
 
         // Remove character mappings for characters that no longer exist in the shape
         HashMap<Character, RecipeChoice> newIngredients = new HashMap<>();
@@ -159,7 +157,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      */
     @NotNull
     public Map<Character, ItemStack> getIngredientMap() {
-        HashMap<Character, ItemStack> result = new HashMap<Character, ItemStack>();
+        HashMap<Character, ItemStack> result = new HashMap<>();
         for (Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
             if (ingredient.getValue() == null) {
                 result.put(ingredient.getKey(), null);
@@ -230,7 +228,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * null.
      */
     public void setGroup(@NotNull String group) {
-        Preconditions.checkArgument(group != null, "group");
+        Preconditions.checkArgument(true, "group");
         this.group = group;
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index 7f6d3c71c5b3a9aa54c84a4c3b7c3614a0d477ce..d9f5e81981f7b36403cc62b4369d778e0123f1ff 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -303,7 +303,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @NotNull
     public List<ItemStack> getIngredientList() {
-        ArrayList<ItemStack> result = new ArrayList<ItemStack>(ingredients.size());
+        ArrayList<ItemStack> result = new ArrayList<>(ingredients.size());
         for (RecipeChoice ingredient : ingredients) {
             result.add(ingredient.getItemStack().clone());
         }
@@ -344,7 +344,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * null.
      */
     public void setGroup(@NotNull String group) {
-        Preconditions.checkArgument(group != null, "group");
+        Preconditions.checkArgument(true, "group");
         this.group = group;
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
index d8ef781d6b025790ce9d2a9782e6ef2a47cc8e62..88c36e8dbefeae4c9f7fafc3341355aa036ae7d7 100644
--- a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class StonecuttingRecipe implements Recipe, Keyed {
     private final NamespacedKey key;
-    private ItemStack output;
+    private final ItemStack output;
     private RecipeChoice ingredient;
     private String group = "";
 
@@ -72,7 +72,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
     @NotNull
     public StonecuttingRecipe setInputChoice(@NotNull RecipeChoice input) {
         this.ingredient = input;
-        return (StonecuttingRecipe) this;
+        return this;
     }
 
     /**
@@ -121,7 +121,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * null.
      */
     public void setGroup(@NotNull String group) {
-        Preconditions.checkArgument(group != null, "group");
+        Preconditions.checkArgument(true, "group");
         this.group = group;
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 0cfd4b02cc2095da56b4dc8d4ea4e9b4a95f513c..3bedde79dc5b16caa90981a21cd0b22bbda2f25d 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -1,11 +1,12 @@
 package org.bukkit.inventory.meta;
 
-import java.util.List;
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Material;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.List;
+
 /**
  * Represents a book ({@link Material#WRITABLE_BOOK} or {@link
  * Material#WRITTEN_BOOK}) that can have a title, an author, and pages.
@@ -31,7 +32,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
         /**
          * Unused; unobtainable by players. Can't be copied.
          */
-        TATTERED;
+        TATTERED
     }
 
     /**
@@ -305,7 +306,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
     BookMeta clone();
 
     // Spigot start
-    public class Spigot {
+    class Spigot {
 
         /**
          * Gets the specified page in the book. The given page must exist.
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index f093f991f1fedd20fcef041b093398250b7fb286..8a201026bb0120e2f26bf8bbdbff78a42df8d037 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -477,7 +477,6 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
     @Deprecated
     void setVersion(int version);
 
-    @SuppressWarnings("javadoc")
     @NotNull
     ItemMeta clone();
 
diff --git a/src/main/java/org/bukkit/inventory/meta/Repairable.java b/src/main/java/org/bukkit/inventory/meta/Repairable.java
index 0a1d543db305a4f5395bb35cb5a0f9bc76163b66..7e74aaaf58a159586133d85fbe735d4725035980 100644
--- a/src/main/java/org/bukkit/inventory/meta/Repairable.java
+++ b/src/main/java/org/bukkit/inventory/meta/Repairable.java
@@ -28,7 +28,6 @@ public interface Repairable {
      */
     void setRepairCost(int cost);
 
-    @SuppressWarnings("javadoc")
     @NotNull
     Repairable clone();
 }
diff --git a/src/main/java/org/bukkit/loot/LootTables.java b/src/main/java/org/bukkit/loot/LootTables.java
index 4d42e692d3a8aaba30c946dd396926b700e38f01..b65fef6ee108aa0002825f07f0b11e85c8a59a89 100644
--- a/src/main/java/org/bukkit/loot/LootTables.java
+++ b/src/main/java/org/bukkit/loot/LootTables.java
@@ -166,7 +166,7 @@ public enum LootTables implements Keyed {
 
     private final String location;
 
-    private LootTables(/*@NotNull*/ String location) {
+    LootTables(/*@NotNull*/ String location) {
         this.location = location;
     }
 
diff --git a/src/main/java/org/bukkit/map/MapCanvas.java b/src/main/java/org/bukkit/map/MapCanvas.java
index cc1714019d7a6c230948dc62dae5ba19b95f2fe7..51751d6da9a6210a14c502b7a02f79076c398f82 100644
--- a/src/main/java/org/bukkit/map/MapCanvas.java
+++ b/src/main/java/org/bukkit/map/MapCanvas.java
@@ -15,16 +15,14 @@ public interface MapCanvas {
      *
      * @return The MapView this canvas is attached to.
      */
-    @NotNull
-    public MapView getMapView();
+    @NotNull MapView getMapView();
 
     /**
      * Get the cursor collection associated with this canvas.
      *
      * @return The MapCursorCollection associated with this canvas.
      */
-    @NotNull
-    public MapCursorCollection getCursors();
+    @NotNull MapCursorCollection getCursors();
 
     /**
      * Set the cursor collection associated with this canvas. This does not
@@ -33,7 +31,7 @@ public interface MapCanvas {
      *
      * @param cursors The MapCursorCollection to associate with this canvas.
      */
-    public void setCursors(@NotNull MapCursorCollection cursors);
+    void setCursors(@NotNull MapCursorCollection cursors);
 
     /**
      * Draw a pixel to the canvas.
@@ -42,7 +40,7 @@ public interface MapCanvas {
      * @param y The y coordinate, from 0 to 127.
      * @param color The color. See {@link MapPalette}.
      */
-    public void setPixel(int x, int y, byte color);
+    void setPixel(int x, int y, byte color);
 
     /**
      * Get a pixel from the canvas.
@@ -51,7 +49,7 @@ public interface MapCanvas {
      * @param y The y coordinate, from 0 to 127.
      * @return The color. See {@link MapPalette}.
      */
-    public byte getPixel(int x, int y);
+    byte getPixel(int x, int y);
 
     /**
      * Get a pixel from the layers below this canvas.
@@ -60,7 +58,7 @@ public interface MapCanvas {
      * @param y The y coordinate, from 0 to 127.
      * @return The color. See {@link MapPalette}.
      */
-    public byte getBasePixel(int x, int y);
+    byte getBasePixel(int x, int y);
 
     /**
      * Draw an image to the map. The image will be clipped if necessary.
@@ -69,7 +67,7 @@ public interface MapCanvas {
      * @param y The y coordinate of the image.
      * @param image The Image to draw.
      */
-    public void drawImage(int x, int y, @NotNull Image image);
+    void drawImage(int x, int y, @NotNull Image image);
 
     /**
      * Render text to the map using fancy formatting. Newline (\n) characters
@@ -82,6 +80,6 @@ public interface MapCanvas {
      * @param font The font to use.
      * @param text The formatted text to render.
      */
-    public void drawText(int x, int y, @NotNull MapFont font, @NotNull String text);
+    void drawText(int x, int y, @NotNull MapFont font, @NotNull String text);
 
 }
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
index ed0bc2024a0bb85837e25f75ae89d1fe257b2e60..6346487563731650ad1fee313cd3e683a7ed312d 100644
--- a/src/main/java/org/bukkit/map/MapCursor.java
+++ b/src/main/java/org/bukkit/map/MapCursor.java
@@ -310,9 +310,9 @@ public final class MapCursor {
         BANNER_BLACK(25),
         RED_X(26);
 
-        private byte value;
+        private final byte value;
 
-        private Type(int value) {
+        Type(int value) {
             this.value = (byte) value;
         }
 
diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java
index 01dec2c877df58c9dc22445e8b1f9ce2e53066da..d461f45395843aead36f0205d3dc0085b202bfad 100644
--- a/src/main/java/org/bukkit/map/MapCursorCollection.java
+++ b/src/main/java/org/bukkit/map/MapCursorCollection.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.Nullable;
  * MapCursorCollection is linked to a specific {@link MapRenderer}.
  */
 public final class MapCursorCollection {
-    private List<MapCursor> cursors = new ArrayList<MapCursor>();
+    private final List<MapCursor> cursors = new ArrayList<>();
 
     /**
      * Get the amount of cursors in this collection.
diff --git a/src/main/java/org/bukkit/map/MapFont.java b/src/main/java/org/bukkit/map/MapFont.java
index 2d599c8f3ef1df4c1bde87e502f794984b9401bc..10cfa40babc3ec3c9e954133527ff7190d494c6d 100644
--- a/src/main/java/org/bukkit/map/MapFont.java
+++ b/src/main/java/org/bukkit/map/MapFont.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public class MapFont {
 
-    private final HashMap<Character, CharacterSprite> chars = new HashMap<Character, CharacterSprite>();
+    private final HashMap<Character, CharacterSprite> chars = new HashMap<>();
     private int height = 0;
     protected boolean malleable = true;
 
@@ -52,7 +52,7 @@ public class MapFont {
      * @return The width in pixels.
      */
     public int getWidth(@NotNull String text) {
-        if (!isValid(text)) {
+        if (isValid(text)) {
             throw new IllegalArgumentException("text contains invalid characters");
         }
 
@@ -91,9 +91,9 @@ public class MapFont {
         for (int i = 0; i < text.length(); ++i) {
             char ch = text.charAt(i);
             if (ch == ChatColor.COLOR_CHAR || ch == '\n') continue;
-            if (chars.get(ch) == null) return false;
+            if (chars.get(ch) == null) return true;
         }
-        return true;
+        return false;
     }
 
     /**
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
index 95fe3f4d081053a6cf484e4ef07b474f2dc2ab02..1f61e54fc8ce40c7c2f27a8c59994091c43675bd 100644
--- a/src/main/java/org/bukkit/map/MapPalette.java
+++ b/src/main/java/org/bukkit/map/MapPalette.java
@@ -260,7 +260,7 @@ public final class MapPalette {
     @Deprecated
     @NotNull
     public static Color getColor(byte index) {
-        if ((index > -21 && index < 0) || index > 127) {
+        if (index > -21 && index < 0) {
             throw new IndexOutOfBoundsException();
         } else {
             // Minecraft has 143 colors, some of which have negative byte representations
diff --git a/src/main/java/org/bukkit/map/MapRenderer.java b/src/main/java/org/bukkit/map/MapRenderer.java
index cb7040876a99a5a7e49b81684ef0f3b79584c376..9273d5766281e411098db84cc05676054fadd0a4 100644
--- a/src/main/java/org/bukkit/map/MapRenderer.java
+++ b/src/main/java/org/bukkit/map/MapRenderer.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public abstract class MapRenderer {
 
-    private boolean contextual;
+    private final boolean contextual;
 
     /**
      * Initialize the map renderer base to be non-contextual. See {@link
diff --git a/src/main/java/org/bukkit/map/MapView.java b/src/main/java/org/bukkit/map/MapView.java
index 9b8b68b66dc15b06800251702c2722623c8462a0..410d84aacfad477b178c66525f457cbd41178e39 100644
--- a/src/main/java/org/bukkit/map/MapView.java
+++ b/src/main/java/org/bukkit/map/MapView.java
@@ -14,16 +14,16 @@ public interface MapView {
     /**
      * An enum representing all possible scales a map can be set to.
      */
-    public static enum Scale {
+    enum Scale {
         CLOSEST(0),
         CLOSE(1),
         NORMAL(2),
         FAR(3),
         FARTHEST(4);
 
-        private byte value;
+        private final byte value;
 
-        private Scale(int value) {
+        Scale(int value) {
             this.value = (byte) value;
         }
 
@@ -37,14 +37,14 @@ public interface MapView {
         @Deprecated
         @Nullable
         public static Scale valueOf(byte value) {
-            switch (value) {
-            case 0: return CLOSEST;
-            case 1: return CLOSE;
-            case 2: return NORMAL;
-            case 3: return FAR;
-            case 4: return FARTHEST;
-            default: return null;
-            }
+            return switch (value) {
+                case 0 -> CLOSEST;
+                case 1 -> CLOSE;
+                case 2 -> NORMAL;
+                case 3 -> FAR;
+                case 4 -> FARTHEST;
+                default -> null;
+            };
         }
 
         /**
@@ -64,7 +64,7 @@ public interface MapView {
      *
      * @return The ID of the map.
      */
-    public int getId();
+    int getId();
 
     /**
      * Check whether this map is virtual. A map is virtual if its lowermost
@@ -72,50 +72,49 @@ public interface MapView {
      *
      * @return Whether the map is virtual.
      */
-    public boolean isVirtual();
+    boolean isVirtual();
 
     /**
      * Get the scale of this map.
      *
      * @return The scale of the map.
      */
-    @NotNull
-    public Scale getScale();
+    @NotNull Scale getScale();
 
     /**
      * Set the scale of this map.
      *
      * @param scale The scale to set.
      */
-    public void setScale(@NotNull Scale scale);
+    void setScale(@NotNull Scale scale);
 
     /**
      * Get the center X position of this map.
      *
      * @return The center X position.
      */
-    public int getCenterX();
+    int getCenterX();
 
     /**
      * Get the center Z position of this map.
      *
      * @return The center Z position.
      */
-    public int getCenterZ();
+    int getCenterZ();
 
     /**
      * Set the center X position of this map.
      *
      * @param x The center X position.
      */
-    public void setCenterX(int x);
+    void setCenterX(int x);
 
     /**
      * Set the center Z position of this map.
      *
      * @param z The center Z position.
      */
-    public void setCenterZ(int z);
+    void setCenterZ(int z);
 
     /**
      * Get the world that this map is associated with. Primarily used by the
@@ -124,8 +123,7 @@ public interface MapView {
      *
      * @return The World this map is associated with.
      */
-    @Nullable
-    public World getWorld();
+    @Nullable World getWorld();
 
     /**
      * Set the world that this map is associated with. The world is used by
@@ -133,22 +131,21 @@ public interface MapView {
      *
      * @param world The World to associate this map with.
      */
-    public void setWorld(@NotNull World world);
+    void setWorld(@NotNull World world);
 
     /**
      * Get a list of MapRenderers currently in effect.
      *
      * @return A {@code List<MapRenderer>} containing each map renderer.
      */
-    @NotNull
-    public List<MapRenderer> getRenderers();
+    @NotNull List<MapRenderer> getRenderers();
 
     /**
      * Add a renderer to this map.
      *
      * @param renderer The MapRenderer to add.
      */
-    public void addRenderer(@NotNull MapRenderer renderer);
+    void addRenderer(@NotNull MapRenderer renderer);
 
     /**
      * Remove a renderer from this map.
@@ -156,7 +153,7 @@ public interface MapView {
      * @param renderer The MapRenderer to remove.
      * @return True if the renderer was successfully removed.
      */
-    public boolean removeRenderer(@Nullable MapRenderer renderer);
+    boolean removeRenderer(@Nullable MapRenderer renderer);
 
     /**
      * Gets whether a position cursor should be shown when the map is near its
diff --git a/src/main/java/org/bukkit/material/Attachable.java b/src/main/java/org/bukkit/material/Attachable.java
index 16abdbf923e16e0df88db3780b93ec1a5579a273..3f0ce8efb920d03abafcdc3b4ae5e0cde08edc56 100644
--- a/src/main/java/org/bukkit/material/Attachable.java
+++ b/src/main/java/org/bukkit/material/Attachable.java
@@ -13,6 +13,5 @@ public interface Attachable extends Directional {
      *
      * @return BlockFace attached to
      */
-    @NotNull
-    public BlockFace getAttachedFace();
+    @NotNull BlockFace getAttachedFace();
 }
diff --git a/src/main/java/org/bukkit/material/Banner.java b/src/main/java/org/bukkit/material/Banner.java
index 08ce9d8bc6dcd9beec5f75c1b7cd5d98e8c9e168..40f69d2d5a0c6daeaf4e4f1a62eaf8d24c30c66a 100644
--- a/src/main/java/org/bukkit/material/Banner.java
+++ b/src/main/java/org/bukkit/material/Banner.java
@@ -37,21 +37,14 @@ public class Banner extends MaterialData implements Attachable {
         if (isWallBanner()) {
             byte data = getData();
 
-            switch (data) {
-                case 0x2:
-                    return BlockFace.SOUTH;
+	        return switch (data) {
+		        case 0x2 -> BlockFace.SOUTH;
+		        case 0x3 -> BlockFace.NORTH;
+		        case 0x4 -> BlockFace.EAST;
+		        case 0x5 -> BlockFace.WEST;
+		        default -> null;
+	        };
 
-                case 0x3:
-                    return BlockFace.NORTH;
-
-                case 0x4:
-                    return BlockFace.EAST;
-
-                case 0x5:
-                    return BlockFace.WEST;
-            }
-
-            return null;
         } else {
             return BlockFace.DOWN;
         }
@@ -62,57 +55,26 @@ public class Banner extends MaterialData implements Attachable {
         byte data = getData();
 
         if (!isWallBanner()) {
-            switch (data) {
-                case 0x0:
-                    return BlockFace.SOUTH;
-
-                case 0x1:
-                    return BlockFace.SOUTH_SOUTH_WEST;
-
-                case 0x2:
-                    return BlockFace.SOUTH_WEST;
-
-                case 0x3:
-                    return BlockFace.WEST_SOUTH_WEST;
-
-                case 0x4:
-                    return BlockFace.WEST;
-
-                case 0x5:
-                    return BlockFace.WEST_NORTH_WEST;
-
-                case 0x6:
-                    return BlockFace.NORTH_WEST;
-
-                case 0x7:
-                    return BlockFace.NORTH_NORTH_WEST;
-
-                case 0x8:
-                    return BlockFace.NORTH;
-
-                case 0x9:
-                    return BlockFace.NORTH_NORTH_EAST;
-
-                case 0xA:
-                    return BlockFace.NORTH_EAST;
-
-                case 0xB:
-                    return BlockFace.EAST_NORTH_EAST;
-
-                case 0xC:
-                    return BlockFace.EAST;
-
-                case 0xD:
-                    return BlockFace.EAST_SOUTH_EAST;
-
-                case 0xE:
-                    return BlockFace.SOUTH_EAST;
-
-                case 0xF:
-                    return BlockFace.SOUTH_SOUTH_EAST;
-            }
+	        return switch (data) {
+		        case 0x0 -> BlockFace.SOUTH;
+		        case 0x1 -> BlockFace.SOUTH_SOUTH_WEST;
+		        case 0x2 -> BlockFace.SOUTH_WEST;
+		        case 0x3 -> BlockFace.WEST_SOUTH_WEST;
+		        case 0x4 -> BlockFace.WEST;
+		        case 0x5 -> BlockFace.WEST_NORTH_WEST;
+		        case 0x6 -> BlockFace.NORTH_WEST;
+		        case 0x7 -> BlockFace.NORTH_NORTH_WEST;
+		        case 0x8 -> BlockFace.NORTH;
+		        case 0x9 -> BlockFace.NORTH_NORTH_EAST;
+		        case 0xA -> BlockFace.NORTH_EAST;
+		        case 0xB -> BlockFace.EAST_NORTH_EAST;
+		        case 0xC -> BlockFace.EAST;
+		        case 0xD -> BlockFace.EAST_SOUTH_EAST;
+		        case 0xE -> BlockFace.SOUTH_EAST;
+		        case 0xF -> BlockFace.SOUTH_SOUTH_EAST;
+		        default -> null;
+	        };
 
-            return null;
         } else {
             return getAttachedFace().getOppositeFace();
         }
@@ -123,89 +85,31 @@ public class Banner extends MaterialData implements Attachable {
         byte data;
 
         if (isWallBanner()) {
-            switch (face) {
-                case NORTH:
-                    data = 0x2;
-                    break;
-
-                case SOUTH:
-                    data = 0x3;
-                    break;
-
-                case WEST:
-                    data = 0x4;
-                    break;
-
-                case EAST:
-                default:
-                    data = 0x5;
-            }
+	        data = (byte) switch (face) {
+		        case NORTH -> 0x2;
+		        case SOUTH -> 0x3;
+		        case WEST -> 0x4;
+		        default -> 0x5;
+	        };
         } else {
-            switch (face) {
-                case SOUTH:
-                    data = 0x0;
-                    break;
-
-                case SOUTH_SOUTH_WEST:
-                    data = 0x1;
-                    break;
-
-                case SOUTH_WEST:
-                    data = 0x2;
-                    break;
-
-                case WEST_SOUTH_WEST:
-                    data = 0x3;
-                    break;
-
-                case WEST:
-                    data = 0x4;
-                    break;
-
-                case WEST_NORTH_WEST:
-                    data = 0x5;
-                    break;
-
-                case NORTH_WEST:
-                    data = 0x6;
-                    break;
-
-                case NORTH_NORTH_WEST:
-                    data = 0x7;
-                    break;
-
-                case NORTH:
-                    data = 0x8;
-                    break;
-
-                case NORTH_NORTH_EAST:
-                    data = 0x9;
-                    break;
-
-                case NORTH_EAST:
-                    data = 0xA;
-                    break;
-
-                case EAST_NORTH_EAST:
-                    data = 0xB;
-                    break;
-
-                case EAST:
-                    data = 0xC;
-                    break;
-
-                case EAST_SOUTH_EAST:
-                    data = 0xD;
-                    break;
-
-                case SOUTH_SOUTH_EAST:
-                    data = 0xF;
-                    break;
-
-                case SOUTH_EAST:
-                default:
-                    data = 0xE;
-            }
+	        data = (byte) switch (face) {
+		        case SOUTH -> 0x0;
+		        case SOUTH_SOUTH_WEST -> 0x1;
+		        case SOUTH_WEST -> 0x2;
+		        case WEST_SOUTH_WEST -> 0x3;
+		        case WEST -> 0x4;
+		        case WEST_NORTH_WEST -> 0x5;
+		        case NORTH_WEST -> 0x6;
+		        case NORTH_NORTH_WEST -> 0x7;
+		        case NORTH -> 0x8;
+		        case NORTH_NORTH_EAST -> 0x9;
+		        case NORTH_EAST -> 0xA;
+		        case EAST_NORTH_EAST -> 0xB;
+		        case EAST -> 0xC;
+		        case EAST_SOUTH_EAST -> 0xD;
+		        case SOUTH_SOUTH_EAST -> 0xF;
+		        default -> 0xE;
+	        };
         }
 
         setData(data);
diff --git a/src/main/java/org/bukkit/material/Bed.java b/src/main/java/org/bukkit/material/Bed.java
index c5256129e00a63d2699fbae213470ed7197c4571..30e419042c027b8b554134e82e4857ea3d5b4ea6 100644
--- a/src/main/java/org/bukkit/material/Bed.java
+++ b/src/main/java/org/bukkit/material/Bed.java
@@ -67,27 +67,14 @@ public class Bed extends MaterialData implements Directional {
      */
     @Override
     public void setFacingDirection(BlockFace face) {
-        byte data;
-
-        switch (face) {
-        case SOUTH:
-            data = 0x0;
-            break;
-
-        case WEST:
-            data = 0x1;
-            break;
-
-        case NORTH:
-            data = 0x2;
-            break;
-
-        case EAST:
-        default:
-            data = 0x3;
-        }
-
-        if (isHeadOfBed()) {
+        byte data = switch (face) {
+	        case SOUTH -> 0x0;
+	        case WEST -> 0x1;
+	        case NORTH -> 0x2;
+	        default -> 0x3;
+        };
+
+	    if (isHeadOfBed()) {
             data |= 0x8;
         }
 
@@ -103,20 +90,12 @@ public class Bed extends MaterialData implements Directional {
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x7);
 
-        switch (data) {
-        case 0x0:
-            return BlockFace.SOUTH;
-
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.NORTH;
-
-        case 0x3:
-        default:
-            return BlockFace.EAST;
-        }
+	    return switch (data) {
+		    case 0x0 -> BlockFace.SOUTH;
+		    case 0x1 -> BlockFace.WEST;
+		    case 0x2 -> BlockFace.NORTH;
+		    default -> BlockFace.EAST;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Button.java b/src/main/java/org/bukkit/material/Button.java
index da7d016cf118932c9cc9ddcfb4a2abd4b4356fb5..e52e055215016c6bf4f8c98b5be1c46fcee2b2c6 100644
--- a/src/main/java/org/bukkit/material/Button.java
+++ b/src/main/java/org/bukkit/material/Button.java
@@ -59,27 +59,16 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
     public BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x7);
 
-        switch (data) {
-        case 0x0:
-            return BlockFace.UP;
+	    return switch (data) {
+		    case 0x0 -> BlockFace.UP;
+		    case 0x1 -> BlockFace.WEST;
+		    case 0x2 -> BlockFace.EAST;
+		    case 0x3 -> BlockFace.NORTH;
+		    case 0x4 -> BlockFace.SOUTH;
+		    case 0x5 -> BlockFace.DOWN;
+		    default -> null;
+	    };
 
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.SOUTH;
-
-        case 0x5:
-            return BlockFace.DOWN;
-        }
-
-        return null;
     }
 
     /**
@@ -90,29 +79,12 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
-        case DOWN:
-            data |= 0x0;
-            break;
-
-        case EAST:
-            data |= 0x1;
-            break;
-
-        case WEST:
-            data |= 0x2;
-            break;
-
-        case SOUTH:
-            data |= 0x3;
-            break;
-
-        case NORTH:
-            data |= 0x4;
-            break;
-
-        case UP:
-            data |= 0x5;
-            break;
+            case DOWN -> data |= 0x0;
+            case EAST -> data |= 0x1;
+            case WEST -> data |= 0x2;
+            case SOUTH -> data |= 0x3;
+            case NORTH -> data |= 0x4;
+            case UP -> data |= 0x5;
         }
 
         setData(data);
diff --git a/src/main/java/org/bukkit/material/CocoaPlant.java b/src/main/java/org/bukkit/material/CocoaPlant.java
index b1b1c729d182b676d8ea69a8d3c942c6820863dd..1d7390a3c1d3935612459a3e1c275e89e98546c1 100644
--- a/src/main/java/org/bukkit/material/CocoaPlant.java
+++ b/src/main/java/org/bukkit/material/CocoaPlant.java
@@ -49,14 +49,11 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
      * @return size
      */
     public CocoaPlantSize getSize() {
-        switch (getData() & 0xC) {
-            case 0:
-                return CocoaPlantSize.SMALL;
-            case 4:
-                return CocoaPlantSize.MEDIUM;
-            default:
-                return CocoaPlantSize.LARGE;
-        }
+	    return switch (getData() & 0xC) {
+		    case 0 -> CocoaPlantSize.SMALL;
+		    case 4 -> CocoaPlantSize.MEDIUM;
+		    default -> CocoaPlantSize.LARGE;
+	    };
     }
 
     /**
@@ -106,17 +103,13 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
 
     @Override
     public BlockFace getFacing() {
-        switch (getData() & 0x3) {
-            case 0:
-                return BlockFace.SOUTH;
-            case 1:
-                return BlockFace.WEST;
-            case 2:
-                return BlockFace.NORTH;
-            case 3:
-                return BlockFace.EAST;
-        }
-        return null;
+	    return switch (getData() & 0x3) {
+		    case 0 -> BlockFace.SOUTH;
+		    case 1 -> BlockFace.WEST;
+		    case 2 -> BlockFace.NORTH;
+		    case 3 -> BlockFace.EAST;
+		    default -> null;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Colorable.java b/src/main/java/org/bukkit/material/Colorable.java
index 7f495e05227ab3fedb3031904f2de85c4c853b65..02add67e7b10d76df604fa749f9c5955938af2a7 100644
--- a/src/main/java/org/bukkit/material/Colorable.java
+++ b/src/main/java/org/bukkit/material/Colorable.java
@@ -17,8 +17,7 @@ public interface Colorable {
      *
      * @return The DyeColor of this object.
      */
-    @Nullable
-    public DyeColor getColor();
+    @Nullable DyeColor getColor();
 
     /**
      * Sets the color of this object to the specified DyeColor.
@@ -29,6 +28,6 @@ public interface Colorable {
      * @param color The color of the object, as a DyeColor.
      * @throws NullPointerException if argument is null and this implementation does not support null
      */
-    public void setColor(@UndefinedNullability("defined by subclass") DyeColor color);
+    void setColor(@UndefinedNullability("defined by subclass") DyeColor color);
 
 }
diff --git a/src/main/java/org/bukkit/material/Comparator.java b/src/main/java/org/bukkit/material/Comparator.java
index 49d32d54438ad689bc7768342dc84d31e5f30285..d2c92c6e6c721e506da6c41cdfbec3d77e4bce42 100644
--- a/src/main/java/org/bukkit/material/Comparator.java
+++ b/src/main/java/org/bukkit/material/Comparator.java
@@ -107,21 +107,10 @@ public class Comparator extends MaterialData implements Directional, Redstone {
         int data = getData() & 0xC;
 
         switch (face) {
-        case EAST:
-            data |= 0x1;
-            break;
-
-        case SOUTH:
-            data |= 0x2;
-            break;
-
-        case WEST:
-            data |= 0x3;
-            break;
-
-        case NORTH:
-        default:
-            data |= 0x0;
+            case EAST -> data |= 0x1;
+            case SOUTH -> data |= 0x2;
+            case WEST -> data |= 0x3;
+            default -> data |= 0x0;
         }
 
         setData((byte) data);
@@ -138,20 +127,12 @@ public class Comparator extends MaterialData implements Directional, Redstone {
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
 
-        switch (data) {
-        case 0x0:
-        default:
-            return BlockFace.NORTH;
-
-        case 0x1:
-            return BlockFace.EAST;
-
-        case 0x2:
-            return BlockFace.SOUTH;
-
-        case 0x3:
-            return BlockFace.WEST;
-        }
+	    return switch (data) {
+		    default -> BlockFace.NORTH;
+		    case 0x1 -> BlockFace.EAST;
+		    case 0x2 -> BlockFace.SOUTH;
+		    case 0x3 -> BlockFace.WEST;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Crops.java b/src/main/java/org/bukkit/material/Crops.java
index 4cf3de5fbba8617bc8edab9ca1c0ddee8033ed09..c6f3ca4246a723033cf913474d33832e903470b1 100644
--- a/src/main/java/org/bukkit/material/Crops.java
+++ b/src/main/java/org/bukkit/material/Crops.java
@@ -76,20 +76,14 @@ public class Crops extends MaterialData {
      * @return CropState of this crop
      */
     public CropState getState() {
-        switch (getItemType()) {
-            case LEGACY_CROPS:
-            case LEGACY_CARROT:
-            case LEGACY_POTATO:
-                // Mask the data just in case top bit set
-                return CropState.getByData((byte) (getData() & 0x7));
-            case LEGACY_BEETROOT_BLOCK:
-            case LEGACY_NETHER_WARTS:
-                // Mask the data just in case top bits are set
-                // Will return SEEDED, SMALL, TALL, RIPE for the three growth data values
-                return CropState.getByData((byte) (((getData() & 0x3) * 7 + 2) / 3));
-            default:
-                throw new IllegalArgumentException("Block type is not a crop");
-        }
+	    // Mask the data just in case top bit set
+	    // Mask the data just in case top bits are set
+	    // Will return SEEDED, SMALL, TALL, RIPE for the three growth data values
+	    return switch (getItemType()) {
+		    case LEGACY_CROPS, LEGACY_CARROT, LEGACY_POTATO -> CropState.getByData((byte) (getData() & 0x7));
+		    case LEGACY_BEETROOT_BLOCK, LEGACY_NETHER_WARTS -> CropState.getByData((byte) (((getData() & 0x3) * 7 + 2) / 3));
+		    default -> throw new IllegalArgumentException("Block type is not a crop");
+	    };
     }
 
     /**
@@ -107,20 +101,12 @@ public class Crops extends MaterialData {
      * @param state New growth state of this crop
      */
     public void setState(CropState state) {
+        // Preserve the top bit in case it is set
+        // Preserve the top bits in case they are set
         switch (getItemType()) {
-            case LEGACY_CROPS:
-            case LEGACY_CARROT:
-            case LEGACY_POTATO:
-                // Preserve the top bit in case it is set
-                setData((byte) ((getData() & 0x8) | state.getData()));
-                break;
-            case LEGACY_NETHER_WARTS:
-            case LEGACY_BEETROOT_BLOCK:
-                // Preserve the top bits in case they are set
-                setData((byte) ((getData() & 0xC) | (state.getData() >> 1)));
-                break;
-            default:
-                throw new IllegalArgumentException("Block type is not a crop");
+            case LEGACY_CROPS, LEGACY_CARROT, LEGACY_POTATO -> setData((byte) ((getData() & 0x8) | state.getData()));
+            case LEGACY_NETHER_WARTS, LEGACY_BEETROOT_BLOCK -> setData((byte) ((getData() & 0xC) | (state.getData() >> 1)));
+            default -> throw new IllegalArgumentException("Block type is not a crop");
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Diode.java b/src/main/java/org/bukkit/material/Diode.java
index 36a62258bcdea8136672ef6b2313a3877b3c724c..71761d43958baa7a8bdbb33795b4138d8ce448b2 100644
--- a/src/main/java/org/bukkit/material/Diode.java
+++ b/src/main/java/org/bukkit/material/Diode.java
@@ -124,24 +124,14 @@ public class Diode extends MaterialData implements Directional, Redstone {
     @Override
     public void setFacingDirection(BlockFace face) {
         int delay = getDelay();
-        byte data;
-
-        switch (face) {
-            case EAST:
-                data = 0x1;
-                break;
-            case SOUTH:
-                data = 0x2;
-                break;
-            case WEST:
-                data = 0x3;
-                break;
-            case NORTH:
-            default:
-                data = 0x0;
-        }
-
-        setData(data);
+        byte data = switch (face) {
+	        case EAST -> 0x1;
+	        case SOUTH -> 0x2;
+	        case WEST -> 0x3;
+	        default -> 0x0;
+        };
+
+	    setData(data);
         setDelay(delay);
     }
 
@@ -156,20 +146,12 @@ public class Diode extends MaterialData implements Directional, Redstone {
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
 
-        switch (data) {
-            case 0x0:
-            default:
-                return BlockFace.NORTH;
-
-            case 0x1:
-                return BlockFace.EAST;
-
-            case 0x2:
-                return BlockFace.SOUTH;
-
-            case 0x3:
-                return BlockFace.WEST;
-        }
+	    return switch (data) {
+		    default -> BlockFace.NORTH;
+		    case 0x1 -> BlockFace.EAST;
+		    case 0x2 -> BlockFace.SOUTH;
+		    case 0x3 -> BlockFace.WEST;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Directional.java b/src/main/java/org/bukkit/material/Directional.java
index 8c1c7b0a258bd4e601955827c4f5a72b81a60db2..d25a0b10a2a757aef595e73d8ab66a270625eb3e 100644
--- a/src/main/java/org/bukkit/material/Directional.java
+++ b/src/main/java/org/bukkit/material/Directional.java
@@ -10,13 +10,12 @@ public interface Directional {
      *
      * @param face The facing direction
      */
-    public void setFacingDirection(@NotNull BlockFace face);
+    void setFacingDirection(@NotNull BlockFace face);
 
     /**
      * Gets the direction this block is facing
      *
      * @return the direction this block is facing
      */
-    @NotNull
-    public BlockFace getFacing();
+    @NotNull BlockFace getFacing();
 }
diff --git a/src/main/java/org/bukkit/material/DirectionalContainer.java b/src/main/java/org/bukkit/material/DirectionalContainer.java
index 0190e5f3df5b86a0d8f912baf0570a4f54853829..53923269331d6cd4179cd6a5bbcc225d10738d3a 100644
--- a/src/main/java/org/bukkit/material/DirectionalContainer.java
+++ b/src/main/java/org/bukkit/material/DirectionalContainer.java
@@ -28,47 +28,26 @@ public class DirectionalContainer extends MaterialData implements Directional {
 
     @Override
     public void setFacingDirection(BlockFace face) {
-        byte data;
-
-        switch (face) {
-        case NORTH:
-            data = 0x2;
-            break;
-
-        case SOUTH:
-            data = 0x3;
-            break;
-
-        case WEST:
-            data = 0x4;
-            break;
-
-        case EAST:
-        default:
-            data = 0x5;
-        }
-
-        setData(data);
+        byte data = switch (face) {
+	        case NORTH -> 0x2;
+	        case SOUTH -> 0x3;
+	        case WEST -> 0x4;
+	        default -> 0x5;
+        };
+
+	    setData(data);
     }
 
     @Override
     public BlockFace getFacing() {
         byte data = getData();
 
-        switch (data) {
-        case 0x2:
-            return BlockFace.NORTH;
-
-        case 0x3:
-            return BlockFace.SOUTH;
-
-        case 0x4:
-            return BlockFace.WEST;
-
-        case 0x5:
-        default:
-            return BlockFace.EAST;
-        }
+	    return switch (data) {
+		    case 0x2 -> BlockFace.NORTH;
+		    case 0x3 -> BlockFace.SOUTH;
+		    case 0x4 -> BlockFace.WEST;
+		    default -> BlockFace.EAST;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Dispenser.java b/src/main/java/org/bukkit/material/Dispenser.java
index b12993a93781bd8a3d218a0dd102e357996ee79e..ca761d66ecf9699be505c63b9071380dd18eac66 100644
--- a/src/main/java/org/bukkit/material/Dispenser.java
+++ b/src/main/java/org/bukkit/material/Dispenser.java
@@ -37,61 +37,30 @@ public class Dispenser extends FurnaceAndDispenser {
 
     @Override
     public void setFacingDirection(BlockFace face) {
-        byte data;
-
-        switch (face) {
-            case DOWN:
-                data = 0x0;
-                break;
-
-            case UP:
-                data = 0x1;
-                break;
-
-            case NORTH:
-                data = 0x2;
-                break;
-
-            case SOUTH:
-                data = 0x3;
-                break;
-
-            case WEST:
-                data = 0x4;
-                break;
-
-            case EAST:
-            default:
-                data = 0x5;
-        }
-
-        setData(data);
+        byte data = switch (face) {
+	        case DOWN -> 0x0;
+	        case UP -> 0x1;
+	        case NORTH -> 0x2;
+	        case SOUTH -> 0x3;
+	        case WEST -> 0x4;
+	        default -> 0x5;
+        };
+
+	    setData(data);
     }
 
     @Override
     public BlockFace getFacing() {
         int data = getData() & 0x7;
 
-        switch (data) {
-            case 0x0:
-                return BlockFace.DOWN;
-
-            case 0x1:
-                return BlockFace.UP;
-
-            case 0x2:
-                return BlockFace.NORTH;
-
-            case 0x3:
-                return BlockFace.SOUTH;
-
-            case 0x4:
-                return BlockFace.WEST;
-
-            case 0x5:
-            default:
-                return BlockFace.EAST;
-        }
+	    return switch (data) {
+		    case 0x0 -> BlockFace.DOWN;
+		    case 0x1 -> BlockFace.UP;
+		    case 0x2 -> BlockFace.NORTH;
+		    case 0x3 -> BlockFace.SOUTH;
+		    case 0x4 -> BlockFace.WEST;
+		    default -> BlockFace.EAST;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Door.java b/src/main/java/org/bukkit/material/Door.java
index d04ece5abab7a22abc4283d3043a52d4286d4103..f19ae5b2c1aa3c440f5b152280fad92e76f5d768 100644
--- a/src/main/java/org/bukkit/material/Door.java
+++ b/src/main/java/org/bukkit/material/Door.java
@@ -184,21 +184,14 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see Material#LEGACY_DARK_OAK_DOOR
      */
     public static Material getWoodDoorOfSpecies(TreeSpecies species) {
-        switch (species) {
-            default:
-            case GENERIC:
-                return Material.LEGACY_WOODEN_DOOR;
-            case BIRCH:
-                return Material.LEGACY_BIRCH_DOOR;
-            case REDWOOD:
-                return Material.LEGACY_SPRUCE_DOOR;
-            case JUNGLE:
-                return Material.LEGACY_JUNGLE_DOOR;
-            case ACACIA:
-                return Material.LEGACY_ACACIA_DOOR;
-            case DARK_OAK:
-                return Material.LEGACY_DARK_OAK_DOOR;
-        }
+	    return switch (species) {
+		    case GENERIC -> Material.LEGACY_WOODEN_DOOR;
+		    case BIRCH -> Material.LEGACY_BIRCH_DOOR;
+		    case REDWOOD -> Material.LEGACY_SPRUCE_DOOR;
+		    case JUNGLE -> Material.LEGACY_JUNGLE_DOOR;
+		    case ACACIA -> Material.LEGACY_ACACIA_DOOR;
+		    case DARK_OAK -> Material.LEGACY_DARK_OAK_DOOR;
+	    };
     }
 
     /**
@@ -258,18 +251,10 @@ public class Door extends MaterialData implements Directional, Openable {
     public void setFacingDirection(BlockFace face) {
         byte data = (byte) (getData() & 0xC);
         switch (face) {
-            case WEST:
-                data |= 0x0;
-                break;
-            case NORTH:
-                data |= 0x1;
-                break;
-            case EAST:
-                data |= 0x2;
-                break;
-            case SOUTH:
-                data |= 0x3;
-                break;
+            case WEST -> data |= 0x0;
+            case NORTH -> data |= 0x1;
+            case EAST -> data |= 0x2;
+            case SOUTH -> data |= 0x3;
         }
         setData(data);
     }
@@ -284,18 +269,13 @@ public class Door extends MaterialData implements Directional, Openable {
     @Override
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x3);
-        switch (data) {
-            case 0:
-                return BlockFace.WEST;
-            case 1:
-                return BlockFace.NORTH;
-            case 2:
-                return BlockFace.EAST;
-            case 3:
-                return BlockFace.SOUTH;
-            default:
-                throw new IllegalStateException("Unknown door facing (data: " + data + ")");
-        }
+	    return switch (data) {
+		    case 0 -> BlockFace.WEST;
+		    case 1 -> BlockFace.NORTH;
+		    case 2 -> BlockFace.EAST;
+		    case 3 -> BlockFace.SOUTH;
+		    default -> throw new IllegalStateException("Unknown door facing (data: " + data + ")");
+	    };
     }
 
     /**
diff --git a/src/main/java/org/bukkit/material/FlowerPot.java b/src/main/java/org/bukkit/material/FlowerPot.java
index 6101e33288dded9ce871fe6c6f0b36c895d7214a..7c6471dfec9251c14f25fe9798d91a700384cbff 100644
--- a/src/main/java/org/bukkit/material/FlowerPot.java
+++ b/src/main/java/org/bukkit/material/FlowerPot.java
@@ -41,32 +41,20 @@ public class FlowerPot extends MaterialData {
      *     or null if empty
      */
     public MaterialData getContents() {
-        switch (getData()) {
-            case 1:
-                return new MaterialData(Material.LEGACY_RED_ROSE);
-            case 2:
-                return new MaterialData(Material.LEGACY_YELLOW_FLOWER);
-            case 3:
-                return new Tree(TreeSpecies.GENERIC);
-            case 4:
-                return new Tree(TreeSpecies.REDWOOD);
-            case 5:
-                return new Tree(TreeSpecies.BIRCH);
-            case 6:
-                return new Tree(TreeSpecies.JUNGLE);
-            case 7:
-                return new MaterialData(Material.LEGACY_RED_MUSHROOM);
-            case 8:
-                return new MaterialData(Material.LEGACY_BROWN_MUSHROOM);
-            case 9:
-                return new MaterialData(Material.LEGACY_CACTUS);
-            case 10:
-                return new MaterialData(Material.LEGACY_DEAD_BUSH);
-            case 11:
-                return new LongGrass(GrassSpecies.FERN_LIKE);
-            default:
-                return null;
-        }
+	    return switch (getData()) {
+		    case 1 -> new MaterialData(Material.LEGACY_RED_ROSE);
+		    case 2 -> new MaterialData(Material.LEGACY_YELLOW_FLOWER);
+		    case 3 -> new Tree(TreeSpecies.GENERIC);
+		    case 4 -> new Tree(TreeSpecies.REDWOOD);
+		    case 5 -> new Tree(TreeSpecies.BIRCH);
+		    case 6 -> new Tree(TreeSpecies.JUNGLE);
+		    case 7 -> new MaterialData(Material.LEGACY_RED_MUSHROOM);
+		    case 8 -> new MaterialData(Material.LEGACY_BROWN_MUSHROOM);
+		    case 9 -> new MaterialData(Material.LEGACY_CACTUS);
+		    case 10 -> new MaterialData(Material.LEGACY_DEAD_BUSH);
+		    case 11 -> new LongGrass(GrassSpecies.FERN_LIKE);
+		    default -> null;
+	    };
     }
 
     /**
diff --git a/src/main/java/org/bukkit/material/Gate.java b/src/main/java/org/bukkit/material/Gate.java
index fc67fc59a75410f7aa70609ebc9538bfdecdd403..772f66142d56fdadf6d6cbe34717029ada1216a4 100644
--- a/src/main/java/org/bukkit/material/Gate.java
+++ b/src/main/java/org/bukkit/material/Gate.java
@@ -41,19 +41,10 @@ public class Gate extends MaterialData implements Directional, Openable {
         byte data = (byte) (getData() & ~DIR_BIT);
 
         switch (face) {
-            default:
-            case EAST:
-                data |= GATE_SOUTH;
-                break;
-            case SOUTH:
-                data |= GATE_WEST;
-                break;
-            case WEST:
-                data |= GATE_NORTH;
-                break;
-            case NORTH:
-                data |= GATE_EAST;
-                break;
+            case EAST -> data |= GATE_SOUTH;
+            case SOUTH -> data |= GATE_WEST;
+            case WEST -> data |= GATE_NORTH;
+            case NORTH -> data |= GATE_EAST;
         }
 
         setData(data);
@@ -61,18 +52,13 @@ public class Gate extends MaterialData implements Directional, Openable {
 
     @Override
     public BlockFace getFacing() {
-        switch (getData() & DIR_BIT) {
-            case GATE_SOUTH:
-                return BlockFace.EAST;
-            case GATE_WEST:
-                return BlockFace.SOUTH;
-            case GATE_NORTH:
-                return BlockFace.WEST;
-            case GATE_EAST:
-                return BlockFace.NORTH;
-        }
+	    return switch (getData() & DIR_BIT) {
+		    case GATE_WEST -> BlockFace.SOUTH;
+		    case GATE_NORTH -> BlockFace.WEST;
+		    case GATE_EAST -> BlockFace.NORTH;
+		    default -> BlockFace.EAST;
+	    };
 
-        return BlockFace.EAST;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Hopper.java b/src/main/java/org/bukkit/material/Hopper.java
index cfd32666c274383204dee9f9734ffb06184d2aaa..a1272c32a2c0e943d94c1a0b55d9a2dcb1274bf3 100644
--- a/src/main/java/org/bukkit/material/Hopper.java
+++ b/src/main/java/org/bukkit/material/Hopper.java
@@ -98,21 +98,11 @@ public class Hopper extends MaterialData implements Directional, Redstone {
         int data = getData() & 0x8;
 
         switch (face) {
-            case DOWN:
-                data |= 0x0;
-                break;
-            case NORTH:
-                data |= 0x2;
-                break;
-            case SOUTH:
-                data |= 0x3;
-                break;
-            case WEST:
-                data |= 0x4;
-                break;
-            case EAST:
-                data |= 0x5;
-                break;
+            case DOWN -> data |= 0x0;
+            case NORTH -> data |= 0x2;
+            case SOUTH -> data |= 0x3;
+            case WEST -> data |= 0x4;
+            case EAST -> data |= 0x5;
         }
 
         setData((byte) data);
@@ -129,19 +119,14 @@ public class Hopper extends MaterialData implements Directional, Redstone {
     public BlockFace getFacing() {
         byte data = (byte) (getData() & 0x7);
 
-        switch (data) {
-            default:
-            case 0x0:
-                return BlockFace.DOWN;
-            case 0x2:
-                return BlockFace.NORTH;
-            case 0x3:
-                return BlockFace.SOUTH;
-            case 0x4:
-                return BlockFace.WEST;
-            case 0x5:
-                return BlockFace.EAST;
-        }
+	    return switch (data) {
+		    case 0x0 -> BlockFace.DOWN;
+		    case 0x2 -> BlockFace.NORTH;
+		    case 0x3 -> BlockFace.SOUTH;
+		    case 0x4 -> BlockFace.WEST;
+		    case 0x5 -> BlockFace.EAST;
+            default -> throw new IllegalStateException("Unexpected value: " + data);
+        };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Ladder.java b/src/main/java/org/bukkit/material/Ladder.java
index de263530823aa8c1ae8b4a9bd2497d7239156384..2f9ed44f2af5672256a356d1b2f675078960a47b 100644
--- a/src/main/java/org/bukkit/material/Ladder.java
+++ b/src/main/java/org/bukkit/material/Ladder.java
@@ -38,21 +38,14 @@ public class Ladder extends SimpleAttachableMaterialData {
     public BlockFace getAttachedFace() {
         byte data = getData();
 
-        switch (data) {
-        case 0x2:
-            return BlockFace.SOUTH;
+	    return switch (data) {
+		    case 0x2 -> BlockFace.SOUTH;
+		    case 0x3 -> BlockFace.NORTH;
+		    case 0x4 -> BlockFace.EAST;
+		    case 0x5 -> BlockFace.WEST;
+		    default -> null;
+	    };
 
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.EAST;
-
-        case 0x5:
-            return BlockFace.WEST;
-        }
-
-        return null;
     }
 
     /**
@@ -60,27 +53,15 @@ public class Ladder extends SimpleAttachableMaterialData {
      */
     @Override
     public void setFacingDirection(BlockFace face) {
-        byte data = (byte) 0x0;
-
-        switch (face) {
-        case SOUTH:
-            data = 0x2;
-            break;
-
-        case NORTH:
-            data = 0x3;
-            break;
-
-        case EAST:
-            data = 0x4;
-            break;
-
-        case WEST:
-            data = 0x5;
-            break;
-        }
-
-        setData(data);
+        byte data = switch (face) {
+	        case SOUTH -> 0x2;
+	        case NORTH -> 0x3;
+	        case EAST -> 0x4;
+	        case WEST -> 0x5;
+	        default -> (byte) 0x0;
+        };
+
+	    setData(data);
 
     }
 
diff --git a/src/main/java/org/bukkit/material/Lever.java b/src/main/java/org/bukkit/material/Lever.java
index 09f290f8898914b77f89c1546f285a6e6212499e..258dcf1fab7af62ce9682ad0690272d8226721ce 100644
--- a/src/main/java/org/bukkit/material/Lever.java
+++ b/src/main/java/org/bukkit/material/Lever.java
@@ -58,30 +58,16 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
     public BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x7);
 
-        switch (data) {
-        case 0x1:
-            return BlockFace.WEST;
+	    return switch (data) {
+		    case 0x1 -> BlockFace.WEST;
+		    case 0x2 -> BlockFace.EAST;
+		    case 0x3 -> BlockFace.NORTH;
+		    case 0x4 -> BlockFace.SOUTH;
+		    case 0x5, 0x6 -> BlockFace.DOWN;
+		    case 0x0, 0x7 -> BlockFace.UP;
+		    default -> null;
+	    };
 
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.SOUTH;
-
-        case 0x5:
-        case 0x6:
-            return BlockFace.DOWN;
-
-        case 0x0:
-        case 0x7:
-            return BlockFace.UP;
-
-        }
-
-        return null;
     }
 
     /**
@@ -94,45 +80,20 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
 
         if (attach == BlockFace.DOWN) {
             switch (face) {
-            case SOUTH:
-            case NORTH:
-                data |= 0x5;
-                break;
-
-            case EAST:
-            case WEST:
-                data |= 0x6;
-                break;
+                case SOUTH, NORTH -> data |= 0x5;
+                case EAST, WEST -> data |= 0x6;
             }
         } else if (attach == BlockFace.UP) {
             switch (face) {
-            case SOUTH:
-            case NORTH:
-                data |= 0x7;
-                break;
-
-            case EAST:
-            case WEST:
-                data |= 0x0;
-                break;
+                case SOUTH, NORTH -> data |= 0x7;
+                case EAST, WEST -> data |= 0x0;
             }
         } else {
             switch (face) {
-            case EAST:
-                data |= 0x1;
-                break;
-
-            case WEST:
-                data |= 0x2;
-                break;
-
-            case SOUTH:
-                data |= 0x3;
-                break;
-
-            case NORTH:
-                data |= 0x4;
-                break;
+                case EAST -> data |= 0x1;
+                case WEST -> data |= 0x2;
+                case SOUTH -> data |= 0x3;
+                case NORTH -> data |= 0x4;
             }
         }
         setData(data);
diff --git a/src/main/java/org/bukkit/material/MaterialData.java b/src/main/java/org/bukkit/material/MaterialData.java
index ccaddb87922b3afe22a350a3e5e5e7af86b2f398..c1e1f6751d35dd7a5bb40c9cf3e2405620949ba6 100644
--- a/src/main/java/org/bukkit/material/MaterialData.java
+++ b/src/main/java/org/bukkit/material/MaterialData.java
@@ -94,7 +94,7 @@ public class MaterialData implements Cloneable {
 
     @Override
     public boolean equals(Object obj) {
-        if (obj != null && obj instanceof MaterialData) {
+        if (obj instanceof MaterialData) {
             MaterialData md = (MaterialData) obj;
 
             return (md.getItemType() == getItemType() && md.getData() == getData());
diff --git a/src/main/java/org/bukkit/material/MonsterEggs.java b/src/main/java/org/bukkit/material/MonsterEggs.java
index 2fac218f1e237d4b867c1e6215fe40151dcceaf0..b9b9ed8e8fff4c3d6e96f20d5056fd4869313965 100644
--- a/src/main/java/org/bukkit/material/MonsterEggs.java
+++ b/src/main/java/org/bukkit/material/MonsterEggs.java
@@ -13,7 +13,7 @@ import org.bukkit.Material;
 @Deprecated
 public class MonsterEggs extends TexturedMaterial {
 
-    private static final List<Material> textures = new ArrayList<Material>();
+    private static final List<Material> textures = new ArrayList<>();
     static {
         textures.add(Material.LEGACY_STONE);
         textures.add(Material.LEGACY_COBBLESTONE);
diff --git a/src/main/java/org/bukkit/material/Mushroom.java b/src/main/java/org/bukkit/material/Mushroom.java
index 543b76c8a659a488c3e87d7b59b2f14cf7d651f1..1774aea90b19a77a8619592ac9d102c45b2c4909 100644
--- a/src/main/java/org/bukkit/material/Mushroom.java
+++ b/src/main/java/org/bukkit/material/Mushroom.java
@@ -105,7 +105,7 @@ public class Mushroom extends MaterialData {
      */
     @Deprecated
     public void setStem() {
-        setData((byte) MushroomBlockTexture.STEM_SIDES.getData());
+        setData(MushroomBlockTexture.STEM_SIDES.getData());
     }
 
     /**
@@ -140,23 +140,15 @@ public class Mushroom extends MaterialData {
             return false;
         }
 
-        switch (face) {
-            case WEST:
-                return data < NORTH_LIMIT;
-            case EAST:
-                return data > SOUTH_LIMIT;
-            case NORTH:
-                return data % EAST_WEST_LIMIT == EAST_REMAINDER;
-            case SOUTH:
-                return data % EAST_WEST_LIMIT == WEST_REMAINDER;
-            case UP:
-                return true;
-            case DOWN:
-            case SELF:
-                return data == MushroomBlockTexture.ALL_CAP.getData();
-            default:
-                return false;
-        }
+	    return switch (face) {
+		    case WEST -> data < NORTH_LIMIT;
+		    case EAST -> data > SOUTH_LIMIT;
+		    case NORTH -> data % EAST_WEST_LIMIT == EAST_REMAINDER;
+		    case SOUTH -> data % EAST_WEST_LIMIT == WEST_REMAINDER;
+		    case UP -> true;
+		    case DOWN, SELF -> data == MushroomBlockTexture.ALL_CAP.getData();
+		    default -> false;
+	    };
     }
 
     /**
diff --git a/src/main/java/org/bukkit/material/NetherWarts.java b/src/main/java/org/bukkit/material/NetherWarts.java
index 1fed8b937a68bfd12d04e04b962e1627c36a074f..f1d4a47a78ca8bcbc2056675a8a67aa0a800d589 100644
--- a/src/main/java/org/bukkit/material/NetherWarts.java
+++ b/src/main/java/org/bukkit/material/NetherWarts.java
@@ -40,16 +40,12 @@ public class NetherWarts extends MaterialData {
      * @return NetherWartsState of this nether wart
      */
     public NetherWartsState getState() {
-        switch (getData()) {
-            case 0:
-                return NetherWartsState.SEEDED;
-            case 1:
-                return NetherWartsState.STAGE_ONE;
-            case 2:
-                return NetherWartsState.STAGE_TWO;
-            default:
-                return NetherWartsState.RIPE;
-        }
+	    return switch (getData()) {
+		    case 0 -> NetherWartsState.SEEDED;
+		    case 1 -> NetherWartsState.STAGE_ONE;
+		    case 2 -> NetherWartsState.STAGE_TWO;
+		    default -> NetherWartsState.RIPE;
+	    };
     }
 
     /**
@@ -59,18 +55,10 @@ public class NetherWarts extends MaterialData {
      */
     public void setState(NetherWartsState state) {
         switch (state) {
-            case SEEDED:
-                setData((byte) 0x0);
-                return;
-            case STAGE_ONE:
-                setData((byte) 0x1);
-                return;
-            case STAGE_TWO:
-                setData((byte) 0x2);
-                return;
-            case RIPE:
-                setData((byte) 0x3);
-                return;
+            case SEEDED -> setData((byte) 0x0);
+            case STAGE_ONE -> setData((byte) 0x1);
+            case STAGE_TWO -> setData((byte) 0x2);
+            case RIPE -> setData((byte) 0x3);
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Observer.java b/src/main/java/org/bukkit/material/Observer.java
index 843790b331e1ed1db9e46716251851b0782497c1..213f9162c9915d6ca6e911a10f2e00bd5e6a392e 100644
--- a/src/main/java/org/bukkit/material/Observer.java
+++ b/src/main/java/org/bukkit/material/Observer.java
@@ -45,24 +45,12 @@ public class Observer extends MaterialData implements Directional, Redstone {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
-            case DOWN:
-                data |= 0x0;
-                break;
-            case UP:
-                data |= 0x1;
-                break;
-            case SOUTH:
-                data |= 0x2;
-                break;
-            case NORTH:
-                data |= 0x3;
-                break;
-            case EAST:
-                data |= 0x4;
-                break;
-            case WEST:
-                data |= 0x5;
-                break;
+            case DOWN -> data |= 0x0;
+            case UP -> data |= 0x1;
+            case SOUTH -> data |= 0x2;
+            case NORTH -> data |= 0x3;
+            case EAST -> data |= 0x4;
+            case WEST -> data |= 0x5;
         }
 
         setData(data);
@@ -72,22 +60,15 @@ public class Observer extends MaterialData implements Directional, Redstone {
     public BlockFace getFacing() {
         int data = getData() & 0x7;
 
-        switch (data) {
-            case 0x0:
-                return BlockFace.DOWN;
-            case 0x1:
-                return BlockFace.UP;
-            case 0x2:
-                return BlockFace.SOUTH;
-            case 0x3:
-                return BlockFace.NORTH;
-            case 0x4:
-                return BlockFace.EAST;
-            case 0x5:
-                return BlockFace.WEST;
-            default:
-                throw new IllegalArgumentException("Illegal facing direction " + data);
-        }
+	    return switch (data) {
+		    case 0x0 -> BlockFace.DOWN;
+		    case 0x1 -> BlockFace.UP;
+		    case 0x2 -> BlockFace.SOUTH;
+		    case 0x3 -> BlockFace.NORTH;
+		    case 0x4 -> BlockFace.EAST;
+		    case 0x5 -> BlockFace.WEST;
+		    default -> throw new IllegalArgumentException("Illegal facing direction " + data);
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/PistonBaseMaterial.java b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
index 8165e94339097ac5cf8e27ebc60256c8fefd7d63..7c7ef3e29d276f3e19edad561f596b3ea3f70767 100644
--- a/src/main/java/org/bukkit/material/PistonBaseMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
@@ -33,21 +33,11 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
-        case UP:
-            data |= 1;
-            break;
-        case NORTH:
-            data |= 2;
-            break;
-        case SOUTH:
-            data |= 3;
-            break;
-        case WEST:
-            data |= 4;
-            break;
-        case EAST:
-            data |= 5;
-            break;
+            case UP -> data |= 1;
+            case NORTH -> data |= 2;
+            case SOUTH -> data |= 3;
+            case WEST -> data |= 4;
+            case EAST -> data |= 5;
         }
         setData(data);
     }
@@ -56,22 +46,15 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     public BlockFace getFacing() {
         byte dir = (byte) (getData() & 7);
 
-        switch (dir) {
-        case 0:
-            return BlockFace.DOWN;
-        case 1:
-            return BlockFace.UP;
-        case 2:
-            return BlockFace.NORTH;
-        case 3:
-            return BlockFace.SOUTH;
-        case 4:
-            return BlockFace.WEST;
-        case 5:
-            return BlockFace.EAST;
-        default:
-            return BlockFace.SELF;
-        }
+	    return switch (dir) {
+		    case 0 -> BlockFace.DOWN;
+		    case 1 -> BlockFace.UP;
+		    case 2 -> BlockFace.NORTH;
+		    case 3 -> BlockFace.SOUTH;
+		    case 4 -> BlockFace.WEST;
+		    case 5 -> BlockFace.EAST;
+		    default -> BlockFace.SELF;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
index e7cfc7158b5d31376ddb8f5415e22e76c6d62f10..3a61d509f0072c6eb1b66d16e884e002d9d90606 100644
--- a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
@@ -31,21 +31,11 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
-        case UP:
-            data |= 1;
-            break;
-        case NORTH:
-            data |= 2;
-            break;
-        case SOUTH:
-            data |= 3;
-            break;
-        case WEST:
-            data |= 4;
-            break;
-        case EAST:
-            data |= 5;
-            break;
+            case UP -> data |= 1;
+            case NORTH -> data |= 2;
+            case SOUTH -> data |= 3;
+            case WEST -> data |= 4;
+            case EAST -> data |= 5;
         }
         setData(data);
     }
@@ -54,22 +44,15 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     public BlockFace getFacing() {
         byte dir = (byte) (getData() & 7);
 
-        switch (dir) {
-        case 0:
-            return BlockFace.DOWN;
-        case 1:
-            return BlockFace.UP;
-        case 2:
-            return BlockFace.NORTH;
-        case 3:
-            return BlockFace.SOUTH;
-        case 4:
-            return BlockFace.WEST;
-        case 5:
-            return BlockFace.EAST;
-        default:
-            return BlockFace.SELF;
-        }
+	    return switch (dir) {
+		    case 0 -> BlockFace.DOWN;
+		    case 1 -> BlockFace.UP;
+		    case 2 -> BlockFace.NORTH;
+		    case 3 -> BlockFace.SOUTH;
+		    case 4 -> BlockFace.WEST;
+		    case 5 -> BlockFace.EAST;
+		    default -> BlockFace.SELF;
+	    };
     }
 
     /**
diff --git a/src/main/java/org/bukkit/material/PressureSensor.java b/src/main/java/org/bukkit/material/PressureSensor.java
index de20bd39c532e94a11536a67c1af71bea203aedc..43d5b5544c0bc4f6e77b516839ba473ae58cc4ff 100644
--- a/src/main/java/org/bukkit/material/PressureSensor.java
+++ b/src/main/java/org/bukkit/material/PressureSensor.java
@@ -1,5 +1,5 @@
 package org.bukkit.material;
 
 public interface PressureSensor {
-    public boolean isPressed();
+    boolean isPressed();
 }
diff --git a/src/main/java/org/bukkit/material/Pumpkin.java b/src/main/java/org/bukkit/material/Pumpkin.java
index 7c1b5eea0aba649bc9ed6b05836609e7cda314c0..cbca0c93411d6943a2ccb9ea90ed53ebd08eeb9e 100644
--- a/src/main/java/org/bukkit/material/Pumpkin.java
+++ b/src/main/java/org/bukkit/material/Pumpkin.java
@@ -46,47 +46,25 @@ public class Pumpkin extends MaterialData implements Directional {
 
     @Override
     public void setFacingDirection(BlockFace face) {
-        byte data;
-
-        switch (face) {
-        case NORTH:
-            data = 0x0;
-            break;
-
-        case EAST:
-            data = 0x1;
-            break;
-
-        case SOUTH:
-            data = 0x2;
-            break;
-
-        case WEST:
-        default:
-            data = 0x3;
-        }
-
-        setData(data);
+        byte data = switch (face) {
+	        case NORTH -> 0x0;
+	        case EAST -> 0x1;
+	        case SOUTH -> 0x2;
+	        default -> 0x3;
+        };
+
+	    setData(data);
     }
 
     @Override
     public BlockFace getFacing() {
         byte data = getData();
 
-        switch (data) {
-        case 0x0:
-            return BlockFace.NORTH;
-
-        case 0x1:
-            return BlockFace.EAST;
-
-        case 0x2:
-            return BlockFace.SOUTH;
-
-        case 0x3:
-        default:
-            return BlockFace.EAST;
-        }
+	    return switch (data) {
+		    case 0x0 -> BlockFace.NORTH;
+		    case 0x2 -> BlockFace.SOUTH;
+		    default -> BlockFace.EAST;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Rails.java b/src/main/java/org/bukkit/material/Rails.java
index 0b041ee66c38cb884a0d69d1cc17df3fe25f7533..ddb5d210fffda04aaea69596b76ffdc7906a1ca3 100644
--- a/src/main/java/org/bukkit/material/Rails.java
+++ b/src/main/java/org/bukkit/material/Rails.java
@@ -58,38 +58,16 @@ public class Rails extends MaterialData {
     public BlockFace getDirection() {
         byte d = getConvertedData();
 
-        switch (d) {
-        case 0x0:
-        default:
-            return BlockFace.SOUTH;
-
-        case 0x1:
-            return BlockFace.EAST;
-
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.WEST;
-
-        case 0x4:
-            return BlockFace.NORTH;
-
-        case 0x5:
-            return BlockFace.SOUTH;
-
-        case 0x6:
-            return BlockFace.NORTH_WEST;
-
-        case 0x7:
-            return BlockFace.NORTH_EAST;
-
-        case 0x8:
-            return BlockFace.SOUTH_EAST;
-
-        case 0x9:
-            return BlockFace.SOUTH_WEST;
-        }
+	    return switch (d) {
+		    default -> BlockFace.SOUTH;
+		    case 0x1, 0x2 -> BlockFace.EAST;
+		    case 0x3 -> BlockFace.WEST;
+		    case 0x4 -> BlockFace.NORTH;
+		    case 0x6 -> BlockFace.NORTH_WEST;
+		    case 0x7 -> BlockFace.NORTH_EAST;
+		    case 0x8 -> BlockFace.SOUTH_EAST;
+		    case 0x9 -> BlockFace.SOUTH_WEST;
+	    };
     }
 
     @Override
@@ -122,37 +100,14 @@ public class Rails extends MaterialData {
      */
     public void setDirection(BlockFace face, boolean isOnSlope) {
         switch (face) {
-        case EAST:
-            setData((byte) (isOnSlope ? 0x2 : 0x1));
-            break;
-
-        case WEST:
-            setData((byte) (isOnSlope ? 0x3 : 0x1));
-            break;
-
-        case NORTH:
-            setData((byte) (isOnSlope ? 0x4 : 0x0));
-            break;
-
-        case SOUTH:
-            setData((byte) (isOnSlope ? 0x5 : 0x0));
-            break;
-
-        case NORTH_WEST:
-            setData((byte) 0x6);
-            break;
-
-        case NORTH_EAST:
-            setData((byte) 0x7);
-            break;
-
-        case SOUTH_EAST:
-            setData((byte) 0x8);
-            break;
-
-        case SOUTH_WEST:
-            setData((byte) 0x9);
-            break;
+            case EAST -> setData((byte) (isOnSlope ? 0x2 : 0x1));
+            case WEST -> setData((byte) (isOnSlope ? 0x3 : 0x1));
+            case NORTH -> setData((byte) (isOnSlope ? 0x4 : 0x0));
+            case SOUTH -> setData((byte) (isOnSlope ? 0x5 : 0x0));
+            case NORTH_WEST -> setData((byte) 0x6);
+            case NORTH_EAST -> setData((byte) 0x7);
+            case SOUTH_EAST -> setData((byte) 0x8);
+            case SOUTH_WEST -> setData((byte) 0x9);
         }
     }
 
diff --git a/src/main/java/org/bukkit/material/Redstone.java b/src/main/java/org/bukkit/material/Redstone.java
index 3e46603f8cd38041394e0e1baf788d9009b3ffc7..ccf8e6ff4a11378c53d74b19d85a5d400205c41b 100644
--- a/src/main/java/org/bukkit/material/Redstone.java
+++ b/src/main/java/org/bukkit/material/Redstone.java
@@ -11,5 +11,5 @@ public interface Redstone {
      *
      * @return true if powered, otherwise false
      */
-    public boolean isPowered();
+    boolean isPowered();
 }
diff --git a/src/main/java/org/bukkit/material/Sign.java b/src/main/java/org/bukkit/material/Sign.java
index 3b32679b4a670aaaaeb0481265d189a3bb99bdca..bb23eaa38d42eae88800d9bd3aaa57d7f97fdd87 100644
--- a/src/main/java/org/bukkit/material/Sign.java
+++ b/src/main/java/org/bukkit/material/Sign.java
@@ -49,21 +49,14 @@ public class Sign extends MaterialData implements Attachable {
         if (isWallSign()) {
             byte data = getData();
 
-            switch (data) {
-            case 0x2:
-                return BlockFace.SOUTH;
+	        return switch (data) {
+		        case 0x2 -> BlockFace.SOUTH;
+		        case 0x3 -> BlockFace.NORTH;
+		        case 0x4 -> BlockFace.EAST;
+		        case 0x5 -> BlockFace.WEST;
+		        default -> null;
+	        };
 
-            case 0x3:
-                return BlockFace.NORTH;
-
-            case 0x4:
-                return BlockFace.EAST;
-
-            case 0x5:
-                return BlockFace.WEST;
-            }
-
-            return null;
         } else {
             return BlockFace.DOWN;
         }
@@ -79,57 +72,26 @@ public class Sign extends MaterialData implements Attachable {
         byte data = getData();
 
         if (!isWallSign()) {
-            switch (data) {
-            case 0x0:
-                return BlockFace.SOUTH;
-
-            case 0x1:
-                return BlockFace.SOUTH_SOUTH_WEST;
-
-            case 0x2:
-                return BlockFace.SOUTH_WEST;
-
-            case 0x3:
-                return BlockFace.WEST_SOUTH_WEST;
-
-            case 0x4:
-                return BlockFace.WEST;
-
-            case 0x5:
-                return BlockFace.WEST_NORTH_WEST;
-
-            case 0x6:
-                return BlockFace.NORTH_WEST;
-
-            case 0x7:
-                return BlockFace.NORTH_NORTH_WEST;
-
-            case 0x8:
-                return BlockFace.NORTH;
-
-            case 0x9:
-                return BlockFace.NORTH_NORTH_EAST;
-
-            case 0xA:
-                return BlockFace.NORTH_EAST;
-
-            case 0xB:
-                return BlockFace.EAST_NORTH_EAST;
-
-            case 0xC:
-                return BlockFace.EAST;
-
-            case 0xD:
-                return BlockFace.EAST_SOUTH_EAST;
-
-            case 0xE:
-                return BlockFace.SOUTH_EAST;
-
-            case 0xF:
-                return BlockFace.SOUTH_SOUTH_EAST;
-            }
+	        return switch (data) {
+		        case 0x0 -> BlockFace.SOUTH;
+		        case 0x1 -> BlockFace.SOUTH_SOUTH_WEST;
+		        case 0x2 -> BlockFace.SOUTH_WEST;
+		        case 0x3 -> BlockFace.WEST_SOUTH_WEST;
+		        case 0x4 -> BlockFace.WEST;
+		        case 0x5 -> BlockFace.WEST_NORTH_WEST;
+		        case 0x6 -> BlockFace.NORTH_WEST;
+		        case 0x7 -> BlockFace.NORTH_NORTH_WEST;
+		        case 0x8 -> BlockFace.NORTH;
+		        case 0x9 -> BlockFace.NORTH_NORTH_EAST;
+		        case 0xA -> BlockFace.NORTH_EAST;
+		        case 0xB -> BlockFace.EAST_NORTH_EAST;
+		        case 0xC -> BlockFace.EAST;
+		        case 0xD -> BlockFace.EAST_SOUTH_EAST;
+		        case 0xE -> BlockFace.SOUTH_EAST;
+		        case 0xF -> BlockFace.SOUTH_SOUTH_EAST;
+		        default -> null;
+	        };
 
-            return null;
         } else {
             return getAttachedFace().getOppositeFace();
         }
@@ -140,89 +102,31 @@ public class Sign extends MaterialData implements Attachable {
         byte data;
 
         if (isWallSign()) {
-            switch (face) {
-            case NORTH:
-                data = 0x2;
-                break;
-
-            case SOUTH:
-                data = 0x3;
-                break;
-
-            case WEST:
-                data = 0x4;
-                break;
-
-            case EAST:
-            default:
-                data = 0x5;
-            }
+	        data = switch (face) {
+		        case NORTH -> 0x2;
+		        case SOUTH -> 0x3;
+		        case WEST -> 0x4;
+		        default -> 0x5;
+	        };
         } else {
-            switch (face) {
-            case SOUTH:
-                data = 0x0;
-                break;
-
-            case SOUTH_SOUTH_WEST:
-                data = 0x1;
-                break;
-
-            case SOUTH_WEST:
-                data = 0x2;
-                break;
-
-            case WEST_SOUTH_WEST:
-                data = 0x3;
-                break;
-
-            case WEST:
-                data = 0x4;
-                break;
-
-            case WEST_NORTH_WEST:
-                data = 0x5;
-                break;
-
-            case NORTH_WEST:
-                data = 0x6;
-                break;
-
-            case NORTH_NORTH_WEST:
-                data = 0x7;
-                break;
-
-            case NORTH:
-                data = 0x8;
-                break;
-
-            case NORTH_NORTH_EAST:
-                data = 0x9;
-                break;
-
-            case NORTH_EAST:
-                data = 0xA;
-                break;
-
-            case EAST_NORTH_EAST:
-                data = 0xB;
-                break;
-
-            case EAST:
-                data = 0xC;
-                break;
-
-            case EAST_SOUTH_EAST:
-                data = 0xD;
-                break;
-
-            case SOUTH_SOUTH_EAST:
-                data = 0xF;
-                break;
-
-            case SOUTH_EAST:
-            default:
-                data = 0xE;
-            }
+	        data = switch (face) {
+		        case SOUTH -> 0x0;
+		        case SOUTH_SOUTH_WEST -> 0x1;
+		        case SOUTH_WEST -> 0x2;
+		        case WEST_SOUTH_WEST -> 0x3;
+		        case WEST -> 0x4;
+		        case WEST_NORTH_WEST -> 0x5;
+		        case NORTH_WEST -> 0x6;
+		        case NORTH_NORTH_WEST -> 0x7;
+		        case NORTH -> 0x8;
+		        case NORTH_NORTH_EAST -> 0x9;
+		        case NORTH_EAST -> 0xA;
+		        case EAST_NORTH_EAST -> 0xB;
+		        case EAST -> 0xC;
+		        case EAST_SOUTH_EAST -> 0xD;
+		        case SOUTH_SOUTH_EAST -> 0xF;
+		        default -> 0xE;
+	        };
         }
 
         setData(data);
diff --git a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
index 6267d81ba2e9dde3f8a1063df66940086b4f5fce..62f1e8f959a4c3c4d6fd39f101e44938cafab1fe 100644
--- a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
+++ b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
@@ -34,7 +34,7 @@ public abstract class SimpleAttachableMaterialData extends MaterialData implemen
     @Override
     public BlockFace getFacing() {
         BlockFace attachedFace = getAttachedFace();
-        return attachedFace == null ? null : attachedFace.getOppositeFace();
+        return attachedFace.getOppositeFace();
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Skull.java b/src/main/java/org/bukkit/material/Skull.java
index a73ad62468a9589f78e270a82cd9ac8ff1b240b2..372fde6584e08f56e379d73a467341c8afe4ab69 100644
--- a/src/main/java/org/bukkit/material/Skull.java
+++ b/src/main/java/org/bukkit/material/Skull.java
@@ -41,54 +41,28 @@ public class Skull extends MaterialData implements Directional {
 
     @Override
     public void setFacingDirection(BlockFace face) {
-        int data;
-
-        switch (face) {
-            case SELF:
-            default:
-                data = 0x1;
-                break;
-
-            case NORTH:
-                data = 0x2;
-                break;
-
-            case WEST:
-                data = 0x4;
-                break;
-
-            case SOUTH:
-                data = 0x3;
-                break;
-
-            case EAST:
-                data = 0x5;
-        }
-
-        setData((byte) data);
+        int data = switch (face) {
+	        default -> 0x1;
+	        case NORTH -> 0x2;
+	        case WEST -> 0x4;
+	        case SOUTH -> 0x3;
+	        case EAST -> 0x5;
+        };
+
+	    setData((byte) data);
     }
 
     @Override
     public BlockFace getFacing() {
         int data = getData();
 
-        switch (data) {
-            case 0x1:
-            default:
-                return BlockFace.SELF;
-
-            case 0x2:
-                return BlockFace.NORTH;
-
-            case 0x3:
-                return BlockFace.SOUTH;
-
-            case 0x4:
-                return BlockFace.WEST;
-
-            case 0x5:
-                return BlockFace.EAST;
-        }
+	    return switch (data) {
+		    default -> BlockFace.SELF;
+		    case 0x2 -> BlockFace.NORTH;
+		    case 0x3 -> BlockFace.SOUTH;
+		    case 0x4 -> BlockFace.WEST;
+		    case 0x5 -> BlockFace.EAST;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/SmoothBrick.java b/src/main/java/org/bukkit/material/SmoothBrick.java
index e4812b7cef9847745d147aad87181c4eb903f5df..6cf583ec530616aced14b9c15fb063894f8b4c9a 100644
--- a/src/main/java/org/bukkit/material/SmoothBrick.java
+++ b/src/main/java/org/bukkit/material/SmoothBrick.java
@@ -13,7 +13,7 @@ import org.bukkit.Material;
 @Deprecated
 public class SmoothBrick extends TexturedMaterial {
 
-    private static final List<Material> textures = new ArrayList<Material>();
+    private static final List<Material> textures = new ArrayList<>();
     static {
         textures.add(Material.LEGACY_STONE);
         textures.add(Material.LEGACY_MOSSY_COBBLESTONE);
diff --git a/src/main/java/org/bukkit/material/Stairs.java b/src/main/java/org/bukkit/material/Stairs.java
index e5db60bd0d5c0d4990d418cf89415274c7698a9d..7d93e3abe341c5bbef10cef9002acbe78f8f45d0 100644
--- a/src/main/java/org/bukkit/material/Stairs.java
+++ b/src/main/java/org/bukkit/material/Stairs.java
@@ -32,20 +32,12 @@ public class Stairs extends MaterialData implements Directional {
     public BlockFace getAscendingDirection() {
         byte data = getData();
 
-        switch (data & 0x3) {
-        case 0x0:
-        default:
-            return BlockFace.EAST;
-
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.SOUTH;
-
-        case 0x3:
-            return BlockFace.NORTH;
-        }
+	    return switch (data & 0x3) {
+		    default -> BlockFace.EAST;
+		    case 0x1 -> BlockFace.WEST;
+		    case 0x2 -> BlockFace.SOUTH;
+		    case 0x3 -> BlockFace.NORTH;
+	    };
     }
 
     /**
@@ -60,28 +52,14 @@ public class Stairs extends MaterialData implements Directional {
      */
     @Override
     public void setFacingDirection(BlockFace face) {
-        byte data;
-
-        switch (face) {
-        case NORTH:
-            data = 0x3;
-            break;
-
-        case SOUTH:
-            data = 0x2;
-            break;
-
-        case EAST:
-        default:
-            data = 0x0;
-            break;
-
-        case WEST:
-            data = 0x1;
-            break;
-        }
-
-        setData((byte) ((getData() & 0xC) | data));
+        byte data = switch (face) {
+	        case NORTH -> 0x3;
+	        case SOUTH -> 0x2;
+	        default -> 0x0;
+	        case WEST -> 0x1;
+        };
+
+	    setData((byte) ((getData() & 0xC) | data));
     }
 
     /**
diff --git a/src/main/java/org/bukkit/material/Step.java b/src/main/java/org/bukkit/material/Step.java
index 9f502e7ee05d0512e190a1722cc112ece068c4e2..f792ad1bce8412feb1d8f242c53b5ffc9509634e 100644
--- a/src/main/java/org/bukkit/material/Step.java
+++ b/src/main/java/org/bukkit/material/Step.java
@@ -12,7 +12,7 @@ import org.bukkit.Material;
  */
 @Deprecated
 public class Step extends TexturedMaterial {
-    private static final List<Material> textures = new ArrayList<Material>();
+    private static final List<Material> textures = new ArrayList<>();
     static {
         textures.add(Material.LEGACY_STONE);
         textures.add(Material.LEGACY_SANDSTONE);
diff --git a/src/main/java/org/bukkit/material/Torch.java b/src/main/java/org/bukkit/material/Torch.java
index a4f0c62dcd39f94a68bca8cc76311847118d9ad1..c01d29dc572e18662d2668f92d223d9d9faa5e41 100644
--- a/src/main/java/org/bukkit/material/Torch.java
+++ b/src/main/java/org/bukkit/material/Torch.java
@@ -38,52 +38,26 @@ public class Torch extends SimpleAttachableMaterialData {
     public BlockFace getAttachedFace() {
         byte data = getData();
 
-        switch (data) {
-        case 0x1:
-            return BlockFace.WEST;
-
-        case 0x2:
-            return BlockFace.EAST;
-
-        case 0x3:
-            return BlockFace.NORTH;
-
-        case 0x4:
-            return BlockFace.SOUTH;
-
-        case 0x5:
-        default:
-            return BlockFace.DOWN;
-        }
+	    return switch (data) {
+		    case 0x1 -> BlockFace.WEST;
+		    case 0x2 -> BlockFace.EAST;
+		    case 0x3 -> BlockFace.NORTH;
+		    case 0x4 -> BlockFace.SOUTH;
+		    default -> BlockFace.DOWN;
+	    };
     }
 
     @Override
     public void setFacingDirection(BlockFace face) {
-        byte data;
-
-        switch (face) {
-        case EAST:
-            data = 0x1;
-            break;
-
-        case WEST:
-            data = 0x2;
-            break;
-
-        case SOUTH:
-            data = 0x3;
-            break;
-
-        case NORTH:
-            data = 0x4;
-            break;
-
-        case UP:
-        default:
-            data = 0x5;
-        }
-
-        setData(data);
+        byte data = switch (face) {
+	        case EAST -> 0x1;
+	        case WEST -> 0x2;
+	        case SOUTH -> 0x3;
+	        case NORTH -> 0x4;
+	        default -> 0x5;
+        };
+
+	    setData(data);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/TrapDoor.java b/src/main/java/org/bukkit/material/TrapDoor.java
index effedfc714d67254428b548bba74264cdba4ba15..6df5ce17a7ba875498e1b8709be50886b2b2753c 100644
--- a/src/main/java/org/bukkit/material/TrapDoor.java
+++ b/src/main/java/org/bukkit/material/TrapDoor.java
@@ -73,21 +73,13 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     public BlockFace getAttachedFace() {
         byte data = (byte) (getData() & 0x3);
 
-        switch (data) {
-            case 0x0:
-                return BlockFace.SOUTH;
-
-            case 0x1:
-                return BlockFace.NORTH;
-
-            case 0x2:
-                return BlockFace.EAST;
-
-            case 0x3:
-                return BlockFace.WEST;
-        }
-
-        return null;
+	    return switch (data) {
+		    case 0x0 -> BlockFace.SOUTH;
+		    case 0x1 -> BlockFace.NORTH;
+		    case 0x2 -> BlockFace.EAST;
+		    case 0x3 -> BlockFace.WEST;
+		    default -> null;
+	    };
 
     }
 
@@ -96,15 +88,9 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
         byte data = (byte) (getData() & 0xC);
 
         switch (face) {
-            case SOUTH:
-                data |= 0x1;
-                break;
-            case WEST:
-                data |= 0x2;
-                break;
-            case EAST:
-                data |= 0x3;
-                break;
+            case SOUTH -> data |= 0x1;
+            case WEST -> data |= 0x2;
+            case EAST -> data |= 0x3;
         }
 
         setData(data);
diff --git a/src/main/java/org/bukkit/material/Tree.java b/src/main/java/org/bukkit/material/Tree.java
index e759f50339903ab10f50bebe56bab5cfe8d9f7e0..55f71ff290114f1a20ee20c3544d45be7a905297 100644
--- a/src/main/java/org/bukkit/material/Tree.java
+++ b/src/main/java/org/bukkit/material/Tree.java
@@ -98,19 +98,17 @@ public class Tree extends Wood {
      * <li>BlockFace.SELF (directionless)
      * </ul>
      */
-    @SuppressWarnings("deprecation")
     public BlockFace getDirection() {
-        switch ((getData() >> 2) & 0x3) {
-            case 0: // Up-down
-            default:
-                return BlockFace.UP;
-            case 1: // North-south
-                return BlockFace.WEST;
-            case 2: // East-west
-                return BlockFace.NORTH;
-            case 3: // Directionless (bark on all sides)
-                return BlockFace.SELF;
-        }
+        return switch ((getData() >> 2) & 0x3) {
+// Up-down
+            default -> BlockFace.UP;
+// North-south
+            case 1 -> BlockFace.WEST;
+// East-west
+            case 2 -> BlockFace.NORTH;
+// Directionless (bark on all sides)
+            case 3 -> BlockFace.SELF;
+        };
     }
 
     /**
@@ -118,27 +116,16 @@ public class Tree extends Wood {
      *
      * @param dir - direction of end of log (BlockFace.SELF for no direction)
      */
-    @SuppressWarnings("deprecation")
     public void setDirection(BlockFace dir) {
-        int dat;
-        switch (dir) {
-            case UP:
-            case DOWN:
-            default:
-                dat = 0;
-                break;
-            case WEST:
-            case EAST:
-                dat = 4; // 1<<2
-                break;
-            case NORTH:
-            case SOUTH:
-                dat = 8; // 2<<2
-                break;
-            case SELF:
-                dat = 12; // 3<<2
-                break;
-        }
+        int dat = switch (dir) {
+            default -> 0;
+// 1<<2
+            case WEST, EAST -> 4;
+// 2<<2
+            case NORTH, SOUTH -> 8;
+// 3<<2
+            case SELF -> 12;
+        };
         setData((byte) ((getData() & 0x3) | dat));
     }
 
diff --git a/src/main/java/org/bukkit/material/TripwireHook.java b/src/main/java/org/bukkit/material/TripwireHook.java
index 80aa1c7bc7a1ef71b51101b154361feff4dcf88e..3b883c3b392e9b91bf3a4227edd2d2aba33eea0d 100644
--- a/src/main/java/org/bukkit/material/TripwireHook.java
+++ b/src/main/java/org/bukkit/material/TripwireHook.java
@@ -97,17 +97,13 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
 
     @Override
     public BlockFace getAttachedFace() {
-        switch (getData() & 0x3) {
-        case 0:
-            return BlockFace.NORTH;
-        case 1:
-            return BlockFace.EAST;
-        case 2:
-            return BlockFace.SOUTH;
-        case 3:
-            return BlockFace.WEST;
-        }
-        return null;
+	    return switch (getData() & 0x3) {
+		    case 0 -> BlockFace.NORTH;
+		    case 1 -> BlockFace.EAST;
+		    case 2 -> BlockFace.SOUTH;
+		    case 3 -> BlockFace.WEST;
+		    default -> null;
+	    };
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/material/Vine.java b/src/main/java/org/bukkit/material/Vine.java
index 07a4f3b1511e274affe751aad2b9020b49df815f..688669be8fbc65ce27dbfc2ac3a89c03d95567b0 100644
--- a/src/main/java/org/bukkit/material/Vine.java
+++ b/src/main/java/org/bukkit/material/Vine.java
@@ -80,28 +80,19 @@ public class Vine extends MaterialData {
      * @return Whether it is attached to that face.
      */
     public boolean isOnFace(BlockFace face) {
-        switch (face) {
-            case WEST:
-                return (getData() & VINE_WEST) == VINE_WEST;
-            case NORTH:
-                return (getData() & VINE_NORTH) == VINE_NORTH;
-            case SOUTH:
-                return (getData() & VINE_SOUTH) == VINE_SOUTH;
-            case EAST:
-                return (getData() & VINE_EAST) == VINE_EAST;
-            case NORTH_EAST:
-                return isOnFace(BlockFace.EAST) && isOnFace(BlockFace.NORTH);
-            case NORTH_WEST:
-                return isOnFace(BlockFace.WEST) && isOnFace(BlockFace.NORTH);
-            case SOUTH_EAST:
-                return isOnFace(BlockFace.EAST) && isOnFace(BlockFace.SOUTH);
-            case SOUTH_WEST:
-                return isOnFace(BlockFace.WEST) && isOnFace(BlockFace.SOUTH);
-            case UP: // It's impossible to be accurate with this since it's contextual
-                return true;
-            default:
-                return false;
-        }
+	    return switch (face) {
+		    case WEST -> (getData() & VINE_WEST) == VINE_WEST;
+		    case NORTH -> (getData() & VINE_NORTH) == VINE_NORTH;
+		    case SOUTH -> (getData() & VINE_SOUTH) == VINE_SOUTH;
+		    case EAST -> (getData() & VINE_EAST) == VINE_EAST;
+		    case NORTH_EAST -> isOnFace(BlockFace.EAST) && isOnFace(BlockFace.NORTH);
+		    case NORTH_WEST -> isOnFace(BlockFace.WEST) && isOnFace(BlockFace.NORTH);
+		    case SOUTH_EAST -> isOnFace(BlockFace.EAST) && isOnFace(BlockFace.SOUTH);
+		    case SOUTH_WEST -> isOnFace(BlockFace.WEST) && isOnFace(BlockFace.SOUTH);
+// It's impossible to be accurate with this since it's contextual
+		    case UP -> true;
+		    default -> false;
+	    };
     }
 
     /**
diff --git a/src/main/java/org/bukkit/material/Wood.java b/src/main/java/org/bukkit/material/Wood.java
index 5d51c9286dbf71ff4bb8717d5e83431b1815770e..35eeee0bba600b4ddf38730484eb562c8e09564f 100644
--- a/src/main/java/org/bukkit/material/Wood.java
+++ b/src/main/java/org/bukkit/material/Wood.java
@@ -71,22 +71,13 @@ public class Wood extends MaterialData {
      * @return TreeSpecies of this wood block
      */
     public TreeSpecies getSpecies() {
-        switch (getItemType()) {
-            case LEGACY_WOOD:
-            case LEGACY_WOOD_DOUBLE_STEP:
-                return TreeSpecies.getByData((byte) getData());
-            case LEGACY_LOG:
-            case LEGACY_LEAVES:
-                return TreeSpecies.getByData((byte) (getData() & 0x3));
-            case LEGACY_LOG_2:
-            case LEGACY_LEAVES_2:
-                return TreeSpecies.getByData((byte) ((getData() & 0x3) | 0x4));
-            case LEGACY_SAPLING:
-            case LEGACY_WOOD_STEP:
-                return TreeSpecies.getByData((byte) (getData() & 0x7));
-            default:
-                throw new IllegalArgumentException("Invalid block type for tree species");
-        }
+	    return switch (getItemType()) {
+		    case LEGACY_WOOD, LEGACY_WOOD_DOUBLE_STEP -> TreeSpecies.getByData(getData());
+		    case LEGACY_LOG, LEGACY_LEAVES -> TreeSpecies.getByData((byte) (getData() & 0x3));
+		    case LEGACY_LOG_2, LEGACY_LEAVES_2 -> TreeSpecies.getByData((byte) ((getData() & 0x3) | 0x4));
+		    case LEGACY_SAPLING, LEGACY_WOOD_STEP -> TreeSpecies.getByData((byte) (getData() & 0x7));
+		    default -> throw new IllegalArgumentException("Invalid block type for tree species");
+	    };
     }
 
     /**
diff --git a/src/main/java/org/bukkit/material/WoodenStep.java b/src/main/java/org/bukkit/material/WoodenStep.java
index b99a9a304d1c14c187ad2721424d5e5caed90973..e9b97d6a134732dc470431deb3f15490a0812746 100644
--- a/src/main/java/org/bukkit/material/WoodenStep.java
+++ b/src/main/java/org/bukkit/material/WoodenStep.java
@@ -59,7 +59,6 @@ public class WoodenStep extends Wood {
      *
      * @return true if inverted (top half), false if normal (bottom half)
      */
-    @SuppressWarnings("deprecation")
     public boolean isInverted() {
         return ((getData() & 0x8) != 0);
     }
@@ -70,7 +69,6 @@ public class WoodenStep extends Wood {
      * @param inv - true if step is inverted (top half), false if step is normal
      * (bottom half)
      */
-    @SuppressWarnings("deprecation")
     public void setInverted(boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
diff --git a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
index 0ea9c6b2420a0f990bd1fdf50fc015e37a7060d8..f8326183a1f1828bc08b005d798542f14896505b 100644
--- a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
+++ b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
@@ -69,7 +69,7 @@ public enum MushroomBlockTexture {
     private final Byte data;
     private final BlockFace capFace;
 
-    private MushroomBlockTexture(final int data, /*@Nullable*/ final BlockFace capFace) {
+    MushroomBlockTexture(final int data, /*@Nullable*/ final BlockFace capFace) {
         this.data = (byte) data;
         this.capFace = capFace;
     }
diff --git a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
index 86e0e3767e6e711bd58660a102e98c917a585b1b..ea90f2ef5b2e1af8c9c7869df6554b86c5a14faf 100644
--- a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
@@ -49,7 +49,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
         super(owningPlugin);
         Validate.notNull(cacheStrategy, "cacheStrategy cannot be null");
         Validate.notNull(lazyValue, "lazyValue cannot be null");
-        this.internalValue = new SoftReference<Object>(null);
+        this.internalValue = new SoftReference<>(null);
         this.lazyValue = lazyValue;
         this.cacheStrategy = cacheStrategy;
     }
@@ -88,7 +88,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
                 if (value == null) {
                     value = ACTUALLY_NULL;
                 }
-                internalValue = new SoftReference<Object>(value);
+                internalValue = new SoftReference<>(value);
             } catch (Exception e) {
                 throw new MetadataEvaluationException(e);
             }
diff --git a/src/main/java/org/bukkit/metadata/MetadataStore.java b/src/main/java/org/bukkit/metadata/MetadataStore.java
index 29f86fa938c2758cbdf8dec22519a18c3e119818..23ea12339e9d11bf35d6397f7b15eaeee72be8c4 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStore.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStore.java
@@ -14,7 +14,7 @@ public interface MetadataStore<T> {
      * @throws IllegalArgumentException If value is null, or the owning plugin
      *     is null
      */
-    public void setMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull MetadataValue newMetadataValue);
+    void setMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull MetadataValue newMetadataValue);
 
     /**
      * Returns all metadata values attached to an object. If multiple plugins
@@ -25,8 +25,7 @@ public interface MetadataStore<T> {
      * @return A list of values, one for each plugin that has set the
      *     requested value.
      */
-    @NotNull
-    public List<MetadataValue> getMetadata(@NotNull T subject, @NotNull String metadataKey);
+    @NotNull List<MetadataValue> getMetadata(@NotNull T subject, @NotNull String metadataKey);
 
     /**
      * Tests to see if a metadata attribute has been set on an object.
@@ -36,7 +35,7 @@ public interface MetadataStore<T> {
      * @param metadataKey the unique metadata key being queried.
      * @return the existence of the metadataKey within subject.
      */
-    public boolean hasMetadata(@NotNull T subject, @NotNull String metadataKey);
+    boolean hasMetadata(@NotNull T subject, @NotNull String metadataKey);
 
     /**
      * Removes a metadata item owned by a plugin from a subject.
@@ -47,7 +46,7 @@ public interface MetadataStore<T> {
      * @param owningPlugin the plugin attempting to remove a metadata item.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void removeMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull Plugin owningPlugin);
+    void removeMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull Plugin owningPlugin);
 
     /**
      * Invalidates all metadata in the metadata store that originates from the
@@ -57,5 +56,5 @@ public interface MetadataStore<T> {
      * @param owningPlugin the plugin requesting the invalidation.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void invalidateAll(@NotNull Plugin owningPlugin);
+    void invalidateAll(@NotNull Plugin owningPlugin);
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
index abbe545af572687a0399c2387434863cd2b70f68..292f5782c6f13d69d6af7418f65ac8cb0188e07f 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
@@ -1,9 +1,7 @@
 package org.bukkit.metadata;
 
-import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.Iterator; // Paper
 import java.util.List;
 import java.util.Map;
@@ -13,7 +11,7 @@ import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
 public abstract class MetadataStoreBase<T> {
-    private Map<String, Map<Plugin, MetadataValue>> metadataMap = new java.util.concurrent.ConcurrentHashMap<String, Map<Plugin, MetadataValue>>(); // Paper
+    private final Map<String, Map<Plugin, MetadataValue>> metadataMap = new java.util.concurrent.ConcurrentHashMap<>(); // Paper
 
     /**
      * Adds a metadata value to an object. Each metadata value is owned by a
@@ -42,11 +40,7 @@ public abstract class MetadataStoreBase<T> {
         Plugin owningPlugin = newMetadataValue.getOwningPlugin();
         Validate.notNull(owningPlugin, "Plugin cannot be null");
         String key = disambiguate(subject, metadataKey);
-        Map<Plugin, MetadataValue> entry = metadataMap.get(key);
-        if (entry == null) {
-            entry = new WeakHashMap<Plugin, MetadataValue>(1);
-            metadataMap.put(key, entry);
-        }
+        Map<Plugin, MetadataValue> entry = metadataMap.computeIfAbsent(key, k -> new WeakHashMap<>(1));
         synchronized (entry) {
             entry.put(owningPlugin, newMetadataValue);
         }
@@ -68,7 +62,7 @@ public abstract class MetadataStoreBase<T> {
         Map<Plugin, MetadataValue> entry = metadataMap.get(key);
         if (entry != null) {
             Collection<MetadataValue> values = entry.values();
-            return Collections.unmodifiableList(new ArrayList<MetadataValue>(values));
+            return List.copyOf(values);
         } else {
             return Collections.emptyList();
         }
@@ -142,9 +136,7 @@ public abstract class MetadataStoreBase<T> {
         Validate.notNull(owningPlugin, "Plugin cannot be null");
         for (Iterator<Map<Plugin, MetadataValue>> iterator = metadataMap.values().iterator(); iterator.hasNext(); ) {
             Map<Plugin, MetadataValue> values = iterator.next();
-            if (values.containsKey(owningPlugin)) {
-                values.remove(owningPlugin);
-            }
+            values.remove(owningPlugin);
             if (values.isEmpty()) {
                 iterator.remove();
             }
diff --git a/src/main/java/org/bukkit/metadata/MetadataValue.java b/src/main/java/org/bukkit/metadata/MetadataValue.java
index 4b4d57924b8b2aecf4ebf92edc805334ffa53d0e..ad62c424b523c6456bae6f7c6ec18f94ae2762b6 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValue.java
@@ -11,77 +11,74 @@ public interface MetadataValue {
      *
      * @return the metadata value.
      */
-    @Nullable
-    public Object value();
+    @Nullable Object value();
 
     /**
      * Attempts to convert the value of this metadata item into an int.
      *
      * @return the value as an int.
      */
-    public int asInt();
+    int asInt();
 
     /**
      * Attempts to convert the value of this metadata item into a float.
      *
      * @return the value as a float.
      */
-    public float asFloat();
+    float asFloat();
 
     /**
      * Attempts to convert the value of this metadata item into a double.
      *
      * @return the value as a double.
      */
-    public double asDouble();
+    double asDouble();
 
     /**
      * Attempts to convert the value of this metadata item into a long.
      *
      * @return the value as a long.
      */
-    public long asLong();
+    long asLong();
 
     /**
      * Attempts to convert the value of this metadata item into a short.
      *
      * @return the value as a short.
      */
-    public short asShort();
+    short asShort();
 
     /**
      * Attempts to convert the value of this metadata item into a byte.
      *
      * @return the value as a byte.
      */
-    public byte asByte();
+    byte asByte();
 
     /**
      * Attempts to convert the value of this metadata item into a boolean.
      *
      * @return the value as a boolean.
      */
-    public boolean asBoolean();
+    boolean asBoolean();
 
     /**
      * Attempts to convert the value of this metadata item into a string.
      *
      * @return the value as a string.
      */
-    @NotNull
-    public String asString();
+    @NotNull String asString();
 
     /**
      * Returns the {@link Plugin} that created this metadata item.
      *
      * @return the plugin that owns this metadata value. Could be null if the plugin was already unloaded.
      */
-    @Nullable
-    public Plugin getOwningPlugin();
+    @Nullable Plugin getOwningPlugin();
 
     /**
      * Invalidates this metadata item, forcing it to recompute when next
      * accessed.
      */
-    public void invalidate();
+    void invalidate();
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
index b90d09f57bdab627abdf8a54438b1b531f2c6827..bd9318d9310cb6825ffa9d98f4f743175caeec15 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
@@ -19,7 +19,7 @@ public abstract class MetadataValueAdapter implements MetadataValue {
 
     protected MetadataValueAdapter(@NotNull Plugin owningPlugin) {
         Validate.notNull(owningPlugin, "owningPlugin cannot be null");
-        this.owningPlugin = new WeakReference<Plugin>(owningPlugin);
+        this.owningPlugin = new WeakReference<>(owningPlugin);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/metadata/Metadatable.java b/src/main/java/org/bukkit/metadata/Metadatable.java
index b35f41a15fc729d62474a0b38d59ca7895951f2c..9cb3856133a98ca5a18a0845c60aa5080f4b7c90 100644
--- a/src/main/java/org/bukkit/metadata/Metadatable.java
+++ b/src/main/java/org/bukkit/metadata/Metadatable.java
@@ -17,7 +17,7 @@ public interface Metadatable {
      * @throws IllegalArgumentException If value is null, or the owning plugin
      *     is null
      */
-    public void setMetadata(@NotNull String metadataKey, @NotNull MetadataValue newMetadataValue);
+    void setMetadata(@NotNull String metadataKey, @NotNull MetadataValue newMetadataValue);
 
     /**
      * Returns a list of previously set metadata values from the implementing
@@ -27,8 +27,7 @@ public interface Metadatable {
      * @return A list of values, one for each plugin that has set the
      *     requested value.
      */
-    @NotNull
-    public List<MetadataValue> getMetadata(@NotNull String metadataKey);
+    @NotNull List<MetadataValue> getMetadata(@NotNull String metadataKey);
 
     /**
      * Tests to see whether the implementing object contains the given
@@ -37,7 +36,7 @@ public interface Metadatable {
      * @param metadataKey the unique metadata key being queried.
      * @return the existence of the metadataKey within subject.
      */
-    public boolean hasMetadata(@NotNull String metadataKey);
+    boolean hasMetadata(@NotNull String metadataKey);
 
     /**
      * Removes the given metadata value from the implementing object's
@@ -49,5 +48,5 @@ public interface Metadatable {
      *     other values will be left untouched.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void removeMetadata(@NotNull String metadataKey, @NotNull Plugin owningPlugin);
+    void removeMetadata(@NotNull String metadataKey, @NotNull Plugin owningPlugin);
 }
diff --git a/src/main/java/org/bukkit/permissions/Permissible.java b/src/main/java/org/bukkit/permissions/Permissible.java
index 228421154913116069c20323afb519bdde2134df..bf3bfa183b5efa5871029d682b06be545c8ade6c 100644
--- a/src/main/java/org/bukkit/permissions/Permissible.java
+++ b/src/main/java/org/bukkit/permissions/Permissible.java
@@ -17,7 +17,7 @@ public interface Permissible extends ServerOperator {
      * @param name Name of the permission
      * @return true if the permission is set, otherwise false
      */
-    public boolean isPermissionSet(@NotNull String name);
+    boolean isPermissionSet(@NotNull String name);
 
     /**
      * Checks if this object contains an override for the specified {@link
@@ -26,7 +26,7 @@ public interface Permissible extends ServerOperator {
      * @param perm Permission to check
      * @return true if the permission is set, otherwise false
      */
-    public boolean isPermissionSet(@NotNull Permission perm);
+    boolean isPermissionSet(@NotNull Permission perm);
 
     /**
      * Gets the value of the specified permission, if set.
@@ -37,7 +37,7 @@ public interface Permissible extends ServerOperator {
      * @param name Name of the permission
      * @return Value of the permission
      */
-    public boolean hasPermission(@NotNull String name);
+    boolean hasPermission(@NotNull String name);
 
     /**
      * Gets the value of the specified permission, if set.
@@ -48,7 +48,7 @@ public interface Permissible extends ServerOperator {
      * @param perm Permission to get
      * @return Value of the permission
      */
-    public boolean hasPermission(@NotNull Permission perm);
+    boolean hasPermission(@NotNull Permission perm);
 
     /**
      * Adds a new {@link PermissionAttachment} with a single permission by
@@ -60,8 +60,7 @@ public interface Permissible extends ServerOperator {
      * @param value Value of the permission
      * @return The PermissionAttachment that was just created
      */
-    @NotNull
-    public PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value);
+    @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value);
 
     /**
      * Adds a new empty {@link PermissionAttachment} to this object
@@ -70,8 +69,7 @@ public interface Permissible extends ServerOperator {
      *     or disabled
      * @return The PermissionAttachment that was just created
      */
-    @NotNull
-    public PermissionAttachment addAttachment(@NotNull Plugin plugin);
+    @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin);
 
     /**
      * Temporarily adds a new {@link PermissionAttachment} with a single
@@ -85,8 +83,7 @@ public interface Permissible extends ServerOperator {
      *     after
      * @return The PermissionAttachment that was just created
      */
-    @Nullable
-    public PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks);
+    @Nullable PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks);
 
     /**
      * Temporarily adds a new empty {@link PermissionAttachment} to this
@@ -98,8 +95,7 @@ public interface Permissible extends ServerOperator {
      *     after
      * @return The PermissionAttachment that was just created
      */
-    @Nullable
-    public PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks);
+    @Nullable PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks);
 
     /**
      * Removes the given {@link PermissionAttachment} from this object
@@ -108,7 +104,7 @@ public interface Permissible extends ServerOperator {
      * @throws IllegalArgumentException Thrown when the specified attachment
      *     isn't part of this object
      */
-    public void removeAttachment(@NotNull PermissionAttachment attachment);
+    void removeAttachment(@NotNull PermissionAttachment attachment);
 
     /**
      * Recalculates the permissions for this object, if the attachments have
@@ -116,7 +112,7 @@ public interface Permissible extends ServerOperator {
      * <p>
      * This should very rarely need to be called from a plugin.
      */
-    public void recalculatePermissions();
+    void recalculatePermissions();
 
     /**
      * Gets a set containing all of the permissions currently in effect by
@@ -124,6 +120,5 @@ public interface Permissible extends ServerOperator {
      *
      * @return Set of currently effective permissions
      */
-    @NotNull
-    public Set<PermissionAttachmentInfo> getEffectivePermissions();
+    @NotNull Set<PermissionAttachmentInfo> getEffectivePermissions();
 }
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
index c94e4cdb5785d5dfcb704c4adabda0b19a20ec7d..d668a5c37ba4c39cf3f20b08c4e2ac546d6e662c 100644
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java
@@ -16,10 +16,10 @@ import org.jetbrains.annotations.Nullable;
  * Base Permissible for use in any Permissible object via proxy or extension
  */
 public class PermissibleBase implements Permissible {
-    private ServerOperator opable;
+    private final ServerOperator opable;
     private Permissible parent = this;
-    private final List<PermissionAttachment> attachments = new LinkedList<PermissionAttachment>();
-    private final Map<String, PermissionAttachmentInfo> permissions = new HashMap<String, PermissionAttachmentInfo>();
+    private final List<PermissionAttachment> attachments = new LinkedList<>();
+    private final Map<String, PermissionAttachmentInfo> permissions = new HashMap<>();
 
     public PermissibleBase(@Nullable ServerOperator opable) {
         this.opable = opable;
@@ -51,29 +51,20 @@ public class PermissibleBase implements Permissible {
 
     @Override
     public boolean isPermissionSet(@NotNull String name) {
-        if (name == null) {
-            throw new IllegalArgumentException("Permission name cannot be null");
-        }
 
-        return permissions.containsKey(name.toLowerCase(java.util.Locale.ENGLISH));
+	    return permissions.containsKey(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
     public boolean isPermissionSet(@NotNull Permission perm) {
-        if (perm == null) {
-            throw new IllegalArgumentException("Permission cannot be null");
-        }
 
-        return isPermissionSet(perm.getName());
+	    return isPermissionSet(perm.getName());
     }
 
     @Override
     public boolean hasPermission(@NotNull String inName) {
-        if (inName == null) {
-            throw new IllegalArgumentException("Permission name cannot be null");
-        }
 
-        String name = inName.toLowerCase(java.util.Locale.ENGLISH);
+	    String name = inName.toLowerCase(java.util.Locale.ENGLISH);
 
         // Paper start
         PermissionAttachmentInfo info = permissions.get(name);
@@ -93,11 +84,8 @@ public class PermissibleBase implements Permissible {
 
     @Override
     public boolean hasPermission(@NotNull Permission perm) {
-        if (perm == null) {
-            throw new IllegalArgumentException("Permission cannot be null");
-        }
 
-        String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+	    String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
 
         // Paper start
         PermissionAttachmentInfo info = permissions.get(name);
@@ -111,13 +99,9 @@ public class PermissibleBase implements Permissible {
     @Override
     @NotNull
     public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) { // Paper - synchronized
-        if (name == null) {
-            throw new IllegalArgumentException("Permission name cannot be null");
-        } else if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        } else if (!plugin.isEnabled()) {
-            throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
-        }
+	    if (!plugin.isEnabled()) {
+	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
+	    }
 
         PermissionAttachment result = addAttachment(plugin);
         result.setPermission(name, value);
@@ -130,11 +114,9 @@ public class PermissibleBase implements Permissible {
     @Override
     @NotNull
     public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin) { // Paper - synchronized
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        } else if (!plugin.isEnabled()) {
-            throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
-        }
+	    if (!plugin.isEnabled()) {
+	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
+	    }
 
         PermissionAttachment result = new PermissionAttachment(plugin, parent);
 
@@ -146,11 +128,8 @@ public class PermissibleBase implements Permissible {
 
     @Override
     public synchronized void removeAttachment(@NotNull PermissionAttachment attachment) { // Paper - synchronized
-        if (attachment == null) {
-            throw new IllegalArgumentException("Attachment cannot be null");
-        }
 
-        if (attachments.contains(attachment)) {
+	    if (attachments.contains(attachment)) {
             attachments.remove(attachment);
             PermissionRemovedExecutor ex = attachment.getRemovalCallback();
 
@@ -215,13 +194,9 @@ public class PermissibleBase implements Permissible {
     @Override
     @Nullable
     public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) { // Paper
-        if (name == null) {
-            throw new IllegalArgumentException("Permission name cannot be null");
-        } else if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        } else if (!plugin.isEnabled()) {
-            throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
-        }
+	    if (!plugin.isEnabled()) {
+	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
+	    }
 
         PermissionAttachment result = addAttachment(plugin, ticks);
 
@@ -235,11 +210,9 @@ public class PermissibleBase implements Permissible {
     @Override
     @Nullable
     public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) { // Paper - synchronized
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        } else if (!plugin.isEnabled()) {
-            throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
-        }
+	    if (!plugin.isEnabled()) {
+	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
+	    }
 
         PermissionAttachment result = addAttachment(plugin);
 
@@ -255,11 +228,11 @@ public class PermissibleBase implements Permissible {
     @Override
     @NotNull
     public synchronized Set<PermissionAttachmentInfo> getEffectivePermissions() { // Paper - synchronized
-        return new HashSet<PermissionAttachmentInfo>(permissions.values());
+        return new HashSet<>(permissions.values());
     }
 
     private static class RemoveAttachmentRunnable implements Runnable {
-        private PermissionAttachment attachment;
+        private final PermissionAttachment attachment;
 
         public RemoveAttachmentRunnable(@NotNull PermissionAttachment attachment) {
             this.attachment = attachment;
diff --git a/src/main/java/org/bukkit/permissions/Permission.java b/src/main/java/org/bukkit/permissions/Permission.java
index 91d45b965724bc3ecf9697b88bafa88c010e9ada..367ffcb728afc10ccdb20c900d93a273b6c7474c 100644
--- a/src/main/java/org/bukkit/permissions/Permission.java
+++ b/src/main/java/org/bukkit/permissions/Permission.java
@@ -1,10 +1,6 @@
 package org.bukkit.permissions;
 
-import java.util.ArrayList;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.logging.Level;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
@@ -20,7 +16,7 @@ public class Permission {
     public static final PermissionDefault DEFAULT_PERMISSION = PermissionDefault.OP;
 
     private final String name;
-    private final Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
+    private final Map<String, Boolean> children = new LinkedHashMap<>();
     private PermissionDefault defaultValue = DEFAULT_PERMISSION;
     private String description;
 
@@ -139,11 +135,7 @@ public class Permission {
      * @param value The new description to set
      */
     public void setDescription(@Nullable String value) {
-        if (value == null) {
-            description = "";
-        } else {
-            description = value;
-        }
+        description = Objects.requireNonNullElse(value, "");
     }
 
     /**
@@ -234,7 +226,7 @@ public class Permission {
      */
     @NotNull
     public static List<Permission> loadPermissions(@NotNull Map<?, ?> data, @NotNull String error, @Nullable PermissionDefault def) {
-        List<Permission> result = new ArrayList<Permission>();
+        List<Permission> result = new ArrayList<>();
 
         for (Map.Entry<?, ?> entry : data.entrySet()) {
             try {
@@ -308,7 +300,7 @@ public class Permission {
         if (data.get("children") != null) {
             Object childrenNode = data.get("children");
             if (childrenNode instanceof Iterable) {
-                children = new LinkedHashMap<String, Boolean>();
+                children = new LinkedHashMap<>();
                 for (Object child : (Iterable<?>) childrenNode) {
                     if (child != null) {
                         children.put(child.toString(), Boolean.TRUE);
@@ -330,7 +322,7 @@ public class Permission {
 
     @NotNull
     private static Map<String, Boolean> extractChildren(@NotNull Map<?, ?> input, @NotNull String name, @Nullable PermissionDefault def, @Nullable List<Permission> output) {
-        Map<String, Boolean> children = new LinkedHashMap<String, Boolean>();
+        Map<String, Boolean> children = new LinkedHashMap<>();
 
         for (Map.Entry<?, ?> entry : input.entrySet()) {
             if ((entry.getValue() instanceof Boolean)) {
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachment.java b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
index cd8ac371a16173e2415c2628a96c1dc3c6ca895d..688334e5e04e3d091fd00562dc5afab89d5089ad 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachment.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
@@ -12,16 +12,14 @@ import org.jetbrains.annotations.Nullable;
  */
 public class PermissionAttachment {
     private PermissionRemovedExecutor removed;
-    private final Map<String, Boolean> permissions = new LinkedHashMap<String, Boolean>();
+    private final Map<String, Boolean> permissions = new LinkedHashMap<>();
     private final Permissible permissible;
     private final Plugin plugin;
 
     public PermissionAttachment(@NotNull Plugin plugin, @NotNull Permissible permissible) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        } else if (!plugin.isEnabled()) {
-            throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
-        }
+	    if (!plugin.isEnabled()) {
+	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
+	    }
 
         this.permissible = permissible;
         this.plugin = plugin;
@@ -79,7 +77,7 @@ public class PermissionAttachment {
      */
     @NotNull
     public Map<String, Boolean> getPermissions() {
-        return new LinkedHashMap<String, Boolean>(permissions);
+        return new LinkedHashMap<>(permissions);
     }
 
     /**
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
index a7f4cd37cff15f3f0875c376d6de8f473879b119..7c034af37709b037b350e43acb86be0b0f954b3f 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
@@ -14,13 +14,8 @@ public class PermissionAttachmentInfo {
     private final boolean value;
 
     public PermissionAttachmentInfo(@NotNull Permissible permissible, @NotNull String permission, @Nullable PermissionAttachment attachment, boolean value) {
-        if (permissible == null) {
-            throw new IllegalArgumentException("Permissible may not be null");
-        } else if (permission == null) {
-            throw new IllegalArgumentException("Permission may not be null");
-        }
 
-        this.permissible = permissible;
+	    this.permissible = permissible;
         this.permission = permission;
         this.attachment = attachment;
         this.value = value;
diff --git a/src/main/java/org/bukkit/permissions/PermissionDefault.java b/src/main/java/org/bukkit/permissions/PermissionDefault.java
index 449df7c798084669c1f39cbeb5c72c4b17a67162..d4b3d9818c7158ad63b384af94f920956f7f8f72 100644
--- a/src/main/java/org/bukkit/permissions/PermissionDefault.java
+++ b/src/main/java/org/bukkit/permissions/PermissionDefault.java
@@ -15,9 +15,9 @@ public enum PermissionDefault {
     NOT_OP("!op", "notop", "!operator", "notoperator", "!admin", "notadmin");
 
     private final String[] names;
-    private static final Map<String, PermissionDefault> lookup = new HashMap<String, PermissionDefault>();
+    private static final Map<String, PermissionDefault> lookup = new HashMap<>();
 
-    private PermissionDefault(/*@NotNull*/ String... names) {
+    PermissionDefault(/*@NotNull*/ String... names) {
         this.names = names;
     }
 
@@ -29,18 +29,12 @@ public enum PermissionDefault {
      * @return True if the default should be true, or false
      */
     public boolean getValue(boolean op) {
-        switch (this) {
-        case TRUE:
-            return true;
-        case FALSE:
-            return false;
-        case OP:
-            return op;
-        case NOT_OP:
-            return !op;
-        default:
-            return false;
-        }
+        return switch (this) {
+            case TRUE -> true;
+            case FALSE -> false;
+            case OP -> op;
+            case NOT_OP -> !op;
+        };
     }
 
     /**
diff --git a/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java b/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java
index 4cc9e647184900391f9b4ebf11ac108050a33ce5..dad3aa4d14ef8cd9a7fd7358ad07480d048bd3b2 100644
--- a/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java
+++ b/src/main/java/org/bukkit/permissions/PermissionRemovedExecutor.java
@@ -14,5 +14,5 @@ public interface PermissionRemovedExecutor {
      *
      * @param attachment Attachment which was removed
      */
-    public void attachmentRemoved(@NotNull PermissionAttachment attachment);
+    void attachmentRemoved(@NotNull PermissionAttachment attachment);
 }
diff --git a/src/main/java/org/bukkit/permissions/ServerOperator.java b/src/main/java/org/bukkit/permissions/ServerOperator.java
index 26ed24307b0c84e8946cf9f276012ea6d5219b9d..cb4047932e6aa0c43d781f48b3e4ed3f0289c044 100644
--- a/src/main/java/org/bukkit/permissions/ServerOperator.java
+++ b/src/main/java/org/bukkit/permissions/ServerOperator.java
@@ -13,12 +13,12 @@ public interface ServerOperator {
      *
      * @return true if this is an operator, otherwise false
      */
-    public boolean isOp();
+    boolean isOp();
 
     /**
      * Sets the operator status of this object
      *
      * @param value New operator value
      */
-    public void setOp(boolean value);
+    void setOp(boolean value);
 }
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
index 9026e108ccd3a88aee1267ee275137befa646455..d9e1201734e423734b9989c4afcc59d8b878d55c 100644
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java
@@ -23,30 +23,30 @@ import com.google.common.base.Preconditions;
  * Interface which defines the class for event call backs to plugins
  */
 public interface EventExecutor {
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException;
+    void execute(@NotNull Listener listener, @NotNull Event event) throws EventException;
 
     // Paper start
-    ConcurrentMap<Method, Class<? extends EventExecutor>> eventExecutorMap = new ConcurrentHashMap<Method, Class<? extends EventExecutor>>() {
-        @NotNull
-        @Override
-        public Class<? extends EventExecutor> computeIfAbsent(@NotNull Method key, @NotNull Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
-            Class<? extends EventExecutor> executorClass = get(key);
-            if (executorClass != null)
-                return executorClass;
+    ConcurrentMap<Method, Class<? extends EventExecutor>> eventExecutorMap = new ConcurrentHashMap<>() {
+	    @NotNull
+	    @Override
+	    public Class<? extends EventExecutor> computeIfAbsent(@NotNull Method key, @NotNull Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
+		    Class<? extends EventExecutor> executorClass = get(key);
+		    if (executorClass != null)
+			    return executorClass;
 
-            //noinspection SynchronizationOnLocalVariableOrMethodParameter
-            synchronized (key) {
-                executorClass = get(key);
-                if (executorClass != null)
-                    return executorClass;
+		    //noinspection SynchronizationOnLocalVariableOrMethodParameter
+		    synchronized (key) {
+			    executorClass = get(key);
+			    if (executorClass != null)
+				    return executorClass;
 
-                return super.computeIfAbsent(key, mappingFunction);
-            }
-        }
+			    return super.computeIfAbsent(key, mappingFunction);
+		    }
+	    }
     };
 
     @NotNull
-    public static EventExecutor create(@NotNull Method m, @NotNull Class<? extends Event> eventClass) {
+    static EventExecutor create(@NotNull Method m, @NotNull Class<? extends Event> eventClass) {
         Preconditions.checkNotNull(m, "Null method");
         Preconditions.checkArgument(m.getParameterCount() != 0, "Incorrect number of arguments %s", m.getParameterCount());
         Preconditions.checkArgument(m.getParameterTypes()[0] == eventClass, "First parameter %s doesn't match event class %s", m.getParameterTypes()[0], eventClass);
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
index 79890c68f1ad31f951dfdbd9a16dac500ec58c40..0193aaa75f6d8f19eac069d1206ef57cb9dc1cbc 100644
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -22,16 +22,14 @@ public interface Plugin extends TabExecutor {
      *
      * @return The folder
      */
-    @NotNull
-    public File getDataFolder();
+    @NotNull File getDataFolder();
 
     /**
      * Returns the plugin.yaml file containing the details for this plugin
      *
      * @return Contents of the plugin.yaml file
      */
-    @NotNull
-    public PluginDescriptionFile getDescription();
+    @NotNull PluginDescriptionFile getDescription();
 
     /**
      * Gets a {@link FileConfiguration} for this plugin, read through
@@ -42,8 +40,7 @@ public interface Plugin extends TabExecutor {
      *
      * @return Plugin configuration
      */
-    @NotNull
-    public FileConfiguration getConfig();
+    @NotNull FileConfiguration getConfig();
 
     /**
      * Gets an embedded resource in this plugin
@@ -51,13 +48,12 @@ public interface Plugin extends TabExecutor {
      * @param filename Filename of the resource
      * @return File if found, otherwise null
      */
-    @Nullable
-    public InputStream getResource(@NotNull String filename);
+    @Nullable InputStream getResource(@NotNull String filename);
 
     /**
      * Saves the {@link FileConfiguration} retrievable by {@link #getConfig()}.
      */
-    public void saveConfig();
+    void saveConfig();
 
     /**
      * Saves the raw contents of the default config.yml file to the location
@@ -65,7 +61,7 @@ public interface Plugin extends TabExecutor {
      * <p>
      * This should fail silently if the config.yml already exists.
      */
-    public void saveDefaultConfig();
+    void saveDefaultConfig();
 
     /**
      * Saves the raw contents of any resource embedded with a plugin's .jar
@@ -81,28 +77,26 @@ public interface Plugin extends TabExecutor {
      * @throws IllegalArgumentException if the resource path is null, empty,
      *     or points to a nonexistent resource.
      */
-    public void saveResource(@NotNull String resourcePath, boolean replace);
+    void saveResource(@NotNull String resourcePath, boolean replace);
 
     /**
      * Discards any data in {@link #getConfig()} and reloads from disk.
      */
-    public void reloadConfig();
+    void reloadConfig();
 
     /**
      * Gets the associated PluginLoader responsible for this plugin
      *
      * @return PluginLoader that controls this plugin
      */
-    @NotNull
-    public PluginLoader getPluginLoader();
+    @NotNull PluginLoader getPluginLoader();
 
     /**
      * Returns the Server instance currently running this plugin
      *
      * @return Server running this plugin
      */
-    @NotNull
-    public Server getServer();
+    @NotNull Server getServer();
 
     /**
      * Returns a value indicating whether or not this plugin is currently
@@ -110,12 +104,12 @@ public interface Plugin extends TabExecutor {
      *
      * @return true if this plugin is enabled, otherwise false
      */
-    public boolean isEnabled();
+    boolean isEnabled();
 
     /**
      * Called when this plugin is disabled
      */
-    public void onDisable();
+    void onDisable();
 
     /**
      * Called after a plugin is loaded but before it has been enabled.
@@ -123,26 +117,26 @@ public interface Plugin extends TabExecutor {
      * When multiple plugins are loaded, the onLoad() for all plugins is
      * called before any onEnable() is called.
      */
-    public void onLoad();
+    void onLoad();
 
     /**
      * Called when this plugin is enabled
      */
-    public void onEnable();
+    void onEnable();
 
     /**
      * Simple boolean if we can still nag to the logs about things
      *
      * @return boolean whether we can nag
      */
-    public boolean isNaggable();
+    boolean isNaggable();
 
     /**
      * Set naggable state
      *
      * @param canNag is this plugin still naggable?
      */
-    public void setNaggable(boolean canNag);
+    void setNaggable(boolean canNag);
 
     /**
      * Gets a {@link ChunkGenerator} for use in a default world, as specified
@@ -153,8 +147,7 @@ public interface Plugin extends TabExecutor {
      *     generator was requested
      * @return ChunkGenerator for use in the default world generation
      */
-    @Nullable
-    public ChunkGenerator getDefaultWorldGenerator(@NotNull String worldName, @Nullable String id);
+    @Nullable ChunkGenerator getDefaultWorldGenerator(@NotNull String worldName, @Nullable String id);
 
     /**
      * Returns the plugin logger associated with this server's logger. The
@@ -163,8 +156,7 @@ public interface Plugin extends TabExecutor {
      *
      * @return Logger associated with this plugin
      */
-    @NotNull
-    public Logger getLogger();
+    @NotNull Logger getLogger();
 
     // Paper start - Add SLF4J logger
     @NotNull
@@ -181,6 +173,5 @@ public interface Plugin extends TabExecutor {
      *
      * @return name of the plugin
      */
-    @NotNull
-    public String getName();
+    @NotNull String getName();
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginAwareness.java b/src/main/java/org/bukkit/plugin/PluginAwareness.java
index 3f535ed5d4612653fa3f703b9aabe0bda2b90df5..b400ff7ba41db2775607013d98aebbf576e00703 100644
--- a/src/main/java/org/bukkit/plugin/PluginAwareness.java
+++ b/src/main/java/org/bukkit/plugin/PluginAwareness.java
@@ -14,7 +14,7 @@ public interface PluginAwareness {
      * be checked by using {@link PluginDescriptionFile#getAwareness()}.{@link
      * Set#contains(Object) contains(flag)}.
      */
-    public enum Flags implements PluginAwareness {
+    enum Flags implements PluginAwareness {
         /**
          * This specifies that all (text) resources stored in a plugin's jar
          * use UTF-8 encoding.
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index f78a7df6e2edbbbaeb0edf4330125b2c2fa39a57..d0c9858a8697bf7a0a47aa5272e379ec7225a69b 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -190,42 +190,36 @@ import org.yaml.snakeyaml.nodes.Tag;
  */
 public final class PluginDescriptionFile {
     private static final Pattern VALID_NAME = Pattern.compile("^[A-Za-z0-9 _.-]+$");
-    private static final ThreadLocal<Yaml> YAML = new ThreadLocal<Yaml>() {
-        @Override
-        @NotNull
-        protected Yaml initialValue() {
-            return new Yaml(new SafeConstructor() {
-                {
-                    yamlConstructors.put(null, new AbstractConstruct() {
-                        @NotNull
+    private static final ThreadLocal<Yaml> YAML = ThreadLocal.withInitial(() -> new Yaml(new SafeConstructor() {
+        {
+            yamlConstructors.put(null, new AbstractConstruct() {
+                @NotNull
+                @Override
+                public Object construct(@NotNull final Node node) {
+                    if (!node.getTag().startsWith("!@")) {
+                        // Unknown tag - will fail
+                        return SafeConstructor.undefinedConstructor.construct(node);
+                    }
+                    // Unknown awareness - provide a graceful substitution
+                    return new PluginAwareness() {
                         @Override
-                        public Object construct(@NotNull final Node node) {
-                            if (!node.getTag().startsWith("!@")) {
-                                // Unknown tag - will fail
-                                return SafeConstructor.undefinedConstructor.construct(node);
-                            }
-                            // Unknown awareness - provide a graceful substitution
-                            return new PluginAwareness() {
-                                @Override
-                                public String toString() {
-                                    return node.toString();
-                                }
-                            };
+                        public String toString() {
+                            return node.toString();
                         }
-                    });
-                    for (final PluginAwareness.Flags flag : PluginAwareness.Flags.values()) {
-                        yamlConstructors.put(new Tag("!@" + flag.name()), new AbstractConstruct() {
-                            @NotNull
-                            @Override
-                            public PluginAwareness.Flags construct(@NotNull final Node node) {
-                                return flag;
-                            }
-                        });
-                    }
+                    };
                 }
             });
+            for (final PluginAwareness.Flags flag : PluginAwareness.Flags.values()) {
+                yamlConstructors.put(new Tag("!@" + flag.name()), new AbstractConstruct() {
+                    @NotNull
+                    @Override
+                    public PluginAwareness.Flags construct(@NotNull final Node node) {
+                        return flag;
+                    }
+                });
+            }
         }
-    };
+    }));
     String rawName = null;
     private String name = null;
     private List<String> provides = ImmutableList.of();
@@ -856,7 +850,7 @@ public final class PluginDescriptionFile {
     public List<Permission> getPermissions() {
         if (permissions == null) {
             if (lazyPermissions == null) {
-                permissions = ImmutableList.<Permission>of();
+                permissions = ImmutableList.of();
             } else {
                 permissions = ImmutableList.copyOf(Permission.loadPermissions(lazyPermissions, "Permission node '%s' in plugin description file for " + getFullName() + " is invalid", defaultPerm));
                 lazyPermissions = null;
@@ -1012,15 +1006,15 @@ public final class PluginDescriptionFile {
         }
 
         if (map.get("commands") != null) {
-            ImmutableMap.Builder<String, Map<String, Object>> commandsBuilder = ImmutableMap.<String, Map<String, Object>>builder();
+            ImmutableMap.Builder<String, Map<String, Object>> commandsBuilder = ImmutableMap.builder();
             try {
                 for (Map.Entry<?, ?> command : ((Map<?, ?>) map.get("commands")).entrySet()) {
-                    ImmutableMap.Builder<String, Object> commandBuilder = ImmutableMap.<String, Object>builder();
+                    ImmutableMap.Builder<String, Object> commandBuilder = ImmutableMap.builder();
                     if (command.getValue() != null) {
                         for (Map.Entry<?, ?> commandEntry : ((Map<?, ?>) command.getValue()).entrySet()) {
                             if (commandEntry.getValue() instanceof Iterable) {
                                 // This prevents internal alias list changes
-                                ImmutableList.Builder<Object> commandSubList = ImmutableList.<Object>builder();
+                                ImmutableList.Builder<Object> commandSubList = ImmutableList.builder();
                                 for (Object commandSubListItem : (Iterable<?>) commandEntry.getValue()) {
                                     if (commandSubListItem != null) {
                                         commandSubList.add(commandSubListItem);
@@ -1067,7 +1061,7 @@ public final class PluginDescriptionFile {
         }
 
         if (map.get("authors") != null) {
-            ImmutableList.Builder<String> authorsBuilder = ImmutableList.<String>builder();
+            ImmutableList.Builder<String> authorsBuilder = ImmutableList.builder();
             if (map.get("author") != null) {
                 authorsBuilder.add(map.get("author").toString());
             }
@@ -1084,11 +1078,11 @@ public final class PluginDescriptionFile {
         } else if (map.get("author") != null) {
             authors = ImmutableList.of(map.get("author").toString());
         } else {
-            authors = ImmutableList.<String>of();
+            authors = ImmutableList.of();
         }
 
         if (map.get("contributors") != null) {
-            ImmutableList.Builder<String> contributorsBuilder = ImmutableList.<String>builder();
+            ImmutableList.Builder<String> contributorsBuilder = ImmutableList.builder();
             try {
                 for (Object o : (Iterable<?>) map.get("contributors")) {
                     contributorsBuilder.add(o.toString());
@@ -1098,7 +1092,7 @@ public final class PluginDescriptionFile {
             }
             contributors = contributorsBuilder.build();
         } else {
-            contributors = ImmutableList.<String>of();
+            contributors = ImmutableList.of();
         }
 
         if (map.get("default-permission") != null) {
@@ -1112,7 +1106,7 @@ public final class PluginDescriptionFile {
         }
 
         if (map.get("awareness") instanceof Iterable) {
-            Set<PluginAwareness> awareness = new HashSet<PluginAwareness>();
+            Set<PluginAwareness> awareness = new HashSet<>();
             try {
                 for (Object o : (Iterable<?>) map.get("awareness")) {
                     awareness.add((PluginAwareness) o);
@@ -1145,7 +1139,7 @@ public final class PluginDescriptionFile {
             return ImmutableList.of();
         }
 
-        final ImmutableList.Builder<String> builder = ImmutableList.<String>builder();
+        final ImmutableList.Builder<String> builder = ImmutableList.builder();
         try {
             for (final Object entry : (Iterable<?>) value) {
                 builder.add(entry.toString().replace(' ', '_'));
@@ -1160,7 +1154,7 @@ public final class PluginDescriptionFile {
 
     @NotNull
     private Map<String, Object> saveMap() {
-        Map<String, Object> map = new HashMap<String, Object>();
+        Map<String, Object> map = new HashMap<>();
 
         map.put("name", name);
         if (provides != null) {
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index 6ab9cd8213cbe35943748dcf42948d5fc048c84c..5744a75d33ae6057a16fe37062ffdae6716bb144 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -25,8 +25,7 @@ public interface PluginLoader {
      * @throws UnknownDependencyException If a required dependency could not
      *     be found
      */
-    @NotNull
-    public Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException;
+    @NotNull Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException;
 
     /**
      * Loads a PluginDescriptionFile from the specified file
@@ -37,16 +36,14 @@ public interface PluginLoader {
      * @throws InvalidDescriptionException If the plugin description file
      *     could not be created
      */
-    @NotNull
-    public PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException;
+    @NotNull PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException;
 
     /**
      * Returns a list of all filename filters expected by this PluginLoader
      *
      * @return The filters
      */
-    @NotNull
-    public Pattern[] getPluginFileFilters();
+    @NotNull Pattern[] getPluginFileFilters();
 
     /**
      * Creates and returns registered listeners for the event classes used in
@@ -56,8 +53,7 @@ public interface PluginLoader {
      * @param plugin The plugin to use when creating registered listeners
      * @return The registered listeners.
      */
-    @NotNull
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull Plugin plugin);
+    @NotNull Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull Plugin plugin);
 
     /**
      * Enables the specified plugin
@@ -67,7 +63,7 @@ public interface PluginLoader {
      *
      * @param plugin Plugin to enable
      */
-    public void enablePlugin(@NotNull Plugin plugin);
+    void enablePlugin(@NotNull Plugin plugin);
 
     /**
      * Disables the specified plugin
@@ -76,7 +72,7 @@ public interface PluginLoader {
      *
      * @param plugin Plugin to disable
      */
-    public void disablePlugin(@NotNull Plugin plugin);
+    void disablePlugin(@NotNull Plugin plugin);
     // Paper start - close Classloader on disable
     /**
      * Disables the specified plugin
@@ -87,7 +83,7 @@ public interface PluginLoader {
      * @param closeClassloader if the classloader for the Plugin should be closed
      */
     // provide default to allow other PluginLoader implementations to work
-    default public void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader) {
+    default void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader) {
         disablePlugin(plugin);
     }
     // Paper end - close Classloader on disable
diff --git a/src/main/java/org/bukkit/plugin/PluginLogger.java b/src/main/java/org/bukkit/plugin/PluginLogger.java
index 0182370014e0dc8b74759933ab984d16678f6ec3..1e0eed8dcb9cce410aad02472e5f1adfa70f6586 100644
--- a/src/main/java/org/bukkit/plugin/PluginLogger.java
+++ b/src/main/java/org/bukkit/plugin/PluginLogger.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  * @see Logger
  */
 public class PluginLogger extends Logger {
-    private String pluginName;
+    private final String pluginName;
 
     /**
      * Creates a new PluginLogger that extracts the name from a plugin.
@@ -23,7 +23,7 @@ public class PluginLogger extends Logger {
     public PluginLogger(@NotNull Plugin context) {
         super(context.getClass().getCanonicalName(), null);
         String prefix = context.getDescription().getPrefix();
-        pluginName = prefix != null ? new StringBuilder().append("[").append(prefix).append("] ").toString() : "[" + context.getDescription().getName() + "] ";
+        pluginName = prefix != null ? "[" + prefix + "] " : "[" + context.getDescription().getName() + "] ";
         setParent(context.getServer().getLogger());
         setLevel(Level.ALL);
     }
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
index 86cc5025ad98f7a752c51713b7cd6a39d5136ecc..7e70606c1997de0c1a6f3f1e6929c54eec5dcd6f 100644
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -23,7 +23,7 @@ public interface PluginManager {
      * @throws IllegalArgumentException Thrown when the given Class is not a
      *     valid PluginLoader
      */
-    public void registerInterface(@NotNull Class<? extends PluginLoader> loader) throws IllegalArgumentException;
+    void registerInterface(@NotNull Class<? extends PluginLoader> loader) throws IllegalArgumentException;
 
     /**
      * Checks if the given plugin is loaded and returns it when applicable
@@ -33,16 +33,14 @@ public interface PluginManager {
      * @param name Name of the plugin to check
      * @return Plugin if it exists, otherwise null
      */
-    @Nullable
-    public Plugin getPlugin(@NotNull String name);
+    @Nullable Plugin getPlugin(@NotNull String name);
 
     /**
      * Gets a list of all currently loaded plugins
      *
      * @return Array of Plugins
      */
-    @NotNull
-    public Plugin[] getPlugins();
+    @NotNull Plugin[] getPlugins();
 
     /**
      * Checks if the given plugin is enabled or not
@@ -52,7 +50,7 @@ public interface PluginManager {
      * @param name Name of the plugin to check
      * @return true if the plugin is enabled, otherwise false
      */
-    public boolean isPluginEnabled(@NotNull String name);
+    boolean isPluginEnabled(@NotNull String name);
 
     /**
      * Checks if the given plugin is enabled or not
@@ -61,7 +59,7 @@ public interface PluginManager {
      * @return true if the plugin is enabled, otherwise false
      */
     @Contract("null -> false")
-    public boolean isPluginEnabled(@Nullable Plugin plugin);
+    boolean isPluginEnabled(@Nullable Plugin plugin);
 
     /**
      * Loads the plugin in the specified file
@@ -72,13 +70,10 @@ public interface PluginManager {
      * @return The Plugin loaded, or null if it was invalid
      * @throws InvalidPluginException Thrown when the specified file is not a
      *     valid plugin
-     * @throws InvalidDescriptionException Thrown when the specified file
-     *     contains an invalid description
      * @throws UnknownDependencyException If a required dependency could not
      *     be resolved
      */
-    @Nullable
-    public Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, InvalidDescriptionException, UnknownDependencyException;
+    @Nullable Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException;
 
     /**
      * Loads the plugins contained within the specified directory
@@ -86,18 +81,17 @@ public interface PluginManager {
      * @param directory Directory to check for plugins
      * @return A list of all plugins loaded
      */
-    @NotNull
-    public Plugin[] loadPlugins(@NotNull File directory);
+    @NotNull Plugin[] loadPlugins(@NotNull File directory);
 
     /**
      * Disables all the loaded plugins
      */
-    public void disablePlugins();
+    void disablePlugins();
 
     /**
      * Disables and removes all plugins
      */
-    public void clearPlugins();
+    void clearPlugins();
 
     /**
      * Calls an event with the given details
@@ -109,7 +103,7 @@ public interface PluginManager {
      *     <i>Note: This is best-effort basis, and should not be used to test
      *     synchronized state. This is an indicator for flawed flow logic.</i>
      */
-    public void callEvent(@NotNull Event event) throws IllegalStateException;
+    void callEvent(@NotNull Event event) throws IllegalStateException;
 
     /**
      * Registers all the events in the given listener class
@@ -117,7 +111,7 @@ public interface PluginManager {
      * @param listener Listener to register
      * @param plugin Plugin to register
      */
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin);
+    void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin);
 
     /**
      * Registers the specified executor to the given event class
@@ -128,7 +122,7 @@ public interface PluginManager {
      * @param executor EventExecutor to register
      * @param plugin Plugin to register
      */
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin);
+    void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin);
 
     /**
      * Registers the specified executor to the given event class
@@ -140,7 +134,7 @@ public interface PluginManager {
      * @param plugin Plugin to register
      * @param ignoreCancelled Whether to pass cancelled events or not
      */
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled);
+    void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled);
 
     /**
      * Enables the specified plugin
@@ -150,7 +144,7 @@ public interface PluginManager {
      *
      * @param plugin Plugin to enable
      */
-    public void enablePlugin(@NotNull Plugin plugin);
+    void enablePlugin(@NotNull Plugin plugin);
 
     /**
      * Disables the specified plugin
@@ -159,7 +153,7 @@ public interface PluginManager {
      *
      * @param plugin Plugin to disable
      */
-    public void disablePlugin(@NotNull Plugin plugin);
+    void disablePlugin(@NotNull Plugin plugin);
 
     // Paper start - close Classloader on disable
     /**
@@ -170,7 +164,7 @@ public interface PluginManager {
      * @param plugin Plugin to disable
      * @param closeClassloader if the classloader for the Plugin should be closed
      */
-    public void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader);
+    void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader);
     // Paper end - close Classloader on disable
 
     /**
@@ -179,8 +173,7 @@ public interface PluginManager {
      * @param name Name of the permission
      * @return Permission, or null if none
      */
-    @Nullable
-    public Permission getPermission(@NotNull String name);
+    @Nullable Permission getPermission(@NotNull String name);
 
     /**
      * Adds a {@link Permission} to this plugin manager.
@@ -192,7 +185,7 @@ public interface PluginManager {
      * @throws IllegalArgumentException Thrown when a permission with the same
      *     name already exists
      */
-    public void addPermission(@NotNull Permission perm);
+    void addPermission(@NotNull Permission perm);
 
     /**
      * Removes a {@link Permission} registration from this plugin manager.
@@ -205,7 +198,7 @@ public interface PluginManager {
      *
      * @param perm Permission to remove
      */
-    public void removePermission(@NotNull Permission perm);
+    void removePermission(@NotNull Permission perm);
 
     /**
      * Removes a {@link Permission} registration from this plugin manager.
@@ -218,7 +211,7 @@ public interface PluginManager {
      *
      * @param name Permission to remove
      */
-    public void removePermission(@NotNull String name);
+    void removePermission(@NotNull String name);
 
     /**
      * Gets the default permissions for the given op status
@@ -226,8 +219,7 @@ public interface PluginManager {
      * @param op Which set of default permissions to get
      * @return The default permissions
      */
-    @NotNull
-    public Set<Permission> getDefaultPermissions(boolean op);
+    @NotNull Set<Permission> getDefaultPermissions(boolean op);
 
     /**
      * Recalculates the defaults for the given {@link Permission}.
@@ -237,7 +229,7 @@ public interface PluginManager {
      *
      * @param perm Permission to recalculate
      */
-    public void recalculatePermissionDefaults(@NotNull Permission perm);
+    void recalculatePermissionDefaults(@NotNull Permission perm);
 
     /**
      * Subscribes the given Permissible for information about the requested
@@ -249,7 +241,7 @@ public interface PluginManager {
      * @param permission Permission to subscribe to
      * @param permissible Permissible subscribing
      */
-    public void subscribeToPermission(@NotNull String permission, @NotNull Permissible permissible);
+    void subscribeToPermission(@NotNull String permission, @NotNull Permissible permissible);
 
     /**
      * Unsubscribes the given Permissible for information about the requested
@@ -258,7 +250,7 @@ public interface PluginManager {
      * @param permission Permission to unsubscribe from
      * @param permissible Permissible subscribing
      */
-    public void unsubscribeFromPermission(@NotNull String permission, @NotNull Permissible permissible);
+    void unsubscribeFromPermission(@NotNull String permission, @NotNull Permissible permissible);
 
     /**
      * Gets a set containing all subscribed {@link Permissible}s to the given
@@ -267,8 +259,7 @@ public interface PluginManager {
      * @param permission Permission to query for
      * @return Set containing all subscribed permissions
      */
-    @NotNull
-    public Set<Permissible> getPermissionSubscriptions(@NotNull String permission);
+    @NotNull Set<Permissible> getPermissionSubscriptions(@NotNull String permission);
 
     /**
      * Subscribes to the given Default permissions by operator status
@@ -279,7 +270,7 @@ public interface PluginManager {
      * @param op Default list to subscribe to
      * @param permissible Permissible subscribing
      */
-    public void subscribeToDefaultPerms(boolean op, @NotNull Permissible permissible);
+    void subscribeToDefaultPerms(boolean op, @NotNull Permissible permissible);
 
     /**
      * Unsubscribes from the given Default permissions by operator status
@@ -287,7 +278,7 @@ public interface PluginManager {
      * @param op Default list to unsubscribe from
      * @param permissible Permissible subscribing
      */
-    public void unsubscribeFromDefaultPerms(boolean op, @NotNull Permissible permissible);
+    void unsubscribeFromDefaultPerms(boolean op, @NotNull Permissible permissible);
 
     /**
      * Gets a set containing all subscribed {@link Permissible}s to the given
@@ -296,8 +287,7 @@ public interface PluginManager {
      * @param op Default list to query for
      * @return Set containing all subscribed permissions
      */
-    @NotNull
-    public Set<Permissible> getDefaultPermSubscriptions(boolean op);
+    @NotNull Set<Permissible> getDefaultPermSubscriptions(boolean op);
 
     /**
      * Gets a set of all registered permissions.
@@ -306,13 +296,12 @@ public interface PluginManager {
      *
      * @return Set containing all current registered permissions
      */
-    @NotNull
-    public Set<Permission> getPermissions();
+    @NotNull Set<Permission> getPermissions();
 
     /**
      * Returns whether or not timing code should be used for event calls
      *
      * @return True if event timings are to be used
      */
-    public boolean useTimings();
+    boolean useTimings();
 }
diff --git a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
index f451719370ad49cc50f2860e25023f7096fd210b..e92458d4f3c9abe9dc55c693f03216f880284db1 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
@@ -9,10 +9,10 @@ import org.jetbrains.annotations.NotNull;
  */
 public class RegisteredServiceProvider<T> implements Comparable<RegisteredServiceProvider<?>> {
 
-    private Class<T> service;
-    private Plugin plugin;
-    private T provider;
-    private ServicePriority priority;
+    private final Class<T> service;
+    private final Plugin plugin;
+    private final T provider;
+    private final ServicePriority priority;
 
     public RegisteredServiceProvider(@NotNull Class<T> service, @NotNull T provider, @NotNull ServicePriority priority, @NotNull Plugin plugin) {
         this.service = service;
diff --git a/src/main/java/org/bukkit/plugin/ServicesManager.java b/src/main/java/org/bukkit/plugin/ServicesManager.java
index 5066c938a2fe9ebfe54571066e52ccf06855a72c..08b31cff61ea8e05e7092217819b57c58dd1f9fd 100644
--- a/src/main/java/org/bukkit/plugin/ServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/ServicesManager.java
@@ -24,14 +24,14 @@ public interface ServicesManager {
      * @param plugin plugin with the provider
      * @param priority priority of the provider
      */
-    public <T> void register(@NotNull Class<T> service, @NotNull T provider, @NotNull Plugin plugin, @NotNull ServicePriority priority);
+    <T> void register(@NotNull Class<T> service, @NotNull T provider, @NotNull Plugin plugin, @NotNull ServicePriority priority);
 
     /**
      * Unregister all the providers registered by a particular plugin.
      *
      * @param plugin The plugin
      */
-    public void unregisterAll(@NotNull Plugin plugin);
+    void unregisterAll(@NotNull Plugin plugin);
 
     /**
      * Unregister a particular provider for a particular service.
@@ -39,14 +39,14 @@ public interface ServicesManager {
      * @param service The service interface
      * @param provider The service provider implementation
      */
-    public void unregister(@NotNull Class<?> service, @NotNull Object provider);
+    void unregister(@NotNull Class<?> service, @NotNull Object provider);
 
     /**
      * Unregister a particular provider.
      *
      * @param provider The service provider implementation
      */
-    public void unregister(@NotNull Object provider);
+    void unregister(@NotNull Object provider);
 
     /**
      * Queries for a provider. This may return null if no provider has been
@@ -56,8 +56,7 @@ public interface ServicesManager {
      * @param service The service interface
      * @return provider or null
      */
-    @Nullable
-    public <T> T load(@NotNull Class<T> service);
+    @Nullable <T> T load(@NotNull Class<T> service);
 
     /**
      * Queries for a provider registration. This may return null if no provider
@@ -67,8 +66,7 @@ public interface ServicesManager {
      * @param service The service interface
      * @return provider registration or null
      */
-    @Nullable
-    public <T> RegisteredServiceProvider<T> getRegistration(@NotNull Class<T> service);
+    @Nullable <T> RegisteredServiceProvider<T> getRegistration(@NotNull Class<T> service);
 
     /**
      * Get registrations of providers for a plugin.
@@ -76,8 +74,7 @@ public interface ServicesManager {
      * @param plugin The plugin
      * @return provider registrations
      */
-    @NotNull
-    public List<RegisteredServiceProvider<?>> getRegistrations(@NotNull Plugin plugin);
+    @NotNull List<RegisteredServiceProvider<?>> getRegistrations(@NotNull Plugin plugin);
 
     /**
      * Get registrations of providers for a service. The returned list is
@@ -87,8 +84,7 @@ public interface ServicesManager {
      * @param service The service interface
      * @return list of registrations
      */
-    @NotNull
-    public <T> Collection<RegisteredServiceProvider<T>> getRegistrations(@NotNull Class<T> service);
+    @NotNull <T> Collection<RegisteredServiceProvider<T>> getRegistrations(@NotNull Class<T> service);
 
     /**
      * Get a list of known services. A service is known if it has registered
@@ -96,8 +92,7 @@ public interface ServicesManager {
      *
      * @return list of known services
      */
-    @NotNull
-    public Collection<Class<?>> getKnownServices();
+    @NotNull Collection<Class<?>> getKnownServices();
 
     /**
      * Returns whether a provider has been registered for a service. Do not
@@ -108,6 +103,6 @@ public interface ServicesManager {
      * @param service service to check
      * @return whether there has been a registered provider
      */
-    public <T> boolean isProvidedFor(@NotNull Class<T> service);
+    <T> boolean isProvidedFor(@NotNull Class<T> service);
 
 }
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 26685f59b235ea5b4c4fb7ae21acb5149edaa2b3..1f67653de25671229d792f7acad802ac45fb6e2f 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -49,24 +49,24 @@ import org.jetbrains.annotations.Nullable;
  */
 public final class SimplePluginManager implements PluginManager {
     private final Server server;
-    private final Map<Pattern, PluginLoader> fileAssociations = new HashMap<Pattern, PluginLoader>();
-    private final List<Plugin> plugins = new ArrayList<Plugin>();
-    private final Map<String, Plugin> lookupNames = new HashMap<String, Plugin>();
+    private final Map<Pattern, PluginLoader> fileAssociations = new HashMap<>();
+    private final List<Plugin> plugins = new ArrayList<>();
+    private final Map<String, Plugin> lookupNames = new HashMap<>();
     private MutableGraph<String> dependencyGraph = GraphBuilder.directed().build();
     private File updateDirectory;
     private final SimpleCommandMap commandMap;
-    private final Map<String, Permission> permissions = new HashMap<String, Permission>();
-    private final Map<Boolean, Set<Permission>> defaultPerms = new LinkedHashMap<Boolean, Set<Permission>>();
-    private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<String, Map<Permissible, Boolean>>();
-    private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<Boolean, Map<Permissible, Boolean>>();
-    private boolean useTimings = false;
+    private final Map<String, Permission> permissions = new HashMap<>();
+    private final Map<Boolean, Set<Permission>> defaultPerms = new LinkedHashMap<>();
+    private final Map<String, Map<Permissible, Boolean>> permSubs = new HashMap<>();
+    private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<>();
+    private final boolean useTimings = false;
 
     public SimplePluginManager(@NotNull Server instance, @NotNull SimpleCommandMap commandMap) {
         server = instance;
         this.commandMap = commandMap;
 
-        defaultPerms.put(true, new LinkedHashSet<Permission>());
-        defaultPerms.put(false, new LinkedHashSet<Permission>());
+        defaultPerms.put(true, new LinkedHashSet<>());
+        defaultPerms.put(false, new LinkedHashSet<>());
     }
 
     /**
@@ -118,18 +118,18 @@ public final class SimplePluginManager implements PluginManager {
         Validate.notNull(directory, "Directory cannot be null");
         Validate.isTrue(directory.isDirectory(), "Directory must be a directory");
 
-        List<Plugin> result = new ArrayList<Plugin>();
+        List<Plugin> result = new ArrayList<>();
         Set<Pattern> filters = fileAssociations.keySet();
 
         if (!(server.getUpdateFolder().equals(""))) {
             updateDirectory = new File(directory, server.getUpdateFolder());
         }
 
-        Map<String, File> plugins = new HashMap<String, File>();
-        Set<String> loadedPlugins = new HashSet<String>();
+        Map<String, File> plugins = new HashMap<>();
+        Set<String> loadedPlugins = new HashSet<>();
         Map<String, String> pluginsProvided = new HashMap<>();
-        Map<String, Collection<String>> dependencies = new HashMap<String, Collection<String>>();
-        Map<String, Collection<String>> softDependencies = new HashMap<String, Collection<String>>();
+        Map<String, Collection<String>> dependencies = new HashMap<>();
+        Map<String, Collection<String>> softDependencies = new HashMap<>();
 
         // This is where it figures out all possible plugins
         for (File file : directory.listFiles()) {
@@ -203,12 +203,12 @@ public final class SimplePluginManager implements PluginManager {
             }
 
             Collection<String> softDependencySet = description.getSoftDepend();
-            if (softDependencySet != null && !softDependencySet.isEmpty()) {
+            if (!softDependencySet.isEmpty()) {
                 if (softDependencies.containsKey(description.getName())) {
                     // Duplicates do not matter, they will be removed together if applicable
                     softDependencies.get(description.getName()).addAll(softDependencySet);
                 } else {
-                    softDependencies.put(description.getName(), new LinkedList<String>(softDependencySet));
+                    softDependencies.put(description.getName(), new LinkedList<>(softDependencySet));
                 }
 
                 for (String depend : softDependencySet) {
@@ -217,8 +217,8 @@ public final class SimplePluginManager implements PluginManager {
             }
 
             Collection<String> dependencySet = description.getDepend();
-            if (dependencySet != null && !dependencySet.isEmpty()) {
-                dependencies.put(description.getName(), new LinkedList<String>(dependencySet));
+            if (!dependencySet.isEmpty()) {
+                dependencies.put(description.getName(), new LinkedList<>(dependencySet));
 
                 for (String depend : dependencySet) {
                     dependencyGraph.putEdge(description.getName(), depend);
@@ -226,13 +226,13 @@ public final class SimplePluginManager implements PluginManager {
             }
 
             Collection<String> loadBeforeSet = description.getLoadBefore();
-            if (loadBeforeSet != null && !loadBeforeSet.isEmpty()) {
+            if (!loadBeforeSet.isEmpty()) {
                 for (String loadBeforeTarget : loadBeforeSet) {
                     if (softDependencies.containsKey(loadBeforeTarget)) {
                         softDependencies.get(loadBeforeTarget).add(description.getName());
                     } else {
                         // softDependencies is never iterated, so 'ghost' plugins aren't an issue
-                        Collection<String> shortSoftDependency = new LinkedList<String>();
+                        Collection<String> shortSoftDependency = new LinkedList<>();
                         shortSoftDependency.add(description.getName());
                         softDependencies.put(loadBeforeTarget, shortSoftDependency);
                     }
@@ -280,16 +280,9 @@ public final class SimplePluginManager implements PluginManager {
                     }
                 }
                 if (softDependencies.containsKey(plugin)) {
-                    Iterator<String> softDependencyIterator = softDependencies.get(plugin).iterator();
 
-                    while (softDependencyIterator.hasNext()) {
-                        String softDependency = softDependencyIterator.next();
-
-                        // Soft depend is no longer around
-                        if (!plugins.containsKey(softDependency) && !pluginsProvided.containsKey(softDependency)) {
-                            softDependencyIterator.remove();
-                        }
-                    }
+                    // Soft depend is no longer around
+                    softDependencies.get(plugin).removeIf(softDependency -> !plugins.containsKey(softDependency) && !pluginsProvided.containsKey(softDependency));
 
                     if (softDependencies.get(plugin).isEmpty()) {
                         softDependencies.remove(plugin);
@@ -310,7 +303,6 @@ public final class SimplePluginManager implements PluginManager {
                         } else {
                             server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'");
                         }
-                        continue;
                     } catch (InvalidPluginException ex) {
                         server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
                     }
@@ -362,7 +354,7 @@ public final class SimplePluginManager implements PluginManager {
             }
         }
 
-        return result.toArray(new Plugin[result.size()]);
+        return result.toArray(new Plugin[0]);
     }
 
     /**
@@ -437,7 +429,7 @@ public final class SimplePluginManager implements PluginManager {
     @Override
     @NotNull
     public synchronized Plugin[] getPlugins() {
-        return plugins.toArray(new Plugin[plugins.size()]);
+        return plugins.toArray(new Plugin[0]);
     }
 
     /**
@@ -671,11 +663,7 @@ public final class SimplePluginManager implements PluginManager {
         }
 
         executor = new co.aikar.timings.TimedEventExecutor(executor, plugin, null, event); // Paper
-        if (false) { // Spigot - RL handles useTimings check now // Paper
-            getEventListeners(event).register(new TimedRegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
-        } else {
-            getEventListeners(event).register(new RegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
-        }
+	    getEventListeners(event).register(new RegisteredListener(listener, executor, priority, plugin, ignoreCancelled));
     }
 
     @NotNull
@@ -746,7 +734,7 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     public void recalculatePermissionDefaults(@NotNull Permission perm) {
-        if (perm != null && permissions.containsKey(perm.getName().toLowerCase(java.util.Locale.ENGLISH))) {
+        if (permissions.containsKey(perm.getName().toLowerCase(java.util.Locale.ENGLISH))) {
             defaultPerms.get(true).remove(perm);
             defaultPerms.get(false).remove(perm);
 
@@ -786,12 +774,7 @@ public final class SimplePluginManager implements PluginManager {
     @Override
     public void subscribeToPermission(@NotNull String permission, @NotNull Permissible permissible) {
         String name = permission.toLowerCase(java.util.Locale.ENGLISH);
-        Map<Permissible, Boolean> map = permSubs.get(name);
-
-        if (map == null) {
-            map = new WeakHashMap<Permissible, Boolean>();
-            permSubs.put(name, map);
-        }
+        Map<Permissible, Boolean> map = permSubs.computeIfAbsent(name, k -> new WeakHashMap<>());
 
         map.put(permissible, true);
     }
@@ -825,12 +808,7 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     public void subscribeToDefaultPerms(boolean op, @NotNull Permissible permissible) {
-        Map<Permissible, Boolean> map = defSubs.get(op);
-
-        if (map == null) {
-            map = new WeakHashMap<Permissible, Boolean>();
-            defSubs.put(op, map);
-        }
+        Map<Permissible, Boolean> map = defSubs.computeIfAbsent(op, k -> new WeakHashMap<>());
 
         map.put(permissible, true);
     }
@@ -863,12 +841,12 @@ public final class SimplePluginManager implements PluginManager {
     @Override
     @NotNull
     public Set<Permission> getPermissions() {
-        return new HashSet<Permission>(permissions.values());
+        return new HashSet<>(permissions.values());
     }
 
     public boolean isTransitiveDepend(@NotNull PluginDescriptionFile plugin, @NotNull PluginDescriptionFile depend) {
-        Preconditions.checkArgument(plugin != null, "plugin");
-        Preconditions.checkArgument(depend != null, "depend");
+        Preconditions.checkArgument(true, "plugin");
+        Preconditions.checkArgument(true, "depend");
 
         if (dependencyGraph.nodes().contains(plugin.getName())) {
             if (Graphs.reachableNodes(dependencyGraph, plugin.getName()).contains(depend.getName())) {
diff --git a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
index f3dd8490230b85be7e03f7c0f0c20b476e1574fd..0b90a7946d5302747a1b1a73d04b92d45e9839cd 100644
--- a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
@@ -24,7 +24,7 @@ public class SimpleServicesManager implements ServicesManager {
     /**
      * Map of providers.
      */
-    private final Map<Class<?>, List<RegisteredServiceProvider<?>>> providers = new HashMap<Class<?>, List<RegisteredServiceProvider<?>>>();
+    private final Map<Class<?>, List<RegisteredServiceProvider<?>>> providers = new HashMap<>();
 
     /**
      * Register a provider of a service.
@@ -39,13 +39,9 @@ public class SimpleServicesManager implements ServicesManager {
     public <T> void register(@NotNull Class<T> service, @NotNull T provider, @NotNull Plugin plugin, @NotNull ServicePriority priority) {
         RegisteredServiceProvider<T> registeredProvider = null;
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.get(service);
-            if (registered == null) {
-                registered = new ArrayList<RegisteredServiceProvider<?>>();
-                providers.put(service, registered);
-            }
+            List<RegisteredServiceProvider<?>> registered = providers.computeIfAbsent(service, k -> new ArrayList<>());
 
-            registeredProvider = new RegisteredServiceProvider<T>(service, provider, priority, plugin);
+            registeredProvider = new RegisteredServiceProvider<>(service, provider, priority, plugin);
 
             // Insert the provider into the collection, much more efficient big O than sort
             int position = Collections.binarySearch(registered, registeredProvider);
@@ -66,7 +62,7 @@ public class SimpleServicesManager implements ServicesManager {
      */
     @Override
     public void unregisterAll(@NotNull Plugin plugin) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
+        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
         synchronized (providers) {
             Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
@@ -94,7 +90,7 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (NoSuchElementException ignored) {}
         }
         for (ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
@@ -109,7 +105,7 @@ public class SimpleServicesManager implements ServicesManager {
      */
     @Override
     public void unregister(@NotNull Class<?> service, @NotNull Object provider) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
+        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
         synchronized (providers) {
             Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
@@ -143,7 +139,7 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (NoSuchElementException ignored) {}
         }
         for (ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
@@ -157,7 +153,7 @@ public class SimpleServicesManager implements ServicesManager {
      */
     @Override
     public void unregister(@NotNull Object provider) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<ServiceUnregisterEvent>();
+        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
         synchronized (providers) {
             Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
@@ -185,7 +181,7 @@ public class SimpleServicesManager implements ServicesManager {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException e) {}
+            } catch (NoSuchElementException ignored) {}
         }
         for (ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
@@ -248,7 +244,7 @@ public class SimpleServicesManager implements ServicesManager {
     @Override
     @NotNull
     public List<RegisteredServiceProvider<?>> getRegistrations(@NotNull Plugin plugin) {
-        ImmutableList.Builder<RegisteredServiceProvider<?>> ret = ImmutableList.<RegisteredServiceProvider<?>>builder();
+        ImmutableList.Builder<RegisteredServiceProvider<?>> ret = ImmutableList.builder();
         synchronized (providers) {
             for (List<RegisteredServiceProvider<?>> registered : providers.values()) {
                 for (RegisteredServiceProvider<?> provider : registered) {
@@ -278,10 +274,10 @@ public class SimpleServicesManager implements ServicesManager {
             List<RegisteredServiceProvider<?>> registered = providers.get(service);
 
             if (registered == null) {
-                return ImmutableList.<RegisteredServiceProvider<T>>of();
+                return ImmutableList.of();
             }
 
-            ret = ImmutableList.<RegisteredServiceProvider<T>>builder();
+            ret = ImmutableList.builder();
 
             for (RegisteredServiceProvider<?> provider : registered) {
                 ret.add((RegisteredServiceProvider<T>) provider);
@@ -301,7 +297,7 @@ public class SimpleServicesManager implements ServicesManager {
     @NotNull
     public Set<Class<?>> getKnownServices() {
         synchronized (providers) {
-            return ImmutableSet.<Class<?>>copyOf(providers.keySet());
+            return ImmutableSet.copyOf(providers.keySet());
         }
     }
 
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 04fa3991f6ce4e9dad804f28fc6c947695857089..5fcca7b4be837bf08b208d788adcb929e9e1392b 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -24,7 +24,6 @@ import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
-import org.bukkit.plugin.PluginLogger;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -182,7 +181,7 @@ public abstract class JavaPlugin extends PluginBase {
 
     @Override
     public void saveResource(@NotNull String resourcePath, boolean replace) {
-        if (resourcePath == null || resourcePath.equals("")) {
+        if (resourcePath.equals("")) {
             throw new IllegalArgumentException("ResourcePath cannot be null or empty");
         }
 
@@ -194,7 +193,7 @@ public abstract class JavaPlugin extends PluginBase {
 
         File outFile = new File(dataFolder, resourcePath);
         int lastIndex = resourcePath.lastIndexOf('/');
-        File outDir = new File(dataFolder, resourcePath.substring(0, lastIndex >= 0 ? lastIndex : 0));
+        File outDir = new File(dataFolder, resourcePath.substring(0, Math.max(lastIndex, 0)));
 
         if (!outDir.exists()) {
             outDir.mkdirs();
@@ -221,11 +220,8 @@ public abstract class JavaPlugin extends PluginBase {
     @Nullable
     @Override
     public InputStream getResource(@NotNull String filename) {
-        if (filename == null) {
-            throw new IllegalArgumentException("Filename cannot be null");
-        }
 
-        try {
+	    try {
             URL url = getClassLoader().getResource(filename);
 
             if (url == null) {
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 384edf9890dfbd1cddfdcac4db1ebe9a4d761f78..3596c12e36977bbe9044c8711b02e9a2840651d3 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -4,7 +4,6 @@ import java.io.File;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 import java.util.Arrays;
 import java.util.HashMap;
@@ -25,7 +24,6 @@ import org.bukkit.Warning.WarningState;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.event.Event;
-import org.bukkit.event.EventException;
 import org.bukkit.event.EventHandler;
 import org.bukkit.event.Listener;
 import org.bukkit.event.server.PluginDisableEvent;
@@ -42,7 +40,6 @@ import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
-import org.spigotmc.CustomTimingsHandler; // Spigot
 import org.yaml.snakeyaml.error.YAMLException;
 
 /**
@@ -52,10 +49,10 @@ public final class JavaPluginLoader implements PluginLoader {
     final Server server;
     private static final boolean DISABLE_CLASS_PRIORITIZATION = Boolean.getBoolean("Paper.DisableClassPrioritization"); // Paper
     private final Pattern[] fileFilters = new Pattern[]{Pattern.compile("\\.jar$")};
-    private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
-    private final Map<String, java.util.concurrent.locks.ReentrantReadWriteLock> classLoadLock = new java.util.HashMap<String, java.util.concurrent.locks.ReentrantReadWriteLock>(); // Paper
-    private final Map<String, Integer> classLoadLockCount = new java.util.HashMap<String, Integer>(); // Paper
-    private final List<PluginClassLoader> loaders = new CopyOnWriteArrayList<PluginClassLoader>();
+    private final Map<String, Class<?>> classes = new ConcurrentHashMap<>();
+    private final Map<String, java.util.concurrent.locks.ReentrantReadWriteLock> classLoadLock = new java.util.HashMap<>(); // Paper
+    private final Map<String, Integer> classLoadLockCount = new java.util.HashMap<>(); // Paper
+    private final List<PluginClassLoader> loaders = new CopyOnWriteArrayList<>();
 
     /**
      * This class was not meant to be constructed explicitly
@@ -166,21 +163,19 @@ public final class JavaPluginLoader implements PluginLoader {
 
             return new PluginDescriptionFile(stream);
 
-        } catch (IOException ex) {
-            throw new InvalidDescriptionException(ex);
-        } catch (YAMLException ex) {
+        } catch (IOException | YAMLException ex) {
             throw new InvalidDescriptionException(ex);
         } finally {
             if (jar != null) {
                 try {
                     jar.close();
-                } catch (IOException e) {
+                } catch (IOException ignored) {
                 }
             }
             if (stream != null) {
                 try {
                     stream.close();
-                } catch (IOException e) {
+                } catch (IOException ignored) {
                 }
             }
         }
@@ -214,7 +209,7 @@ public final class JavaPluginLoader implements PluginLoader {
             if (!DISABLE_CLASS_PRIORITIZATION && requester != null) {
                 try {
                 cachedClass = requester.findClass(name, false);
-                } catch (ClassNotFoundException cnfe) {}
+                } catch (ClassNotFoundException ignored) {}
                 if (cachedClass != null) {
                     return cachedClass;
                 }
@@ -229,7 +224,7 @@ public final class JavaPluginLoader implements PluginLoader {
             for (PluginClassLoader loader : loaders) {
                 try {
                     cachedClass = loader.findClass(name, false);
-                } catch (ClassNotFoundException cnfe) {}
+                } catch (ClassNotFoundException ignored) {}
                 if (cachedClass != null) {
                     return cachedClass;
                 }
@@ -283,18 +278,14 @@ public final class JavaPluginLoader implements PluginLoader {
         Validate.notNull(listener, "Listener can not be null");
 
         boolean useTimings = server.getPluginManager().useTimings();
-        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<Class<? extends Event>, Set<RegisteredListener>>();
+        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<>();
         Set<Method> methods;
         try {
             Method[] publicMethods = listener.getClass().getMethods();
             Method[] privateMethods = listener.getClass().getDeclaredMethods();
-            methods = new HashSet<Method>(publicMethods.length + privateMethods.length, 1.0f);
-            for (Method method : publicMethods) {
-                methods.add(method);
-            }
-            for (Method method : privateMethods) {
-                methods.add(method);
-            }
+            methods = new HashSet<>(publicMethods.length + privateMethods.length, 1.0f);
+            methods.addAll(Arrays.asList(publicMethods));
+            methods.addAll(Arrays.asList(privateMethods));
         } catch (NoClassDefFoundError e) {
             plugin.getLogger().severe("Plugin " + plugin.getDescription().getFullName() + " has failed to register events for " + listener.getClass() + " because " + e.getMessage() + " does not exist.");
             return ret;
@@ -315,11 +306,7 @@ public final class JavaPluginLoader implements PluginLoader {
             }
             final Class<? extends Event> eventClass = checkClass.asSubclass(Event.class);
             method.setAccessible(true);
-            Set<RegisteredListener> eventSet = ret.get(eventClass);
-            if (eventSet == null) {
-                eventSet = new HashSet<RegisteredListener>();
-                ret.put(eventClass, eventSet);
-            }
+            Set<RegisteredListener> eventSet = ret.computeIfAbsent(eventClass, k -> new HashSet<>());
 
             for (Class<?> clazz = eventClass; Event.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) {
                 // This loop checks for extending deprecated events
@@ -344,11 +331,7 @@ public final class JavaPluginLoader implements PluginLoader {
             }
 
             EventExecutor executor = new co.aikar.timings.TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass); // Paper // Paper (Yes.) - Use factory method `EventExecutor.create()`
-            if (false) { // Spigot - RL handles useTimings check now
-                eventSet.add(new TimedRegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
-            } else {
-                eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
-            }
+	        eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
         }
         return ret;
     }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index 7760be3e34fa20825faf145d9fb5b2855c1a4602..d9121c829cae88c64f8ad6c4c5fb69fe497036f4 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -4,7 +4,6 @@ import com.google.common.io.ByteStreams;
 import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.net.URLClassLoader;
 import java.security.CodeSigner;
@@ -31,7 +30,7 @@ import org.jetbrains.annotations.Nullable;
 public final class PluginClassLoader extends URLClassLoader { // Spigot
     public JavaPlugin getPlugin() { return plugin; } // Spigot
     private final JavaPluginLoader loader;
-    private final Map<String, Class<?>> classes = new ConcurrentHashMap<String, Class<?>>();
+    private final Map<String, Class<?>> classes = new ConcurrentHashMap<>();
     private final PluginDescriptionFile description;
     private final File dataFolder;
     private final File file;
@@ -42,13 +41,13 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     private JavaPlugin pluginInit;
     private IllegalStateException pluginState;
     private final Set<String> seenIllegalAccess = Collections.newSetFromMap(new ConcurrentHashMap<>());
-    private java.util.logging.Logger logger; // Paper - add field
+    private final java.util.logging.Logger logger; // Paper - add field
 
     static {
         ClassLoader.registerAsParallelCapable();
     }
 
-    PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file) throws IOException, InvalidPluginException, MalformedURLException {
+    PluginClassLoader(@NotNull final JavaPluginLoader loader, @Nullable final ClassLoader parent, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file) throws IOException, InvalidPluginException {
         super(new URL[] {file.toURI().toURL()}, parent);
         Validate.notNull(loader, "Loader cannot be null");
 
diff --git a/src/main/java/org/bukkit/plugin/messaging/Messenger.java b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
index 682c77188436d696d4dafbc70cf131d5c921e94d..51fd5c6caca55fc8f5cffcc11f1ead0c65de3c11 100644
--- a/src/main/java/org/bukkit/plugin/messaging/Messenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
@@ -19,12 +19,12 @@ public interface Messenger {
     /**
      * Represents the largest size that an individual Plugin Message may be.
      */
-    public static final int MAX_MESSAGE_SIZE = 32766;
+    int MAX_MESSAGE_SIZE = 32766;
 
     /**
      * Represents the largest size that a Plugin Channel may be.
      */
-    public static final int MAX_CHANNEL_SIZE = Integer.getInteger("paper.maxCustomChannelName", 64); // Paper
+    int MAX_CHANNEL_SIZE = Integer.getInteger("paper.maxCustomChannelName", 64); // Paper
 
     /**
      * Checks if the specified channel is a reserved name.
@@ -36,7 +36,7 @@ public interface Messenger {
      * @return True if the channel is reserved, otherwise false.
      * @throws IllegalArgumentException Thrown if channel is null.
      */
-    public boolean isReservedChannel(@NotNull String channel);
+    boolean isReservedChannel(@NotNull String channel);
 
     /**
      * Registers the specific plugin to the requested outgoing plugin channel,
@@ -46,7 +46,7 @@ public interface Messenger {
      * @param channel Channel to register.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    public void registerOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel);
+    void registerOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel);
 
     /**
      * Unregisters the specific plugin from the requested outgoing plugin
@@ -58,7 +58,7 @@ public interface Messenger {
      * @param channel Channel to unregister.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel);
+    void unregisterOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel);
 
     /**
      * Unregisters the specific plugin from all outgoing plugin channels, no
@@ -67,7 +67,7 @@ public interface Messenger {
      * @param plugin Plugin that no longer wishes to send plugin messages.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin);
+    void unregisterOutgoingPluginChannel(@NotNull Plugin plugin);
 
     /**
      * Registers the specific plugin for listening on the requested incoming
@@ -81,8 +81,7 @@ public interface Messenger {
      * @throws IllegalArgumentException Thrown if plugin, channel or listener
      *     is null, or the listener is already registered for this channel.
      */
-    @NotNull
-    public PluginMessageListenerRegistration registerIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener);
+    @NotNull PluginMessageListenerRegistration registerIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener);
 
     /**
      * Unregisters the specific plugin's listener from listening on the
@@ -95,7 +94,7 @@ public interface Messenger {
      * @throws IllegalArgumentException Thrown if plugin, channel or listener
      *     is null.
      */
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener);
+    void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener);
 
     /**
      * Unregisters the specific plugin from listening on the requested
@@ -106,7 +105,7 @@ public interface Messenger {
      * @param channel Channel to unregister.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel);
+    void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel);
 
     /**
      * Unregisters the specific plugin from listening on all plugin channels
@@ -115,15 +114,14 @@ public interface Messenger {
      * @param plugin Plugin that wishes to unregister from this channel.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin);
+    void unregisterIncomingPluginChannel(@NotNull Plugin plugin);
 
     /**
      * Gets a set containing all the outgoing plugin channels.
      *
      * @return List of all registered outgoing plugin channels.
      */
-    @NotNull
-    public Set<String> getOutgoingChannels();
+    @NotNull Set<String> getOutgoingChannels();
 
     /**
      * Gets a set containing all the outgoing plugin channels that the
@@ -134,16 +132,14 @@ public interface Messenger {
      *     is registered to.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    @NotNull
-    public Set<String> getOutgoingChannels(@NotNull Plugin plugin);
+    @NotNull Set<String> getOutgoingChannels(@NotNull Plugin plugin);
 
     /**
      * Gets a set containing all the incoming plugin channels.
      *
      * @return List of all registered incoming plugin channels.
      */
-    @NotNull
-    public Set<String> getIncomingChannels();
+    @NotNull Set<String> getIncomingChannels();
 
     /**
      * Gets a set containing all the incoming plugin channels that the
@@ -154,8 +150,7 @@ public interface Messenger {
      *     is registered for.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    @NotNull
-    public Set<String> getIncomingChannels(@NotNull Plugin plugin);
+    @NotNull Set<String> getIncomingChannels(@NotNull Plugin plugin);
 
     /**
      * Gets a set containing all the incoming plugin channel registrations
@@ -165,8 +160,7 @@ public interface Messenger {
      * @return List of all registrations that the plugin has.
      * @throws IllegalArgumentException Thrown if plugin is null.
      */
-    @NotNull
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin);
+    @NotNull Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin);
 
     /**
      * Gets a set containing all the incoming plugin channel registrations
@@ -176,8 +170,7 @@ public interface Messenger {
      * @return List of all registrations that are on the channel.
      * @throws IllegalArgumentException Thrown if channel is null.
      */
-    @NotNull
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull String channel);
+    @NotNull Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull String channel);
 
     /**
      * Gets a set containing all the incoming plugin channel registrations
@@ -188,8 +181,7 @@ public interface Messenger {
      * @return List of all registrations that the plugin has.
      * @throws IllegalArgumentException Thrown if plugin or channel is null.
      */
-    @NotNull
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin, @NotNull String channel);
+    @NotNull Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin, @NotNull String channel);
 
     /**
      * Checks if the specified plugin message listener registration is valid.
@@ -200,7 +192,7 @@ public interface Messenger {
      * @param registration Registration to check.
      * @return True if the registration is valid, otherwise false.
      */
-    public boolean isRegistrationValid(@NotNull PluginMessageListenerRegistration registration);
+    boolean isRegistrationValid(@NotNull PluginMessageListenerRegistration registration);
 
     /**
      * Checks if the specified plugin has registered to receive incoming
@@ -210,7 +202,7 @@ public interface Messenger {
      * @param channel Channel to test for.
      * @return True if the channel is registered, else false.
      */
-    public boolean isIncomingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel);
+    boolean isIncomingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel);
 
     /**
      * Checks if the specified plugin has registered to send outgoing messages
@@ -220,7 +212,7 @@ public interface Messenger {
      * @param channel Channel to test for.
      * @return True if the channel is registered, else false.
      */
-    public boolean isOutgoingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel);
+    boolean isOutgoingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel);
 
     /**
      * Dispatches the specified incoming message to any registered listeners.
@@ -229,5 +221,5 @@ public interface Messenger {
      * @param channel Channel that the message was sent by.
      * @param message Raw payload of the message.
      */
-    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message);
+    void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message);
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
index eb962efd5086cb2682ee22977da0a2735e86892b..3dac78c77dc3d06e1a5dc52adc01f27977b99905 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
@@ -17,5 +17,5 @@ public interface PluginMessageListener {
      * @param player Source of the message.
      * @param message The raw message that was sent.
      */
-    public void onPluginMessageReceived(@NotNull String channel, @NotNull Player player, @NotNull byte[] message);
+    void onPluginMessageReceived(@NotNull String channel, @NotNull Player player, @NotNull byte[] message);
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
index 1d002967245e5b98d5cb929e725ea34540136409..0d463ab47518614c110d99ff94a1860802fd1387 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
@@ -14,20 +14,8 @@ public final class PluginMessageListenerRegistration {
     private final PluginMessageListener listener;
 
     public PluginMessageListenerRegistration(@NotNull Messenger messenger, @NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
-        if (messenger == null) {
-            throw new IllegalArgumentException("Messenger cannot be null!");
-        }
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null!");
-        }
-        if (channel == null) {
-            throw new IllegalArgumentException("Channel cannot be null!");
-        }
-        if (listener == null) {
-            throw new IllegalArgumentException("Listener cannot be null!");
-        }
 
-        this.messenger = messenger;
+	    this.messenger = messenger;
         this.plugin = plugin;
         this.channel = channel;
         this.listener = listener;
@@ -90,10 +78,7 @@ public final class PluginMessageListenerRegistration {
         if (!this.channel.equals(other.channel)) {
             return false;
         }
-        if (this.listener != other.listener && !this.listener.equals(other.listener)) {
-            return false;
-        }
-        return true;
+	    return this.listener == other.listener || this.listener.equals(other.listener);
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
index b84b37fe27d84574dc5897285f1d9a1437bd322c..c16f76c64299d24becd85751fc527f06af0553cc 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
@@ -27,7 +27,7 @@ public interface PluginMessageRecipient {
      * @throws ChannelNotRegisteredException Thrown if the channel is not
      *     registered for this plugin.
      */
-    public void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, @NotNull byte[] message);
+    void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, @NotNull byte[] message);
 
     /**
      * Gets a set containing all the Plugin Channels that this client is
@@ -35,6 +35,5 @@ public interface PluginMessageRecipient {
      *
      * @return Set containing all the channels that this client may accept.
      */
-    @NotNull
-    public Set<String> getListeningPluginChannels();
+    @NotNull Set<String> getListeningPluginChannels();
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
index 6fda7f3aa68e76af64362e9afed70fc6a5e92986..13e45a64e4205973f38e997b9a52badf72bdd95c 100644
--- a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
@@ -16,10 +16,10 @@ import org.jetbrains.annotations.NotNull;
  * Standard implementation to {@link Messenger}
  */
 public class StandardMessenger implements Messenger {
-    private final Map<String, Set<PluginMessageListenerRegistration>> incomingByChannel = new HashMap<String, Set<PluginMessageListenerRegistration>>();
-    private final Map<Plugin, Set<PluginMessageListenerRegistration>> incomingByPlugin = new HashMap<Plugin, Set<PluginMessageListenerRegistration>>();
-    private final Map<String, Set<Plugin>> outgoingByChannel = new HashMap<String, Set<Plugin>>();
-    private final Map<Plugin, Set<String>> outgoingByPlugin = new HashMap<Plugin, Set<String>>();
+    private final Map<String, Set<PluginMessageListenerRegistration>> incomingByChannel = new HashMap<>();
+    private final Map<Plugin, Set<PluginMessageListenerRegistration>> incomingByPlugin = new HashMap<>();
+    private final Map<String, Set<Plugin>> outgoingByChannel = new HashMap<>();
+    private final Map<Plugin, Set<String>> outgoingByPlugin = new HashMap<>();
     private final Object incomingLock = new Object();
     private final Object outgoingLock = new Object();
 
@@ -29,12 +29,12 @@ public class StandardMessenger implements Messenger {
             Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (plugins == null) {
-                plugins = new HashSet<Plugin>();
+                plugins = new HashSet<>();
                 outgoingByChannel.put(channel, plugins);
             }
 
             if (channels == null) {
-                channels = new HashSet<String>();
+                channels = new HashSet<>();
                 outgoingByPlugin.put(plugin, channels);
             }
 
@@ -71,7 +71,7 @@ public class StandardMessenger implements Messenger {
             Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
-                String[] toRemove = channels.toArray(new String[channels.size()]);
+                String[] toRemove = channels.toArray(new String[0]);
 
                 outgoingByPlugin.remove(plugin);
 
@@ -87,7 +87,7 @@ public class StandardMessenger implements Messenger {
             Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(registration.getChannel());
 
             if (registrations == null) {
-                registrations = new HashSet<PluginMessageListenerRegistration>();
+                registrations = new HashSet<>();
                 incomingByChannel.put(registration.getChannel(), registrations);
             } else {
                 if (registrations.contains(registration)) {
@@ -100,7 +100,7 @@ public class StandardMessenger implements Messenger {
             registrations = incomingByPlugin.get(registration.getPlugin());
 
             if (registrations == null) {
-                registrations = new HashSet<PluginMessageListenerRegistration>();
+                registrations = new HashSet<>();
                 incomingByPlugin.put(registration.getPlugin(), registrations);
             } else {
                 if (registrations.contains(registration)) {
@@ -141,7 +141,7 @@ public class StandardMessenger implements Messenger {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[registrations.size()]);
+                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
 
                 for (PluginMessageListenerRegistration registration : toRemove) {
                     if (registration.getChannel().equals(channel)) {
@@ -157,7 +157,7 @@ public class StandardMessenger implements Messenger {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[registrations.size()]);
+                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
 
                 incomingByPlugin.remove(plugin);
 
@@ -177,10 +177,7 @@ public class StandardMessenger implements Messenger {
 
     @Override
     public void registerOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
         if (isReservedChannel(channel)) {
             throw new ReservedChannelException(channel);
         }
@@ -190,38 +187,26 @@ public class StandardMessenger implements Messenger {
 
     @Override
     public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
 
         removeFromOutgoing(plugin, channel);
     }
 
     @Override
     public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
 
-        removeFromOutgoing(plugin);
+	    removeFromOutgoing(plugin);
     }
 
     @Override
     @NotNull
     public PluginMessageListenerRegistration registerIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
         if (isReservedChannel(channel)) {
             throw new ReservedChannelException(channel);
         }
-        if (listener == null) {
-            throw new IllegalArgumentException("Listener cannot be null");
-        }
 
-        PluginMessageListenerRegistration result = new PluginMessageListenerRegistration(this, plugin, channel, listener);
+	    PluginMessageListenerRegistration result = new PluginMessageListenerRegistration(this, plugin, channel, listener);
 
         addToIncoming(result);
 
@@ -230,34 +215,22 @@ public class StandardMessenger implements Messenger {
 
     @Override
     public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        if (listener == null) {
-            throw new IllegalArgumentException("Listener cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
 
         removeFromIncoming(new PluginMessageListenerRegistration(this, plugin, channel, listener));
     }
 
     @Override
     public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
 
         removeFromIncoming(plugin, channel);
     }
 
     @Override
     public void unregisterIncomingPluginChannel(@NotNull Plugin plugin) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
 
-        removeFromIncoming(plugin);
+	    removeFromIncoming(plugin);
     }
 
     @Override
@@ -272,11 +245,8 @@ public class StandardMessenger implements Messenger {
     @Override
     @NotNull
     public Set<String> getOutgoingChannels(@NotNull Plugin plugin) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
 
-        synchronized (outgoingLock) {
+	    synchronized (outgoingLock) {
             Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
@@ -299,11 +269,8 @@ public class StandardMessenger implements Messenger {
     @Override
     @NotNull
     public Set<String> getIncomingChannels(@NotNull Plugin plugin) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
 
-        synchronized (incomingLock) {
+	    synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
@@ -323,11 +290,8 @@ public class StandardMessenger implements Messenger {
     @Override
     @NotNull
     public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
 
-        synchronized (incomingLock) {
+	    synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
@@ -357,10 +321,7 @@ public class StandardMessenger implements Messenger {
     @Override
     @NotNull
     public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin, @NotNull String channel) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
@@ -383,11 +344,8 @@ public class StandardMessenger implements Messenger {
 
     @Override
     public boolean isRegistrationValid(@NotNull PluginMessageListenerRegistration registration) {
-        if (registration == null) {
-            throw new IllegalArgumentException("Registration cannot be null");
-        }
 
-        synchronized (incomingLock) {
+	    synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(registration.getPlugin());
 
             if (registrations != null) {
@@ -400,10 +358,7 @@ public class StandardMessenger implements Messenger {
 
     @Override
     public boolean isIncomingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
@@ -422,10 +377,7 @@ public class StandardMessenger implements Messenger {
 
     @Override
     public boolean isOutgoingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel) {
-        if (plugin == null) {
-            throw new IllegalArgumentException("Plugin cannot be null");
-        }
-        channel = validateAndCorrectChannel(channel);
+	    channel = validateAndCorrectChannel(channel);
 
         synchronized (outgoingLock) {
             Set<String> channels = outgoingByPlugin.get(plugin);
@@ -440,10 +392,7 @@ public class StandardMessenger implements Messenger {
 
     @Override
     public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message) {
-        if (source == null) {
-            throw new IllegalArgumentException("Player source cannot be null");
-        }
-        if (message == null) {
+	    if (message == null) {
             throw new IllegalArgumentException("Message cannot be null");
         }
         channel = validateAndCorrectChannel(channel);
@@ -483,10 +432,7 @@ public class StandardMessenger implements Messenger {
     @Deprecated
     @NotNull
     public static String validateAndCorrectChannel(@NotNull String channel) {
-        if (channel == null) {
-            throw new IllegalArgumentException("Channel cannot be null");
-        }
-        // This will correct registrations / outgoing messages
+	    // This will correct registrations / outgoing messages
         // It is not legal to send "BungeeCord" incoming anymore so we are fine there,
         // but we must make sure that none of the API methods repeatedly call validate
         if (channel.equals("BungeeCord")) {
@@ -528,13 +474,7 @@ public class StandardMessenger implements Messenger {
      *     registered for this plugin.
      */
     public static void validatePluginMessage(@NotNull Messenger messenger, @NotNull Plugin source, @NotNull String channel, @NotNull byte[] message) {
-        if (messenger == null) {
-            throw new IllegalArgumentException("Messenger cannot be null");
-        }
-        if (source == null) {
-            throw new IllegalArgumentException("Plugin source cannot be null");
-        }
-        if (!source.isEnabled()) {
+	    if (!source.isEnabled()) {
             throw new IllegalArgumentException("Plugin must be enabled to send messages");
         }
         if (message == null) {
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index ac02ae4fc179483b4ac3d1adc41684a8426197eb..3efedc490cd1faf8747b15ed2b50794fd1642e82 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -288,55 +288,24 @@ public class Potion {
      */
     @NotNull
     public static Potion fromDamage(int damage) {
-        PotionType type;
-        switch (damage & POTION_BIT) {
-            case 0:
-                type = PotionType.WATER;
-                break;
-            case 1:
-                type = PotionType.REGEN;
-                break;
-            case 2:
-                type = PotionType.SPEED;
-                break;
-            case 3:
-                type = PotionType.FIRE_RESISTANCE;
-                break;
-            case 4:
-                type = PotionType.POISON;
-                break;
-            case 5:
-                type = PotionType.INSTANT_HEAL;
-                break;
-            case 6:
-                type = PotionType.NIGHT_VISION;
-                break;
-            case 8:
-                type = PotionType.WEAKNESS;
-                break;
-            case 9:
-                type = PotionType.STRENGTH;
-                break;
-            case 10:
-                type = PotionType.SLOWNESS;
-                break;
-            case 11:
-                type = PotionType.JUMP;
-                break;
-            case 12:
-                type = PotionType.INSTANT_DAMAGE;
-                break;
-            case 13:
-                type = PotionType.WATER_BREATHING;
-                break;
-            case 14:
-                type = PotionType.INVISIBILITY;
-                break;
-            default:
-                type = PotionType.WATER;
-        }
-        Potion potion;
-        if (type == null || type == PotionType.WATER) {
+        PotionType type = switch (damage & POTION_BIT) {
+            case 1 -> PotionType.REGEN;
+	        case 2 -> PotionType.SPEED;
+	        case 3 -> PotionType.FIRE_RESISTANCE;
+	        case 4 -> PotionType.POISON;
+	        case 5 -> PotionType.INSTANT_HEAL;
+	        case 6 -> PotionType.NIGHT_VISION;
+	        case 8 -> PotionType.WEAKNESS;
+	        case 9 -> PotionType.STRENGTH;
+	        case 10 -> PotionType.SLOWNESS;
+	        case 11 -> PotionType.JUMP;
+	        case 12 -> PotionType.INSTANT_DAMAGE;
+	        case 13 -> PotionType.WATER_BREATHING;
+	        case 14 -> PotionType.INVISIBILITY;
+	        default -> PotionType.WATER;
+        };
+	    Potion potion;
+        if (type == PotionType.WATER) {
             potion = new Potion(PotionType.WATER);
         } else {
             int level = (damage & TIER_BIT) >> TIER_SHIFT;
diff --git a/src/main/java/org/bukkit/potion/PotionBrewer.java b/src/main/java/org/bukkit/potion/PotionBrewer.java
index d21f407cc16cfd709c1cabf408e8d8d16aba7e1a..cb9250119e9a13de89c4f9ff234afa8e4e951905 100644
--- a/src/main/java/org/bukkit/potion/PotionBrewer.java
+++ b/src/main/java/org/bukkit/potion/PotionBrewer.java
@@ -17,8 +17,7 @@ public interface PotionBrewer {
      * @param amplifier The amplifier of the effect
      * @return The resulting potion effect
      */
-    @NotNull
-    public PotionEffect createEffect(@NotNull PotionEffectType potion, int duration, int amplifier);
+    @NotNull PotionEffect createEffect(@NotNull PotionEffectType potion, int duration, int amplifier);
 
     /**
      * Returns a collection of {@link PotionEffect} that would be applied from
@@ -29,8 +28,7 @@ public interface PotionBrewer {
      * @deprecated Non-Functional
      */
     @Deprecated
-    @NotNull
-    public Collection<PotionEffect> getEffectsFromDamage(int damage);
+    @NotNull Collection<PotionEffect> getEffectsFromDamage(int damage);
 
     /**
      * Returns a collection of {@link PotionEffect} that would be applied from
@@ -41,6 +39,5 @@ public interface PotionBrewer {
      * @param extended Whether the potion is extended
      * @return The list of effects
      */
-    @NotNull
-    public Collection<PotionEffect> getEffects(@NotNull PotionType type, boolean upgraded, boolean extended);
+    @NotNull Collection<PotionEffect> getEffects(@NotNull PotionType type, boolean upgraded, boolean extended);
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
index b5790aaac67f5b73f941147008d21a92d716b254..71d3336dac1a4f30ff6c5b45517765d68dc6d4da 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -246,10 +246,7 @@ public abstract class PotionEffectType {
             return false;
         }
         final PotionEffectType other = (PotionEffectType) obj;
-        if (this.id != other.id) {
-            return false;
-        }
-        return true;
+	    return this.id == other.id;
     }
 
     @Override
@@ -263,7 +260,7 @@ public abstract class PotionEffectType {
     }
 
     private static final PotionEffectType[] byId = new PotionEffectType[33];
-    private static final Map<String, PotionEffectType> byName = new HashMap<String, PotionEffectType>();
+    private static final Map<String, PotionEffectType> byName = new HashMap<>();
     // will break on updates.
     private static boolean acceptingNew = true;
 
diff --git a/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java b/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
index 21a3d767baf9f76746b2a5f2b3af134fe1e96e8a..0d99727048d4525e3e67630a525baf589d193949 100644
--- a/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
+++ b/src/main/java/org/bukkit/projectiles/BlockProjectileSource.java
@@ -10,6 +10,5 @@ public interface BlockProjectileSource extends ProjectileSource {
      *
      * @return Block for the projectile source
      */
-    @NotNull
-    public Block getBlock();
+    @NotNull Block getBlock();
 }
diff --git a/src/main/java/org/bukkit/projectiles/ProjectileSource.java b/src/main/java/org/bukkit/projectiles/ProjectileSource.java
index eabd8b926ec1c934cd7e77b7cc6adfae16771021..fe0070f05cf55cc8e9a36588abadb324e8052d0d 100644
--- a/src/main/java/org/bukkit/projectiles/ProjectileSource.java
+++ b/src/main/java/org/bukkit/projectiles/ProjectileSource.java
@@ -17,8 +17,7 @@ public interface ProjectileSource {
      * @param projectile class of the projectile to launch
      * @return the launched projectile
      */
-    @NotNull
-    public <T extends Projectile> T launchProjectile(@NotNull Class<? extends T> projectile);
+    @NotNull <T extends Projectile> T launchProjectile(@NotNull Class<? extends T> projectile);
 
     /**
      * Launches a {@link Projectile} from the ProjectileSource with an
@@ -29,6 +28,5 @@ public interface ProjectileSource {
      * @param velocity the velocity with which to launch
      * @return the launched projectile
      */
-    @NotNull
-    public <T extends Projectile> T launchProjectile(@NotNull Class<? extends T> projectile, @Nullable Vector velocity);
+    @NotNull <T extends Projectile> T launchProjectile(@NotNull Class<? extends T> projectile, @Nullable Vector velocity);
 }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
index f5e3bfd22d4d38182065b5215e5f78d9bb13381e..dba02e3976d1d148bdd8b25fd7703c0680d19c83 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitScheduler.java
@@ -1,11 +1,12 @@
 package org.bukkit.scheduler;
 
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
+
 import java.util.List;
 import java.util.concurrent.Callable;
 import java.util.concurrent.Future;
 import java.util.function.Consumer;
-import org.bukkit.plugin.Plugin;
-import org.jetbrains.annotations.NotNull;
 
 public interface BukkitScheduler {
 
@@ -19,7 +20,7 @@ public interface BukkitScheduler {
      * @param delay Delay in server ticks before executing task
      * @return Task id number (-1 if scheduling failed)
      */
-    public int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay);
+    int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay);
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskLater(Plugin, long)}
@@ -29,7 +30,7 @@ public interface BukkitScheduler {
      * @return Task id number (-1 if scheduling failed)
      */
     @Deprecated
-    public int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay);
+    int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay);
 
     /**
      * Schedules a once off task to occur as soon as possible.
@@ -40,7 +41,7 @@ public interface BukkitScheduler {
      * @param task Task to be executed
      * @return Task id number (-1 if scheduling failed)
      */
-    public int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task);
+    int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task);
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTask(Plugin)}
@@ -49,7 +50,7 @@ public interface BukkitScheduler {
      * @return Task id number (-1 if scheduling failed)
      */
     @Deprecated
-    public int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task);
+    int scheduleSyncDelayedTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task);
 
     /**
      * Schedules a repeating task.
@@ -62,7 +63,7 @@ public interface BukkitScheduler {
      * @param period Period in server ticks of the task
      * @return Task id number (-1 if scheduling failed)
      */
-    public int scheduleSyncRepeatingTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period);
+    int scheduleSyncRepeatingTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period);
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}
@@ -73,7 +74,7 @@ public interface BukkitScheduler {
      * @return Task id number (-1 if scheduling failed)
      */
     @Deprecated
-    public int scheduleSyncRepeatingTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay, long period);
+    int scheduleSyncRepeatingTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay, long period);
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -90,7 +91,7 @@ public interface BukkitScheduler {
      *     task, but rather, "an async" task
      */
     @Deprecated
-    public int scheduleAsyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay);
+    int scheduleAsyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay);
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -106,7 +107,7 @@ public interface BukkitScheduler {
      *     task, but rather, "an async" task
      */
     @Deprecated
-    public int scheduleAsyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task);
+    int scheduleAsyncDelayedTask(@NotNull Plugin plugin, @NotNull Runnable task);
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -124,7 +125,7 @@ public interface BukkitScheduler {
      *     task, but rather, "an async" task
      */
     @Deprecated
-    public int scheduleAsyncRepeatingTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period);
+    int scheduleAsyncRepeatingTask(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period);
 
     /**
      * Calls a method on the main thread and returns a Future object. This
@@ -140,15 +141,14 @@ public interface BukkitScheduler {
      * @param task Task to be executed
      * @return Future Future object related to the task
      */
-    @NotNull
-    public <T> Future<T> callSyncMethod(@NotNull Plugin plugin, @NotNull Callable<T> task);
+    @NotNull <T> Future<T> callSyncMethod(@NotNull Plugin plugin, @NotNull Callable<T> task);
 
     /**
      * Removes task from scheduler.
      *
      * @param taskId Id number of task to be removed
      */
-    public void cancelTask(int taskId);
+    void cancelTask(int taskId);
 
     /**
      * Removes all tasks associated with a particular plugin from the
@@ -156,7 +156,7 @@ public interface BukkitScheduler {
      *
      * @param plugin Owner of tasks to be removed
      */
-    public void cancelTasks(@NotNull Plugin plugin);
+    void cancelTasks(@NotNull Plugin plugin);
 
     /**
      * Check if the task currently running.
@@ -172,7 +172,7 @@ public interface BukkitScheduler {
      * <p>
      * @return If the task is currently running.
      */
-    public boolean isCurrentlyRunning(int taskId);
+    boolean isCurrentlyRunning(int taskId);
 
     /**
      * Check if the task queued to be run later.
@@ -185,7 +185,7 @@ public interface BukkitScheduler {
      * <p>
      * @return If the task is queued to be run.
      */
-    public boolean isQueued(int taskId);
+    boolean isQueued(int taskId);
 
     /**
      * Returns a list of all active workers.
@@ -195,8 +195,7 @@ public interface BukkitScheduler {
      *
      * @return Active workers
      */
-    @NotNull
-    public List<BukkitWorker> getActiveWorkers();
+    @NotNull List<BukkitWorker> getActiveWorkers();
 
     /**
      * Returns a list of all pending tasks. The ordering of the tasks is not
@@ -204,8 +203,7 @@ public interface BukkitScheduler {
      *
      * @return Active workers
      */
-    @NotNull
-    public List<BukkitTask> getPendingTasks();
+    @NotNull List<BukkitTask> getPendingTasks();
 
     /**
      * Returns a task that will run on the next server tick.
@@ -216,8 +214,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    @NotNull
-    public BukkitTask runTask(@NotNull Plugin plugin, @NotNull Runnable task) throws IllegalArgumentException;
+    @NotNull BukkitTask runTask(@NotNull Plugin plugin, @NotNull Runnable task) throws IllegalArgumentException;
 
     /**
      * Returns a task that will run on the next server tick.
@@ -227,7 +224,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTask(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task) throws IllegalArgumentException;
+    void runTask(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTask(Plugin)}
@@ -239,8 +236,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if task is null
      */
     @Deprecated
-    @NotNull
-    public BukkitTask runTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task) throws IllegalArgumentException;
+    @NotNull BukkitTask runTask(@NotNull Plugin plugin, @NotNull BukkitRunnable task) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -254,8 +250,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    @NotNull
-    public BukkitTask runTaskAsynchronously(@NotNull Plugin plugin, @NotNull Runnable task) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskAsynchronously(@NotNull Plugin plugin, @NotNull Runnable task) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -268,7 +263,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task) throws IllegalArgumentException;
+    void runTaskAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskAsynchronously(Plugin)}
@@ -279,8 +274,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if task is null
      */
     @Deprecated
-    @NotNull
-    public BukkitTask runTaskAsynchronously(@NotNull Plugin plugin, @NotNull BukkitRunnable task) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskAsynchronously(@NotNull Plugin plugin, @NotNull BukkitRunnable task) throws IllegalArgumentException;
 
     /**
      * Returns a task that will run after the specified number of server
@@ -293,8 +287,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    @NotNull
-    public BukkitTask runTaskLater(@NotNull Plugin plugin, @NotNull Runnable task, long delay) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskLater(@NotNull Plugin plugin, @NotNull Runnable task, long delay) throws IllegalArgumentException;
 
     /**
      * Returns a task that will run after the specified number of server
@@ -306,7 +299,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskLater(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay) throws IllegalArgumentException;
+    void runTaskLater(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskLater(Plugin, long)}
@@ -318,8 +311,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if task is null
      */
     @Deprecated
-    @NotNull
-    public BukkitTask runTaskLater(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskLater(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -335,8 +327,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    @NotNull
-    public BukkitTask runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull Runnable task, long delay) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull Runnable task, long delay) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -351,7 +342,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay) throws IllegalArgumentException;
+    void runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskLaterAsynchronously(Plugin, long)}
@@ -363,8 +354,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if task is null
      */
     @Deprecated
-    @NotNull
-    public BukkitTask runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskLaterAsynchronously(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay) throws IllegalArgumentException;
 
     /**
      * Returns a task that will repeatedly run until cancelled, starting after
@@ -378,8 +368,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    @NotNull
-    public BukkitTask runTaskTimer(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskTimer(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * Returns a task that will repeatedly run until cancelled, starting after
@@ -392,7 +381,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskTimer(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException;
+    void runTaskTimer(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskTimer(Plugin, long, long)}
@@ -405,8 +394,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if task is null
      */
     @Deprecated
-    @NotNull
-    public BukkitTask runTaskTimer(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskTimer(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -424,8 +412,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    @NotNull
-    public BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull Runnable task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * <b>Asynchronous tasks should never access any API in Bukkit. Great care
@@ -442,7 +429,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if plugin is null
      * @throws IllegalArgumentException if task is null
      */
-    public void runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException;
+    void runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull Consumer<BukkitTask> task, long delay, long period) throws IllegalArgumentException;
 
     /**
      * @deprecated Use {@link BukkitRunnable#runTaskTimerAsynchronously(Plugin, long, long)}
@@ -456,8 +443,7 @@ public interface BukkitScheduler {
      * @throws IllegalArgumentException if task is null
      */
     @Deprecated
-    @NotNull
-    public BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
+    @NotNull BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, @NotNull BukkitRunnable task, long delay, long period) throws IllegalArgumentException;
 
     // Paper start - add getMainThreadExecutor
     /**
@@ -466,7 +452,6 @@ public interface BukkitScheduler {
      * @param plugin the reference to the plugin scheduling tasks
      * @return an executor associated with the given plugin
      */
-    @NotNull
-    public java.util.concurrent.Executor getMainThreadExecutor(@NotNull Plugin plugin);
+    @NotNull java.util.concurrent.Executor getMainThreadExecutor(@NotNull Plugin plugin);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitTask.java b/src/main/java/org/bukkit/scheduler/BukkitTask.java
index 51251584937f2d184c88d5e1394125ec53779083..52c0adf6e08d6aaefd0f634e667bce4d3164ebcf 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitTask.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitTask.java
@@ -13,32 +13,31 @@ public interface BukkitTask {
      *
      * @return Task id number
      */
-    public int getTaskId();
+    int getTaskId();
 
     /**
      * Returns the Plugin that owns this task.
      *
      * @return The Plugin that owns the task
      */
-    @NotNull
-    public Plugin getOwner();
+    @NotNull Plugin getOwner();
 
     /**
      * Returns true if the Task is a sync task.
      *
      * @return true if the task is run by main thread
      */
-    public boolean isSync();
+    boolean isSync();
 
     /**
      * Returns true if this task has been cancelled.
      *
      * @return true if the task has been cancelled
      */
-    public boolean isCancelled();
+    boolean isCancelled();
 
     /**
      * Will attempt to cancel this task.
      */
-    public void cancel();
+    void cancel();
 }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitWorker.java b/src/main/java/org/bukkit/scheduler/BukkitWorker.java
index 81bdc9ceafb2a7cd3b93f4049504b3d5de049536..7ea2cc336c706cbfd4bbd1c839d6d2ac20bb6ea4 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitWorker.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitWorker.java
@@ -16,22 +16,20 @@ public interface BukkitWorker {
      *
      * @return Task id number
      */
-    public int getTaskId();
+    int getTaskId();
 
     /**
      * Returns the Plugin that owns this task.
      *
      * @return The Plugin that owns the task
      */
-    @NotNull
-    public Plugin getOwner();
+    @NotNull Plugin getOwner();
 
     /**
      * Returns the thread for the worker.
      *
      * @return The Thread object for the worker
      */
-    @NotNull
-    public Thread getThread();
+    @NotNull Thread getThread();
 
 }
diff --git a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
index 5d58a18b3625fd01ea34969200edc3bc80cbb587..ee69e66c3986491c5ffda13b5f8ce86484699398 100644
--- a/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
+++ b/src/main/java/org/bukkit/scoreboard/DisplaySlot.java
@@ -6,5 +6,5 @@ package org.bukkit.scoreboard;
 public enum DisplaySlot {
     BELOW_NAME,
     PLAYER_LIST,
-    SIDEBAR;
+    SIDEBAR
 }
diff --git a/src/main/java/org/bukkit/scoreboard/NameTagVisibility.java b/src/main/java/org/bukkit/scoreboard/NameTagVisibility.java
index d9e9ae1a970cab4f17d4ede3b12856c78fff44ec..fd9ff37406b2b3cacf061f70f083a5b61bcc08a8 100644
--- a/src/main/java/org/bukkit/scoreboard/NameTagVisibility.java
+++ b/src/main/java/org/bukkit/scoreboard/NameTagVisibility.java
@@ -21,5 +21,5 @@ public enum NameTagVisibility {
     /**
      * Show the player's nametag only to members of other teams.
      */
-    HIDE_FOR_OWN_TEAM;
+    HIDE_FOR_OWN_TEAM
 }
diff --git a/src/main/java/org/bukkit/scoreboard/RenderType.java b/src/main/java/org/bukkit/scoreboard/RenderType.java
index f169f8726d5ee95fe7e9afc15578405405a44628..b895fe12cfa5e21a1f46d63502eb03070c1676e6 100644
--- a/src/main/java/org/bukkit/scoreboard/RenderType.java
+++ b/src/main/java/org/bukkit/scoreboard/RenderType.java
@@ -12,5 +12,5 @@ public enum RenderType {
     /**
      * Display number of hearts corresponding to value.
      */
-    HEARTS;
+    HEARTS
 }
diff --git a/src/main/java/org/bukkit/scoreboard/Team.java b/src/main/java/org/bukkit/scoreboard/Team.java
index f0af10a5b9ad048be197ed5ec6c8ed2672eb3dd5..7a3adb73a3cc7e68b32d5bccc416d6269f7175be 100644
--- a/src/main/java/org/bukkit/scoreboard/Team.java
+++ b/src/main/java/org/bukkit/scoreboard/Team.java
@@ -393,7 +393,7 @@ public interface Team {
     /**
      * Represents an option which may be applied to this team.
      */
-    public enum Option {
+    enum Option {
 
         /**
          * How to display the name tags of players on this team.
@@ -406,13 +406,13 @@ public interface Team {
         /**
          * How players of this team collide with others.
          */
-        COLLISION_RULE;
+        COLLISION_RULE
     }
 
     /**
      * How an option may be applied to members of this team.
      */
-    public enum OptionStatus {
+    enum OptionStatus {
 
         /**
          * Apply this option to everyone.
@@ -429,6 +429,6 @@ public interface Team {
         /**
          * Apply this option for only team members.
          */
-        FOR_OWN_TEAM;
+        FOR_OWN_TEAM
     }
 }
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
index 8a377e1413a0034da8e8f03e25d1e3d6e2cf6f92..afdd52364d827ca911773362f6251c0a1b0ea169 100644
--- a/src/main/java/org/bukkit/util/BlockIterator.java
+++ b/src/main/java/org/bukkit/util/BlockIterator.java
@@ -1,8 +1,5 @@
 package org.bukkit.util;
 
-import static org.bukkit.util.NumberConversions.*;
-import java.util.Iterator;
-import java.util.NoSuchElementException;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.block.Block;
@@ -10,6 +7,12 @@ import org.bukkit.block.BlockFace;
 import org.bukkit.entity.LivingEntity;
 import org.jetbrains.annotations.NotNull;
 
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+
+import static org.bukkit.util.NumberConversions.floor;
+import static org.bukkit.util.NumberConversions.round;
+
 /**
  * This class performs ray tracing and iterates along blocks on a line
  */
@@ -22,16 +25,16 @@ public class BlockIterator implements Iterator<Block> {
 
     private boolean end = false;
 
-    private Block[] blockQueue = new Block[3];
+    private final Block[] blockQueue = new Block[3];
     private int currentBlock = 0;
     private int currentDistance = 0;
-    private int maxDistanceInt;
+    private final int maxDistanceInt;
 
     private int secondError;
     private int thirdError;
 
-    private int secondStep;
-    private int thirdStep;
+    private final int secondStep;
+    private final int thirdStep;
 
     private BlockFace mainFace;
     private BlockFace secondFace;
@@ -349,23 +352,19 @@ public class BlockIterator implements Iterator<Block> {
             thirdError -= gridSize;
             secondError -= gridSize;
             currentBlock = 2;
-            return;
         } else if (secondError > 0) {
             blockQueue[1] = blockQueue[0].getRelative(mainFace);
             blockQueue[0] = blockQueue[1].getRelative(secondFace);
             secondError -= gridSize;
             currentBlock = 1;
-            return;
         } else if (thirdError > 0) {
             blockQueue[1] = blockQueue[0].getRelative(mainFace);
             blockQueue[0] = blockQueue[1].getRelative(thirdFace);
             thirdError -= gridSize;
             currentBlock = 1;
-            return;
         } else {
             blockQueue[0] = blockQueue[0].getRelative(mainFace);
             currentBlock = 0;
-            return;
         }
     }
 }
diff --git a/src/main/java/org/bukkit/util/BoundingBox.java b/src/main/java/org/bukkit/util/BoundingBox.java
index 01f80020b12c7b4637e5c22f7277a0268fe40cd2..727b75018d9b81bb870ecd72ad8c604f2faaf914 100644
--- a/src/main/java/org/bukkit/util/BoundingBox.java
+++ b/src/main/java/org/bukkit/util/BoundingBox.java
@@ -1,8 +1,5 @@
 package org.bukkit.util;
 
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Objects;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Location;
 import org.bukkit.block.Block;
@@ -12,6 +9,10 @@ import org.bukkit.configuration.serialization.SerializableAs;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.LinkedHashMap;
+import java.util.Map;
+import java.util.Objects;
+
 /**
  * A mutable axis aligned bounding box (AABB).
  * <p>
@@ -982,27 +983,25 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         if (Double.doubleToLongBits(maxZ) != Double.doubleToLongBits(other.maxZ)) return false;
         if (Double.doubleToLongBits(minX) != Double.doubleToLongBits(other.minX)) return false;
         if (Double.doubleToLongBits(minY) != Double.doubleToLongBits(other.minY)) return false;
-        if (Double.doubleToLongBits(minZ) != Double.doubleToLongBits(other.minZ)) return false;
-        return true;
+	    return Double.doubleToLongBits(minZ) == Double.doubleToLongBits(other.minZ);
     }
 
     @Override
     public String toString() {
-        StringBuilder builder = new StringBuilder();
-        builder.append("BoundingBox [minX=");
-        builder.append(minX);
-        builder.append(", minY=");
-        builder.append(minY);
-        builder.append(", minZ=");
-        builder.append(minZ);
-        builder.append(", maxX=");
-        builder.append(maxX);
-        builder.append(", maxY=");
-        builder.append(maxY);
-        builder.append(", maxZ=");
-        builder.append(maxZ);
-        builder.append("]");
-        return builder.toString();
+        String builder = "BoundingBox [minX=" +
+            minX +
+            ", minY=" +
+            minY +
+            ", minZ=" +
+            minZ +
+            ", maxX=" +
+            maxX +
+            ", maxY=" +
+            maxY +
+            ", maxZ=" +
+            maxZ +
+            "]";
+        return builder;
     }
 
     /**
@@ -1023,7 +1022,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        Map<String, Object> result = new LinkedHashMap<>();
         result.put("minX", minX);
         result.put("minY", minY);
         result.put("minZ", minZ);
diff --git a/src/main/java/org/bukkit/util/CachedServerIcon.java b/src/main/java/org/bukkit/util/CachedServerIcon.java
index bb4f7702ced0baf0670a7a21d48ad528b7249361..7bd707d53504ae41e070e022b688887f141bb6c4 100644
--- a/src/main/java/org/bukkit/util/CachedServerIcon.java
+++ b/src/main/java/org/bukkit/util/CachedServerIcon.java
@@ -15,8 +15,7 @@ import org.jetbrains.annotations.Nullable;
  */
 public interface CachedServerIcon {
 
-    @Nullable
-    public String getData(); // Paper
+    @Nullable String getData(); // Paper
 
     // Paper start
     default boolean isEmpty() {
diff --git a/src/main/java/org/bukkit/util/ChatPaginator.java b/src/main/java/org/bukkit/util/ChatPaginator.java
index 1f510211813836c7a891b14fb8262b75d1d1fce7..7a4086037d93430b936b2569bb1c9e1e03952f7b 100644
--- a/src/main/java/org/bukkit/util/ChatPaginator.java
+++ b/src/main/java/org/bukkit/util/ChatPaginator.java
@@ -1,12 +1,13 @@
 package org.bukkit.util;
 
-import java.util.Arrays;
-import java.util.LinkedList;
-import java.util.List;
 import org.bukkit.ChatColor;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+
 /**
  * The ChatPaginator takes a raw string of arbitrary length and breaks it down
  * into an array of strings appropriate for displaying on the Minecraft player
@@ -46,10 +47,10 @@ public class ChatPaginator {
         String[] lines = wordWrap(unpaginatedString, lineLength);
 
         int totalPages = lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);
-        int actualPageNumber = pageNumber <= totalPages ? pageNumber : totalPages;
+        int actualPageNumber = Math.min(pageNumber, totalPages);
 
         int from = (actualPageNumber - 1) * pageHeight;
-        int to = from + pageHeight <= lines.length ? from + pageHeight : lines.length;
+        int to = Math.min(from + pageHeight, lines.length);
         String[] selectedLines = Arrays.copyOfRange(lines, from, to);
 
         return new ChatPage(selectedLines, actualPageNumber, totalPages);
@@ -78,7 +79,7 @@ public class ChatPaginator {
         char[] rawChars = (rawString + ' ').toCharArray(); // add a trailing space to trigger pagination
         StringBuilder word = new StringBuilder();
         StringBuilder line = new StringBuilder();
-        List<String> lines = new LinkedList<String>();
+        List<String> lines = new LinkedList<>();
         int lineColorChars = 0;
 
         for (int i = 0; i < rawChars.length; i++) {
@@ -94,9 +95,7 @@ public class ChatPaginator {
 
             if (c == ' ' || c == '\n') {
                 if (line.length() == 0 && word.length() > lineLength) { // special case: extremely long word begins a line
-                    for (String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {
-                        lines.add(partialWord);
-                    }
+                    lines.addAll(Arrays.asList(word.toString().split("(?<=\\G.{" + lineLength + "})")));
                 } else if (line.length() + 1 + word.length() - lineColorChars == lineLength) { // Line exactly the correct length...newline
                     if (line.length() > 0) {
                         line.append(' ');
@@ -146,14 +145,14 @@ public class ChatPaginator {
             }
         }
 
-        return lines.toArray(new String[lines.size()]);
+        return lines.toArray(new String[0]);
     }
 
     public static class ChatPage {
 
-        private String[] lines;
-        private int pageNumber;
-        private int totalPages;
+        private final String[] lines;
+        private final int pageNumber;
+        private final int totalPages;
 
         public ChatPage(@NotNull String[] lines, int pageNumber, int totalPages) {
             this.lines = lines;
diff --git a/src/main/java/org/bukkit/util/NumberConversions.java b/src/main/java/org/bukkit/util/NumberConversions.java
index e10b9a4e534384187e09489581f310ab3101b0f4..aaf3b53a7e115ae5b9a97bb3d2e371b438abddb7 100644
--- a/src/main/java/org/bukkit/util/NumberConversions.java
+++ b/src/main/java/org/bukkit/util/NumberConversions.java
@@ -34,8 +34,7 @@ public final class NumberConversions {
 
         try {
             return Integer.parseInt(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
@@ -47,8 +46,7 @@ public final class NumberConversions {
 
         try {
             return Float.parseFloat(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
@@ -60,8 +58,7 @@ public final class NumberConversions {
 
         try {
             return Double.parseDouble(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
@@ -73,8 +70,7 @@ public final class NumberConversions {
 
         try {
             return Long.parseLong(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
@@ -86,8 +82,7 @@ public final class NumberConversions {
 
         try {
             return Short.parseShort(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
@@ -99,8 +94,7 @@ public final class NumberConversions {
 
         try {
             return Byte.parseByte(object.toString());
-        } catch (NumberFormatException e) {
-        } catch (NullPointerException e) {
+        } catch (NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
diff --git a/src/main/java/org/bukkit/util/RayTraceResult.java b/src/main/java/org/bukkit/util/RayTraceResult.java
index 19c52a2a62068f5f4af4184e24defa0f7c1005a7..caa224691e5f6a3342aebb64c868b7f38d9ae072 100644
--- a/src/main/java/org/bukkit/util/RayTraceResult.java
+++ b/src/main/java/org/bukkit/util/RayTraceResult.java
@@ -141,22 +141,20 @@ public class RayTraceResult {
         if (!hitPosition.equals(other.hitPosition)) return false;
         if (!Objects.equals(hitBlock, other.hitBlock)) return false;
         if (!Objects.equals(hitBlockFace, other.hitBlockFace)) return false;
-        if (!Objects.equals(hitEntity, other.hitEntity)) return false;
-        return true;
+	    return Objects.equals(hitEntity, other.hitEntity);
     }
 
     @Override
     public String toString() {
-        StringBuilder builder = new StringBuilder();
-        builder.append("RayTraceResult [hitPosition=");
-        builder.append(hitPosition);
-        builder.append(", hitBlock=");
-        builder.append(hitBlock);
-        builder.append(", hitBlockFace=");
-        builder.append(hitBlockFace);
-        builder.append(", hitEntity=");
-        builder.append(hitEntity);
-        builder.append("]");
-        return builder.toString();
+        String builder = "RayTraceResult [hitPosition=" +
+            hitPosition +
+            ", hitBlock=" +
+            hitBlock +
+            ", hitBlockFace=" +
+            hitBlockFace +
+            ", hitEntity=" +
+            hitEntity +
+            "]";
+        return builder;
     }
 }
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index bdfb9623b74ea73a3d343b20fc1369cc797880c5..8cad587fa3d98abbba93afe64ad03d8345803b0a 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -21,7 +21,7 @@ import org.jetbrains.annotations.NotNull;
 public class Vector implements Cloneable, ConfigurationSerializable {
     private static final long serialVersionUID = -2657651106777219169L;
 
-    private static Random random = new Random();
+    private static final Random random = new Random();
 
     /**
      * Threshold for fuzzy equals().
@@ -501,6 +501,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Vector rotateAroundAxis(@NotNull Vector axis, double angle) throws IllegalArgumentException {
+        //noinspection ConstantConditions
         Preconditions.checkArgument(axis != null, "The provided axis vector was null");
 
         return rotateAroundNonUnitAxis(axis.isNormalized() ? axis : axis.clone().normalize(), angle);
@@ -528,7 +529,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Vector rotateAroundNonUnitAxis(@NotNull Vector axis, double angle) throws IllegalArgumentException {
-        Preconditions.checkArgument(axis != null, "The provided axis vector was null");
+        Preconditions.checkArgument(true, "The provided axis vector was null");
 
         double x = getX(), y = getY(), z = getZ();
         double x2 = axis.getX(), y2 = axis.getY(), z2 = axis.getZ();
@@ -863,7 +864,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     @Override
     @NotNull
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<String, Object>();
+        Map<String, Object> result = new LinkedHashMap<>();
 
         result.put("x", getX());
         result.put("y", getY());
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
index 0f8eb97bd5e2f8b0f0cc03f7c4342aae06c4520c..ce41c4012ebd3940f8176e8585c52596e01f73ed 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
@@ -1,10 +1,11 @@
 package org.bukkit.util.io;
 
+import org.bukkit.configuration.serialization.ConfigurationSerializable;
+import org.bukkit.configuration.serialization.ConfigurationSerialization;
+
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.ObjectInputStream;
-import org.bukkit.configuration.serialization.ConfigurationSerializable;
-import org.bukkit.configuration.serialization.ConfigurationSerialization;
 
 /**
  * This class is designed to be used in conjunction with the {@link
@@ -56,8 +57,6 @@ public class BukkitObjectInputStream extends ObjectInputStream {
     }
 
     private static IOException newIOException(String string, Throwable cause) {
-        IOException exception = new IOException(string);
-        exception.initCause(cause);
-        return exception;
+	    return new IOException(string, cause);
     }
 }
diff --git a/src/main/java/org/bukkit/util/io/Wrapper.java b/src/main/java/org/bukkit/util/io/Wrapper.java
index c3496dc8ba124cfdd23f0fe14d17f8f7cea7c955..7369697f5a573ca518e78f6497bff400e31d25cb 100644
--- a/src/main/java/org/bukkit/util/io/Wrapper.java
+++ b/src/main/java/org/bukkit/util/io/Wrapper.java
@@ -13,7 +13,7 @@ final class Wrapper<T extends Map<String, ?> & Serializable> implements Serializ
     final T map;
 
     static Wrapper<ImmutableMap<String, ?>> newWrapper(@NotNull ConfigurationSerializable obj) {
-        return new Wrapper<ImmutableMap<String, ?>>(ImmutableMap.<String, Object>builder().put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(obj.getClass())).putAll(obj.serialize()).build());
+        return new Wrapper<>(ImmutableMap.<String, Object>builder().put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(obj.getClass())).putAll(obj.serialize()).build());
     }
 
     private Wrapper(@NotNull T map) {
diff --git a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
index e1a4ddf2c07cdd242fa8054a0152522fe4039e85..406c36369d4dbe994698850c56444d1a26c38e16 100644
--- a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
@@ -1,12 +1,13 @@
 package org.bukkit.util.permissions;
 
-import java.util.Map;
 import org.bukkit.Bukkit;
 import org.bukkit.permissions.Permission;
 import org.bukkit.permissions.PermissionDefault;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
+import java.util.Map;
+
 public final class DefaultPermissions {
     private static final String ROOT = "craftbukkit";
     private static final String LEGACY_PREFIX = "craft";
@@ -46,8 +47,7 @@ public final class DefaultPermissions {
 
     @NotNull
     public static Permission registerPermission(@NotNull String name, @Nullable String desc) {
-        Permission perm = registerPermission(new Permission(name, desc));
-        return perm;
+	    return registerPermission(new Permission(name, desc));
     }
 
     @NotNull
@@ -59,8 +59,7 @@ public final class DefaultPermissions {
 
     @NotNull
     public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def) {
-        Permission perm = registerPermission(new Permission(name, desc, def));
-        return perm;
+	    return registerPermission(new Permission(name, desc, def));
     }
 
     @NotNull
@@ -72,8 +71,7 @@ public final class DefaultPermissions {
 
     @NotNull
     public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @Nullable Map<String, Boolean> children) {
-        Permission perm = registerPermission(new Permission(name, desc, def, children));
-        return perm;
+	    return registerPermission(new Permission(name, desc, def, children));
     }
 
     @NotNull
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index 3cbe5c2bb55dead7968a6f165ef267e3e2931061..8c58a8ce9f9cfc8f94ca315962a9a09cab95b9d4 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -23,18 +23,13 @@
  */
 package org.spigotmc;
 
-import java.io.PrintStream;
-import java.util.Queue;
-import java.util.concurrent.ConcurrentLinkedQueue;
-import org.bukkit.Bukkit;
-import org.bukkit.World;
-import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
-import org.bukkit.plugin.AuthorNagException;
-import org.bukkit.plugin.Plugin;
 import co.aikar.timings.Timing;
 import co.aikar.timings.Timings;
 import co.aikar.timings.TimingsManager;
+import org.bukkit.Bukkit;
+import org.bukkit.plugin.AuthorNagException;
+import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.NotNull;
 
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
diff --git a/src/test/java/io/papermc/paper/EntityTagsTest.java b/src/test/java/io/papermc/paper/EntityTagsTest.java
index 06bb9d1180361d3d00c699796bbacbce5bef2177..25d956acb66b19c7c730f89acd5de5738b42e77c 100644
--- a/src/test/java/io/papermc/paper/EntityTagsTest.java
+++ b/src/test/java/io/papermc/paper/EntityTagsTest.java
@@ -1,6 +1,5 @@
 package io.papermc.paper;
 
-import com.destroystokyo.paper.MaterialTags;
 import io.papermc.paper.tag.EntityTags;
 import org.bukkit.Bukkit;
 import org.bukkit.TestServer;
diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
index 19271057cf24329757c9419fa6c97848e008a96c..2d383a10267e43fe9996178a3724a0d618c5453b 100644
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ b/src/test/java/org/bukkit/AnnotationTest.java
@@ -1,16 +1,5 @@
 package org.bukkit;
 
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.net.URISyntaxException;
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.junit.Assert;
@@ -23,6 +12,13 @@ import org.objectweb.asm.tree.ClassNode;
 import org.objectweb.asm.tree.MethodNode;
 import org.objectweb.asm.tree.ParameterNode;
 
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.net.URISyntaxException;
+import java.net.URL;
+import java.util.*;
+
 public class AnnotationTest {
 
     private static final String[] ACCEPTED_ANNOTATIONS = {
@@ -188,11 +184,7 @@ public class AnnotationTest {
         }
 
         // Anonymous classes have generated constructors, which can't be annotated nor invoked
-        if ("<init>".equals(method.name) && isAnonymous(clazz)) {
-            return false;
-        }
-
-        return true;
+	    return !"<init>".equals(method.name) || !isAnonymous(clazz);
     }
 
     private static boolean isWellAnnotated(@Nullable List<? extends AnnotationNode> annotations) { // Paper - allow children of AnnotationNode
diff --git a/src/test/java/org/bukkit/BukkitMirrorTest.java b/src/test/java/org/bukkit/BukkitMirrorTest.java
index 2dfada66067d79b84cd490eadbe0178e8cd8c260..cf63cffcfe479c32af0826cc7730a23a3d6526a6 100644
--- a/src/test/java/org/bukkit/BukkitMirrorTest.java
+++ b/src/test/java/org/bukkit/BukkitMirrorTest.java
@@ -1,13 +1,5 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import com.google.common.base.Function;
-import com.google.common.collect.Lists;
-import java.lang.reflect.Method;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.List;
 import org.junit.Before;
 import org.junit.Test;
 import org.junit.runner.RunWith;
@@ -15,20 +7,24 @@ import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.List;
+import java.util.stream.Collectors;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class BukkitMirrorTest {
 
     @Parameters(name = "{index}: {1}")
     public static List<Object[]> data() {
-        return Lists.transform(Arrays.asList(Server.class.getDeclaredMethods()), new Function<Method, Object[]>() {
-            @Override
-            public Object[] apply(Method input) {
-                return new Object[] {
-                    input,
-                    input.toGenericString().substring("public abstract ".length()).replace("(", "{").replace(")", "}")
-                    };
-            }
-        });
+        return Arrays.stream(Server.class.getDeclaredMethods()).map(input -> new Object[]{
+            input,
+            input.toGenericString().substring("public abstract ".length()).replace("(", "{").replace(")", "}")
+        }).collect(Collectors.toList());
     }
 
     @Parameter(0)
@@ -45,28 +41,28 @@ public class BukkitMirrorTest {
     }
 
     @Test
-    public void isStatic() throws Throwable {
+    public void isStatic() {
         assertThat(Modifier.isStatic(bukkit.getModifiers()), is(true));
     }
 
     @Test
-    public void isDeprecated() throws Throwable {
+    public void isDeprecated() {
         assertThat(bukkit.isAnnotationPresent(Deprecated.class), is(server.isAnnotationPresent(Deprecated.class)));
     }
 
     @Test
-    public void returnType() throws Throwable {
+    public void returnType() {
         assertThat(bukkit.getReturnType(), is((Object) server.getReturnType()));
         // assertThat(bukkit.getGenericReturnType(), is(server.getGenericReturnType())); // too strict on <T> type generics
     }
 
     @Test
-    public void parameterTypes() throws Throwable {
+    public void parameterTypes() {
         // assertThat(bukkit.getGenericParameterTypes(), is(server.getGenericParameterTypes())); // too strict on <T> type generics
     }
 
     @Test
-    public void declaredException() throws Throwable {
+    public void declaredException() {
         assertThat(bukkit.getGenericExceptionTypes(), is(server.getGenericExceptionTypes()));
     }
 }
diff --git a/src/test/java/org/bukkit/ChatColorTest.java b/src/test/java/org/bukkit/ChatColorTest.java
index 2a8c8c729850c65dcc5f681267ee7e543b927d7e..027be750a811d4681407221405430255047064b1 100644
--- a/src/test/java/org/bukkit/ChatColorTest.java
+++ b/src/test/java/org/bukkit/ChatColorTest.java
@@ -1,9 +1,11 @@
 package org.bukkit;
 
-import static org.hamcrest.CoreMatchers.*;
-import static org.junit.Assert.*;
 import org.junit.Test;
 
+import static org.hamcrest.CoreMatchers.is;
+import static org.hamcrest.CoreMatchers.nullValue;
+import static org.junit.Assert.assertThat;
+
 public class ChatColorTest {
 
     @Test
@@ -15,7 +17,7 @@ public class ChatColorTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void getByStringWithNull() {
-        ChatColor.getByChar((String) null);
+        ChatColor.getByChar(null);
     }
 
     @Test(expected = IllegalArgumentException.class)
diff --git a/src/test/java/org/bukkit/ColorTest.java b/src/test/java/org/bukkit/ColorTest.java
index 70183fdb7f06e6ec3a64d93737f26bcbeb485e84..283a018a2ecee76f152f489b37c7514a246ed0d4 100644
--- a/src/test/java/org/bukkit/ColorTest.java
+++ b/src/test/java/org/bukkit/ColorTest.java
@@ -1,14 +1,14 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import org.bukkit.configuration.file.YamlConfiguration;
 import org.junit.Test;
 
-@SuppressWarnings("javadoc")
+import static org.hamcrest.Matchers.*;
+import static org.junit.Assert.assertThat;
+
 public class ColorTest {
     static class TestColor {
-        static int id = 0;
+        static final int id = 0;
         final String name;
         final int rgb;
         final int bgr;
@@ -26,7 +26,7 @@ public class ColorTest {
         }
     }
 
-    static TestColor[] examples = new TestColor[]{
+    static final TestColor[] examples = new TestColor[]{
         /*            0xRRGGBB, 0xBBGGRR, 0xRR, 0xGG, 0xBB */
         new TestColor(0xFFFFFF, 0xFFFFFF, 0xFF, 0xFF, 0xFF),
         new TestColor(0xFFFFAA, 0xAAFFFF, 0xFF, 0xFF, 0xAA),
diff --git a/src/test/java/org/bukkit/DyeColorTest.java b/src/test/java/org/bukkit/DyeColorTest.java
index e56d9439a2c4aa029263d68cb435bec63ce87574..445f53051dbb51c79fe3cd3236b15f6e1cddf3bd 100644
--- a/src/test/java/org/bukkit/DyeColorTest.java
+++ b/src/test/java/org/bukkit/DyeColorTest.java
@@ -1,9 +1,5 @@
 package org.bukkit;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
-import java.util.ArrayList;
-import java.util.List;
 import org.bukkit.material.Colorable;
 import org.bukkit.material.Dye;
 import org.bukkit.material.Wool;
@@ -13,12 +9,18 @@ import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class DyeColorTest {
 
     @Parameters(name = "{index}: {0}")
     public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<Object[]>();
+        List<Object[]> list = new ArrayList<>();
         for (DyeColor dye : DyeColor.values()) {
             list.add(new Object[] {dye});
         }
diff --git a/src/test/java/org/bukkit/LocationTest.java b/src/test/java/org/bukkit/LocationTest.java
index 887305c05c3e53079347502c187984ca3e42a1f8..6f39e0f34b555a2a383c40e8c75a1239ae629bb3 100644
--- a/src/test/java/org/bukkit/LocationTest.java
+++ b/src/test/java/org/bukkit/LocationTest.java
@@ -40,7 +40,7 @@ public class LocationTest {
     public static List<Object[]> data() {
         Random RANDOM = new Random(1L); // Test is deterministic
         int r = 0;
-        return ImmutableList.<Object[]>of(
+        return ImmutableList.of(
             new Object[]{"X",
                 1, 0, 0,
                 270, 0
@@ -79,7 +79,7 @@ public class LocationTest {
             },
             new Object[]{"-X Z",
                 -HALF_UNIT, 0, HALF_UNIT,
-                (90 + 0) / 2, 0
+                (90) / 2, 0
             },
             new Object[]{"X Y Z",
                 HALF_HALF_UNIT, HALF_UNIT, HALF_HALF_UNIT,
diff --git a/src/test/java/org/bukkit/TestServer.java b/src/test/java/org/bukkit/TestServer.java
index 5f9d348241210689eaf41a39ace5948e7a237b12..3257e32cf2322a3dc3652d7b6eda877a8408c437 100644
--- a/src/test/java/org/bukkit/TestServer.java
+++ b/src/test/java/org/bukkit/TestServer.java
@@ -11,7 +11,7 @@ import org.bukkit.plugin.PluginManager;
 import org.bukkit.plugin.SimplePluginManager;
 
 public final class TestServer implements InvocationHandler {
-    private static interface MethodHandler {
+    private interface MethodHandler {
         Object handle(TestServer server, Object[] args);
     }
 
@@ -22,32 +22,18 @@ public final class TestServer implements InvocationHandler {
             ImmutableMap.Builder<Method, MethodHandler> methodMap = ImmutableMap.builder();
             methodMap.put(
                     Server.class.getMethod("isPrimaryThread"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return Thread.currentThread().equals(server.creatingThread);
-                        }
-                    }
-                );
+	            (server, args) -> Thread.currentThread().equals(server.creatingThread)
+            );
             // Paper start
             methodMap.put(
                 Server.class.getMethod("getTag", String.class, NamespacedKey.class, Class.class),
-                new MethodHandler() {
-                    public Object handle(TestServer server, Object[] args) {
-                        return new com.destroystokyo.paper.MaterialSetTag();
-                    }
-                }
+	            (server, args) -> new com.destroystokyo.paper.MaterialSetTag()
             );
             // Paper end
             methodMap.put(
                     Server.class.getMethod("getPluginManager"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return server.pluginManager;
-                        }
-                    }
-                );
+	            (server, args) -> server.pluginManager
+            );
             methodMap.put(
                     Server.class.getMethod("getLogger"),
                     new MethodHandler() {
@@ -60,31 +46,16 @@ public final class TestServer implements InvocationHandler {
                 );
             methodMap.put(
                     Server.class.getMethod("getName"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return TestServer.class.getSimpleName();
-                        }
-                    }
-                );
+	            (server, args) -> TestServer.class.getSimpleName()
+            );
             methodMap.put(
                     Server.class.getMethod("getVersion"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return "Version_" + TestServer.class.getPackage().getImplementationVersion();
-                        }
-                    }
-                );
+	            (server, args) -> "Version_" + TestServer.class.getPackage().getImplementationVersion()
+            );
             methodMap.put(
                     Server.class.getMethod("getBukkitVersion"),
-                    new MethodHandler() {
-                        @Override
-                        public Object handle(TestServer server, Object[] args) {
-                            return "BukkitVersion_" + TestServer.class.getPackage().getImplementationVersion();
-                        }
-                    }
-                );
+	            (server, args) -> "BukkitVersion_" + TestServer.class.getPackage().getImplementationVersion()
+            );
             methods = methodMap.build();
 
             TestServer server = new TestServer();
@@ -96,11 +67,11 @@ public final class TestServer implements InvocationHandler {
         }
     }
 
-    private Thread creatingThread = Thread.currentThread();
+    private final Thread creatingThread = Thread.currentThread();
     private PluginManager pluginManager;
-    private TestServer() {};
+    private TestServer() {}
 
-    public static Server getInstance() {
+	public static Server getInstance() {
         return Bukkit.getServer();
     }
 
diff --git a/src/test/java/org/bukkit/TestWorld.java b/src/test/java/org/bukkit/TestWorld.java
index beb15c7c813d8d9b6ff6f88a2826c06533ccd725..4d33b98ef6ac1e1710db11702d7fd55bc47dbe78 100644
--- a/src/test/java/org/bukkit/TestWorld.java
+++ b/src/test/java/org/bukkit/TestWorld.java
@@ -8,7 +8,7 @@ import java.util.Map;
 
 public final class TestWorld implements InvocationHandler {
 
-    private static interface MethodHandler {
+    private interface MethodHandler {
 
         Object handle(TestWorld server, Object[] args);
     }
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
index 1e529928393e1554bf02d2bfb1e1c3c7e4def07e..bc165c694963301753943d6bee1ccebf4a137b3a 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
@@ -1,18 +1,15 @@
 package org.bukkit.configuration;
 
-import static org.junit.Assert.*;
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
 import org.bukkit.Material;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
 import org.junit.Test;
 
+import java.util.*;
+
+import static org.junit.Assert.*;
+
 public abstract class ConfigurationSectionTest {
     public abstract ConfigurationSection getConfigurationSection();
 
@@ -203,7 +200,7 @@ public abstract class ConfigurationSectionTest {
     @Test
     public void testSectionMap() {
         ConfigurationSection config = getConfigurationSection();
-        Map<String, Object> testMap = new LinkedHashMap<String, Object>();
+        Map<String, Object> testMap = new LinkedHashMap<>();
 
         testMap.put("string", "Hello World");
         testMap.put("integer", 15);
@@ -293,9 +290,9 @@ public abstract class ConfigurationSectionTest {
         String key = "exists";
         boolean value = true;
 
-        section.set(key, value);
+        section.set(key, true);
 
-        assertEquals(value, section.getBoolean(key));
+        assertEquals(true, section.getBoolean(key));
         assertNull(section.getString("doesntExist"));
     }
 
@@ -306,10 +303,10 @@ public abstract class ConfigurationSectionTest {
         boolean value = true;
         boolean def = false;
 
-        section.set(key, value);
+        section.set(key, true);
 
-        assertEquals(value, section.getBoolean(key, def));
-        assertEquals(def, section.getBoolean("doesntExist", def));
+        assertEquals(true, section.getBoolean(key, false));
+        assertEquals(false, section.getBoolean("doesntExist", false));
     }
 
     @Test
@@ -318,7 +315,7 @@ public abstract class ConfigurationSectionTest {
         String key = "exists";
         boolean value = true;
 
-        section.set(key, value);
+        section.set(key, true);
 
         assertTrue(section.isBoolean(key));
         assertFalse(section.isBoolean("doesntExist"));
@@ -414,7 +411,7 @@ public abstract class ConfigurationSectionTest {
     public void testGetList_String() {
         ConfigurationSection section = getConfigurationSection();
         String key = "exists";
-        Map<String, Object> map = new HashMap<String, Object>();
+        Map<String, Object> map = new HashMap<>();
 
         map.put("one", 1);
         map.put("two", "two");
@@ -466,18 +463,18 @@ public abstract class ConfigurationSectionTest {
     public void testGetObject_String_Class() {
         ConfigurationSection section = getConfigurationSection();
 
-        section.set("set", Integer.valueOf(1));
-        section.addDefault("default", Integer.valueOf(2));
+        section.set("set", 1);
+        section.addDefault("default", 2);
         section.addDefault("defaultAndSet", Boolean.TRUE);
-        section.set("defaultAndSet", Integer.valueOf(3));
+        section.set("defaultAndSet", 3);
 
         assertEquals(Integer.valueOf(1), section.getObject("set", Integer.class));
         assertNull(section.getObject("set", Boolean.class));
-        assertEquals(Integer.valueOf(2), section.getObject("default", Number.class));
+        assertEquals(2, section.getObject("default", Number.class));
         assertNull(section.getObject("default", Boolean.class));
         assertEquals(Integer.valueOf(3), section.getObject("defaultAndSet", Integer.class));
         assertEquals(Boolean.TRUE, section.getObject("defaultAndSet", Boolean.class));
-        assertEquals(Integer.valueOf(3), section.getObject("defaultAndSet", Object.class));
+        assertEquals(3, section.getObject("defaultAndSet", Object.class));
         assertNull(section.getObject("defaultAndSet", String.class));
         assertNull(section.getObject("doesntExist", Boolean.class));
         assertNull(section.getString("doesntExist"));
@@ -487,11 +484,11 @@ public abstract class ConfigurationSectionTest {
     public void testGetObject_String_Class_T() {
         ConfigurationSection section = getConfigurationSection();
 
-        section.set("set", Integer.valueOf(1));
-        section.addDefault("default", Integer.valueOf(2));
+        section.set("set", 1);
+        section.addDefault("default", 2);
 
         assertEquals(Integer.valueOf(1), section.getObject("set", Integer.class, null));
-        assertEquals(Integer.valueOf(1), section.getObject("set", Integer.class, Integer.valueOf(4)));
+        assertEquals(Integer.valueOf(1), section.getObject("set", Integer.class, 4));
         assertNull(section.getObject("set", Boolean.class, null));
         assertNull(section.getObject("default", Integer.class, null));
         assertNull(section.getObject("doesntExist", Boolean.class, null));
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationTest.java b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
index e554ebba652c27ac4995b11eb34974d8059da9c9..685d497ab3703cb3551e4aadc5a3618b986e66ad 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
@@ -1,16 +1,13 @@
 package org.bukkit.configuration;
 
-import static org.junit.Assert.*;
-import java.util.Arrays;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Set;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.util.Vector;
 import org.junit.Test;
 
+import java.util.*;
+
+import static org.junit.Assert.*;
+
 public abstract class ConfigurationTest {
 
     static {
@@ -20,7 +17,7 @@ public abstract class ConfigurationTest {
     public abstract Configuration getConfig();
 
     public Map<String, Object> getTestValues() {
-        HashMap<String, Object> result = new LinkedHashMap<String, Object>();
+        HashMap<String, Object> result = new LinkedHashMap<>();
 
         result.put("integer", Integer.MIN_VALUE);
         result.put("string", "String Value");
@@ -136,7 +133,7 @@ public abstract class ConfigurationTest {
     public void testCreateSection() {
         Configuration config = getConfig();
 
-        Set<String> set = new HashSet<String>();
+        Set<String> set = new HashSet<>();
         set.add("this");
         set.add("this.test.sub");
         set.add("this.test");
diff --git a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
index 4ef7aa981899e666b12aa7a178a1c7265d98a23b..6ac2b9a4dbaa12f0483679de806ffd20753890f5 100644
--- a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
@@ -12,7 +12,7 @@ import org.junit.rules.TemporaryFolder;
 
 public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     @Rule
-    public TemporaryFolder testFolder = new TemporaryFolder();
+    public final TemporaryFolder testFolder = new TemporaryFolder();
 
     @Override
     public abstract FileConfiguration getConfig();
diff --git a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
index cd79a3487fc660759f58b6e0333a2228b08c0c02..262a414be8e290764068c151370411f41e29f47d 100644
--- a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
@@ -22,26 +22,28 @@ public class YamlConfigurationTest extends FileConfigurationTest {
 
     @Override
     public String getTestValuesString() {
-        return "integer: -2147483648\n"
-                + "string: String Value\n"
-                + "long: 9223372036854775807\n"
-                + "true-boolean: true\n"
-                + "false-boolean: false\n"
-                + "vector:\n"
-                + "  ==: Vector\n"
-                + "  x: 12345.67\n"
-                + "  y: 64.0\n"
-                + "  z: -12345.6789\n"
-                + "list:\n"
-                + "- 1\n"
-                + "- 2\n"
-                + "- 3\n"
-                + "- 4\n"
-                + "- 5\n"
-                + "'42': The Answer\n"
-                + "enum:\n"
-                + "  ==: org.bukkit.configuration.ConfigurationSectionTest$TestEnum\n"
-                + "  variant: BANANAS\n";
+        return """
+	        integer: -2147483648
+	        string: String Value
+	        long: 9223372036854775807
+	        true-boolean: true
+	        false-boolean: false
+	        vector:
+	          ==: Vector
+	          x: 12345.67
+	          y: 64.0
+	          z: -12345.6789
+	        list:
+	        - 1
+	        - 2
+	        - 3
+	        - 4
+	        - 5
+	        '42': The Answer
+	        enum:
+	          ==: org.bukkit.configuration.ConfigurationSectionTest$TestEnum
+	          variant: BANANAS
+	        """;
     }
 
     @Test
diff --git a/src/test/java/org/bukkit/conversations/ConversationContextTest.java b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
index 3780a47c1f48d47b39a0e8a36c64044b366f8cc0..a9d5cd520ebfec218cf408693d961f7eb8ea3794 100644
--- a/src/test/java/org/bukkit/conversations/ConversationContextTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
@@ -1,9 +1,12 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
+import org.junit.Test;
+
 import java.util.HashMap;
 import java.util.Map;
-import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNull;
 
 /**
  */
@@ -11,15 +14,15 @@ public class ConversationContextTest {
     @Test
     public void TestFromWhom() {
         Conversable conversable = new FakeConversable();
-        ConversationContext context = new ConversationContext(null, conversable, new HashMap<Object, Object>());
+        ConversationContext context = new ConversationContext(null, conversable, new HashMap<>());
         assertEquals(conversable, context.getForWhom());
     }
 
     @Test
     public void TestPlugin() {
         Conversable conversable = new FakeConversable();
-        ConversationContext context = new ConversationContext(null, conversable, new HashMap<Object, Object>());
-        assertEquals(null, context.getPlugin());
+        ConversationContext context = new ConversationContext(null, conversable, new HashMap<>());
+	    assertNull(context.getPlugin());
     }
 
     @Test
diff --git a/src/test/java/org/bukkit/conversations/ConversationTest.java b/src/test/java/org/bukkit/conversations/ConversationTest.java
index c448dc724d65f4b6a4cf52a6213f712b4c06d82e..b764efaa0f270c30dcb247390932e65e2fd838d9 100644
--- a/src/test/java/org/bukkit/conversations/ConversationTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationTest.java
@@ -1,9 +1,10 @@
 package org.bukkit.conversations;
 
-import static org.junit.Assert.*;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
+import static org.junit.Assert.*;
+
 /**
  */
 public class ConversationTest {
@@ -87,7 +88,7 @@ public class ConversationTest {
         assertEquals(conversation, forWhom.abandonedConverstion);
     }
 
-    private class FirstPrompt extends StringPrompt {
+    private static class FirstPrompt extends StringPrompt {
 
         @Override
         public String getPromptText(ConversationContext context) {
@@ -102,7 +103,7 @@ public class ConversationTest {
         }
     }
 
-    private class SecondPrompt extends MessagePrompt {
+    private static class SecondPrompt extends MessagePrompt {
 
         @Override
         protected Prompt getNextPrompt(ConversationContext context) {
diff --git a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
index 6093e9865b004c8fa4aed0bd0c291a4c77ca8b84..88975553f7a689d421d8c35301220c4b368a036f 100644
--- a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
+++ b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
@@ -48,7 +48,7 @@ public class ValidatingPromptTest {
 
     //TODO: TestPlayerNamePrompt()
 
-    private class TestBooleanPrompt extends BooleanPrompt {
+    private static class TestBooleanPrompt extends BooleanPrompt {
         public boolean result;
 
         @Override
@@ -63,7 +63,7 @@ public class ValidatingPromptTest {
         }
     }
 
-    private class TestFixedSetPrompt extends FixedSetPrompt {
+    private static class TestFixedSetPrompt extends FixedSetPrompt {
         public String result;
 
         public TestFixedSetPrompt(String... fixedSet) {
@@ -82,7 +82,7 @@ public class ValidatingPromptTest {
         }
     }
 
-    private class TestNumericPrompt extends NumericPrompt {
+    private static class TestNumericPrompt extends NumericPrompt {
         public Number result;
 
         @Override
@@ -97,7 +97,7 @@ public class ValidatingPromptTest {
         }
     }
 
-    private class TestRegexPrompt extends RegexPrompt {
+    private static class TestRegexPrompt extends RegexPrompt {
         public String result;
 
         public TestRegexPrompt(String pattern) {
diff --git a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
index b955f6a7adc65a5d1557df3d15fdeb1916ad3cad..42d82887bece8b538216f9a24961a38f4ad4644d 100644
--- a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
+++ b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
@@ -31,7 +31,7 @@ public class MemoryKeyTest {
 
     @Test
     public void shouldReturnNullWhenNamespacedKeyisNotPresentAsMemoryKey() {
-        Assert.assertEquals(null, MemoryKey.getByKey(NamespacedKey.minecraft("not_present")));
+	    Assert.assertNull(MemoryKey.getByKey(NamespacedKey.minecraft("not_present")));
     }
 
     @Test
diff --git a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
index dd5fb243b7af23115908a534bec13e8f455f64b2..2be9bc8186af3cfdc4646e387e768fb13a5ce866 100644
--- a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
+++ b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
@@ -21,6 +21,6 @@ public class PlayerChatTabCompleteEventTest {
     }
 
     private String getToken(String message) {
-        return new PlayerChatTabCompleteEvent(TestPlayer.getInstance(), message, ImmutableList.<String>of()).getLastToken();
+        return new PlayerChatTabCompleteEvent(TestPlayer.getInstance(), message, ImmutableList.of()).getLastToken();
     }
 }
diff --git a/src/test/java/org/bukkit/materials/MaterialDataTest.java b/src/test/java/org/bukkit/materials/MaterialDataTest.java
index a935ae4a25b7955416652bf8c4690a804f12e903..89ac1fb6256a3d1275325c1fd80bf550440b275b 100644
--- a/src/test/java/org/bukkit/materials/MaterialDataTest.java
+++ b/src/test/java/org/bukkit/materials/MaterialDataTest.java
@@ -247,11 +247,11 @@ public class MaterialDataTest {
             assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
             assertThat("Constructed with default pores face", mushroom.getBlockTexture(), equalTo(MushroomBlockTexture.ALL_PORES));
 
-            for (int f = 0; f < setFaces.length; f++) {
-                mushroom = new Mushroom(type, setFaces[f]);
-                assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
-                assertThat("Constructed with correct texture", mushroom.getBlockTexture(), equalTo(MushroomBlockTexture.getCapByFace(setFaces[f])));
-            }
+	        for (BlockFace setFace : setFaces) {
+		        mushroom = new Mushroom(type, setFace);
+		        assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
+		        assertThat("Constructed with correct texture", mushroom.getBlockTexture(), equalTo(MushroomBlockTexture.getCapByFace(setFace)));
+	        }
 
             for (MushroomBlockTexture texture : textures) {
                 mushroom = new Mushroom(type, texture);
diff --git a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
index e8cea99fd0eb966e60b0a8e1ebceca6dce6ff50a..b361bc96bc5f1716ec37201f16646455d1893b74 100644
--- a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
@@ -6,22 +6,22 @@ import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 public class FixedMetadataValueTest {
-    private Plugin plugin = new TestPlugin("X");
+    private final Plugin plugin = new TestPlugin("X");
     private FixedMetadataValue subject;
 
     @Test
     public void testBasic() {
-        subject = new FixedMetadataValue(plugin, new Integer(50));
+        subject = new FixedMetadataValue(plugin, 50);
         assertSame(plugin, subject.getOwningPlugin());
-        assertEquals(new Integer(50), subject.value());
+        assertEquals(50, subject.value());
     }
 
     @Test
     public void testNumberTypes() {
-        subject = new FixedMetadataValue(plugin, new Integer(5));
-        assertEquals(new Integer(5), subject.value());
+        subject = new FixedMetadataValue(plugin, 5);
+        assertEquals(5, subject.value());
         assertEquals(5, subject.asInt());
-        assertEquals(true, subject.asBoolean());
+	    assertTrue(subject.asBoolean());
         assertEquals(5, subject.asByte());
         assertEquals(5.0, subject.asFloat(), 0.1e-8);
         assertEquals(5.0D, subject.asDouble(), 0.1e-8D);
diff --git a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
index bc8a18eea6c0c61ad07bdc44b2a7c38f84117da6..f7b2ecbe953bce3df215589171428e8da7bb742d 100644
--- a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
@@ -1,13 +1,13 @@
 package org.bukkit.metadata;
 
 import static org.junit.Assert.*;
-import java.util.concurrent.Callable;
+
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 public class LazyMetadataValueTest {
     private LazyMetadataValue subject;
-    private TestPlugin plugin = new TestPlugin("x");
+    private final TestPlugin plugin = new TestPlugin("x");
 
     @Test
     public void testLazyInt() {
@@ -36,18 +36,15 @@ public class LazyMetadataValueTest {
     @Test
     public void testLazyBoolean() {
         boolean value = false;
-        subject = makeSimpleCallable(value);
+        subject = makeSimpleCallable(false);
 
-        assertEquals(value, subject.value());
+        assertEquals(false, subject.value());
     }
 
     @Test(expected = MetadataEvaluationException.class)
     public void testEvalException() {
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                throw new RuntimeException("Gotcha!");
-            }
+        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, () -> {
+            throw new RuntimeException("Gotcha!");
         });
         subject.value();
     }
@@ -56,12 +53,9 @@ public class LazyMetadataValueTest {
     public void testCacheStrategyCacheAfterFirstEval() {
         final Counter counter = new Counter();
         final int value = 10;
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return value;
-            }
+        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_AFTER_FIRST_EVAL, () -> {
+            counter.increment();
+            return value;
         });
 
         subject.value();
@@ -78,12 +72,9 @@ public class LazyMetadataValueTest {
     public void testCacheStrategyNeverCache() {
         final Counter counter = new Counter();
         final int value = 10;
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.NEVER_CACHE, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return value;
-            }
+        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.NEVER_CACHE, () -> {
+            counter.increment();
+            return value;
         });
 
         subject.value();
@@ -96,12 +87,9 @@ public class LazyMetadataValueTest {
     public void testCacheStrategyEternally() {
         final Counter counter = new Counter();
         final int value = 10;
-        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_ETERNALLY, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return value;
-            }
+        subject = new LazyMetadataValue(plugin, LazyMetadataValue.CacheStrategy.CACHE_ETERNALLY, () -> {
+            counter.increment();
+            return value;
         });
 
         subject.value();
@@ -116,15 +104,10 @@ public class LazyMetadataValueTest {
     }
 
     private LazyMetadataValue makeSimpleCallable(final Object value) {
-        return new LazyMetadataValue(plugin, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                return value;
-            }
-        });
+        return new LazyMetadataValue(plugin, () -> value);
     }
 
-    private class Counter {
+    private static class Counter {
         private int c = 0;
 
         public void increment() {
diff --git a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
index a9c10a2fd9fb37f2f7223fed138b2e2bfdaaef12..5a5be6f7edeaec31636a6a0190766130fe4bb714 100644
--- a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
@@ -23,7 +23,7 @@ import org.junit.Test;
 /**
  */
 public class MetadataConversionTest {
-    private Plugin plugin = new TestPlugin("x");
+    private final Plugin plugin = new TestPlugin("x");
     private FixedMetadataValue subject;
 
     private void setSubject(Object value) {
@@ -40,7 +40,7 @@ public class MetadataConversionTest {
         assertEquals(10, subject.asLong());
         assertEquals(10, subject.asShort());
         assertEquals(10, subject.asByte());
-        assertEquals(true, subject.asBoolean());
+	    assertTrue(subject.asBoolean());
         assertEquals("10", subject.asString());
     }
 
@@ -54,7 +54,7 @@ public class MetadataConversionTest {
         assertEquals(10, subject.asLong());
         assertEquals(10, subject.asShort());
         assertEquals(10, subject.asByte());
-        assertEquals(true, subject.asBoolean());
+	    assertTrue(subject.asBoolean());
         assertEquals("10.5", subject.asString());
     }
 
@@ -68,7 +68,7 @@ public class MetadataConversionTest {
         assertEquals(10, subject.asLong());
         assertEquals(10, subject.asShort());
         assertEquals(10, subject.asByte());
-        assertEquals(false, subject.asBoolean());
+	    assertFalse(subject.asBoolean());
         assertEquals("10", subject.asString());
     }
 
@@ -82,7 +82,7 @@ public class MetadataConversionTest {
         assertEquals(0, subject.asLong());
         assertEquals(0, subject.asShort());
         assertEquals(0, subject.asByte());
-        assertEquals(true, subject.asBoolean());
+	    assertTrue(subject.asBoolean());
         assertEquals("true", subject.asString());
     }
 
@@ -96,7 +96,7 @@ public class MetadataConversionTest {
         assertEquals(0, subject.asLong());
         assertEquals(0, subject.asShort());
         assertEquals(0, subject.asByte());
-        assertEquals(false, subject.asBoolean());
+	    assertFalse(subject.asBoolean());
         assertEquals("", subject.asString());
     }
 }
diff --git a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
index 12373ff16ca71bc437929ea5c4486c2c6bd93d09..2017fdb1fe63bda6f6d76289e22f728f94bb3563 100644
--- a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
@@ -2,16 +2,16 @@ package org.bukkit.metadata;
 
 import static org.junit.Assert.*;
 import java.util.List;
-import java.util.concurrent.Callable;
+
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 public class MetadataStoreTest {
-    private Plugin pluginX = new TestPlugin("x");
-    private Plugin pluginY = new TestPlugin("y");
+    private final Plugin pluginX = new TestPlugin("x");
+    private final Plugin pluginY = new TestPlugin("y");
 
-    StringMetadataStore subject = new StringMetadataStore();
+    final StringMetadataStore subject = new StringMetadataStore();
 
     @Test
     public void testMetadataStore() {
@@ -33,12 +33,9 @@ public class MetadataStoreTest {
     public void testInvalidateAll() {
         final Counter counter = new Counter();
 
-        subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return 10;
-            }
+        subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, () -> {
+            counter.increment();
+            return 10;
         }));
 
         assertTrue(subject.hasMetadata("subject", "key"));
@@ -52,12 +49,9 @@ public class MetadataStoreTest {
     public void testInvalidateAllButActuallyNothing() {
         final Counter counter = new Counter();
 
-        subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, new Callable<Object>() {
-            @Override
-            public Object call() throws Exception {
-                counter.increment();
-                return 10;
-            }
+        subject.setMetadata("subject", "key", new LazyMetadataValue(pluginX, () -> {
+            counter.increment();
+            return 10;
         }));
 
         assertTrue(subject.hasMetadata("subject", "key"));
@@ -120,14 +114,14 @@ public class MetadataStoreTest {
         assertFalse(subject.hasMetadata("subject", "otherKey"));
     }
 
-    private class StringMetadataStore extends MetadataStoreBase<String> implements MetadataStore<String> {
+    private static class StringMetadataStore extends MetadataStoreBase<String> implements MetadataStore<String> {
         @Override
         protected String disambiguate(String subject, String metadataKey) {
             return subject + ":" + metadataKey;
         }
     }
 
-    private class Counter {
+    private static class Counter {
         int c = 0;
 
         public void increment() {
diff --git a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
index c1e78568a86525e922a49a802aa5da85b4b6ae4a..d0ec262f539e591af549871582b056b597d61ce6 100644
--- a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
@@ -6,7 +6,7 @@ import org.bukkit.plugin.TestPlugin;
 import org.junit.Test;
 
 public class MetadataValueAdapterTest {
-    private TestPlugin plugin = new TestPlugin("x");
+    private final TestPlugin plugin = new TestPlugin("x");
 
     @Test
     public void testAdapterBasics() {
@@ -15,10 +15,10 @@ public class MetadataValueAdapterTest {
         assertEquals(mv.getOwningPlugin(), this.plugin);
 
         // Check value-getting and invalidation.
-        assertEquals(new Integer(1), mv.value());
-        assertEquals(new Integer(2), mv.value());
+        assertEquals(1, mv.value());
+        assertEquals(2, mv.value());
         mv.invalidate();
-        assertEquals(new Integer(1), mv.value());
+        assertEquals(1, mv.value());
     }
 
     @Test
@@ -38,25 +38,25 @@ public class MetadataValueAdapterTest {
     @Test
     public void testBooleanConversion() {
         // null is False.
-        assertEquals(false, simpleValue(null).asBoolean());
+	    assertFalse(simpleValue(null).asBoolean());
 
         // String to boolean.
-        assertEquals(true, simpleValue("True").asBoolean());
-        assertEquals(true, simpleValue("TRUE").asBoolean());
-        assertEquals(false, simpleValue("false").asBoolean());
+	    assertTrue(simpleValue("True").asBoolean());
+	    assertTrue(simpleValue("TRUE").asBoolean());
+	    assertFalse(simpleValue("false").asBoolean());
 
         // Number to boolean.
-        assertEquals(true, simpleValue(1).asBoolean());
-        assertEquals(true, simpleValue(5.0).asBoolean());
-        assertEquals(false, simpleValue(0).asBoolean());
-        assertEquals(false, simpleValue(0.1).asBoolean());
+	    assertTrue(simpleValue(1).asBoolean());
+	    assertTrue(simpleValue(5.0).asBoolean());
+	    assertFalse(simpleValue(0).asBoolean());
+	    assertFalse(simpleValue(0.1).asBoolean());
 
         // Boolean as boolean, of course.
-        assertEquals(true, simpleValue(Boolean.TRUE).asBoolean());
-        assertEquals(false, simpleValue(Boolean.FALSE).asBoolean());
+	    assertTrue(simpleValue(Boolean.TRUE).asBoolean());
+	    assertFalse(simpleValue(Boolean.FALSE).asBoolean());
 
         // any object that is not null and not a Boolean, String, or Number is true.
-        assertEquals(true, simpleValue(new Object()).asBoolean());
+	    assertTrue(simpleValue(new Object()).asBoolean());
     }
 
     /** Test String conversions return an empty string when given null. */
@@ -83,7 +83,7 @@ public class MetadataValueAdapterTest {
      * because we want to make sure all the tested conversions are calling the
      * value() method exactly once and no caching is going on.
      */
-    class IncrementingMetaValue extends MetadataValueAdapter {
+    static class IncrementingMetaValue extends MetadataValueAdapter {
         private int internalValue = 0;
 
         protected IncrementingMetaValue(Plugin owningPlugin) {
diff --git a/src/test/java/org/bukkit/plugin/PluginManagerTest.java b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
index 1941c9f49e9514c1236c5f4ea9f7af47f7be85c5..aeb56e557c7d498b29f9900b5a6fc644168ee166 100644
--- a/src/test/java/org/bukkit/plugin/PluginManagerTest.java
+++ b/src/test/java/org/bukkit/plugin/PluginManagerTest.java
@@ -10,7 +10,7 @@ import org.junit.After;
 import org.junit.Test;
 
 public class PluginManagerTest {
-    private class MutableObject {
+    private static class MutableObject {
         volatile Object value = null;
     }
 
@@ -146,6 +146,7 @@ public class PluginManagerTest {
         this.testRemovePermissionByName("CaMeL");
     }
 
+    @Test
     public void testRemovePermissionByPermissionLower() {
         this.testRemovePermissionByPermission("lower");
     }
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
index 351fc4a9f45745984d1d4811ba836959a3f3eadb..0cae44ee099d94c0b84b30e1b34623bf49534278 100644
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
@@ -17,10 +17,7 @@ public class TimedRegisteredListenerTest {
     @Test
     public void testEventClass() throws EventException {
         Listener listener = new Listener() {};
-        EventExecutor executor = new EventExecutor() {
-            @Override
-            public void execute(Listener listener, Event event) {}
-        };
+        EventExecutor executor = (listener1, event) -> {};
         TestPlugin plugin = new TestPlugin("Test");
 
         PlayerInteractEvent interactEvent = new PlayerInteractEvent(null, null, null, null, null);
diff --git a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
index 7e2335ed8acc692af1e70eddcf97ee7a56e30f68..f0ed427159b1327c20bab9393e6063483f7104b2 100644
--- a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
+++ b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
@@ -298,6 +298,7 @@ public class StandardMessengerTest {
         Assert.assertEquals("BungeeCord", StandardMessenger.validateAndCorrectChannel("bungeecord:main"));
     }
 
+    @SafeVarargs
     private static <T> void assertEquals(Collection<T> actual, T... expected) {
         assertThat("Size of the array", actual.size(), is(expected.length));
         assertThat(actual, hasItems(expected));
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
index 1b7642dc1c55c6bf87018b67d8c368478c0b9ca1..aaffe93bc2f4a56ddbd9f5d8e96674ccaac5a2c6 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
@@ -9,11 +9,11 @@ import org.bukkit.entity.Player;
 
 
 public final class TestPlayer implements InvocationHandler {
-    private static interface MethodHandler {
+    private interface MethodHandler {
         Object handle(TestPlayer server, Object[] args);
     }
     private static final Constructor<? extends Player> constructor;
-    private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
+    private static final HashMap<Method, MethodHandler> methods = new HashMap<>();
     static {
         try {
             /*
@@ -29,7 +29,7 @@ public final class TestPlayer implements InvocationHandler {
         }
     }
 
-    private TestPlayer() {};
+    private TestPlayer() {}
 
     public static Player getInstance() {
         try {
diff --git a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
index 229c67c769f50ba68b4d9681f984b4bc668619c2..f3b65edfc25f4e4c39b51e5c174684dedaebfc5d 100644
--- a/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilStartsWithTest.java
@@ -15,7 +15,7 @@ public class StringUtilStartsWithTest {
 
     @Parameters(name = "{index}: {0} startsWith {1} == {2}")
     public static List<Object[]> data() {
-        return ImmutableList.<Object[]>of(
+        return ImmutableList.of(
             new Object[] {
                 "Apple",
                 "Apples",
diff --git a/src/test/java/org/bukkit/util/StringUtilTest.java b/src/test/java/org/bukkit/util/StringUtilTest.java
index 6476dd2d1b6d37c3390400d8dea94016b309d69f..e0325219af97ac8d24bd2c84ce825383d2ee5e2e 100644
--- a/src/test/java/org/bukkit/util/StringUtilTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilTest.java
@@ -22,17 +22,17 @@ public class StringUtilTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void nullCollectionTest() {
-        StringUtil.copyPartialMatches("Token", ImmutableList.<String>of(), null);
+        StringUtil.copyPartialMatches("Token", ImmutableList.of(), null);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void nullIterableTest() {
-        StringUtil.copyPartialMatches("Token", null, new ArrayList<String>());
+        StringUtil.copyPartialMatches("Token", null, new ArrayList<>());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void nullTokenTest() {
-        StringUtil.copyPartialMatches(null, ImmutableList.<String>of(), new ArrayList<String>());
+        StringUtil.copyPartialMatches(null, ImmutableList.of(), new ArrayList<>());
     }
 
     @Test
@@ -40,7 +40,7 @@ public class StringUtilTest {
         String token = "ab";
         List<String> original = ImmutableList.of("ab12", "aC561", "AB5195", "Ab76", "", "a");
         List<String> expected = ImmutableList.of("ab12", "AB5195", "Ab76");
-        List<String> list = new ArrayList<String>();
+        List<String> list = new ArrayList<>();
         assertThat(StringUtil.copyPartialMatches(token, original, list), is(expected));
         assertThat(StringUtil.copyPartialMatches(token, original, list), is(sameInstance(list)));
         assertThat(list.size(), is(expected.size() * 2));
@@ -53,6 +53,6 @@ public class StringUtilTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void copyNullTest() {
-        StringUtil.copyPartialMatches("token", Arrays.asList("token1", "token2", null), new ArrayList<String>());
+        StringUtil.copyPartialMatches("token", Arrays.asList("token1", "token2", null), new ArrayList<>());
     }
 }
diff --git a/src/test/java/org/bukkit/util/VectorTest.java b/src/test/java/org/bukkit/util/VectorTest.java
index 9b846deba8eb3ff43c444da70a9d7ca3d1b43b0a..ae6867f8adb2b94f776449693fb83df9d1cb8a15 100644
--- a/src/test/java/org/bukkit/util/VectorTest.java
+++ b/src/test/java/org/bukkit/util/VectorTest.java
@@ -38,7 +38,7 @@ public class VectorTest {
     public void testRotationAroundX() {
         Vector vector = BlockFace.UP.getDirection();
         assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundX(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundX(Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
+        assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundX(Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundX(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
         assertEquals(BlockFace.UP.getDirection(), vector.clone().rotateAroundX(Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
     }
@@ -51,7 +51,7 @@ public class VectorTest {
     public void testRotationAroundY() {
         Vector vector = BlockFace.EAST.getDirection();
         assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundY(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundY(Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
+        assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundY(Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundY(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
         assertEquals(BlockFace.EAST.getDirection(), vector.clone().rotateAroundY(Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
     }
@@ -65,7 +65,7 @@ public class VectorTest {
         Vector vector = BlockFace.EAST.getDirection();
         Vector axis = BlockFace.UP.getDirection();
         assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
+        assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
         assertEquals(BlockFace.EAST.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
     }
@@ -78,7 +78,7 @@ public class VectorTest {
     public void testRotationAroundZ() {
         Vector vector = BlockFace.UP.getDirection();
         assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundZ(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
-        assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundZ(Math.PI * 1.0)); // Should rotate around x axis for 2/4 of a circle.
+        assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundZ(Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.EAST.getDirection(), vector.clone().rotateAroundZ(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
         assertEquals(BlockFace.UP.getDirection(), vector.clone().rotateAroundZ(Math.PI * 2.0)); // Should rotate around x axis for 4/4 of a circle.
     }
diff --git a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
index d3edb72ff83d68b86390b0e9f7e40035482f353a..b32263fec18aa4c1e9646c1d12bf2da968bfb8ff 100644
--- a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
+++ b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
@@ -1,14 +1,6 @@
 package org.bukkit.util.io;
 
-import static org.hamcrest.Matchers.*;
-import static org.junit.Assert.*;
 import com.google.common.collect.ImmutableList;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.util.List;
 import org.bukkit.Color;
 import org.bukkit.FireworkEffect;
 import org.bukkit.FireworkEffect.Type;
@@ -22,12 +14,18 @@ import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 import org.yaml.snakeyaml.external.biz.base64Coder.Base64Coder;
 
+import java.io.*;
+import java.util.List;
+
+import static org.hamcrest.Matchers.is;
+import static org.junit.Assert.assertThat;
+
 @RunWith(Parameterized.class)
 public class BukkitObjectStreamTest {
 
     @Parameters(name = "{index}: {0}")
     public static List<Object[]> data() {
-        return ImmutableList.<Object[]>of(
+        return ImmutableList.of(
             new Object[] {
                 Color.class.getName(),
                 "rO0ABXNyADZjb20uZ29vZ2xlLmNvbW1vbi5jb2xsZWN0LkltbXV0YWJsZUxpc3QkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAVsACGVsZW1lbnRzdAATW0xqYXZhL2xhbmcvT2JqZWN0O3hwdXIAE1tMamF2YS5sYW5nLk9iamVjdDuQzlifEHMpbAIAAHhwAAAABXNyABpvcmcuYnVra2l0LnV0aWwuaW8uV3JhcHBlcvJQR+zxEm8FAgABTAADbWFwdAAPTGphdmEvdXRpbC9NYXA7eHBzcgA1Y29tLmdvb2dsZS5jb21tb24uY29sbGVjdC5JbW11dGFibGVNYXAkU2VyaWFsaXplZEZvcm0AAAAAAAAAAAIAAlsABGtleXNxAH4AAVsABnZhbHVlc3EAfgABeHB1cQB+AAMAAAAEdAACPT10AANSRUR0AARCTFVFdAAFR1JFRU51cQB+AAMAAAAEdAAFQ29sb3JzcgARamF2YS5sYW5nLkludGVnZXIS4qCk94GHOAIAAUkABXZhbHVleHIAEGphdmEubGFuZy5OdW1iZXKGrJUdC5TgiwIAAHhwAAAA/3NxAH4AEQAAAP9zcQB+ABEAAAD/c3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAAAHNxAH4AEQAAAIBzcQB+ABEAAACAc3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAAgHNxAH4AEQAAAIBxAH4AGnNxAH4ABXNxAH4ACHVxAH4AAwAAAARxAH4AC3EAfgAMcQB+AA1xAH4ADnVxAH4AAwAAAARxAH4AEHNxAH4AEQAAAP9xAH4AGnEAfgAac3EAfgAFc3EAfgAIdXEAfgADAAAABHEAfgALcQB+AAxxAH4ADXEAfgAOdXEAfgADAAAABHEAfgAQc3EAfgARAAAA/3EAfgAac3EAfgARAAAApQ==",
@@ -86,17 +84,8 @@ public class BukkitObjectStreamTest {
         // If this test fails, you may start your trek to debug by commenting the '@Ignore' on the next method
         // (and of course, you would read those comments too)
         final ByteArrayOutputStream out = new ByteArrayOutputStream();
-        ObjectOutputStream oos = null;
-        try {
-            oos = new BukkitObjectOutputStream(out);
+        try (ObjectOutputStream oos = new BukkitObjectOutputStream(out)) {
             oos.writeObject(object);
-        } finally {
-            if (oos != null) {
-                try {
-                    oos.close();
-                } catch (IOException e) {
-                }
-            }
         }
 
         final byte[] preEncodedArray = Base64Coder.decode(preEncoded);
@@ -118,13 +107,13 @@ public class BukkitObjectStreamTest {
             if (ois != null) {
                 try {
                     ois.close();
-                } catch (IOException ex) {
+                } catch (IOException ignored) {
                 }
             }
             if (preois != null) {
                 try {
                     preois.close();
-                } catch (IOException ex) {
+                } catch (IOException ignored) {
                 }
             }
         }
@@ -145,18 +134,9 @@ public class BukkitObjectStreamTest {
         // The entire reason the pre-encoded string was added is to make a build (test) fail if someone accidentally makes it not backward-compatible
 
         final ByteArrayOutputStream out = new ByteArrayOutputStream();
-        ObjectOutputStream oos = null;
-        try {
-            oos = new BukkitObjectOutputStream(out);
+        try (ObjectOutputStream oos = new BukkitObjectOutputStream(out)) {
             oos.writeObject(object);
             oos.flush();
-        } finally {
-            if (oos != null) {
-                try {
-                    oos.close();
-                } catch (IOException e) {
-                }
-            }
         }
 
         final String string = new String(Base64Coder.encode(out.toByteArray()));
