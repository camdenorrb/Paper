From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: camdenorrb <5360339+camdenorrb@users.noreply.github.com>
Date: Mon, 12 Apr 2021 03:37:08 -0500
Subject: [PATCH] More clean ups, hopefully no breaking things


diff --git a/src/main/java/co/aikar/timings/FullServerTickHandler.java b/src/main/java/co/aikar/timings/FullServerTickHandler.java
index dfaa266ff53e43ad48dc5a5a5657fe70600f539a..00ceb466fe54e91f2fa4571a7ae973d778ebe38a 100644
--- a/src/main/java/co/aikar/timings/FullServerTickHandler.java
+++ b/src/main/java/co/aikar/timings/FullServerTickHandler.java
@@ -36,8 +36,8 @@ public class FullServerTickHandler extends TimingHandler {
         }
         if (TimingHistory.timedTicks % 20 == 0) {
             final Runtime runtime = Runtime.getRuntime();
-            double usedMemory = runtime.totalMemory() - runtime.freeMemory();
-            double freeMemory = runtime.maxMemory() - usedMemory;
+            final double usedMemory = runtime.totalMemory() - runtime.freeMemory();
+            final double freeMemory = runtime.maxMemory() - usedMemory;
             if (this.avgFreeMemory == -1) {
                 this.avgFreeMemory = freeMemory;
             } else {
@@ -51,9 +51,9 @@ public class FullServerTickHandler extends TimingHandler {
             }
         }
 
-        long start = System.nanoTime();
+        final long start = System.nanoTime();
         TimingsManager.tick();
-        long diff = System.nanoTime() - start;
+        final long diff = System.nanoTime() - start;
         TIMINGS_TICK.addDiff(diff, null);
         // addDiff for TIMINGS_TICK incremented this, bring it back down to 1 per tick.
         record.setCurTickCount(record.getCurTickCount()-1);
@@ -61,7 +61,7 @@ public class FullServerTickHandler extends TimingHandler {
         minuteData.setCurTickTotal(record.getCurTickTotal());
         minuteData.setCurTickCount(1);
 
-        boolean violated = isViolated();
+        final boolean violated = isViolated();
         minuteData.processTick(violated);
         TIMINGS_TICK.processTick(violated);
         processTick(violated);
diff --git a/src/main/java/co/aikar/timings/TimedEventExecutor.java b/src/main/java/co/aikar/timings/TimedEventExecutor.java
index 4e6e1b8e8aeb07e34536941d2cbfc25e5cfa6c27..5257001f118afea16487ac162fcf50c4832b1a79 100644
--- a/src/main/java/co/aikar/timings/TimedEventExecutor.java
+++ b/src/main/java/co/aikar/timings/TimedEventExecutor.java
@@ -47,9 +47,9 @@ public class TimedEventExecutor implements EventExecutor {
      * @param method EventHandler method
      * @param eventClass Owning class
      */
-    public TimedEventExecutor(@NotNull EventExecutor executor, @NotNull Plugin plugin, @Nullable Method method, @NotNull Class<? extends Event> eventClass) {
+    public TimedEventExecutor(@NotNull final EventExecutor executor, @NotNull final Plugin plugin, @Nullable Method method, @NotNull final Class<? extends Event> eventClass) {
         this.executor = executor;
-        String id;
+        final String id;
 
         if (method == null) {
             if (executor.getClass().getEnclosingClass() != null) { // Oh Skript, how we love you
@@ -65,18 +65,18 @@ public class TimedEventExecutor implements EventExecutor {
 
 
         final String eventName = eventClass.getSimpleName();
-        boolean verbose = "BlockPhysicsEvent".equals(eventName);
+        final boolean verbose = "BlockPhysicsEvent".equals(eventName);
         this.timings = Timings.ofSafe(plugin, (verbose ? "## " : "") +
             "Event: " + id + " (" + eventName + ")");
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) throws EventException {
+    public void execute(@NotNull final Listener listener, @NotNull final Event event) throws EventException {
         if (event.isAsynchronous() || !Timings.timingsEnabled || !Bukkit.isPrimaryThread()) {
             executor.execute(listener, event);
             return;
         }
-        try (Timing ignored = timings.startTiming()){
+        try (final Timing ignored = timings.startTiming()){
             executor.execute(listener, event);
         }
     }
diff --git a/src/main/java/co/aikar/timings/TimingData.java b/src/main/java/co/aikar/timings/TimingData.java
index b32fa1f5d3039b01f74cce56002be8fadb2ecaf9..758c718d9b24068b06c1176a74240f873b4c699c 100644
--- a/src/main/java/co/aikar/timings/TimingData.java
+++ b/src/main/java/co/aikar/timings/TimingData.java
@@ -42,11 +42,11 @@ class TimingData {
     private int curTickCount = 0;
     private long curTickTotal = 0;
 
-    TimingData(int id) {
+    TimingData(final int id) {
         this.id = id;
     }
 
-    private TimingData(TimingData data) {
+    private TimingData(final TimingData data) {
         this.id = data.id;
         this.totalTime = data.totalTime;
         this.lagTotalTime = data.lagTotalTime;
@@ -54,12 +54,12 @@ class TimingData {
         this.lagCount = data.lagCount;
     }
 
-    void add(long diff) {
+    void add(final long diff) {
         ++curTickCount;
         curTickTotal += diff;
     }
 
-    void processTick(boolean violated) {
+    void processTick(final boolean violated) {
         totalTime += curTickTotal;
         count += curTickCount;
         if (violated) {
@@ -86,7 +86,7 @@ class TimingData {
 
     @NotNull
     List<Object> export() {
-        List<Object> list = toArray(
+        final List<Object> list = toArray(
             id,
             count,
             totalTime);
@@ -109,7 +109,7 @@ class TimingData {
         return curTickCount;
     }
 
-    void setCurTickCount(int curTickCount) {
+    void setCurTickCount(final int curTickCount) {
         this.curTickCount = curTickCount;
     }
 
@@ -117,7 +117,7 @@ class TimingData {
         return curTickTotal;
     }
 
-    void setCurTickTotal(long curTickTotal) {
+    void setCurTickTotal(final long curTickTotal) {
         this.curTickTotal = curTickTotal;
     }
 }
diff --git a/src/main/java/co/aikar/timings/TimingHandler.java b/src/main/java/co/aikar/timings/TimingHandler.java
index d69f0985981cc1ebfe622911f1f820c00f84b0f1..178da298ec1948eeac54de79f281d6d35ff4aa73 100644
--- a/src/main/java/co/aikar/timings/TimingHandler.java
+++ b/src/main/java/co/aikar/timings/TimingHandler.java
@@ -57,7 +57,7 @@ class TimingHandler implements Timing {
     private boolean timed;
     private boolean enabled;
 
-    TimingHandler(@NotNull TimingIdentifier id) {
+    TimingHandler(@NotNull final TimingIdentifier id) {
         this.identifier = id;
         this.verbose = id.name.startsWith("##");
         this.record = new TimingData(this.id);
@@ -71,7 +71,7 @@ class TimingHandler implements Timing {
         enabled = Timings.timingsEnabled && (!verbose || Timings.verboseEnabled);
     }
 
-    void processTick(boolean violated) {
+    void processTick(final boolean violated) {
         if (timingDepth != 0 || record.getCurTickCount() == 0) {
             timingDepth = 0;
             start = 0;
@@ -79,7 +79,7 @@ class TimingHandler implements Timing {
         }
 
         record.processTick(violated);
-        for (TimingData handler : children.values()) {
+        for (final TimingData handler : children.values()) {
             handler.processTick(violated);
         }
     }
@@ -132,7 +132,7 @@ class TimingHandler implements Timing {
                 Logger.getGlobal().log(Level.SEVERE, "TIMING_STACK_CORRUPTION - Report this to the plugin " + last.identifier.group + " (Look for errors above this in the logs) (" + last.identifier + " did not stopTiming)", new Throwable());
             }
 
-            boolean found = TIMING_STACK.contains(this);
+            final boolean found = TIMING_STACK.contains(this);
             if (!found) {
                 // We aren't even in the stack... Don't pop everything
                 TIMING_STACK.addLast(last);
@@ -146,7 +146,7 @@ class TimingHandler implements Timing {
 
     }
 
-    void addDiff(long diff, @Nullable TimingHandler parent) {
+    void addDiff(final long diff, @Nullable final TimingHandler parent) {
         if (parent != null) {
             parent.children.get(id).add(diff);
         }
@@ -166,7 +166,7 @@ class TimingHandler implements Timing {
     /**
      * Reset this timer, setting all values to zero.
      */
-    void reset(boolean full) {
+    void reset(final boolean full) {
         record.reset();
         if (full) {
             timed = false;
@@ -185,7 +185,7 @@ class TimingHandler implements Timing {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         return (this == o);
     }
 
@@ -218,7 +218,7 @@ class TimingHandler implements Timing {
     TimingData[] cloneChildren() {
         final TimingData[] clonedChildren = new TimingData[children.size()];
         int i = 0;
-        for (TimingData child : children.values()) {
+        for (final TimingData child : children.values()) {
             clonedChildren[i++] = child.clone();
         }
         return clonedChildren;
diff --git a/src/main/java/co/aikar/timings/TimingHistory.java b/src/main/java/co/aikar/timings/TimingHistory.java
index 2b43a62b59c197d9b5ba32604110f27eb3295dc0..165dbb95dfe8fc698095894d4d86577ecf4fd611 100644
--- a/src/main/java/co/aikar/timings/TimingHistory.java
+++ b/src/main/java/co/aikar/timings/TimingHistory.java
@@ -62,7 +62,7 @@ public class TimingHistory {
     static final Map<String, Integer> worldMap = LoadingMap.newHashMap(new Function<>() {
         @NotNull
         @Override
-        public Integer apply(@Nullable String input) {
+        public Integer apply(@Nullable final String input) {
             return worldIdPool++;
         }
     });
@@ -87,7 +87,7 @@ public class TimingHistory {
             this.minuteReports = MINUTE_REPORTS.toArray(new MinuteReport[0]);
         }
         long ticks = 0;
-        for (MinuteReport mp : this.minuteReports) {
+        for (final MinuteReport mp : this.minuteReports) {
             ticks += mp.ticksRecord.timed;
         }
         this.totalTicks = ticks;
@@ -95,7 +95,7 @@ public class TimingHistory {
         this.entries = new TimingHistoryEntry[TimingsManager.HANDLERS.size()];
 
         int i = 0;
-        for (TimingHandler handler : TimingsManager.HANDLERS) {
+        for (final TimingHandler handler : TimingsManager.HANDLERS) {
             entries[i++] = new TimingHistoryEntry(handler);
         }
 
@@ -104,18 +104,18 @@ public class TimingHistory {
         this.worlds = toObjectMapper(Bukkit.getWorlds(), new Function<World, @org.checkerframework.checker.nullness.qual.Nullable JSONPair>() {
             @NotNull
             @Override
-            public JSONPair apply(World world) {
-                Map<RegionId, RegionData> regions = LoadingMap.newHashMap(RegionData.LOADER);
+            public JSONPair apply(final World world) {
+                final Map<RegionId, RegionData> regions = LoadingMap.newHashMap(RegionData.LOADER);
 
-                for (Chunk chunk : world.getLoadedChunks()) {
-                    RegionData data = regions.get(new RegionId(chunk.getX(), chunk.getZ()));
+                for (final Chunk chunk : world.getLoadedChunks()) {
+                    final RegionData data = regions.get(new RegionId(chunk.getX(), chunk.getZ()));
 
-                    for (Entity entity : chunk.getEntities()) {
+                    for (final Entity entity : chunk.getEntities()) {
 
 	                    data.entityCounts.get(entity.getType()).increment();
                     }
 
-                    for (BlockState tileEntity : chunk.getTileEntities(false)) {
+                    for (final BlockState tileEntity : chunk.getTileEntities(false)) {
 
 	                    data.tileEntityCounts.get(tileEntity.getBlock().getType()).increment();
                     }
@@ -125,7 +125,7 @@ public class TimingHistory {
                     toArrayMapper(regions.values(), new Function<RegionData, @org.checkerframework.checker.nullness.qual.Nullable Object>() {
                         @NotNull
                         @Override
-                        public Object apply(RegionData input) {
+                        public Object apply(final RegionData input) {
                             return toArray(
                                 input.regionId.x,
                                 input.regionId.z,
@@ -133,7 +133,7 @@ public class TimingHistory {
                                     new Function<Map.Entry<EntityType, Counter>, @org.checkerframework.checker.nullness.qual.Nullable JSONPair>() {
                                         @NotNull
                                         @Override
-                                        public JSONPair apply(Map.Entry<EntityType, Counter> entry) {
+                                        public JSONPair apply(final Map.Entry<EntityType, Counter> entry) {
                                             entityTypeSet.add(entry.getKey());
                                             return pair(
                                                 String.valueOf(entry.getKey().ordinal()),
@@ -146,7 +146,7 @@ public class TimingHistory {
                                     new Function<Map.Entry<Material, Counter>, @org.checkerframework.checker.nullness.qual.Nullable JSONPair>() {
                                         @NotNull
                                         @Override
-                                        public JSONPair apply(Map.Entry<Material, Counter> entry) {
+                                        public JSONPair apply(final Map.Entry<Material, Counter> entry) {
                                             tileEntityTypeSet.add(entry.getKey());
                                             return pair(
                                                 String.valueOf(entry.getKey().ordinal()),
@@ -168,16 +168,16 @@ public class TimingHistory {
         static final Function<RegionId, RegionData> LOADER = new Function<>() {
             @NotNull
             @Override
-            public RegionData apply(@NotNull RegionId id) {
+            public RegionData apply(@NotNull final RegionId id) {
                 return new RegionData(id);
             }
         };
-        RegionData(@NotNull RegionId id) {
+        RegionData(@NotNull final RegionId id) {
             this.regionId = id;
         }
 
         @Override
-        public boolean equals(Object o) {
+        public boolean equals(final Object o) {
             if (this == o) {
                 return true;
             }
@@ -185,7 +185,7 @@ public class TimingHistory {
                 return false;
             }
 
-            RegionData that = (RegionData) o;
+            final RegionData that = (RegionData) o;
 
             return regionId.equals(that.regionId);
 
@@ -206,18 +206,18 @@ public class TimingHistory {
         static class RegionId {
             final int x, z;
             final long regionId;
-            RegionId(int x, int z) {
+            RegionId(final int x, final int z) {
                 this.x = x >> 5 << 5;
                 this.z = z >> 5 << 5;
                 this.regionId = ((long) (this.x) << 32) + (this.z >> 5 << 5) - Integer.MIN_VALUE;
             }
 
             @Override
-            public boolean equals(Object o) {
+            public boolean equals(final Object o) {
                 if (this == o) return true;
                 if (o == null || getClass() != o.getClass()) return false;
 
-                RegionId regionId1 = (RegionId) o;
+                final RegionId regionId1 = (RegionId) o;
 
                 return regionId == regionId1.regionId;
 
@@ -229,7 +229,7 @@ public class TimingHistory {
             }
         }
     }
-    static void resetTicks(boolean fullReset) {
+    static void resetTicks(final boolean fullReset) {
         if (fullReset) {
             // Non full is simply for 1 minute reports
             timedTicks = 0;
@@ -252,8 +252,8 @@ public class TimingHistory {
             pair("h", toArrayMapper(entries, new Function<>() {
                 @Nullable
                 @Override
-                public Object apply(TimingHistoryEntry entry) {
-                    TimingData record = entry.data;
+                public Object apply(final TimingHistoryEntry entry) {
+                    final TimingData record = entry.data;
                     if (!record.hasData()) {
                         return null;
                     }
@@ -263,7 +263,7 @@ public class TimingHistory {
             pair("mp", toArrayMapper(minuteReports, new Function<>() {
                 @NotNull
                 @Override
-                public Object apply(MinuteReport input) {
+                public Object apply(final MinuteReport input) {
                     return input.export();
                 }
             }))
@@ -324,7 +324,7 @@ public class TimingHistory {
         PingRecord() {
             final Collection<? extends Player> onlinePlayers = Bukkit.getOnlinePlayers();
             int totalPing = 0;
-            for (Player player : onlinePlayers) {
+            for (final Player player : onlinePlayers) {
                 totalPing += player.spigot().getPing();
             }
             avg = onlinePlayers.isEmpty() ? 0 : totalPing / onlinePlayers.size();
diff --git a/src/main/java/co/aikar/timings/TimingHistoryEntry.java b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
index 7572dfb633781b97c3b1729ba5d1b8c01a1597aa..0e6afb4c4f92255a8271ae4ce38b7b80160edd4f 100644
--- a/src/main/java/co/aikar/timings/TimingHistoryEntry.java
+++ b/src/main/java/co/aikar/timings/TimingHistoryEntry.java
@@ -32,14 +32,14 @@ class TimingHistoryEntry {
     final TimingData data;
     private final TimingData[] children;
 
-    TimingHistoryEntry(@NotNull TimingHandler handler) {
+    TimingHistoryEntry(@NotNull final TimingHandler handler) {
         this.data = handler.record.clone();
         children = handler.cloneChildren();
     }
 
     @NotNull
     List<Object> export() {
-        List<Object> result = data.export();
+        final List<Object> result = data.export();
         if (children.length > 0) {
             result.add(
                 toArrayMapper(children, TimingData::export)
diff --git a/src/main/java/co/aikar/timings/TimingIdentifier.java b/src/main/java/co/aikar/timings/TimingIdentifier.java
index a9dedf9898822aa55d6f7658424d470965afb993..89c9e7015aab8802686cda06887ec95103b1a1a1 100644
--- a/src/main/java/co/aikar/timings/TimingIdentifier.java
+++ b/src/main/java/co/aikar/timings/TimingIdentifier.java
@@ -51,7 +51,7 @@ final class TimingIdentifier {
     final TimingHandler groupHandler;
     private final int hashCode;
 
-    TimingIdentifier(@Nullable String group, @NotNull String name, @Nullable Timing groupHandler) {
+    TimingIdentifier(@Nullable final String group, @NotNull final String name, @Nullable final Timing groupHandler) {
         this.group = group != null ? group: DEFAULT_GROUP.name;
         this.name = name;
         this.groupHandler = groupHandler != null ? groupHandler.getTimingHandler() : null;
@@ -59,7 +59,7 @@ final class TimingIdentifier {
     }
 
     @NotNull
-    static TimingGroup getGroup(@Nullable String groupName) {
+    static TimingGroup getGroup(@Nullable final String groupName) {
         if (groupName == null) {
             //noinspection ConstantConditions
             return DEFAULT_GROUP;
@@ -69,12 +69,12 @@ final class TimingIdentifier {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         if (o == null) {
             return false;
         }
 
-        TimingIdentifier that = (TimingIdentifier) o;
+        final TimingIdentifier that = (TimingIdentifier) o;
         return Objects.equals(group, that.group) && Objects.equals(name, that.name);
     }
 
@@ -96,15 +96,15 @@ final class TimingIdentifier {
         final String name;
         final List<TimingHandler> handlers = Collections.synchronizedList(new ArrayList<>(64));
 
-        private TimingGroup(String name) {
+        private TimingGroup(final String name) {
             this.name = name;
         }
 
         @Override
-        public boolean equals(Object o) {
+        public boolean equals(final Object o) {
             if (this == o) return true;
             if (o == null || getClass() != o.getClass()) return false;
-            TimingGroup that = (TimingGroup) o;
+            final TimingGroup that = (TimingGroup) o;
             return id == that.id;
         }
 
diff --git a/src/main/java/co/aikar/timings/Timings.java b/src/main/java/co/aikar/timings/Timings.java
index be5f5a8dddd4f14b7b10af6a5ec182fb44125428..e8a04fe0454d02552b0e378ead5d94be23b9ae94 100644
--- a/src/main/java/co/aikar/timings/Timings.java
+++ b/src/main/java/co/aikar/timings/Timings.java
@@ -58,7 +58,7 @@ public final class Timings {
      * @return Handler
      */
     @NotNull
-    public static Timing of(@NotNull Plugin plugin, @NotNull String name) {
+    public static Timing of(@NotNull final Plugin plugin, @NotNull final String name) {
         Timing pluginHandler = null;
 	    pluginHandler = ofSafe(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
 	    return of(plugin, name, pluginHandler);
@@ -77,7 +77,7 @@ public final class Timings {
      * @return Timing Handler
      */
     @NotNull
-    public static Timing of(@NotNull Plugin plugin, @NotNull String name, @Nullable Timing groupHandler) {
+    public static Timing of(@NotNull final Plugin plugin, @NotNull final String name, @Nullable final Timing groupHandler) {
         Preconditions.checkNotNull(plugin, "Plugin can not be null");
         return TimingsManager.getHandler(plugin.getName(), name, groupHandler);
     }
@@ -94,7 +94,7 @@ public final class Timings {
      * @return Timing Handler
      */
     @NotNull
-    public static Timing ofStart(@NotNull Plugin plugin, @NotNull String name) {
+    public static Timing ofStart(@NotNull final Plugin plugin, @NotNull final String name) {
         return ofStart(plugin, name, null);
     }
 
@@ -111,8 +111,8 @@ public final class Timings {
      * @return Timing Handler
      */
     @NotNull
-    public static Timing ofStart(@NotNull Plugin plugin, @NotNull String name, @Nullable Timing groupHandler) {
-        Timing timing = of(plugin, name, groupHandler);
+    public static Timing ofStart(@NotNull final Plugin plugin, @NotNull final String name, @Nullable final Timing groupHandler) {
+        final Timing timing = of(plugin, name, groupHandler);
         timing.startTiming();
         return timing;
     }
@@ -133,7 +133,7 @@ public final class Timings {
      *
      * @param enabled Should timings be reported
      */
-    public static void setTimingsEnabled(boolean enabled) {
+    public static void setTimingsEnabled(final boolean enabled) {
         timingsEnabled = enabled;
         reset();
     }
@@ -157,7 +157,7 @@ public final class Timings {
      *
      * @param enabled Should high-frequency timings be reported
      */
-    public static void setVerboseTimingsEnabled(boolean enabled) {
+    public static void setVerboseTimingsEnabled(final boolean enabled) {
         verboseEnabled = enabled;
         TimingsManager.needsRecheckEnabled = true;
     }
@@ -183,7 +183,7 @@ public final class Timings {
      *
      * @param interval Interval in ticks
      */
-    public static void setHistoryInterval(int interval) {
+    public static void setHistoryInterval(final int interval) {
         historyInterval = Math.max(20*60, interval);
         // Recheck the history length with the new Interval
         if (historyLength != -1) {
@@ -213,7 +213,7 @@ public final class Timings {
      *
      * @param length Duration in ticks
      */
-    public static void setHistoryLength(int length) {
+    public static void setHistoryLength(final int length) {
         // Cap at 12 History Frames, 1 hour at 5 minute frames.
         int maxLength = historyInterval * MAX_HISTORY_FRAMES;
         // For special cases of servers with special permission to bypass the max.
@@ -223,8 +223,8 @@ public final class Timings {
             maxLength = Integer.MAX_VALUE;
         }
         historyLength = Math.max(Math.min(maxLength, length), historyInterval);
-        Queue<TimingHistory> oldQueue = TimingsManager.HISTORY;
-        int frames = (getHistoryLength() / getHistoryInterval());
+        final Queue<TimingHistory> oldQueue = TimingsManager.HISTORY;
+        final int frames = (getHistoryLength() / getHistoryInterval());
         if (length > maxLength) {
             Bukkit.getLogger().log(Level.WARNING, "Timings Length too high. Requested " + length + ", max is " + maxLength + ". To get longer history, you must increase your interval. Set Interval to " + Math.ceil(length / MAX_HISTORY_FRAMES) + " to achieve this length.");
         }
@@ -257,7 +257,7 @@ public final class Timings {
      * Use with {@link org.bukkit.command.BufferedCommandSender} to get full response when done!
      * @param sender The listener to send responses too.
      */
-    public static void generateReport(@NotNull TimingsReportListener sender) {
+    public static void generateReport(@NotNull final TimingsReportListener sender) {
         Validate.notNull(sender);
         requestingReport.add(sender);
     }
@@ -269,12 +269,12 @@ public final class Timings {
     =================
     */
     @NotNull
-    static TimingHandler ofSafe(@NotNull String name) {
+    static TimingHandler ofSafe(@NotNull final String name) {
         return ofSafe(null, name, null);
     }
 
     @NotNull
-    static Timing ofSafe(@Nullable Plugin plugin, @NotNull String name) {
+    static Timing ofSafe(@Nullable final Plugin plugin, @NotNull final String name) {
         Timing pluginHandler = null;
         if (plugin != null) {
             pluginHandler = ofSafe(plugin.getName(), "Combined Total", TimingsManager.PLUGIN_GROUP_HANDLER);
@@ -283,12 +283,12 @@ public final class Timings {
     }
 
     @NotNull
-    static TimingHandler ofSafe(@NotNull String name, @Nullable Timing groupHandler) {
+    static TimingHandler ofSafe(@NotNull final String name, @Nullable final Timing groupHandler) {
         return ofSafe(null, name, groupHandler);
     }
 
     @NotNull
-    static TimingHandler ofSafe(@Nullable String groupName, @NotNull String name, @Nullable Timing groupHandler) {
+    static TimingHandler ofSafe(@Nullable final String groupName, @NotNull final String name, @Nullable final Timing groupHandler) {
         return TimingsManager.getHandler(groupName, name, groupHandler);
     }
 }
diff --git a/src/main/java/co/aikar/timings/TimingsCommand.java b/src/main/java/co/aikar/timings/TimingsCommand.java
index 95963f5e11275de59197992473579d3ff0cc7b9d..5a43045f2eabdf5f57c136ab668fabf12dab4bd7 100644
--- a/src/main/java/co/aikar/timings/TimingsCommand.java
+++ b/src/main/java/co/aikar/timings/TimingsCommand.java
@@ -39,7 +39,7 @@ public class TimingsCommand extends BukkitCommand {
     private static final List<String> TIMINGS_SUBCOMMANDS = ImmutableList.of("report", "reset", "on", "off", "paste", "verbon", "verboff");
     private long lastResetAttempt = 0;
 
-    public TimingsCommand(@NotNull String name) {
+    public TimingsCommand(@NotNull final String name) {
         super(name);
         this.description = "Manages Spigot Timings data to see performance of the server.";
         this.usageMessage = "/timings <reset|report|on|off|verbon|verboff>";
@@ -47,7 +47,7 @@ public class TimingsCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String[] args) {
         if (!testPermission(sender)) {
             return true;
         }
@@ -71,7 +71,7 @@ public class TimingsCommand extends BukkitCommand {
             return true;
         }
 
-        long now = System.currentTimeMillis();
+        final long now = System.currentTimeMillis();
         if ("verbon".equalsIgnoreCase(arg)) {
             Timings.setVerboseTimingsEnabled(true);
             sender.sendMessage("Enabled Verbose Timings");
@@ -104,7 +104,7 @@ public class TimingsCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
diff --git a/src/main/java/co/aikar/timings/TimingsManager.java b/src/main/java/co/aikar/timings/TimingsManager.java
index 08cba6586c8b8634981fd6ab69e6ade306246061..eeec16b9713c3492e42bb0cf7f64aae42702f2f9 100644
--- a/src/main/java/co/aikar/timings/TimingsManager.java
+++ b/src/main/java/co/aikar/timings/TimingsManager.java
@@ -73,9 +73,9 @@ public final class TimingsManager {
      */
     static void tick() {
         if (Timings.timingsEnabled) {
-            boolean violated = FULL_SERVER_TICK.isViolated();
+            final boolean violated = FULL_SERVER_TICK.isViolated();
 
-            for (TimingHandler handler : HANDLERS) {
+            for (final TimingHandler handler : HANDLERS) {
                 if (handler.isSpecial()) {
                     // We manually call this
                     continue;
@@ -94,7 +94,7 @@ public final class TimingsManager {
     }
     static void recheckEnabled() {
         synchronized (TIMING_MAP) {
-            for (TimingHandler timings : TIMING_MAP.values()) {
+            for (final TimingHandler timings : TIMING_MAP.values()) {
                 timings.checkEnabled();
             }
         }
@@ -105,7 +105,7 @@ public final class TimingsManager {
             // Full resets need to re-check every handlers enabled state
             // Timing map can be modified from async so we must sync on it.
             synchronized (TIMING_MAP) {
-                for (TimingHandler timings : TIMING_MAP.values()) {
+                for (final TimingHandler timings : TIMING_MAP.values()) {
                     timings.reset(true);
                 }
             }
@@ -117,7 +117,7 @@ public final class TimingsManager {
         } else {
             // Soft resets only need to act on timings that have done something
             // Handlers can only be modified on main thread.
-            for (TimingHandler timings : HANDLERS) {
+            for (final TimingHandler timings : HANDLERS) {
                 timings.reset(false);
             }
         }
@@ -130,7 +130,7 @@ public final class TimingsManager {
     }
 
     @NotNull
-    static TimingHandler getHandler(@Nullable String group, @NotNull String name, @Nullable Timing parent) {
+    static TimingHandler getHandler(@Nullable final String group, @NotNull final String name, @Nullable final Timing parent) {
         return TIMING_MAP.get(new TimingIdentifier(group, name, parent));
     }
 
@@ -145,7 +145,7 @@ public final class TimingsManager {
      * @return TimingHandler
      */
     @NotNull
-    public static Timing getCommandTiming(@Nullable String pluginName, @NotNull Command command) {
+    public static Timing getCommandTiming(@Nullable final String pluginName, @NotNull final Command command) {
         Plugin plugin = null;
         final Server server = Bukkit.getServer();
         if (!(pluginName == null || "minecraft".equals(pluginName) || "bukkit".equals(pluginName) || "spigot".equalsIgnoreCase(pluginName) || "paper".equals(pluginName)
@@ -171,13 +171,13 @@ public final class TimingsManager {
      * @return Plugin if created by a plugin
      */
     @Nullable
-    public static Plugin getPluginByClassloader(@Nullable Class<?> clazz) {
+    public static Plugin getPluginByClassloader(@Nullable final Class<?> clazz) {
         if (clazz == null) {
             return null;
         }
         final ClassLoader classLoader = clazz.getClassLoader();
         if (classLoader instanceof PluginClassLoader) {
-            PluginClassLoader pluginClassLoader = (PluginClassLoader) classLoader;
+            final PluginClassLoader pluginClassLoader = (PluginClassLoader) classLoader;
             return pluginClassLoader.getPlugin();
         }
         return null;
diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java
index 1c8a3fa0d0c8c814a9e849c8f12819471f482346..16c01c459a1a96320a7703ea0ceb14b6c1b2a2d8 100644
--- a/src/main/java/co/aikar/timings/TimingsReportListener.java
+++ b/src/main/java/co/aikar/timings/TimingsReportListener.java
@@ -19,16 +19,16 @@ public class TimingsReportListener implements net.kyori.adventure.audience.Forwa
     private final Runnable onDone;
     private String timingsURL;
 
-    public TimingsReportListener(@NotNull CommandSender senders) {
+    public TimingsReportListener(@NotNull final CommandSender senders) {
         this(senders, null);
     }
-    public TimingsReportListener(@NotNull CommandSender sender, @Nullable Runnable onDone) {
+    public TimingsReportListener(@NotNull final CommandSender sender, @Nullable final Runnable onDone) {
         this(Lists.newArrayList(sender), onDone);
     }
-    public TimingsReportListener(@NotNull List<CommandSender> senders) {
+    public TimingsReportListener(@NotNull final List<CommandSender> senders) {
         this(senders, null);
     }
-    public TimingsReportListener(@NotNull List<CommandSender> senders, @Nullable Runnable onDone) {
+    public TimingsReportListener(@NotNull final List<CommandSender> senders, @Nullable final Runnable onDone) {
         Validate.notNull(senders);
         Validate.notEmpty(senders);
 
@@ -45,12 +45,12 @@ public class TimingsReportListener implements net.kyori.adventure.audience.Forwa
         done(null);
     }
 
-    public void done(@Nullable String url) {
+    public void done(@Nullable final String url) {
         this.timingsURL = url;
         if (onDone != null) {
             onDone.run();
         }
-        for (CommandSender sender : senders) {
+        for (final CommandSender sender : senders) {
             if (sender instanceof TimingsReportListener) {
                 ((TimingsReportListener) sender).done();
             }
@@ -58,13 +58,13 @@ public class TimingsReportListener implements net.kyori.adventure.audience.Forwa
     }
 
     @Override
-    public void sendMessage(@NotNull String message) {
+    public void sendMessage(@NotNull final String message) {
         senders.forEach((sender) -> sender.sendMessage(message));
     }
 
     public void addConsoleIfNeeded() {
         boolean hasConsole = false;
-        for (CommandSender sender : this.senders) {
+        for (final CommandSender sender : this.senders) {
 	        if (sender instanceof ConsoleCommandSender || sender instanceof RemoteConsoleCommandSender) {
 		        hasConsole = true;
 		        break;
diff --git a/src/main/java/co/aikar/timings/UnsafeTimingHandler.java b/src/main/java/co/aikar/timings/UnsafeTimingHandler.java
index 632c4961515f5052551f841cfa840e60bba7a257..3f3ac219889e348af23dd96efd2a08385d789748 100644
--- a/src/main/java/co/aikar/timings/UnsafeTimingHandler.java
+++ b/src/main/java/co/aikar/timings/UnsafeTimingHandler.java
@@ -28,7 +28,7 @@ import org.jetbrains.annotations.NotNull;
 
 class UnsafeTimingHandler extends TimingHandler {
 
-    UnsafeTimingHandler(@NotNull TimingIdentifier id) {
+    UnsafeTimingHandler(@NotNull final TimingIdentifier id) {
         super(id);
     }
 
diff --git a/src/main/java/co/aikar/util/Counter.java b/src/main/java/co/aikar/util/Counter.java
index baf5ba2c15b213773f1f99d0860692788b2e7a8b..a709da7f404b93c1b506f55a6b7a150b59ef211f 100644
--- a/src/main/java/co/aikar/util/Counter.java
+++ b/src/main/java/co/aikar/util/Counter.java
@@ -10,23 +10,23 @@ import java.util.Map;
 public class Counter <T> extends ForwardingMap<T, Long> {
     private final Map<T, Long> counts = new HashMap<>();
 
-    public long decrement(@Nullable T key) {
+    public long decrement(@Nullable final T key) {
         return increment(key, -1);
     }
-    public long increment(@Nullable T key) {
+    public long increment(@Nullable final T key) {
         return increment(key, 1);
     }
-    public long decrement(@Nullable T key, long amount) {
+    public long decrement(@Nullable final T key, final long amount) {
         return decrement(key, -amount);
     }
-    public long increment(@Nullable T key, long amount) {
+    public long increment(@Nullable final T key, final long amount) {
         long count = this.getCount(key);
         count += amount;
         this.counts.put(key, count);
         return count;
     }
 
-    public long getCount(@Nullable T key) {
+    public long getCount(@Nullable final T key) {
         return this.counts.getOrDefault(key, 0L);
     }
 
diff --git a/src/main/java/co/aikar/util/JSONUtil.java b/src/main/java/co/aikar/util/JSONUtil.java
index 7b0cf8a89d65f175df47a7dff0aa800ef91bc95c..e06c9938d92bf66f8c300ff21c5c20aeec8546c7 100644
--- a/src/main/java/co/aikar/util/JSONUtil.java
+++ b/src/main/java/co/aikar/util/JSONUtil.java
@@ -25,12 +25,12 @@ public final class JSONUtil {
      * @return JSONPair
      */
     @NotNull
-    public static JSONPair pair(@NotNull String key, @Nullable Object obj) {
+    public static JSONPair pair(@NotNull final String key, @Nullable final Object obj) {
         return new JSONPair(key, obj);
     }
 
     @NotNull
-    public static JSONPair pair(long key, @Nullable Object obj) {
+    public static JSONPair pair(final long key, @Nullable final Object obj) {
         return new JSONPair(String.valueOf(key), obj);
     }
 
@@ -41,7 +41,7 @@ public final class JSONUtil {
      * @return Map
      */
     @NotNull
-    public static Map<String, Object> createObject(@NotNull JSONPair... data) {
+    public static Map<String, Object> createObject(@NotNull final JSONPair... data) {
         return appendObjectData(new LinkedHashMap(), data);
     }
 
@@ -53,8 +53,8 @@ public final class JSONUtil {
      * @return Map
      */
     @NotNull
-    public static Map<String, Object> appendObjectData(@NotNull Map parent, @NotNull JSONPair... data) {
-        for (JSONPair JSONPair : data) {
+    public static Map<String, Object> appendObjectData(@NotNull final Map parent, @NotNull final JSONPair... data) {
+        for (final JSONPair JSONPair : data) {
             parent.put(JSONPair.key, JSONPair.val);
         }
         return parent;
@@ -67,7 +67,7 @@ public final class JSONUtil {
      * @return List
      */
     @NotNull
-    public static List toArray(@NotNull Object... data) {
+    public static List toArray(@NotNull final Object... data) {
         return Lists.newArrayList(data);
     }
 
@@ -80,15 +80,15 @@ public final class JSONUtil {
      * @return List
      */
     @NotNull
-    public static <E> List toArrayMapper(@NotNull E[] collection, @NotNull Function<E, Object> mapper) {
+    public static <E> List toArrayMapper(@NotNull final E[] collection, @NotNull final Function<E, Object> mapper) {
         return toArrayMapper(Lists.newArrayList(collection), mapper);
     }
 
     @NotNull
-    public static <E> List toArrayMapper(@NotNull Iterable<E> collection, @NotNull Function<E, Object> mapper) {
-        List array = Lists.newArrayList();
-        for (E e : collection) {
-            Object object = mapper.apply(e);
+    public static <E> List toArrayMapper(@NotNull final Iterable<E> collection, @NotNull final Function<E, Object> mapper) {
+        final List array = Lists.newArrayList();
+        for (final E e : collection) {
+            final Object object = mapper.apply(e);
             if (object != null) {
                 array.add(object);
             }
@@ -105,15 +105,15 @@ public final class JSONUtil {
      * @return Map
      */
     @NotNull
-    public static <E> Map toObjectMapper(@NotNull E[] collection, @NotNull Function<E, JSONPair> mapper) {
+    public static <E> Map toObjectMapper(@NotNull final E[] collection, @NotNull final Function<E, JSONPair> mapper) {
         return toObjectMapper(Lists.newArrayList(collection), mapper);
     }
 
     @NotNull
-    public static <E> Map toObjectMapper(@NotNull Iterable<E> collection, @NotNull Function<E, JSONPair> mapper) {
-        Map object = Maps.newLinkedHashMap();
-        for (E e : collection) {
-            JSONPair JSONPair = mapper.apply(e);
+    public static <E> Map toObjectMapper(@NotNull final Iterable<E> collection, @NotNull final Function<E, JSONPair> mapper) {
+        final Map object = Maps.newLinkedHashMap();
+        for (final E e : collection) {
+            final JSONPair JSONPair = mapper.apply(e);
             if (JSONPair != null) {
                 object.put(JSONPair.key, JSONPair.val);
             }
@@ -129,7 +129,7 @@ public final class JSONUtil {
         final String key;
         final Object val;
 
-        JSONPair(@NotNull String key, @NotNull Object val) {
+        JSONPair(@NotNull final String key, @NotNull final Object val) {
             this.key = key;
             this.val = val;
         }
diff --git a/src/main/java/co/aikar/util/LoadingIntMap.java b/src/main/java/co/aikar/util/LoadingIntMap.java
index 63a899c7dbdb69daa4876a2ce2a7dfb734b5af9d..abd1c33a84dfde8cfab6f34b0e3fcba04f37cb3b 100644
--- a/src/main/java/co/aikar/util/LoadingIntMap.java
+++ b/src/main/java/co/aikar/util/LoadingIntMap.java
@@ -29,17 +29,17 @@ import org.jetbrains.annotations.Nullable;
 public class LoadingIntMap<V> extends Int2ObjectOpenHashMap<V> {
     private final Function<Integer, V> loader;
 
-    public LoadingIntMap(@NotNull Function<Integer, V> loader) {
+    public LoadingIntMap(@NotNull final Function<Integer, V> loader) {
         super();
         this.loader = loader;
     }
 
-    public LoadingIntMap(int expectedSize, @NotNull Function<Integer, V> loader) {
+    public LoadingIntMap(final int expectedSize, @NotNull final Function<Integer, V> loader) {
         super(expectedSize);
         this.loader = loader;
     }
 
-    public LoadingIntMap(int expectedSize, float loadFactor, @NotNull Function<Integer, V> loader) {
+    public LoadingIntMap(final int expectedSize, final float loadFactor, @NotNull final Function<Integer, V> loader) {
         super(expectedSize, loadFactor);
         this.loader = loader;
     }
@@ -47,7 +47,7 @@ public class LoadingIntMap<V> extends Int2ObjectOpenHashMap<V> {
 
     @Nullable
     @Override
-    public V get(int key) {
+    public V get(final int key) {
         V res = super.get(key);
         if (res == null) {
             res = loader.apply(key);
@@ -66,7 +66,7 @@ public class LoadingIntMap<V> extends Int2ObjectOpenHashMap<V> {
     public abstract static class Feeder <T> implements Function<T, T> {
         @Nullable
         @Override
-        public T apply(@Nullable Object input) {
+        public T apply(@Nullable final Object input) {
             return apply();
         }
 
diff --git a/src/main/java/co/aikar/util/LoadingMap.java b/src/main/java/co/aikar/util/LoadingMap.java
index baa038a55cbd1a9ad9053e230b07b20cda12b0fa..a03e20f8ab69da1fcb6bcb1cd6ef641d4ec2843e 100644
--- a/src/main/java/co/aikar/util/LoadingMap.java
+++ b/src/main/java/co/aikar/util/LoadingMap.java
@@ -58,7 +58,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @param backingMap Map to wrap
      * @param loader Loader
      */
-    public LoadingMap(@NotNull Map<K, V> backingMap, @NotNull java.util.function.Function<K, V> loader) {
+    public LoadingMap(@NotNull final Map<K, V> backingMap, @NotNull final java.util.function.Function<K, V> loader) {
         this.backingMap = backingMap;
         this.loader = loader;
     }
@@ -73,7 +73,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> of(@NotNull Map<K, V> backingMap, @NotNull Function<K, V> loader) {
+    public static <K, V> Map<K, V> of(@NotNull final Map<K, V> backingMap, @NotNull final Function<K, V> loader) {
         return new LoadingMap<>(backingMap, loader);
     }
 
@@ -93,7 +93,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newAutoMap(@NotNull Map<K, V> backingMap, @Nullable final Class<? extends K> keyClass,
+    public static <K, V> Map<K, V> newAutoMap(@NotNull final Map<K, V> backingMap, @Nullable final Class<? extends K> keyClass,
                                               @NotNull final Class<? extends V> valueClass) {
         return new LoadingMap<>(backingMap, new AutoInstantiatingLoader<>(keyClass, valueClass));
     }
@@ -112,7 +112,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newAutoMap(@NotNull Map<K, V> backingMap,
+    public static <K, V> Map<K, V> newAutoMap(@NotNull final Map<K, V> backingMap,
                                               @NotNull final Class<? extends V> valueClass) {
         return newAutoMap(backingMap, null, valueClass);
     }
@@ -162,7 +162,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashAutoMap(@Nullable final Class<? extends K> keyClass, @NotNull final Class<? extends V> valueClass, int initialCapacity, float loadFactor) {
+    public static <K, V> Map<K, V> newHashAutoMap(@Nullable final Class<? extends K> keyClass, @NotNull final Class<? extends V> valueClass, final int initialCapacity, final float loadFactor) {
         return newAutoMap(new HashMap<>(initialCapacity, loadFactor), keyClass, valueClass);
     }
 
@@ -179,7 +179,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return  Map that auto instantiates on .get()
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashAutoMap(@NotNull final Class<? extends V> valueClass, int initialCapacity, float loadFactor) {
+    public static <K, V> Map<K, V> newHashAutoMap(@NotNull final Class<? extends V> valueClass, final int initialCapacity, final float loadFactor) {
         return newHashAutoMap(null, valueClass, initialCapacity, loadFactor);
     }
 
@@ -192,7 +192,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashMap(@NotNull Function<K, V> loader) {
+    public static <K, V> Map<K, V> newHashMap(@NotNull final Function<K, V> loader) {
         return new LoadingMap<>(new HashMap<>(), loader);
     }
 
@@ -206,7 +206,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashMap(@NotNull Function<K, V> loader, int initialCapacity) {
+    public static <K, V> Map<K, V> newHashMap(@NotNull final Function<K, V> loader, final int initialCapacity) {
         return new LoadingMap<>(new HashMap<>(initialCapacity), loader);
     }
     /**
@@ -220,7 +220,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newHashMap(@NotNull Function<K, V> loader, int initialCapacity, float loadFactor) {
+    public static <K, V> Map<K, V> newHashMap(@NotNull final Function<K, V> loader, final int initialCapacity, final float loadFactor) {
         return new LoadingMap<>(new HashMap<>(initialCapacity, loadFactor), loader);
     }
 
@@ -233,7 +233,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull Function<K, V> loader) {
+    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull final Function<K, V> loader) {
         return new LoadingMap<>(new IdentityHashMap<>(), loader);
     }
 
@@ -247,7 +247,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull Function<K, V> loader, int initialCapacity) {
+    public static <K, V> Map<K, V> newIdentityHashMap(@NotNull final Function<K, V> loader, final int initialCapacity) {
         return new LoadingMap<>(new IdentityHashMap<>(initialCapacity), loader);
     }
 
@@ -258,15 +258,15 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     public boolean isEmpty() {return backingMap.isEmpty();}
 
     @Override
-    public boolean containsKey(@Nullable Object key) {return backingMap.containsKey(key);}
+    public boolean containsKey(@Nullable final Object key) {return backingMap.containsKey(key);}
 
     @Override
-    public boolean containsValue(@Nullable Object value) {return backingMap.containsValue(value);}
+    public boolean containsValue(@Nullable final Object value) {return backingMap.containsValue(value);}
 
     @Nullable
     @Override
-    public V get(@Nullable Object key) {
-        V v = backingMap.get(key);
+    public V get(@Nullable final Object key) {
+        final V v = backingMap.get(key);
         if (v != null) {
             return v;
         }
@@ -274,13 +274,13 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     }
 
     @Nullable
-    public V put(@Nullable K key, @Nullable V value) {return backingMap.put(key, value);}
+    public V put(@Nullable final K key, @Nullable final V value) {return backingMap.put(key, value);}
 
     @Nullable
     @Override
-    public V remove(@Nullable Object key) {return backingMap.remove(key);}
+    public V remove(@Nullable final Object key) {return backingMap.remove(key);}
 
-    public void putAll(@NotNull Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
+    public void putAll(@NotNull final Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
 
     @Override
     public void clear() {backingMap.clear();}
@@ -294,7 +294,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     public Collection<V> values() {return backingMap.values();}
 
     @Override
-    public boolean equals(@Nullable Object o) {return backingMap.equals(o);}
+    public boolean equals(@Nullable final Object o) {return backingMap.equals(o);}
 
     @Override
     public int hashCode() {return backingMap.hashCode();}
@@ -315,7 +315,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
         final Constructor<? extends V> constructor;
         private final Class<? extends V> valueClass;
 
-        AutoInstantiatingLoader(@Nullable Class<? extends K> keyClass, @NotNull Class<? extends V> valueClass) {
+        AutoInstantiatingLoader(@Nullable final Class<? extends K> keyClass, @NotNull final Class<? extends V> valueClass) {
             try {
                 this.valueClass = valueClass;
                 if (keyClass != null) {
@@ -323,7 +323,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
                 } else {
                     constructor = null;
                 }
-            } catch (NoSuchMethodException e) {
+            } catch (final NoSuchMethodException e) {
                 throw new IllegalStateException(
 	                valueClass.getName() + " does not have a constructor for " + keyClass.getName());
             }
@@ -331,10 +331,10 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
 
         @NotNull
         @Override
-        public V apply(@Nullable K input) {
+        public V apply(@Nullable final K input) {
             try {
                 return (constructor != null ? constructor.newInstance(input) : valueClass.newInstance());
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 throw new ExceptionInInitializerError(e);
             }
         }
@@ -345,7 +345,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
         }
 
         @Override
-        public boolean equals(Object object) {
+        public boolean equals(final Object object) {
             return false;
         }
     }
@@ -358,7 +358,7 @@ public class LoadingMap <K, V> extends AbstractMap<K, V> {
     public abstract static class Feeder <T> implements Function<T, T> {
         @Nullable
         @Override
-        public T apply(@Nullable Object input) {
+        public T apply(@Nullable final Object input) {
             return apply();
         }
 
diff --git a/src/main/java/co/aikar/util/MRUMapCache.java b/src/main/java/co/aikar/util/MRUMapCache.java
index d7aa8cb9854d98a164e1aa59e4ba77379b49dd9a..fc52b3661be0ceabbbd48e9ddf8d7f2f9628b62f 100644
--- a/src/main/java/co/aikar/util/MRUMapCache.java
+++ b/src/main/java/co/aikar/util/MRUMapCache.java
@@ -48,16 +48,16 @@ public class MRUMapCache<K, V> extends AbstractMap<K, V> {
 
     public boolean isEmpty() {return backingMap.isEmpty();}
 
-    public boolean containsKey(@Nullable Object key) {
+    public boolean containsKey(@Nullable final Object key) {
         return key != null && key.equals(cacheKey) || backingMap.containsKey(key);
     }
 
-    public boolean containsValue(@Nullable Object value) {
+    public boolean containsValue(@Nullable final Object value) {
         return value != null && value == cacheValue || backingMap.containsValue(value);
     }
 
     @Nullable
-    public V get(@Nullable Object key) {
+    public V get(@Nullable final Object key) {
         if (cacheKey != null && cacheKey.equals(key)) {
             return cacheValue;
         }
@@ -66,20 +66,20 @@ public class MRUMapCache<K, V> extends AbstractMap<K, V> {
     }
 
     @Nullable
-    public V put(@Nullable K key, @Nullable V value) {
+    public V put(@Nullable final K key, @Nullable final V value) {
         cacheKey = key;
         return cacheValue = backingMap.put(key, value);
     }
 
     @Nullable
-    public V remove(@Nullable Object key) {
+    public V remove(@Nullable final Object key) {
         if (key != null && key.equals(cacheKey)) {
             cacheKey = null;
         }
         return backingMap.remove(key);
     }
 
-    public void putAll(@NotNull Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
+    public void putAll(@NotNull final Map<? extends K, ? extends V> m) {backingMap.putAll(m);}
 
     public void clear() {
         cacheKey = null;
@@ -105,7 +105,7 @@ public class MRUMapCache<K, V> extends AbstractMap<K, V> {
      * @return Map
      */
     @NotNull
-    public static <K, V> Map<K, V> of(@NotNull Map<K, V> map) {
+    public static <K, V> Map<K, V> of(@NotNull final Map<K, V> map) {
         return new MRUMapCache<>(map);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/ClientOption.java b/src/main/java/com/destroystokyo/paper/ClientOption.java
index 9dad814cf51bc59ec5dfbf14474fea6557de38aa..0048b3a36696715f50deac241cd87651a3d12f73 100644
--- a/src/main/java/com/destroystokyo/paper/ClientOption.java
+++ b/src/main/java/com/destroystokyo/paper/ClientOption.java
@@ -15,7 +15,7 @@ public final class ClientOption<T> {
 
     private final Class<T> type;
 
-    private ClientOption(@NotNull Class<T> type) {
+    private ClientOption(@NotNull final Class<T> type) {
         this.type = type;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
index c38094b6ce0d68a8be10e7afd2958368ac5273e6..effcff77d3be6981600c35490607f3e0320881a8 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
@@ -27,7 +27,7 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
      * @deprecated Use NamespacedKey version of constructor
      */
     @Deprecated
-    public MaterialSetTag(@NotNull Predicate<Material> filter) {
+    public MaterialSetTag(@NotNull final Predicate<Material> filter) {
         this(null, Stream.of(Material.values()).filter(filter).collect(Collectors.toList()));
     }
 
@@ -35,7 +35,7 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
      * @deprecated Use NamespacedKey version of constructor
      */
     @Deprecated
-    public MaterialSetTag(@NotNull Collection<Material> materials) {
+    public MaterialSetTag(@NotNull final Collection<Material> materials) {
         this(null, materials);
     }
 
@@ -43,24 +43,24 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
      * @deprecated Use NamespacedKey version of constructor
      */
     @Deprecated
-    public MaterialSetTag(@NotNull Material... materials) {
+    public MaterialSetTag(@NotNull final Material... materials) {
         this(null, materials);
     }
 
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Predicate<Material> filter) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Predicate<Material> filter) {
         this(key, Stream.of(Material.values()).filter(filter).collect(Collectors.toList()));
     }
 
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Material... materials) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Material... materials) {
         this(key, Lists.newArrayList(materials));
     }
 
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Collection<Material> materials) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Collection<Material> materials) {
         this(key != null ? key : NamespacedKey.randomKey(), materials, ((Predicate<Material>) Material::isLegacy).negate());
     }
 
     @SafeVarargs
-    public MaterialSetTag(@Nullable NamespacedKey key, @NotNull Collection<Material> materials, @NotNull Predicate<Material>...globalPredicates) {
+    public MaterialSetTag(@Nullable final NamespacedKey key, @NotNull final Collection<Material> materials, @NotNull final Predicate<Material>...globalPredicates) {
         super(Material.class, key != null ? key : NamespacedKey.randomKey(), materials, globalPredicates);
     }
 
@@ -72,27 +72,27 @@ public class MaterialSetTag extends BaseTag<Material, MaterialSetTag> {
 
     @Override
     @NotNull
-    protected String getName(@NotNull Material value) {
+    protected String getName(@NotNull final Material value) {
         return value.name();
     }
 
-    public boolean isTagged(@NotNull BlockData block) {
+    public boolean isTagged(@NotNull final BlockData block) {
         return isTagged(block.getMaterial());
     }
 
-    public boolean isTagged(@NotNull BlockState block) {
+    public boolean isTagged(@NotNull final BlockState block) {
         return isTagged(block.getType());
     }
 
-    public boolean isTagged(@NotNull Block block) {
+    public boolean isTagged(@NotNull final Block block) {
         return isTagged(block.getType());
     }
 
-    public boolean isTagged(@NotNull ItemStack item) {
+    public boolean isTagged(@NotNull final ItemStack item) {
         return isTagged(item.getType());
     }
 
-    public boolean isTagged(@NotNull Material material) {
+    public boolean isTagged(@NotNull final Material material) {
         return this.tagged.contains(material);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/MaterialTags.java b/src/main/java/com/destroystokyo/paper/MaterialTags.java
index 94b09cd53ed9932f7b0998bd408fe96c142b94e7..205461ae32d72d9569b6b99da4fa96b46fbb7df7 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialTags.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialTags.java
@@ -34,7 +34,7 @@ import org.bukkit.Tag;
 @SuppressWarnings({"NonFinalUtilityClass", "unused", "WeakerAccess"})
 public class MaterialTags {
 
-    private static NamespacedKey keyFor(String key) {
+    private static NamespacedKey keyFor(final String key) {
         //noinspection deprecation
         return new NamespacedKey("paper", key + "_settag");
     }
diff --git a/src/main/java/com/destroystokyo/paper/NamespacedTag.java b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
index 45339395469507886806130a55f4ffdec6e43b2a..046cfabd153e8b5069fc9d48fa356c6d67879b40 100644
--- a/src/main/java/com/destroystokyo/paper/NamespacedTag.java
+++ b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
@@ -45,14 +45,14 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @deprecated should never be used by plugins, for internal use only!!
      */
     @Deprecated
-    public NamespacedTag(@NotNull String namespace, @NotNull String key) {
+    public NamespacedTag(@NotNull final String namespace, @NotNull final String key) {
         Preconditions.checkArgument(VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
         Preconditions.checkArgument(VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
 
         this.namespace = namespace;
         this.key = key;
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedTag must be less than 256 characters", string);
     }
 
@@ -68,7 +68,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @param plugin the plugin to use for the namespace
      * @param key the key to create
      */
-    public NamespacedTag(@NotNull Plugin plugin, @NotNull String key) {
+    public NamespacedTag(@NotNull final Plugin plugin, @NotNull final String key) {
         Preconditions.checkArgument(true, "Plugin cannot be null");
         Preconditions.checkArgument(true, "Key cannot be null");
 
@@ -79,7 +79,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
         Preconditions.checkArgument(VALID_NAMESPACE.matcher(this.namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", this.namespace);
         Preconditions.checkArgument(VALID_KEY.matcher(this.key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", this.key);
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedTag must be less than 256 characters (%s)", string);
     }
 
@@ -102,7 +102,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -136,7 +136,7 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      * @return new key in the Minecraft namespace
      */
     @NotNull
-    public static NamespacedTag minecraft(@NotNull String key) {
+    public static NamespacedTag minecraft(@NotNull final String key) {
         return new NamespacedTag(MINECRAFT, key);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
index 06f1602f5b327705f726d0a99dd6b95e1554d382..5c829a38875bc985b99dd2103a3677083774495e 100644
--- a/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
+++ b/src/main/java/com/destroystokyo/paper/ParticleBuilder.java
@@ -30,7 +30,7 @@ public class ParticleBuilder {
     private Object data;
     private boolean force = true;
 
-    public ParticleBuilder(@NotNull Particle particle) {
+    public ParticleBuilder(@NotNull final Particle particle) {
         this.particle = particle;
     }
 
@@ -67,7 +67,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder particle(@NotNull Particle particle) {
+    public ParticleBuilder particle(@NotNull final Particle particle) {
         this.particle = particle;
         return this;
     }
@@ -112,7 +112,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(@Nullable List<Player> receivers) {
+    public ParticleBuilder receivers(@Nullable final List<Player> receivers) {
         // Had to keep this as we first made API List<> and not Collection, but removing this may break plugins compiled on older jars
         // TODO: deprecate?
         this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
@@ -125,7 +125,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(@Nullable Collection<Player> receivers) {
+    public ParticleBuilder receivers(@Nullable final Collection<Player> receivers) {
         this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
         return this;
     }
@@ -136,7 +136,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(@Nullable Player... receivers) {
+    public ParticleBuilder receivers(@Nullable final Player... receivers) {
         this.receivers = receivers != null ? Lists.newArrayList(receivers) : null;
         return this;
     }
@@ -150,7 +150,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int radius) {
+    public ParticleBuilder receivers(final int radius) {
         return receivers(radius, radius);
     }
 
@@ -164,17 +164,17 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int radius, boolean byDistance) {
+    public ParticleBuilder receivers(final int radius, final boolean byDistance) {
         if (!byDistance) {
             return receivers(radius, radius, radius);
         } else {
             this.receivers = Lists.newArrayList();
-            for (Player nearbyPlayer : location.getWorld()
+            for (final Player nearbyPlayer : location.getWorld()
                 .getNearbyPlayers(location, radius, radius, radius)) {
-                Location loc = nearbyPlayer.getLocation();
-                double x = NumberConversions.square(location.getX() - loc.getX());
-                double y = NumberConversions.square(location.getY() - loc.getY());
-                double z = NumberConversions.square(location.getZ() - loc.getZ());
+                final Location loc = nearbyPlayer.getLocation();
+                final double x = NumberConversions.square(location.getX() - loc.getX());
+                final double y = NumberConversions.square(location.getY() - loc.getY());
+                final double z = NumberConversions.square(location.getZ() - loc.getZ());
                 if (Math.sqrt(x + y + z) > radius) {
                     continue;
                 }
@@ -195,7 +195,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int xzRadius, int yRadius) {
+    public ParticleBuilder receivers(final int xzRadius, final int yRadius) {
         return receivers(xzRadius, yRadius, xzRadius);
     }
 
@@ -210,19 +210,19 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int xzRadius, int yRadius, boolean byDistance) {
+    public ParticleBuilder receivers(final int xzRadius, final int yRadius, final boolean byDistance) {
         if (!byDistance) {
             return receivers(xzRadius, yRadius, xzRadius);
         } else {
             this.receivers = Lists.newArrayList();
-            for (Player nearbyPlayer : location.getWorld()
+            for (final Player nearbyPlayer : location.getWorld()
                 .getNearbyPlayers(location, xzRadius, yRadius, xzRadius)) {
-                Location loc = nearbyPlayer.getLocation();
+                final Location loc = nearbyPlayer.getLocation();
                 if (Math.abs(loc.getY() - this.location.getY()) > yRadius) {
                     continue;
                 }
-                double x = NumberConversions.square(location.getX() - loc.getX());
-                double z = NumberConversions.square(location.getZ() - loc.getZ());
+                final double x = NumberConversions.square(location.getX() - loc.getX());
+                final double z = NumberConversions.square(location.getZ() - loc.getZ());
                 if (x + z > NumberConversions.square(xzRadius)) {
                     continue;
                 }
@@ -243,7 +243,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder receivers(int xRadius, int yRadius, int zRadius) {
+    public ParticleBuilder receivers(final int xRadius, final int yRadius, final int zRadius) {
         if (location == null) {
             throw new IllegalStateException("Please set location first");
         }
@@ -265,7 +265,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder source(@Nullable Player source) {
+    public ParticleBuilder source(@Nullable final Player source) {
         this.source = source;
         return this;
     }
@@ -285,7 +285,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder location(@NotNull Location location) {
+    public ParticleBuilder location(@NotNull final Location location) {
         this.location = location.clone();
         return this;
     }
@@ -300,7 +300,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder location(@NotNull World world, double x, double y, double z) {
+    public ParticleBuilder location(@NotNull final World world, final double x, final double y, final double z) {
         this.location = new Location(world, x, y, z);
         return this;
     }
@@ -319,7 +319,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder count(int count) {
+    public ParticleBuilder count(final int count) {
         this.count = count;
         return this;
     }
@@ -360,7 +360,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder offset(double offsetX, double offsetY, double offsetZ) {
+    public ParticleBuilder offset(final double offsetX, final double offsetY, final double offsetZ) {
         this.offsetX = offsetX;
         this.offsetY = offsetY;
         this.offsetZ = offsetZ;
@@ -383,7 +383,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder extra(double extra) {
+    public ParticleBuilder extra(final double extra) {
         this.extra = extra;
         return this;
     }
@@ -408,7 +408,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public <T> ParticleBuilder data(@Nullable T data) {
+    public <T> ParticleBuilder data(@Nullable final T data) {
         this.data = data;
         return this;
     }
@@ -422,7 +422,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder force(boolean force) {
+    public ParticleBuilder force(final boolean force) {
         this.force = force;
         return this;
     }
@@ -434,7 +434,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder color(@Nullable Color color) {
+    public ParticleBuilder color(@Nullable final Color color) {
         return color(color, 1);
     }
 
@@ -446,7 +446,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder color(@Nullable Color color, float size) {
+    public ParticleBuilder color(@Nullable final Color color, final float size) {
         if (particle != Particle.REDSTONE && color != null) {
             throw new IllegalStateException("Color may only be set on REDSTONE");
         }
@@ -472,7 +472,7 @@ public class ParticleBuilder {
      * @return a reference to this object.
      */
     @NotNull
-    public ParticleBuilder color(int r, int g, int b) {
+    public ParticleBuilder color(final int r, final int g, final int b) {
         return color(Color.fromRGB(r, g, b));
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/Title.java b/src/main/java/com/destroystokyo/paper/Title.java
index 644d6c9c3b72538cd0fcff4d8c588fec53d698f5..999ed9ae8d8570be2e51d5c08b37ed990734ebae 100644
--- a/src/main/java/com/destroystokyo/paper/Title.java
+++ b/src/main/java/com/destroystokyo/paper/Title.java
@@ -51,7 +51,7 @@ public final class Title {
      * @param title the main text of the title
      * @throws NullPointerException if the title is null
      */
-    public Title(@NotNull BaseComponent title) {
+    public Title(@NotNull final BaseComponent title) {
         this(title, null);
     }
 
@@ -63,7 +63,7 @@ public final class Title {
      * @param title the main text of the title
      * @throws NullPointerException if the title is null
      */
-    public Title(@NotNull BaseComponent[] title) {
+    public Title(@NotNull final BaseComponent[] title) {
         this(title, null);
     }
 
@@ -75,7 +75,7 @@ public final class Title {
      * @param title the main text of the title
      * @throws NullPointerException if the title is null
      */
-    public Title(@NotNull String title) {
+    public Title(@NotNull final String title) {
         this(title, null);
     }
 
@@ -87,7 +87,7 @@ public final class Title {
      * @param title    the main text of the title
      * @param subtitle the secondary text of the title
      */
-    public Title(@NotNull BaseComponent title, @Nullable BaseComponent subtitle) {
+    public Title(@NotNull final BaseComponent title, @Nullable final BaseComponent subtitle) {
         this(title, subtitle, DEFAULT_FADE_IN, DEFAULT_STAY, DEFAULT_FADE_OUT);
     }
 
@@ -99,7 +99,7 @@ public final class Title {
      * @param title    the main text of the title
      * @param subtitle the secondary text of the title
      */
-    public Title(@NotNull BaseComponent[] title, @Nullable BaseComponent[] subtitle) {
+    public Title(@NotNull final BaseComponent[] title, @Nullable final BaseComponent[] subtitle) {
         this(title, subtitle, DEFAULT_FADE_IN, DEFAULT_STAY, DEFAULT_FADE_OUT);
     }
 
@@ -111,7 +111,7 @@ public final class Title {
      * @param title    the main text of the title
      * @param subtitle the secondary text of the title
      */
-    public Title(@NotNull String title, @Nullable String subtitle) {
+    public Title(@NotNull final String title, @Nullable final String subtitle) {
         this(title, subtitle, DEFAULT_FADE_IN, DEFAULT_STAY, DEFAULT_FADE_OUT);
     }
 
@@ -125,7 +125,7 @@ public final class Title {
      * @param fadeOut  the number of ticks for the title to fade out
      * @throws IllegalArgumentException if any of the times are negative
      */
-    public Title(@NotNull BaseComponent title, @Nullable BaseComponent subtitle, int fadeIn, int stay, int fadeOut) {
+    public Title(@NotNull final BaseComponent title, @Nullable final BaseComponent subtitle, final int fadeIn, final int stay, final int fadeOut) {
         this(
                 new BaseComponent[]{checkNotNull(title, "title")},
                 subtitle == null ? null : new BaseComponent[]{subtitle},
@@ -145,7 +145,7 @@ public final class Title {
      * @param fadeOut  the number of ticks for the title to fade out
      * @throws IllegalArgumentException if any of the times are negative
      */
-    public Title(@Nullable BaseComponent[] title, @NotNull BaseComponent[] subtitle, int fadeIn, int stay, int fadeOut) {
+    public Title(@Nullable final BaseComponent[] title, @NotNull final BaseComponent[] subtitle, final int fadeIn, final int stay, final int fadeOut) {
         checkArgument(fadeIn >= 0, "Negative fadeIn: %s", fadeIn);
         checkArgument(stay >= 0, "Negative stay: %s", stay);
         checkArgument(fadeOut >= 0, "Negative fadeOut: %s", fadeOut);
@@ -167,7 +167,7 @@ public final class Title {
      * @param stay     the number of ticks for the title to stay on screen
      * @param fadeOut  the number of ticks for the title to fade out
      */
-    public Title(@NotNull String title, @Nullable String subtitle, int fadeIn, int stay, int fadeOut) {
+    public Title(@NotNull final String title, @Nullable final String subtitle, final int fadeIn, final int stay, final int fadeOut) {
         this(
                 TextComponent.fromLegacyText(checkNotNull(title, "title")),
                 subtitle == null ? null : TextComponent.fromLegacyText(subtitle),
@@ -235,7 +235,7 @@ public final class Title {
      *
      * @param player the receiver of the title
      */
-    public void send(@NotNull Player player) {
+    public void send(@NotNull final Player player) {
         player.sendTitle(this);
     }
 
@@ -244,8 +244,8 @@ public final class Title {
      *
      * @param players the receivers of the title
      */
-    public void send(@NotNull Collection<? extends Player> players) {
-        for (Player player : players) {
+    public void send(@NotNull final Collection<? extends Player> players) {
+        for (final Player player : players) {
             player.sendTitle(this);
         }
     }
@@ -255,8 +255,8 @@ public final class Title {
      *
      * @param players the receivers of the title
      */
-    public void send(@NotNull Player[] players) {
-        for (Player player : players) {
+    public void send(@NotNull final Player[] players) {
+        for (final Player player : players) {
             player.sendTitle(this);
         }
     }
@@ -292,7 +292,7 @@ public final class Title {
          * @throws NullPointerException if the title is null
          */
         @NotNull
-        public Builder title(@NotNull BaseComponent title) {
+        public Builder title(@NotNull final BaseComponent title) {
             return this.title(new BaseComponent[]{checkNotNull(title, "title")});
         }
 
@@ -304,7 +304,7 @@ public final class Title {
          * @throws NullPointerException if the title is null
          */
         @NotNull
-        public Builder title(@NotNull BaseComponent[] title) {
+        public Builder title(@NotNull final BaseComponent[] title) {
             this.title = checkNotNull(title, "title");
             return this;
         }
@@ -319,7 +319,7 @@ public final class Title {
          * @throws NullPointerException if the title is null
          */
         @NotNull
-        public Builder title(@NotNull String title) {
+        public Builder title(@NotNull final String title) {
             return this.title(TextComponent.fromLegacyText(checkNotNull(title, "title")));
         }
 
@@ -330,7 +330,7 @@ public final class Title {
          * @return this builder instance
          */
         @NotNull
-        public Builder subtitle(@Nullable BaseComponent subtitle) {
+        public Builder subtitle(@Nullable final BaseComponent subtitle) {
             return this.subtitle(subtitle == null ? null : new BaseComponent[]{subtitle});
         }
 
@@ -341,7 +341,7 @@ public final class Title {
          * @return this builder instance
          */
         @NotNull
-        public Builder subtitle(@Nullable BaseComponent[] subtitle) {
+        public Builder subtitle(@Nullable final BaseComponent[] subtitle) {
             this.subtitle = subtitle;
             return this;
         }
@@ -355,7 +355,7 @@ public final class Title {
          * @return this builder instance
          */
         @NotNull
-        public Builder subtitle(@Nullable String subtitle) {
+        public Builder subtitle(@Nullable final String subtitle) {
             return this.subtitle(subtitle == null ? null : TextComponent.fromLegacyText(subtitle));
         }
 
@@ -367,7 +367,7 @@ public final class Title {
          * @throws IllegalArgumentException if it is negative
          */
         @NotNull
-        public Builder fadeIn(int fadeIn) {
+        public Builder fadeIn(final int fadeIn) {
             checkArgument(fadeIn >= 0, "Negative fadeIn: %s", fadeIn);
             this.fadeIn = fadeIn;
             return this;
@@ -382,7 +382,7 @@ public final class Title {
          * @throws IllegalArgumentException if it is negative
          */
         @NotNull
-        public Builder stay(int stay) {
+        public Builder stay(final int stay) {
             checkArgument(stay >= 0, "Negative stay: %s", stay);
             this.stay = stay;
             return this;
@@ -396,7 +396,7 @@ public final class Title {
          * @throws IllegalArgumentException if it is negative
          */
         @NotNull
-        public Builder fadeOut(int fadeOut) {
+        public Builder fadeOut(final int fadeOut) {
             checkArgument(fadeOut >= 0, "Negative fadeOut: %s", fadeOut);
             this.fadeOut = fadeOut;
             return this;
diff --git a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
index 18a96dbb01d3b34476652264b2d6be3782a154ec..da5d3a3ac46582cdb29dedc477a6f6b0d7d9e703 100644
--- a/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
+++ b/src/main/java/com/destroystokyo/paper/block/TargetBlockInfo.java
@@ -11,7 +11,7 @@ public class TargetBlockInfo {
     private final Block block;
     private final BlockFace blockFace;
 
-    public TargetBlockInfo(@NotNull Block block, @NotNull BlockFace blockFace) {
+    public TargetBlockInfo(@NotNull final Block block, @NotNull final BlockFace blockFace) {
         this.block = block;
         this.blockFace = blockFace;
     }
diff --git a/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java b/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
index e2a6f9c3881ff9d7373ac30e60009200432555aa..ffa665bd8d60bf4549f36d032cd56b6e65536f74 100644
--- a/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
+++ b/src/main/java/com/destroystokyo/paper/entity/Pathfinder.java
@@ -66,7 +66,7 @@ public interface Pathfinder {
      * @param loc Location to navigate to
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull Location loc) {
+    default boolean moveTo(@NotNull final Location loc) {
         return moveTo(loc, 1);
     }
 
@@ -77,8 +77,8 @@ public interface Pathfinder {
      * @param speed Speed multiplier to navigate at, where 1 is 'normal'
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull Location loc, double speed) {
-        PathResult path = findPath(loc);
+    default boolean moveTo(@NotNull final Location loc, final double speed) {
+        final PathResult path = findPath(loc);
         return path != null && moveTo(path, speed);
     }
 
@@ -94,7 +94,7 @@ public interface Pathfinder {
      * @param target the Entity to navigate to
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull LivingEntity target) {
+    default boolean moveTo(@NotNull final LivingEntity target) {
         return moveTo(target, 1);
     }
 
@@ -111,8 +111,8 @@ public interface Pathfinder {
      * @param speed Speed multiplier to navigate at, where 1 is 'normal'
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull LivingEntity target, double speed) {
-        PathResult path = findPath(target);
+    default boolean moveTo(@NotNull final LivingEntity target, final double speed) {
+        final PathResult path = findPath(target);
         return path != null && moveTo(path, speed);
     }
 
@@ -123,7 +123,7 @@ public interface Pathfinder {
      * @param path The Path to start following
      * @return If the pathfinding was successfully started
      */
-    default boolean moveTo(@NotNull PathResult path) {
+    default boolean moveTo(@NotNull final PathResult path) {
         return moveTo(path, 1);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java b/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
index f52644fab1522bdf83ff4f489e9805b274421094..b554ac0d69956a7d378a53e979a07b928489e035 100644
--- a/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
+++ b/src/main/java/com/destroystokyo/paper/entity/TargetEntityInfo.java
@@ -11,7 +11,7 @@ public class TargetEntityInfo {
     private final Entity entity;
     private final Vector hitVec;
 
-    public TargetEntityInfo(@NotNull Entity entity, @NotNull Vector hitVec) {
+    public TargetEntityInfo(@NotNull final Entity entity, @NotNull final Vector hitVec) {
         this.entity = entity;
         this.hitVec = hitVec;
     }
diff --git a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
index 9cd98c6fcfa3eb439d9013ef76ef4661175a0e5a..57e536fc20b316a7c13af96be2d676f697cb11ee 100644
--- a/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
+++ b/src/main/java/com/destroystokyo/paper/entity/ai/GoalKey.java
@@ -20,7 +20,7 @@ public class GoalKey<T extends Mob> {
     private final Class<T> entityClass;
     private final NamespacedKey namespacedKey;
 
-    private GoalKey(@NotNull Class<T> entityClass, @NotNull NamespacedKey namespacedKey) {
+    private GoalKey(@NotNull final Class<T> entityClass, @NotNull final NamespacedKey namespacedKey) {
         this.entityClass = entityClass;
         this.namespacedKey = namespacedKey;
     }
@@ -36,10 +36,10 @@ public class GoalKey<T extends Mob> {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        GoalKey<?> goalKey = (GoalKey<?>) o;
+        final GoalKey<?> goalKey = (GoalKey<?>) o;
         return Objects.equal(entityClass, goalKey.entityClass) &&
                Objects.equal(namespacedKey, goalKey.namespacedKey);
     }
@@ -58,7 +58,7 @@ public class GoalKey<T extends Mob> {
     }
 
     @NotNull
-    public static <A extends Mob> GoalKey<A> of(@NotNull Class<A> entityClass, @NotNull NamespacedKey namespacedKey) {
+    public static <A extends Mob> GoalKey<A> of(@NotNull final Class<A> entityClass, @NotNull final NamespacedKey namespacedKey) {
         return new GoalKey<>(entityClass, namespacedKey);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
index 1cc9ef255df888cb7dd7f7f2c5014e818d1be613..b91cc08a4cca9ab7696be2ee9a2f01a31838ff36 100644
--- a/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
+++ b/src/main/java/com/destroystokyo/paper/entity/villager/Reputation.java
@@ -9,7 +9,6 @@ import org.jetbrains.annotations.NotNull;
  */
 public final class Reputation {
     private static final ReputationType[] REPUTATION_TYPES = ReputationType.values(); // Avoid allocation
-    @NotNull
     private final int[] reputation;
 
     public Reputation() {
@@ -17,7 +16,7 @@ public final class Reputation {
     }
 
     // Package level to avoid plugins creating reputations with "magic values".
-    Reputation(@NotNull int[] reputation) {
+    Reputation(final int[] reputation) {
         this.reputation = reputation;
     }
 
@@ -25,7 +24,7 @@ public final class Reputation {
         this();
         Preconditions.checkNotNull(reputation, "reputation cannot be null");
 
-        for (Map.Entry<ReputationType, Integer> entry : reputation.entrySet()) {
+        for (final Map.Entry<ReputationType, Integer> entry : reputation.entrySet()) {
             setReputation(entry.getKey(), entry.getValue());
         }
     }
@@ -36,7 +35,7 @@ public final class Reputation {
      * @param type The {@link ReputationType type} of reputation to get.
      * @return The value of the {@link ReputationType type}.
      */
-    public int getReputation(@NotNull ReputationType type) {
+    public int getReputation(@NotNull final ReputationType type) {
         Preconditions.checkNotNull(type, "the reputation type cannot be null");
         return reputation[type.ordinal()];
     }
@@ -47,7 +46,7 @@ public final class Reputation {
      * @param type The {@link ReputationType type} of reputation to set.
      * @param value The value of the {@link ReputationType type}.
      */
-    public void setReputation(@NotNull ReputationType type, int value) {
+    public void setReputation(@NotNull final ReputationType type, final int value) {
         Preconditions.checkNotNull(type, "the reputation type cannot be null");
         reputation[type.ordinal()] = value;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
index 9f8041e76d03572fcfe0099f23f1615157856bc3..b9c847bbafa0fe06e8ae7592e853127877ea3eea 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/AnvilDamagedEvent.java
@@ -18,7 +18,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
     private boolean cancel;
     private DamageState damageState;
 
-    public AnvilDamagedEvent(@NotNull InventoryView inventory, @NotNull BlockData blockData) {
+    public AnvilDamagedEvent(@NotNull final InventoryView inventory, @NotNull final BlockData blockData) {
         super(inventory);
         this.damageState = DamageState.getState(blockData);
     }
@@ -44,7 +44,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
      *
      * @param damageState Damage state
      */
-    public void setDamageState(@NotNull DamageState damageState) {
+    public void setDamageState(@NotNull final DamageState damageState) {
         this.damageState = damageState;
     }
 
@@ -62,7 +62,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
      *
      * @param breaking True if breaking
      */
-    public void setBreaking(boolean breaking) {
+    public void setBreaking(final boolean breaking) {
         if (breaking) {
             damageState = DamageState.BROKEN;
         } else if (damageState == DamageState.BROKEN) {
@@ -74,7 +74,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
         return cancel;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -99,7 +99,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
 
         private final Material material;
 
-        DamageState(@NotNull Material material) {
+        DamageState(@NotNull final Material material) {
             this.material = material;
         }
 
@@ -121,7 +121,7 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
          * @throws IllegalArgumentException If non anvil block data is given
          */
         @NotNull
-        public static DamageState getState(@Nullable BlockData blockData) {
+        public static DamageState getState(@Nullable final BlockData blockData) {
             return blockData == null ? BROKEN : getState(blockData.getMaterial());
         }
 
@@ -133,11 +133,11 @@ public class AnvilDamagedEvent extends InventoryEvent implements Cancellable {
          * @throws IllegalArgumentException If non anvil material is given
          */
         @NotNull
-        public static DamageState getState(@Nullable Material material) {
+        public static DamageState getState(@Nullable final Material material) {
             if (material == null) {
                 return BROKEN;
             }
-            for (DamageState state : values()) {
+            for (final DamageState state : values()) {
                 if (state.material == material) {
                     return state;
                 }
diff --git a/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java b/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
index ea929a3e4c2c28452cfcf54ee4a44a64d13c8ab8..fe23aa59c59b6a93d16cd8261f611e95b78926ab 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/BeaconEffectEvent.java
@@ -18,7 +18,7 @@ public class BeaconEffectEvent extends BlockEvent implements Cancellable {
     private final Player player;
     private final boolean primary;
 
-    public BeaconEffectEvent(@NotNull Block block, @NotNull PotionEffect effect, @NotNull Player player, boolean primary) {
+    public BeaconEffectEvent(@NotNull final Block block, @NotNull final PotionEffect effect, @NotNull final Player player, final boolean primary) {
         super(block);
         this.effect = effect;
         this.player = player;
@@ -31,7 +31,7 @@ public class BeaconEffectEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
@@ -50,7 +50,7 @@ public class BeaconEffectEvent extends BlockEvent implements Cancellable {
      *
      * @param effect Potion effect
      */
-    public void setEffect(@NotNull PotionEffect effect) {
+    public void setEffect(@NotNull final PotionEffect effect) {
         this.effect = effect;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java b/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java
index 28255dc39eab5faf324d1fe556ab12daed527ff6..3459f72840b6fd0b6b6ec4265f6c24d3b0ae089e 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/BlockDestroyEvent.java
@@ -28,7 +28,7 @@ public class BlockDestroyEvent extends BlockEvent implements Cancellable {
 
     private boolean cancelled = false;
 
-    public BlockDestroyEvent(@NotNull Block block, @NotNull BlockData newState, boolean willDrop) {
+    public BlockDestroyEvent(@NotNull final Block block, @NotNull final BlockData newState, final boolean willDrop) {
         super(block);
         this.newState = newState;
         this.willDrop = willDrop;
@@ -59,7 +59,7 @@ public class BlockDestroyEvent extends BlockEvent implements Cancellable {
     /**
      * @param playEffect If the server should play the sound effect for this destruction
      */
-    public void setPlayEffect(boolean playEffect) {
+    public void setPlayEffect(final boolean playEffect) {
         this.playEffect = playEffect;
     }
 
@@ -76,7 +76,7 @@ public class BlockDestroyEvent extends BlockEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
index 563ffad23b6577b579d51a3bb7947b20ebaaa2ed..e9276655c220a237cfcf611b9689f1d440a66a5d 100644
--- a/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/block/TNTPrimeEvent.java
@@ -22,7 +22,7 @@ public class TNTPrimeEvent extends BlockEvent implements Cancellable {
     @NotNull private final PrimeReason reason;
     @Nullable private final Entity primerEntity;
 
-    public TNTPrimeEvent(@NotNull Block theBlock, @NotNull PrimeReason reason, @Nullable Entity primerEntity) {
+    public TNTPrimeEvent(@NotNull final Block theBlock, @NotNull final PrimeReason reason, @Nullable final Entity primerEntity) {
         super(theBlock);
         this.reason = reason;
         this.primerEntity = primerEntity;
@@ -68,13 +68,12 @@ public class TNTPrimeEvent extends BlockEvent implements Cancellable {
      * @param cancel whether spawning {@link org.bukkit.entity.TNTPrimed} should be cancelled or not
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
-    @Nullable
     @Override
-    public HandlerList getHandlers() {
+    public @NotNull HandlerList getHandlers() {
         return handlers;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java
index ff10251b6ded533b08048ec533525176eff03707..32d965303900b57152feb5dc4a5f2341b1c14576 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/CreeperIgniteEvent.java
@@ -14,7 +14,7 @@ public class CreeperIgniteEvent extends EntityEvent implements Cancellable {
     private boolean canceled;
     private boolean ignited;
 
-    public CreeperIgniteEvent(@NotNull Creeper creeper, boolean ignited) {
+    public CreeperIgniteEvent(@NotNull final Creeper creeper, final boolean ignited) {
         super(creeper);
         this.ignited = ignited;
     }
@@ -29,7 +29,7 @@ public class CreeperIgniteEvent extends EntityEvent implements Cancellable {
         return ignited;
     }
 
-    public void setIgnited(boolean ignited) {
+    public void setIgnited(final boolean ignited) {
         this.ignited = ignited;
     }
 
@@ -37,7 +37,7 @@ public class CreeperIgniteEvent extends EntityEvent implements Cancellable {
         return canceled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
index 118c7b6772a52c250649af2a9286f483f43da385..de865a364c13c71ed917d51fd6f9bf532c55d0a2 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFireballHitEvent.java
@@ -18,7 +18,7 @@ public class EnderDragonFireballHitEvent extends EntityEvent implements Cancella
     @Nullable private final Collection<LivingEntity> targets;
     @NotNull private final AreaEffectCloud areaEffectCloud;
 
-    public EnderDragonFireballHitEvent(@NotNull DragonFireball fireball, @Nullable Collection<LivingEntity> targets, @NotNull AreaEffectCloud areaEffectCloud) {
+    public EnderDragonFireballHitEvent(@NotNull final DragonFireball fireball, @Nullable final Collection<LivingEntity> targets, @NotNull final AreaEffectCloud areaEffectCloud) {
         super(fireball);
         this.targets = targets;
         this.areaEffectCloud = areaEffectCloud;
@@ -73,7 +73,7 @@ public class EnderDragonFireballHitEvent extends EntityEvent implements Cancella
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java
index 1915177f4b8f8013656fbdb41240f6c5c88f95d7..b6eb09d47b542a869379cc64bd68a60ca0eaf35e 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonFlameEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class EnderDragonFlameEvent extends EntityEvent implements Cancellable {
     @NotNull private final AreaEffectCloud areaEffectCloud;
 
-    public EnderDragonFlameEvent(@NotNull EnderDragon enderDragon, @NotNull AreaEffectCloud areaEffectCloud) {
+    public EnderDragonFlameEvent(@NotNull final EnderDragon enderDragon, @NotNull final AreaEffectCloud areaEffectCloud) {
         super(enderDragon);
         this.areaEffectCloud = areaEffectCloud;
     }
@@ -55,7 +55,7 @@ public class EnderDragonFlameEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java
index 8414bd805ec68d7b305fbf645c59f8d5b762c9ce..c62e4a274c3ff81a6b16e5f5f400e59a5bd2a1a9 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EnderDragonShootFireballEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class EnderDragonShootFireballEvent extends EntityEvent implements Cancellable {
     @NotNull private final DragonFireball fireball;
 
-    public EnderDragonShootFireballEvent(@NotNull EnderDragon entity, @NotNull DragonFireball fireball) {
+    public EnderDragonShootFireballEvent(@NotNull final EnderDragon entity, @NotNull final DragonFireball fireball) {
         super(entity);
         this.fireball = fireball;
     }
@@ -55,7 +55,7 @@ public class EnderDragonShootFireballEvent extends EntityEvent implements Cancel
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
index 84ee5904b450d0b7e024039875d8a18cf10b03aa..495b4ef0c2c40b9e1a24d3c5946fea1f0e5031bb 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanAttackPlayerEvent.java
@@ -39,7 +39,7 @@ import org.jetbrains.annotations.NotNull;
 public class EndermanAttackPlayerEvent extends EntityEvent implements Cancellable {
     @NotNull private final Player player;
 
-    public EndermanAttackPlayerEvent(@NotNull Enderman entity, @NotNull Player player) {
+    public EndermanAttackPlayerEvent(@NotNull final Enderman entity, @NotNull final Player player) {
         super(entity);
         this.player = player;
     }
@@ -93,7 +93,7 @@ public class EndermanAttackPlayerEvent extends EntityEvent implements Cancellabl
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
index bed4727417f57337b1f2f5b09e3c7efbbc01e635..92247ecafc53e92f97e4d38fc0dcb3f1c354c407 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EndermanEscapeEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
 public class EndermanEscapeEvent extends EntityEvent implements Cancellable {
     @NotNull private final Reason reason;
 
-    public EndermanEscapeEvent(@NotNull Enderman entity, @NotNull Reason reason) {
+    public EndermanEscapeEvent(@NotNull final Enderman entity, @NotNull final Reason reason) {
         super(entity);
         this.reason = reason;
     }
@@ -56,7 +56,7 @@ public class EndermanEscapeEvent extends EntityEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
index a8c4c1cee9ed97523458e21995dd2a87818c4ca7..adee19a6b000bb64d13f59c3213a977dac17dd60 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityAddToWorldEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityAddToWorldEvent extends EntityEvent {
 
-    public EntityAddToWorldEvent(@NotNull Entity entity) {
+    public EntityAddToWorldEvent(@NotNull final Entity entity) {
         super(entity);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java
index f0067c2e953d18e1a33536980071ba3f0152ecb4..425330e7f43bda2394dcb8ee68b196e7aaf55219 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityJumpEvent.java
@@ -15,7 +15,7 @@ public class EntityJumpEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean canceled;
 
-    public EntityJumpEvent(@NotNull LivingEntity entity) {
+    public EntityJumpEvent(@NotNull final LivingEntity entity) {
         super(entity);
     }
 
@@ -29,7 +29,7 @@ public class EntityJumpEvent extends EntityEvent implements Cancellable {
         return canceled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java
index 9efecabab813f575bb447a356e5e7e952d110f30..cae3c394051e558f821a61acedeb88ea9baeab26 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityKnockbackByEntityEvent.java
@@ -21,7 +21,7 @@ public class EntityKnockbackByEntityEvent extends EntityEvent implements Cancell
     @NotNull private final Vector acceleration;
     private boolean cancelled = false;
 
-    public EntityKnockbackByEntityEvent(@NotNull LivingEntity entity, @NotNull Entity hitBy, float knockbackStrength, @NotNull Vector acceleration) {
+    public EntityKnockbackByEntityEvent(@NotNull final LivingEntity entity, @NotNull final Entity hitBy, final float knockbackStrength, @NotNull final Vector acceleration) {
         super(entity);
         this.hitBy = hitBy;
         this.knockbackStrength = knockbackStrength;
@@ -44,7 +44,7 @@ public class EntityKnockbackByEntityEvent extends EntityEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java
index 63e46b2fb1b12b36fcb1e98b178cf29dd2e3d1b5..577301921036ec15d3040cac09a5430be0886217 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityPathfindEvent.java
@@ -18,7 +18,7 @@ public class EntityPathfindEvent extends EntityEvent implements Cancellable {
     @Nullable private final Entity targetEntity;
     @NotNull private final Location loc;
 
-    public EntityPathfindEvent(@NotNull Entity entity, @NotNull Location loc, @Nullable Entity targetEntity) {
+    public EntityPathfindEvent(@NotNull final Entity entity, @NotNull final Location loc, @Nullable final Entity targetEntity) {
         super(entity);
         this.targetEntity = targetEntity;
         this.loc = loc;
@@ -76,7 +76,7 @@ public class EntityPathfindEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
index d23773d9013bfa4da085b91669e39768fb6e8800..2ceb504a5d86a29e5f4c4f1d5bb1fb8670210a6b 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityRemoveFromWorldEvent.java
@@ -10,7 +10,7 @@ import org.jetbrains.annotations.NotNull;
  */
 public class EntityRemoveFromWorldEvent extends EntityEvent {
 
-    public EntityRemoveFromWorldEvent(@NotNull Entity entity) {
+    public EntityRemoveFromWorldEvent(@NotNull final Entity entity) {
         super(entity);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java
index bfc69a43c291fbed91b9d0387e4ef18b0ed1b9de..3bf3185a007df79403681f49eb9831cc4f2bf782 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityTeleportEndGatewayEvent.java
@@ -13,7 +13,7 @@ public class EntityTeleportEndGatewayEvent extends EntityTeleportEvent {
 
     @NotNull private final EndGateway gateway;
 
-    public EntityTeleportEndGatewayEvent(@NotNull Entity what, @NotNull Location from, @NotNull Location to, @NotNull EndGateway gateway) {
+    public EntityTeleportEndGatewayEvent(@NotNull final Entity what, @NotNull final Location from, @NotNull final Location to, @NotNull final EndGateway gateway) {
         super(what, from, to);
         this.gateway = gateway;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
index 12194f1fc7f03ca6785904b6187b3dfd03b16461..54791f98ad1689f829281d124c5fab186a90bc26 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityTransformedEvent.java
@@ -6,6 +6,8 @@ import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.entity.EntityEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Fired when an entity transforms into another entity
@@ -20,7 +22,7 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
     private final Entity transformed;
     private final TransformedReason reason;
 
-    public EntityTransformedEvent(Entity entity, Entity transformed, TransformedReason reason) {
+    public EntityTransformedEvent(final Entity entity, final Entity transformed, final TransformedReason reason) {
         super(entity);
         this.transformed = transformed;
         this.reason = reason;
@@ -48,7 +50,7 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
 
 
     @Override
-    public HandlerList getHandlers(){
+    public @NotNull HandlerList getHandlers(){
         return handlers;
     }
 
@@ -62,7 +64,7 @@ public class EntityTransformedEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel){
+    public void setCancelled(final boolean cancel){
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
index b0444fd72a1bc6bdf598fc76d5cd627c1bd8abc3..2dd302021b8bdaf691be49bb2f2a46c5681c8a68 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/EntityZapEvent.java
@@ -29,7 +29,7 @@ public class EntityZapEvent extends EntityTransformEvent implements Cancellable
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java
index 0ce3e397716c28c30ed05e153babd0bfb9dd354a..09214f5e3d73d83b37ff4f858e770e8157167808 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ExperienceOrbMergeEvent.java
@@ -36,7 +36,7 @@ public class ExperienceOrbMergeEvent extends EntityEvent implements Cancellable
     @NotNull private final ExperienceOrb mergeTarget;
     @NotNull private final ExperienceOrb mergeSource;
 
-    public ExperienceOrbMergeEvent(@NotNull ExperienceOrb mergeTarget, @NotNull ExperienceOrb mergeSource) {
+    public ExperienceOrbMergeEvent(@NotNull final ExperienceOrb mergeTarget, @NotNull final ExperienceOrb mergeSource) {
         super(mergeTarget);
         this.mergeTarget = mergeTarget;
         this.mergeSource = mergeSource;
@@ -81,7 +81,7 @@ public class ExperienceOrbMergeEvent extends EntityEvent implements Cancellable
      * @param cancel true if you wish to cancel this event, and prevent the orbs from merging
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java
index 9022f697ab244df43074e48c9150f39d44217531..25dd21fce55598ac81a966b6274b9a053441ee58 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PhantomPreSpawnEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
 public class PhantomPreSpawnEvent extends PreCreatureSpawnEvent {
     @NotNull private final Entity entity;
 
-    public PhantomPreSpawnEvent(@NotNull Location location, @NotNull Entity entity, @NotNull CreatureSpawnEvent.SpawnReason reason) {
+    public PhantomPreSpawnEvent(@NotNull final Location location, @NotNull final Entity entity, @NotNull final CreatureSpawnEvent.SpawnReason reason) {
         super(location, EntityType.PHANTOM, reason);
         this.entity = entity;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
index 1a89870e118aae3fd7c0b7f218c14f51083d1946..bc6b009d062401b46113d7ec4dbcc178823b3157 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PlayerNaturallySpawnCreaturesEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerNaturallySpawnCreaturesEvent extends PlayerEvent implements Cancellable {
     private byte radius;
 
-    public PlayerNaturallySpawnCreaturesEvent(@NotNull Player player, byte radius) {
+    public PlayerNaturallySpawnCreaturesEvent(@NotNull final Player player, final byte radius) {
         super(player);
         this.radius = radius;
     }
@@ -27,7 +27,7 @@ public class PlayerNaturallySpawnCreaturesEvent extends PlayerEvent implements C
     /**
      * @param radius The radius of chunks around this player to be included in natural spawn selection
      */
-    public void setSpawnRadius(byte radius) {
+    public void setSpawnRadius(final byte radius) {
         this.radius = radius;
     }
 
@@ -57,7 +57,7 @@ public class PlayerNaturallySpawnCreaturesEvent extends PlayerEvent implements C
      * @param cancel true if you wish to cancel this event, and not include this players chunks for natural spawning
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java
index 3ad231aa3206c8cfd5ec995249584cebab5d11f3..42cfc9f268ab19fa0cc922d9804c761a0e53471c 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PreCreatureSpawnEvent.java
@@ -25,7 +25,7 @@ public class PreCreatureSpawnEvent extends Event implements Cancellable {
     @NotNull private final CreatureSpawnEvent.SpawnReason reason;
     private boolean shouldAbortSpawn;
 
-    public PreCreatureSpawnEvent(@NotNull Location location, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason) {
+    public PreCreatureSpawnEvent(@NotNull final Location location, @NotNull final EntityType type, @NotNull final CreatureSpawnEvent.SpawnReason reason) {
         this.location = Preconditions.checkNotNull(location, "Location may not be null").clone();
         this.type = Preconditions.checkNotNull(type, "Type may not be null");
         this.reason = Preconditions.checkNotNull(reason, "Reason may not be null");
@@ -68,7 +68,7 @@ public class PreCreatureSpawnEvent extends Event implements Cancellable {
      *
      * @param shouldAbortSpawn Set if the spawn process should be aborted vs trying more attempts
      */
-    public void setShouldAbortSpawn(boolean shouldAbortSpawn) {
+    public void setShouldAbortSpawn(final boolean shouldAbortSpawn) {
         this.shouldAbortSpawn = shouldAbortSpawn;
     }
 
@@ -99,7 +99,7 @@ public class PreCreatureSpawnEvent extends Event implements Cancellable {
      * @param cancel true if you wish to cancel this event, and abort the spawn of this creature
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java
index 48cff063594840a07aeaf35513780e28ea019a76..49371ead4b6fb95b81eeae2019b6111218911797 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/PreSpawnerSpawnEvent.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.NotNull;
 public class PreSpawnerSpawnEvent extends PreCreatureSpawnEvent {
     @NotNull private final Location spawnerLocation;
 
-    public PreSpawnerSpawnEvent(@NotNull Location location, @NotNull EntityType type, @NotNull Location spawnerLocation) {
+    public PreSpawnerSpawnEvent(@NotNull final Location location, @NotNull final EntityType type, @NotNull final Location spawnerLocation) {
         super(location, type, CreatureSpawnEvent.SpawnReason.SPAWNER);
         this.spawnerLocation = Preconditions.checkNotNull(spawnerLocation, "Spawner location may not be null");
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java
index 453663893021768ae21d4980ce17ffba55d9e129..23fc9fab98a9c352c2d21a6beda0ded9e619384e 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ProjectileCollideEvent.java
@@ -25,7 +25,7 @@ public class ProjectileCollideEvent extends EntityEvent implements Cancellable {
         return collidedWith;
     }
 
-    public ProjectileCollideEvent(@NotNull Projectile what, @NotNull Entity collidedWith) {
+    public ProjectileCollideEvent(@NotNull final Projectile what, @NotNull final Entity collidedWith) {
         super(what);
         this.collidedWith = collidedWith;
     }
@@ -61,7 +61,7 @@ public class ProjectileCollideEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
index 9ce2948dfaa56d0adf53fe9b6117a90d7773b771..a75b578fdfd8989cc39b4f6d85fab3b390fea02b 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SkeletonHorseTrapEvent.java
@@ -18,11 +18,11 @@ public class SkeletonHorseTrapEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final List<HumanEntity> eligibleHumans;
 
-    public SkeletonHorseTrapEvent(@NotNull SkeletonHorse horse) {
+    public SkeletonHorseTrapEvent(@NotNull final SkeletonHorse horse) {
         this(horse, ImmutableList.of());
     }
 
-    public SkeletonHorseTrapEvent(@NotNull SkeletonHorse horse, @NotNull List<HumanEntity> eligibleHumans) {
+    public SkeletonHorseTrapEvent(@NotNull final SkeletonHorse horse, @NotNull final List<HumanEntity> eligibleHumans) {
         super(horse);
         this.eligibleHumans = eligibleHumans;
     }
@@ -39,7 +39,7 @@ public class SkeletonHorseTrapEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
index 2638bbd3e1392b3d8640be58163f6eb2789dee4a..bb0caa312aa23086ee0d5008d9363af3a59baa1e 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeChangeDirectionEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class SlimeChangeDirectionEvent extends SlimePathfindEvent implements Cancellable {
     private float yaw;
 
-    public SlimeChangeDirectionEvent(@NotNull Slime slime, float yaw) {
+    public SlimeChangeDirectionEvent(@NotNull final Slime slime, final float yaw) {
         super(slime);
         this.yaw = yaw;
     }
@@ -32,7 +32,7 @@ public class SlimeChangeDirectionEvent extends SlimePathfindEvent implements Can
      *
      * @param yaw Chosen yaw
      */
-    public void setNewYaw(float yaw) {
+    public void setNewYaw(final float yaw) {
         this.yaw = yaw;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
index 14b67da109321ae6521eab2ac6f6945f05d02db5..8a74279041f3ac49b2d06ea94dc8114d5d437c02 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimePathfindEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
  * is choosing to start moving.
  */
 public class SlimePathfindEvent extends EntityEvent implements Cancellable {
-    public SlimePathfindEvent(@NotNull Slime slime) {
+    public SlimePathfindEvent(@NotNull final Slime slime) {
         super(slime);
     }
 
@@ -47,7 +47,7 @@ public class SlimePathfindEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
index c8dd49d11da5a90a1bac965a75f2b65fd825f3f7..71e14fdbdd8a76669bca7110aac61311e70b6ab6 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeSwimEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  * is choosing to start jumping.
  */
 public class SlimeSwimEvent extends SlimeWanderEvent implements Cancellable {
-    public SlimeSwimEvent(@NotNull Slime slime) {
+    public SlimeSwimEvent(@NotNull final Slime slime) {
         super(slime);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
index e9ba32799ed838779e49cd4c5011b7515b3363cb..54037b62b0adf5f0e2ea9d7f4d27d92b5623013a 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeTargetLivingEntityEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.NotNull;
 public class SlimeTargetLivingEntityEvent extends SlimePathfindEvent implements Cancellable {
     @NotNull private final LivingEntity target;
 
-    public SlimeTargetLivingEntityEvent(@NotNull Slime slime, @NotNull LivingEntity target) {
+    public SlimeTargetLivingEntityEvent(@NotNull final Slime slime, @NotNull final LivingEntity target) {
         super(slime);
         this.target = target;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
index 4683a7237d2ed527fc85b9b4e5b2eaaf5ae3d797..289e25d3687fa76a597d675e4abdc047db1c5397 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/SlimeWanderEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
  * is choosing to start moving.
  */
 public class SlimeWanderEvent extends SlimePathfindEvent implements Cancellable {
-    public SlimeWanderEvent(@NotNull Slime slime) {
+    public SlimeWanderEvent(@NotNull final Slime slime) {
         super(slime);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
index cd5e0d6f605f47ae50ab387f28658771ec56a12a..31fbafab177dce425a9d6340da1e150b8b63976b 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/ThrownEggHatchEvent.java
@@ -51,7 +51,7 @@ public class ThrownEggHatchEvent extends Event {
      * @param hatching true if you want the egg to hatch, false if you want it
      *     not to
      */
-    public void setHatching(boolean hatching) {
+    public void setHatching(final boolean hatching) {
         this.hatching = hatching;
     }
 
@@ -70,7 +70,7 @@ public class ThrownEggHatchEvent extends Event {
      *
      * @param hatchType The type of the mob being hatched by the egg
      */
-    public void setHatchingType(@NotNull EntityType hatchType) {
+    public void setHatchingType(@NotNull final EntityType hatchType) {
         if (hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
         this.hatchType = hatchType;
     }
@@ -98,7 +98,7 @@ public class ThrownEggHatchEvent extends Event {
      *
      * @param numHatches The number of mobs coming out of the egg
      */
-    public void setNumHatches(byte numHatches) {
+    public void setNumHatches(final byte numHatches) {
         this.numHatches = numHatches;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java
index 021356d151ed638068e3e89b8cc77b3795883233..295baf73ac44c7270f129937deb7d32e00c78b27 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/TurtleGoHomeEvent.java
@@ -13,7 +13,7 @@ public class TurtleGoHomeEvent extends EntityEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled = false;
 
-    public TurtleGoHomeEvent(@NotNull Turtle turtle) {
+    public TurtleGoHomeEvent(@NotNull final Turtle turtle) {
         super(turtle);
     }
 
@@ -33,7 +33,7 @@ public class TurtleGoHomeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
index 16521e5d1a1d08b0a6dedf516ef3d2c41c3273dd..70af2e778bce201af7c85e787657308af58479fa 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/TurtleLayEggEvent.java
@@ -17,7 +17,7 @@ public class TurtleLayEggEvent extends EntityEvent implements Cancellable {
     private final Location location;
     private final int eggCount;
 
-    public TurtleLayEggEvent(@NotNull Turtle turtle, @NotNull Location location, int eggCount) {
+    public TurtleLayEggEvent(@NotNull final Turtle turtle, @NotNull final Location location, final int eggCount) {
         super(turtle);
         this.location = location;
         this.eggCount = eggCount;
@@ -71,7 +71,7 @@ public class TurtleLayEggEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java
index abeb24fccda2acfdb0dfdadacb8fe688bd97cf78..a1f268d70bbdb6977e5cfddb0d87eb22793a1056 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/TurtleStartDiggingEvent.java
@@ -15,7 +15,7 @@ public class TurtleStartDiggingEvent extends EntityEvent implements Cancellable
     private boolean cancelled = false;
     @NotNull private final Location location;
 
-    public TurtleStartDiggingEvent(@NotNull Turtle turtle, @NotNull Location location) {
+    public TurtleStartDiggingEvent(@NotNull final Turtle turtle, @NotNull final Location location) {
         super(turtle);
         this.location = location;
     }
@@ -46,7 +46,7 @@ public class TurtleStartDiggingEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java
index fbbace36d69373046a7f3618ed5c1c1318b489b9..b91434a4c6ef476f829d429fd7826ad2fb2d8477 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchConsumePotionEvent.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
 public class WitchConsumePotionEvent extends EntityEvent implements Cancellable {
     @Nullable private ItemStack potion;
 
-    public WitchConsumePotionEvent(@NotNull Witch witch, @Nullable ItemStack potion) {
+    public WitchConsumePotionEvent(@NotNull final Witch witch, @Nullable final ItemStack potion) {
         super(witch);
         this.potion = potion;
     }
@@ -37,7 +37,7 @@ public class WitchConsumePotionEvent extends EntityEvent implements Cancellable
      * Sets the potion to be consumed and applied to the witch.
      * @param potion The potion
      */
-    public void setPotion(@Nullable ItemStack potion) {
+    public void setPotion(@Nullable final ItemStack potion) {
         this.potion = potion != null ? potion.clone() : null;
     }
 
@@ -64,7 +64,7 @@ public class WitchConsumePotionEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
index 5351b523defa054ba56ae3fb591029283ca7510d..8a15b5d2ae52b46878314df5b63b9d1ae902452c 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchReadyPotionEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.Nullable;
 public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
     private ItemStack potion;
 
-    public WitchReadyPotionEvent(@NotNull Witch witch, @Nullable ItemStack potion) {
+    public WitchReadyPotionEvent(@NotNull final Witch witch, @Nullable final ItemStack potion) {
         super(witch);
         this.potion = potion;
     }
@@ -24,8 +24,8 @@ public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
      * @return The ItemStack to be used
      */
     @Nullable
-    public static ItemStack process(@NotNull Witch witch, @Nullable ItemStack potion) {
-        WitchReadyPotionEvent event = new WitchReadyPotionEvent(witch, potion);
+    public static ItemStack process(@NotNull final Witch witch, @Nullable final ItemStack potion) {
+        final WitchReadyPotionEvent event = new WitchReadyPotionEvent(witch, potion);
         if (!event.callEvent() || event.getPotion() == null) {
             return new ItemStack(Material.AIR);
         }
@@ -50,7 +50,7 @@ public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
      * Sets the potion the which is going to hold and use
      * @param potion The potion
      */
-    public void setPotion(@Nullable ItemStack potion) {
+    public void setPotion(@Nullable final ItemStack potion) {
         this.potion = potion != null ? potion.clone() : null;
     }
 
@@ -74,7 +74,7 @@ public class WitchReadyPotionEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java b/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java
index 688a596aa2b925651a92bf092e1ef4d77a47258c..5bf19e717d0a5a110b3e67f7206aa9abaa28da18 100644
--- a/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/entity/WitchThrowPotionEvent.java
@@ -16,7 +16,7 @@ public class WitchThrowPotionEvent extends EntityEvent implements Cancellable {
     @NotNull private final LivingEntity target;
     @Nullable private ItemStack potion;
 
-    public WitchThrowPotionEvent(@NotNull Witch witch, @NotNull LivingEntity target, @Nullable ItemStack potion) {
+    public WitchThrowPotionEvent(@NotNull final Witch witch, @NotNull final LivingEntity target, @Nullable final ItemStack potion) {
         super(witch);
         this.target = target;
         this.potion = potion;
@@ -48,7 +48,7 @@ public class WitchThrowPotionEvent extends EntityEvent implements Cancellable {
      * Sets the potion to be thrown at a player
      * @param potion The potion
      */
-    public void setPotion(@Nullable ItemStack potion) {
+    public void setPotion(@Nullable final ItemStack potion) {
         this.potion = potion != null ? potion.clone() : null;
     }
 
@@ -75,7 +75,7 @@ public class WitchThrowPotionEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
index ef99d7dde1573fcbb1ef0f298768b63381b3be8e..c3a30b08deec26504d621e4c02ea041a8d107742 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/MethodHandleEventExecutor.java
@@ -14,27 +14,27 @@ public class MethodHandleEventExecutor implements EventExecutor {
     private final Class<? extends Event> eventClass;
     private final MethodHandle handle;
 
-    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull MethodHandle handle) {
+    public MethodHandleEventExecutor(@NotNull final Class<? extends Event> eventClass, @NotNull final MethodHandle handle) {
         this.eventClass = eventClass;
         this.handle = handle;
     }
 
-    public MethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+    public MethodHandleEventExecutor(@NotNull final Class<? extends Event> eventClass, @NotNull final Method m) {
         this.eventClass = eventClass;
         try {
             m.setAccessible(true);
             this.handle = MethodHandles.lookup().unreflect(m);
-        } catch (IllegalAccessException e) {
+        } catch (final IllegalAccessException e) {
             throw new AssertionError("Unable to set accessible", e);
         }
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) {
+    public void execute(@NotNull final Listener listener, @NotNull final Event event) {
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(listener, event);
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             SneakyThrow.sneaky(t);
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
index 0d2b94b5589de44145dc1b0401a8fd2f49b1a7cc..368c58781d6f43f1d490719ec5630ecd395155de 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/StaticMethodHandleEventExecutor.java
@@ -17,24 +17,24 @@ public class StaticMethodHandleEventExecutor implements EventExecutor {
     private final Class<? extends Event> eventClass;
     private final MethodHandle handle;
 
-    public StaticMethodHandleEventExecutor(@NotNull Class<? extends Event> eventClass, @NotNull Method m) {
+    public StaticMethodHandleEventExecutor(@NotNull final Class<? extends Event> eventClass, @NotNull final Method m) {
         Preconditions.checkArgument(Modifier.isStatic(m.getModifiers()), "Not a static method: %s", m);
         Preconditions.checkArgument(true, "eventClass is null");
         this.eventClass = eventClass;
         try {
             m.setAccessible(true);
             this.handle = MethodHandles.lookup().unreflect(m);
-        } catch (IllegalAccessException e) {
+        } catch (final IllegalAccessException e) {
             throw new AssertionError("Unable to set accessible", e);
         }
     }
 
     @Override
-    public void execute(@NotNull Listener listener, @NotNull Event event) {
+    public void execute(@NotNull final Listener listener, @NotNull final Event event) {
         if (!eventClass.isInstance(event)) return;
         try {
             handle.invoke(event);
-        } catch (Throwable throwable) {
+        } catch (final Throwable throwable) {
             SneakyThrow.sneaky(throwable);
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
index 8992087cb3f705845aed87d6f4bce0bb40a45f08..4016232bfe299e7b31ad7f28f874ad047c8b92d3 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ASMEventExecutorGenerator.java
@@ -12,9 +12,9 @@ import java.util.concurrent.atomic.AtomicInteger;
 import static org.objectweb.asm.Opcodes.*;
 
 public class ASMEventExecutorGenerator {
-    @NotNull
-    public static byte[] generateEventExecutor(@NotNull Method m, @NotNull String name) {
-        ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
+
+    public static byte[] generateEventExecutor(@NotNull final Method m, @NotNull final String name) {
+        final ClassWriter writer = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
         writer.visit(V1_8, ACC_PUBLIC, name.replace('.', '/'), null, Type.getInternalName(Object.class), new String[] {Type.getInternalName(EventExecutor.class)});
         // Generate constructor
         GeneratorAdapter methodGenerator = new GeneratorAdapter(writer.visitMethod(ACC_PUBLIC, "<init>", "()V", null, null), ACC_PUBLIC, "<init>", "()V");
@@ -41,7 +41,7 @@ public class ASMEventExecutorGenerator {
     public static final AtomicInteger NEXT_ID = new AtomicInteger(1);
     @NotNull
     public static String generateName() {
-        int id = NEXT_ID.getAndIncrement();
+        final int id = NEXT_ID.getAndIncrement();
         return "com.destroystokyo.paper.event.executor.asm.generated.GeneratedEventExecutor" + id;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
index 82f30895b5945bfe344404a0b64792989acecab0..50642d85365a7bad40086467d69118616fc3069e 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/ClassDefiner.java
@@ -23,7 +23,7 @@ public interface ClassDefiner {
      * @throws ClassFormatError     if the class data is invalid
      * @throws NullPointerException if any of the arguments are null
      */
-    @NotNull Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte[] data);
+    @NotNull Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, byte[] data);
 
     @NotNull
     static ClassDefiner getInstance() {
diff --git a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
index 01eb8747ad610f4da46adae32a024487996b8121..ff744f6ce2116421097559dfdbf8a678057d44c5 100644
--- a/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
+++ b/src/main/java/com/destroystokyo/paper/event/executor/asm/SafeClassDefiner.java
@@ -17,11 +17,11 @@ public class SafeClassDefiner implements ClassDefiner {
 
     @NotNull
     @Override
-    public Class<?> defineClass(@NotNull ClassLoader parentLoader, @NotNull String name, @NotNull byte[] data) {
-        GeneratedClassLoader loader = loaders.computeIfAbsent(parentLoader, GeneratedClassLoader::new);
+    public Class<?> defineClass(@NotNull final ClassLoader parentLoader, @NotNull final String name, final byte[] data) {
+        final GeneratedClassLoader loader = loaders.computeIfAbsent(parentLoader, GeneratedClassLoader::new);
         synchronized (loader.getClassLoadingLock(name)) {
             Preconditions.checkState(loader.hasClass(name), "%s already defined", name);
-            Class<?> c = loader.define(name, data);
+            final Class<?> c = loader.define(name, data);
             assert c.getName().equals(name);
             return c;
         }
@@ -32,14 +32,14 @@ public class SafeClassDefiner implements ClassDefiner {
             ClassLoader.registerAsParallelCapable();
         }
 
-        protected GeneratedClassLoader(@NotNull ClassLoader parent) {
+        protected GeneratedClassLoader(@NotNull final ClassLoader parent) {
             super(parent);
         }
 
-        private Class<?> define(@NotNull String name, byte[] data) {
+        private Class<?> define(@NotNull final String name, final byte[] data) {
             synchronized (getClassLoadingLock(name)) {
                 assert hasClass(name);
-                Class<?> c = defineClass(name, data, 0, data.length);
+                final Class<?> c = defineClass(name, data, 0, data.length);
                 resolveClass(c);
                 return c;
             }
@@ -47,16 +47,16 @@ public class SafeClassDefiner implements ClassDefiner {
 
         @Override
         @NotNull
-        public Object getClassLoadingLock(@NotNull String name) {
+        public Object getClassLoadingLock(@NotNull final String name) {
             return super.getClassLoadingLock(name);
         }
 
-        public boolean hasClass(@NotNull String name) {
+        public boolean hasClass(@NotNull final String name) {
             synchronized (getClassLoadingLock(name)) {
                 try {
                     Class.forName(name);
                     return false;
-                } catch (ClassNotFoundException e) {
+                } catch (final ClassNotFoundException e) {
                     return true;
                 }
             }
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
index 7a144854ec8998e758bf2327d30d8165fbf39e0f..616ae996065be6204c9a8d7d000832572ba448d5 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareGrindstoneEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.Nullable;
 @Deprecated
 public class PrepareGrindstoneEvent extends PrepareResultEvent {
 
-    public PrepareGrindstoneEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareGrindstoneEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory, result);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
index d8da8903d28ad715e0768fa5c58906540762ca0e..60f204aa0c5903e8426f88d4781072d608c96021 100644
--- a/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/inventory/PrepareResultEvent.java
@@ -15,7 +15,7 @@ public class PrepareResultEvent extends InventoryEvent {
     private static final HandlerList handlers = new HandlerList();
     private ItemStack result;
 
-    public PrepareResultEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareResultEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory);
         this.result = result;
     }
@@ -30,7 +30,7 @@ public class PrepareResultEvent extends InventoryEvent {
         return result;
     }
 
-    public void setResult(@Nullable ItemStack result) {
+    public void setResult(@Nullable final ItemStack result) {
         this.result = result;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java b/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java
index 8d8e9b16f2a6707d2af7567c7682dfc5db51a737..8476aa274fab55420fc6b90644e94573f4d24646 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/IllegalPacketEvent.java
@@ -17,7 +17,7 @@ public class IllegalPacketEvent extends PlayerEvent {
     @Nullable private String kickMessage;
     private boolean shouldKick = true;
 
-    public IllegalPacketEvent(@NotNull Player player, @Nullable String type, @Nullable String kickMessage, @NotNull Exception e) {
+    public IllegalPacketEvent(@NotNull final Player player, @Nullable final String type, @Nullable final String kickMessage, @NotNull final Exception e) {
         super(player);
         this.type = type;
         this.kickMessage = kickMessage;
@@ -28,7 +28,7 @@ public class IllegalPacketEvent extends PlayerEvent {
         return shouldKick;
     }
 
-    public void setShouldKick(boolean shouldKick) {
+    public void setShouldKick(final boolean shouldKick) {
         this.shouldKick = shouldKick;
     }
 
@@ -37,7 +37,7 @@ public class IllegalPacketEvent extends PlayerEvent {
         return kickMessage;
     }
 
-    public void setKickMessage(@Nullable String kickMessage) {
+    public void setKickMessage(@Nullable final String kickMessage) {
         this.kickMessage = kickMessage;
     }
 
@@ -63,8 +63,8 @@ public class IllegalPacketEvent extends PlayerEvent {
         return handlers;
     }
 
-    public static void process(@NotNull Player player, @Nullable String type, @Nullable String kickMessage, @NotNull Exception exception) {
-        IllegalPacketEvent event = new IllegalPacketEvent(player, type, kickMessage, exception);
+    public static void process(@NotNull final Player player, @Nullable final String type, @Nullable final String kickMessage, @NotNull final Exception exception) {
+        final IllegalPacketEvent event = new IllegalPacketEvent(player, type, kickMessage, exception);
         event.callEvent();
         if (event.shouldKick) {
             player.kickPlayer(kickMessage);
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java
index bb8d7c959cdea4b66455a49e74804ea4b126620d..a00a5e6f9bb7dca4471ddc0f3051a99d8c18e9e5 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerAdvancementCriterionGrantEvent.java
@@ -16,7 +16,7 @@ public class PlayerAdvancementCriterionGrantEvent extends PlayerEvent implements
     @NotNull private final String criterion;
     private boolean cancel = false;
 
-    public PlayerAdvancementCriterionGrantEvent(@NotNull Player who, @NotNull Advancement advancement, @NotNull String criterion) {
+    public PlayerAdvancementCriterionGrantEvent(@NotNull final Player who, @NotNull final Advancement advancement, @NotNull final String criterion) {
         super(who);
         this.advancement = advancement;
         this.criterion = criterion;
@@ -46,7 +46,7 @@ public class PlayerAdvancementCriterionGrantEvent extends PlayerEvent implements
         return cancel;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
index e406ce639a2e88b78f82f25e71678a669d0a958b..5f7003397cc7ecb72af1183a722d7ecf7369a675 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerArmorChangeEvent.java
@@ -6,10 +6,8 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
 import org.bukkit.inventory.ItemStack;
 
-import java.util.Arrays;
-import java.util.Collections;
-import java.util.HashSet;
-import java.util.Set;
+import java.util.*;
+
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -27,7 +25,7 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
     @Nullable private final ItemStack oldItem;
     @Nullable private final ItemStack newItem;
 
-    public PlayerArmorChangeEvent(@NotNull Player player, @NotNull SlotType slotType, @Nullable ItemStack oldItem, @Nullable ItemStack newItem) {
+    public PlayerArmorChangeEvent(@NotNull final Player player, @NotNull final SlotType slotType, @Nullable final ItemStack oldItem, @Nullable final ItemStack newItem) {
         super(player);
         this.slotType = slotType;
         this.oldItem = oldItem;
@@ -86,10 +84,10 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
         LEGS(NETHERITE_LEGGINGS, DIAMOND_LEGGINGS, GOLDEN_LEGGINGS, IRON_LEGGINGS, CHAINMAIL_LEGGINGS, LEATHER_LEGGINGS),
         FEET(NETHERITE_BOOTS, DIAMOND_BOOTS, GOLDEN_BOOTS, IRON_BOOTS, CHAINMAIL_BOOTS, LEATHER_BOOTS);
 
-        private final Set<Material> mutableTypes = new HashSet<>();
+        private final EnumSet<Material> mutableTypes = EnumSet.noneOf(Material.class);
         private Set<Material> immutableTypes;
 
-        SlotType(Material... types) {
+        SlotType(final Material... types) {
             this.mutableTypes.addAll(Arrays.asList(types));
         }
 
@@ -115,8 +113,8 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
          * @return slot type the material will go in, or null if it won't
          */
         @Nullable
-        public static SlotType getByMaterial(@NotNull Material material) {
-            for (SlotType slotType : values()) {
+        public static SlotType getByMaterial(@NotNull final Material material) {
+            for (final SlotType slotType : values()) {
                 if (slotType.getTypes().contains(material)) {
                     return slotType;
                 }
@@ -130,7 +128,7 @@ public class PlayerArmorChangeEvent extends PlayerEvent {
          * @param material material to check
          * @return whether or not this material can be equipped
          */
-        public static boolean isEquipable(@NotNull Material material) {
+        public static boolean isEquipable(@NotNull final Material material) {
             return getByMaterial(material) != null;
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java
index ebdebe7b6ec6ed5aadc7ee925ba0147e61e6bc84..00bbc536c63179869c9be0af2e4ad6a5149d91ee 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerAttackEntityCooldownResetEvent.java
@@ -17,7 +17,7 @@ public class PlayerAttackEntityCooldownResetEvent extends PlayerEvent implements
     private static final HandlerList handlers = new HandlerList();
     @NotNull private final Entity attackedEntity;
 
-    public PlayerAttackEntityCooldownResetEvent(@NotNull Player who, @NotNull Entity attackedEntity, float cooledAttackStrength) {
+    public PlayerAttackEntityCooldownResetEvent(@NotNull final Player who, @NotNull final Entity attackedEntity, final float cooledAttackStrength) {
         super(who);
         this.attackedEntity = attackedEntity;
         this.cooledAttackStrength = cooledAttackStrength;
@@ -51,7 +51,7 @@ public class PlayerAttackEntityCooldownResetEvent extends PlayerEvent implements
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
index f7f171c4ee0b8339b2f8fbe82442d65f17202f28..e74871081e1ff858f3b4533f18c00b03aff254b3 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerClientOptionsChangeEvent.java
@@ -25,7 +25,7 @@ public class PlayerClientOptionsChangeEvent extends PlayerEvent {
     private final SkinParts skinparts;
     private final MainHand mainHand;
 
-    public PlayerClientOptionsChangeEvent(@NotNull Player player, @NotNull String locale, int viewDistance, @NotNull ChatVisibility chatVisibility, boolean chatColors, @NotNull SkinParts skinParts, @NotNull MainHand mainHand) {
+    public PlayerClientOptionsChangeEvent(@NotNull final Player player, @NotNull final String locale, final int viewDistance, @NotNull final ChatVisibility chatVisibility, final boolean chatColors, @NotNull final SkinParts skinParts, @NotNull final MainHand mainHand) {
         super(player);
         this.locale = locale;
         this.viewDistance = viewDistance;
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
index 18ea8ee77d5cf370b1a3e7cd5dcc57a4c14cb9cf..1274bf42ac45fc02f5c5ad9f42a22420c3e79eeb 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerElytraBoostEvent.java
@@ -18,7 +18,7 @@ public class PlayerElytraBoostEvent extends PlayerEvent implements Cancellable {
     @NotNull private final Firework firework;
     private boolean consume = true;
 
-    public PlayerElytraBoostEvent(@NotNull Player player, @NotNull ItemStack itemStack, @NotNull Firework firework) {
+    public PlayerElytraBoostEvent(@NotNull final Player player, @NotNull final ItemStack itemStack, @NotNull final Firework firework) {
         super(player);
         this.itemStack = itemStack;
         this.firework = firework;
@@ -58,7 +58,7 @@ public class PlayerElytraBoostEvent extends PlayerEvent implements Cancellable {
      *
      * @param consume True to consume
      */
-    public void setShouldConsume(boolean consume) {
+    public void setShouldConsume(final boolean consume) {
         this.consume = consume;
     }
 
@@ -79,7 +79,7 @@ public class PlayerElytraBoostEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
index a077962fa786a3291849abfa823c7f0ec4664fce..7ca998632caf710bf02932ab2cc3c5ea69b1fbb1 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerHandshakeEvent.java
@@ -42,7 +42,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @deprecated in favour of {@link PlayerHandshakeEvent(String, String, boolean)}
      */
     @Deprecated
-    public PlayerHandshakeEvent(@NotNull String originalHandshake, boolean cancelled) {
+    public PlayerHandshakeEvent(@NotNull final String originalHandshake, final boolean cancelled) {
         this(originalHandshake, "127.0.0.1", cancelled);
     }
 
@@ -53,7 +53,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @param originalSocketAddressHostname the original socket address hostname
      * @param cancelled if this event is enabled
      */
-    public PlayerHandshakeEvent(@NotNull String originalHandshake, @NotNull String originalSocketAddressHostname, boolean cancelled) {
+    public PlayerHandshakeEvent(@NotNull final String originalHandshake, @NotNull final String originalSocketAddressHostname, final boolean cancelled) {
         super(true);
         this.originalHandshake = originalHandshake;
         this.originalSocketAddressHostname = originalSocketAddressHostname;
@@ -82,7 +82,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @param cancelled {@code true} if this event is cancelled, {@code false} otherwise
      */
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
@@ -128,7 +128,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param serverHostname the server hostname string
      */
-    public void setServerHostname(@NotNull String serverHostname) {
+    public void setServerHostname(@NotNull final String serverHostname) {
         this.serverHostname = serverHostname;
     }
 
@@ -151,7 +151,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param socketAddressHostname the socket address hostname string
      */
-    public void setSocketAddressHostname(@NotNull String socketAddressHostname) {
+    public void setSocketAddressHostname(@NotNull final String socketAddressHostname) {
         this.socketAddressHostname = socketAddressHostname;
     }
 
@@ -170,7 +170,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param uniqueId the unique id
      */
-    public void setUniqueId(@NotNull UUID uniqueId) {
+    public void setUniqueId(@NotNull final UUID uniqueId) {
         this.uniqueId = uniqueId;
     }
 
@@ -206,7 +206,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param failed {@code true} if authentication failed, {@code false} otherwise
      */
-    public void setFailed(boolean failed) {
+    public void setFailed(final boolean failed) {
         this.failed = failed;
     }
 
@@ -217,7 +217,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param propertiesJson the profile properties, as JSON
      */
-    public void setPropertiesJson(@NotNull String propertiesJson) {
+    public void setPropertiesJson(@NotNull final String propertiesJson) {
         this.propertiesJson = propertiesJson;
     }
 
@@ -236,7 +236,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      *
      * @param failMessage the message to display to the client
      */
-    public void failMessage(@NotNull Component failMessage) {
+    public void failMessage(@NotNull final Component failMessage) {
         this.failMessage = failMessage;
     }
 
@@ -259,7 +259,7 @@ public class PlayerHandshakeEvent extends Event implements Cancellable {
      * @deprecated use {@link #failMessage(Component)}
      */
     @Deprecated
-    public void setFailMessage(@NotNull String failMessage) {
+    public void setFailMessage(@NotNull final String failMessage) {
         Validate.notEmpty(failMessage, "fail message cannot be null or empty");
         this.failMessage(Bukkit.getUnsafe().legacyComponentSerializer().deserialize(failMessage));
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java
index 8b1fdb9d2869d4c1862d557c91bf8a1d8c537507..4817f06da6b8f0cd83350680b31ab5bc84abef6e 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerInitialSpawnEvent.java
@@ -10,7 +10,7 @@ import org.spigotmc.event.player.PlayerSpawnLocationEvent;
  */
 public class PlayerInitialSpawnEvent extends PlayerSpawnLocationEvent {
 
-    public PlayerInitialSpawnEvent(@NotNull Player who, @NotNull Location spawnLocation) {
+    public PlayerInitialSpawnEvent(@NotNull final Player who, @NotNull final Location spawnLocation) {
         super(who, spawnLocation);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
index 2371deab89caf3f77cc9a8f668aef1427031a485..da74b698ed6deb29744faaf8eb757be046dee394 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerJumpEvent.java
@@ -51,7 +51,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
      *
      * @param cancel true if you wish to cancel this event
      */
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -70,7 +70,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
      *
      * @param from New location to mark as the players previous location
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         validateLocation(from);
         this.from = from;
     }
@@ -88,7 +88,7 @@ public class PlayerJumpEvent extends PlayerEvent implements Cancellable {
         return to;
     }
 
-    private void validateLocation(Location loc) {
+    private void validateLocation(final Location loc) {
         Preconditions.checkArgument(loc != null, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use location with null world!");
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java
index 9074b2ede01f76c0560e5318246382163cc91591..18653ec642ac19a90541753ffb5af44409970bb5 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerLaunchProjectileEvent.java
@@ -18,7 +18,7 @@ public class PlayerLaunchProjectileEvent extends PlayerEvent implements Cancella
     private boolean consumeItem = true;
     private boolean cancelled;
 
-    public PlayerLaunchProjectileEvent(@NotNull Player shooter, @NotNull ItemStack itemStack, @NotNull Projectile projectile) {
+    public PlayerLaunchProjectileEvent(@NotNull final Player shooter, @NotNull final ItemStack itemStack, @NotNull final Projectile projectile) {
         super(shooter);
         this.itemStack = itemStack;
         this.projectile = projectile;
@@ -58,7 +58,7 @@ public class PlayerLaunchProjectileEvent extends PlayerEvent implements Cancella
      *
      * @param consumeItem True to consume
      */
-    public void setShouldConsume(boolean consumeItem) {
+    public void setShouldConsume(final boolean consumeItem) {
         this.consumeItem = consumeItem;
     }
 
@@ -66,7 +66,7 @@ public class PlayerLaunchProjectileEvent extends PlayerEvent implements Cancella
         return cancelled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java
index 29dd763a99ce7c6ecb176b9fb346a400369d48a0..a238e91abd517fed38f4f9a9c058cca79d87d3e3 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerLocaleChangeEvent.java
@@ -3,6 +3,8 @@ package com.destroystokyo.paper.event.player;
 import org.bukkit.entity.Player;
 import org.bukkit.event.HandlerList;
 import org.bukkit.event.player.PlayerEvent;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Called when the locale of the player is changed.
@@ -40,7 +42,7 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
     }
 
     @Override
-    public HandlerList getHandlers() {
+    public @NotNull HandlerList getHandlers() {
         return handlers;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
index d117956ca6026ad676e1aa551b4f10ca83be0b7e..5a3de00eb94731e853d24dd0a62ab8b1d088745d 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerPickupExperienceEvent.java
@@ -36,7 +36,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerPickupExperienceEvent extends PlayerEvent implements Cancellable {
     @NotNull private final ExperienceOrb experienceOrb;
 
-    public PlayerPickupExperienceEvent(@NotNull Player player, @NotNull ExperienceOrb experienceOrb) {
+    public PlayerPickupExperienceEvent(@NotNull final Player player, @NotNull final ExperienceOrb experienceOrb) {
         super(player);
         this.experienceOrb = experienceOrb;
     }
@@ -73,7 +73,7 @@ public class PlayerPickupExperienceEvent extends PlayerEvent implements Cancella
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
index 5cf47f7ffd039add8bcdce9e08f52b2fc5aafcc6..13cedfc3934ce4f0a579bc5ac34bc9a206a33433 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerReadyArrowEvent.java
@@ -37,7 +37,7 @@ public class PlayerReadyArrowEvent extends PlayerEvent implements Cancellable {
     @NotNull private final ItemStack bow;
     @NotNull private final ItemStack arrow;
 
-    public PlayerReadyArrowEvent(@NotNull Player player, @NotNull ItemStack bow, @NotNull ItemStack arrow) {
+    public PlayerReadyArrowEvent(@NotNull final Player player, @NotNull final ItemStack bow, @NotNull final ItemStack arrow) {
         super(player);
         this.bow = bow;
         this.arrow = arrow;
@@ -86,7 +86,7 @@ public class PlayerReadyArrowEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java
index 7fa937d339ee98ad308deebb523fead6522eb262..d53869afc80d101577c8796a75f771974297359b 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerRecipeBookClickEvent.java
@@ -16,7 +16,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
     @NotNull private NamespacedKey recipe;
     private boolean makeAll;
 
-    public PlayerRecipeBookClickEvent(@NotNull Player player, @NotNull NamespacedKey recipe, boolean makeAll) {
+    public PlayerRecipeBookClickEvent(@NotNull final Player player, @NotNull final NamespacedKey recipe, final boolean makeAll) {
         super(player);
         this.recipe = recipe;
         this.makeAll = makeAll;
@@ -37,7 +37,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
      *
      * @param recipe The key of the recipe that should be requested
      */
-    public void setRecipe(@NotNull NamespacedKey recipe) {
+    public void setRecipe(@NotNull final NamespacedKey recipe) {
         this.recipe = recipe;
     }
 
@@ -57,7 +57,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
      *
      * @param makeAll {@code true} if the request should attempt to make the maximum amount of results
      */
-    public void setMakeAll(boolean makeAll) {
+    public void setMakeAll(final boolean makeAll) {
         this.makeAll = makeAll;
     }
 
@@ -67,7 +67,7 @@ public class PlayerRecipeBookClickEvent extends PlayerEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java
index b8ec7ef2d4ef0683cc0d6ca86885dd9a01f47e16..289193177c7353df189eaf802790afd754e035db 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerStartSpectatingEntityEvent.java
@@ -17,7 +17,7 @@ public class PlayerStartSpectatingEntityEvent extends PlayerEvent implements Can
     @NotNull private final Entity currentSpectatorTarget;
     @NotNull private final Entity newSpectatorTarget;
 
-    public PlayerStartSpectatingEntityEvent(@NotNull Player player, @NotNull Entity currentSpectatorTarget, @NotNull Entity newSpectatorTarget) {
+    public PlayerStartSpectatingEntityEvent(@NotNull final Player player, @NotNull final Entity currentSpectatorTarget, @NotNull final Entity newSpectatorTarget) {
         super(player);
         this.currentSpectatorTarget = currentSpectatorTarget;
         this.newSpectatorTarget = newSpectatorTarget;
@@ -49,7 +49,7 @@ public class PlayerStartSpectatingEntityEvent extends PlayerEvent implements Can
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java
index 693d119ab920a1bd0d1b5a0feb092631715ec0ad..f772884beaeb4781b09e4e62827b37bfe47bef24 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerStopSpectatingEntityEvent.java
@@ -16,7 +16,7 @@ public class PlayerStopSpectatingEntityEvent extends PlayerEvent implements Canc
     private boolean cancelled;
     @NotNull private final Entity spectatorTarget;
 
-    public PlayerStopSpectatingEntityEvent(@NotNull Player player, @NotNull Entity spectatorTarget) {
+    public PlayerStopSpectatingEntityEvent(@NotNull final Player player, @NotNull final Entity spectatorTarget) {
         super(player);
         this.spectatorTarget = spectatorTarget;
     }
@@ -37,7 +37,7 @@ public class PlayerStopSpectatingEntityEvent extends PlayerEvent implements Canc
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java
index b64ab6eecd8bc4ca9c109b9d83c82861d6260793..899ecbbbd459e5d508ee10e5218133223437c7fd 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerTeleportEndGatewayEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public class PlayerTeleportEndGatewayEvent extends PlayerTeleportEvent {
     @NotNull private final EndGateway gateway;
 
-    public PlayerTeleportEndGatewayEvent(@NotNull Player player, @NotNull Location from, @NotNull Location to, @NotNull EndGateway gateway) {
+    public PlayerTeleportEndGatewayEvent(@NotNull final Player player, @NotNull final Location from, @NotNull final Location to, @NotNull final EndGateway gateway) {
         super(player, from, to, PlayerTeleportEvent.TeleportCause.END_GATEWAY);
         this.gateway = gateway;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java b/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
index 09cfdf48ead8f03f3497646537292174241b0868..56b5b1f2f06e42de321ec07e099f6913a85218fb 100644
--- a/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/player/PlayerUseUnknownEntityEvent.java
@@ -13,7 +13,7 @@ public class PlayerUseUnknownEntityEvent extends PlayerEvent {
     private final boolean attack;
     @NotNull private final EquipmentSlot hand;
 
-    public PlayerUseUnknownEntityEvent(@NotNull Player who, int entityId, boolean attack, @NotNull EquipmentSlot hand) {
+    public PlayerUseUnknownEntityEvent(@NotNull final Player who, final int entityId, final boolean attack, @NotNull final EquipmentSlot hand) {
         super(who);
         this.entityId = entityId;
         this.attack = attack;
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
index 71f36e9cae209ec6861835a5e76e018de959040a..a987ae74bb56a53c869a9671608c8eddf996c54a 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/FillProfileEvent.java
@@ -37,7 +37,7 @@ import org.jetbrains.annotations.NotNull;
 public class FillProfileEvent extends Event {
     @NotNull private final PlayerProfile profile;
 
-    public FillProfileEvent(@NotNull PlayerProfile profile) {
+    public FillProfileEvent(@NotNull final PlayerProfile profile) {
         super(!org.bukkit.Bukkit.isPrimaryThread());
         this.profile = profile;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
index 8df37c07cd55ddf110d1dd68183d7b697f7a6756..a5b7e84456e01a08f62281109abdc63d4d982b64 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/LookupProfileEvent.java
@@ -20,7 +20,7 @@ public class LookupProfileEvent extends Event {
 
     @NotNull private final PlayerProfile profile;
 
-    public LookupProfileEvent(@NotNull PlayerProfile profile) {
+    public LookupProfileEvent(@NotNull final PlayerProfile profile) {
         super(!Bukkit.isPrimaryThread());
         this.profile = profile;
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
index 021bc86310a06f84b39459e0eb8927802726399c..7c7ec07b176704dd7d168d8cb03a346a56bf8993 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreFillProfileEvent.java
@@ -39,7 +39,7 @@ import org.jetbrains.annotations.NotNull;
 public class PreFillProfileEvent extends Event {
     @NotNull private final PlayerProfile profile;
 
-    public PreFillProfileEvent(@NotNull PlayerProfile profile) {
+    public PreFillProfileEvent(@NotNull final PlayerProfile profile) {
         super(!org.bukkit.Bukkit.isPrimaryThread());
         this.profile = profile;
     }
@@ -59,7 +59,7 @@ public class PreFillProfileEvent extends Event {
      * @see PlayerProfile#setProperties(Collection)
      * @param properties The properties to set/append
      */
-    public void setProperties(@NotNull Collection<ProfileProperty> properties) {
+    public void setProperties(@NotNull final Collection<ProfileProperty> properties) {
         profile.setProperties(properties);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
index 2840f684f8a5d2018fa6a31b59b75be80e97f704..4e005ddcee7643484a9ca2d99d1bed7c67b5be57 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/PreLookupProfileEvent.java
@@ -28,7 +28,7 @@ public class PreLookupProfileEvent extends Event {
     private UUID uuid;
     @NotNull private Set<ProfileProperty> properties = new HashSet<>();
 
-    public PreLookupProfileEvent(@NotNull String name) {
+    public PreLookupProfileEvent(@NotNull final String name) {
         super(!Bukkit.isPrimaryThread());
         this.name = name;
     }
@@ -60,7 +60,7 @@ public class PreLookupProfileEvent extends Event {
      *
      * @param uuid the UUID to set for the profile or null to reset
      */
-    public void setUUID(@Nullable UUID uuid) {
+    public void setUUID(@Nullable final UUID uuid) {
         this.uuid = uuid;
     }
 
@@ -78,7 +78,7 @@ public class PreLookupProfileEvent extends Event {
      * Any property in this Set will be automatically prefilled on this Profile
      * @param properties The properties to add
      */
-    public void setProfileProperties(@NotNull Set<ProfileProperty> properties) {
+    public void setProfileProperties(@NotNull final Set<ProfileProperty> properties) {
         this.properties = new HashSet<>();
         this.properties.addAll(properties);
     }
@@ -88,7 +88,7 @@ public class PreLookupProfileEvent extends Event {
      * Any property in this Set will be automatically prefilled on this Profile
      * @param properties The properties to add
      */
-    public void addProfileProperties(@NotNull Set<ProfileProperty> properties) {
+    public void addProfileProperties(@NotNull final Set<ProfileProperty> properties) {
         this.properties.addAll(properties);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java b/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java
index 8a259ab49ea79673b6da9e4e2aaecec67469994e..65df91a63a532207a5c1af630692d15ae086b011 100644
--- a/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/profile/ProfileWhitelistVerifyEvent.java
@@ -46,11 +46,11 @@ public class ProfileWhitelistVerifyEvent extends Event {
     @Nullable private Component kickMessage;
 
     @Deprecated
-    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, boolean whitelistEnabled, boolean whitelisted, boolean isOp, @Nullable String kickMessage) {
+    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, final boolean whitelistEnabled, final boolean whitelisted, final boolean isOp, @Nullable final String kickMessage) {
         this(profile, whitelistEnabled, whitelisted, isOp, kickMessage == null ? null : Bukkit.getUnsafe().legacyComponentSerializer().deserialize(kickMessage));
     }
 
-    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, boolean whitelistEnabled, boolean whitelisted, boolean isOp, @Nullable Component kickMessage) {
+    public ProfileWhitelistVerifyEvent(@NotNull final PlayerProfile profile, final boolean whitelistEnabled, final boolean whitelisted, final boolean isOp, @Nullable final Component kickMessage) {
         this.profile = profile;
         this.whitelistEnabled = whitelistEnabled;
         this.whitelisted = whitelisted;
@@ -73,7 +73,7 @@ public class ProfileWhitelistVerifyEvent extends Event {
      * @deprecated Use {@link #kickMessage(Component)}
      */
     @Deprecated
-    public void setKickMessage(@Nullable String kickMessage) {
+    public void setKickMessage(@Nullable final String kickMessage) {
         this.kickMessage(kickMessage == null ? null : Bukkit.getUnsafe().legacyComponentSerializer().deserialize(kickMessage));
     }
 
@@ -88,7 +88,7 @@ public class ProfileWhitelistVerifyEvent extends Event {
     /**
      * @param kickMessage The message to send to the player on kick if not whitelisted. May set to null to use the server configured default
      */
-    public void kickMessage(@Nullable Component kickMessage) {
+    public void kickMessage(@Nullable final Component kickMessage) {
         this.kickMessage = kickMessage;
     }
 
@@ -111,7 +111,7 @@ public class ProfileWhitelistVerifyEvent extends Event {
      * Changes the players whitelisted state. false will deny the login
      * @param whitelisted The new whitelisted state
      */
-    public void setWhitelisted(boolean whitelisted) {
+    public void setWhitelisted(final boolean whitelisted) {
         this.whitelisted = whitelisted;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
index 07a5f8d538384d8e6bfbb890f0e8c53aaf6d26b3..116e5ea027ca9d2033d0350bc52121de76b310a6 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/AsyncTabCompleteEvent.java
@@ -52,7 +52,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
     private boolean handled = false;
     private final boolean fireSyncHandler = true;
 
-    public AsyncTabCompleteEvent(@NotNull CommandSender sender, @NotNull List<String> completions, @NotNull String buffer, boolean isCommand, @Nullable Location loc) {
+    public AsyncTabCompleteEvent(@NotNull final CommandSender sender, @NotNull final List<String> completions, @NotNull final String buffer, final boolean isCommand, @Nullable final Location loc) {
         super(true);
         this.sender = sender;
         this.completions = completions;
@@ -96,7 +96,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
      *
      * @param completions the new completions
      */
-    public void setCompletions(@NotNull List<String> completions) {
+    public void setCompletions(@NotNull final List<String> completions) {
         Validate.notNull(completions);
         this.completions = new ArrayList<>(completions);
     }
@@ -143,7 +143,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
      *
      * @param handled if this completion should be marked as being handled
      */
-    public void setHandled(boolean handled) {
+    public void setHandled(final boolean handled) {
         this.handled = handled;
     }
 
@@ -160,7 +160,7 @@ public class AsyncTabCompleteEvent extends Event implements Cancellable {
      * @param cancelled true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
index ed41986aaca15f66904705473523d9f30763bd7c..b77b4261ea48a6cd0e2f825493f26f1cbfc50701 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/GS4QueryEvent.java
@@ -26,7 +26,7 @@ public final class GS4QueryEvent extends Event {
     private final InetAddress querierAddress;
     private QueryResponse response;
 
-    public GS4QueryEvent(@NotNull QueryType queryType, @NotNull InetAddress querierAddress, @NotNull QueryResponse response) {
+    public GS4QueryEvent(@NotNull final QueryType queryType, @NotNull final InetAddress querierAddress, @NotNull final QueryResponse response) {
         super(true); // should always be called async
         this.queryType = Preconditions.checkNotNull(queryType, "queryType");
         this.querierAddress = Preconditions.checkNotNull(querierAddress, "querierAddress");
@@ -64,7 +64,7 @@ public final class GS4QueryEvent extends Event {
      * Set query response
      * @param response query response
      */
-    public void setResponse(@NotNull QueryResponse response) {
+    public void setResponse(@NotNull final QueryResponse response) {
         this.response = Preconditions.checkNotNull(response, "response");
     }
 
@@ -116,7 +116,7 @@ public final class GS4QueryEvent extends Event {
         private final String serverVersion;
         private final Collection<PluginInformation> plugins;
 
-        private QueryResponse(String motd, String gameVersion, String map, int currentPlayers, int maxPlayers, String hostname, int port, Collection<String> players, String serverVersion, Collection<PluginInformation> plugins) {
+        private QueryResponse(final String motd, final String gameVersion, final String map, final int currentPlayers, final int maxPlayers, final String hostname, final int port, final Collection<String> players, final String serverVersion, final Collection<PluginInformation> plugins) {
             this.motd = motd;
             this.gameVersion = gameVersion;
             this.map = map;
@@ -265,58 +265,58 @@ public final class GS4QueryEvent extends Event {
             private Builder() {}
 
             @NotNull
-            public Builder motd(@NotNull String motd) {
+            public Builder motd(@NotNull final String motd) {
                 this.motd = Preconditions.checkNotNull(motd, "motd");
                 return this;
             }
 
             @NotNull
-            public Builder gameVersion(@NotNull String gameVersion) {
+            public Builder gameVersion(@NotNull final String gameVersion) {
                 this.gameVersion = Preconditions.checkNotNull(gameVersion, "gameVersion");
                 return this;
             }
 
             @NotNull
-            public Builder map(@NotNull String map) {
+            public Builder map(@NotNull final String map) {
                 this.map = Preconditions.checkNotNull(map, "map");
                 return this;
             }
 
             @NotNull
-            public Builder currentPlayers(int currentPlayers) {
+            public Builder currentPlayers(final int currentPlayers) {
                 Preconditions.checkArgument(currentPlayers >= 0, "currentPlayers cannot be negative");
                 this.currentPlayers = currentPlayers;
                 return this;
             }
 
             @NotNull
-            public Builder maxPlayers(int maxPlayers) {
+            public Builder maxPlayers(final int maxPlayers) {
                 Preconditions.checkArgument(maxPlayers >= 0, "maxPlayers cannot be negative");
                 this.maxPlayers = maxPlayers;
                 return this;
             }
 
             @NotNull
-            public Builder hostname(@NotNull String hostname) {
+            public Builder hostname(@NotNull final String hostname) {
                 this.hostname = Preconditions.checkNotNull(hostname, "hostname");
                 return this;
             }
 
             @NotNull
-            public Builder port(int port) {
+            public Builder port(final int port) {
                 Preconditions.checkArgument(port >= 1 && port <= 65535, "port must be between 1-65535");
                 this.port = port;
                 return this;
             }
 
             @NotNull
-            public Builder players(@NotNull Collection<String> players) {
+            public Builder players(@NotNull final Collection<String> players) {
                 this.players.addAll(Preconditions.checkNotNull(players, "players"));
                 return this;
             }
 
             @NotNull
-            public Builder players(@NotNull String... players) {
+            public Builder players(@NotNull final String... players) {
                 this.players.addAll(Arrays.asList(Preconditions.checkNotNull(players, "players")));
                 return this;
             }
@@ -328,19 +328,19 @@ public final class GS4QueryEvent extends Event {
             }
 
             @NotNull
-            public Builder serverVersion(@NotNull String serverVersion) {
+            public Builder serverVersion(@NotNull final String serverVersion) {
                 this.serverVersion = Preconditions.checkNotNull(serverVersion, "serverVersion");
                 return this;
             }
 
             @NotNull
-            public Builder plugins(@NotNull Collection<PluginInformation> plugins) {
+            public Builder plugins(@NotNull final Collection<PluginInformation> plugins) {
                 this.plugins.addAll(Preconditions.checkNotNull(plugins, "plugins"));
                 return this;
             }
 
             @NotNull
-            public Builder plugins(@NotNull PluginInformation... plugins) {
+            public Builder plugins(@NotNull final PluginInformation... plugins) {
                 this.plugins.addAll(Arrays.asList(Preconditions.checkNotNull(plugins, "plugins")));
                 return this;
             }
@@ -379,7 +379,7 @@ public final class GS4QueryEvent extends Event {
             private String name;
             private String version;
 
-            public PluginInformation(@NotNull String name, @NotNull String version) {
+            public PluginInformation(@NotNull final String name, @NotNull final String version) {
                 this.name = Preconditions.checkNotNull(name, "name");
                 this.version = Preconditions.checkNotNull(version, "version");
             }
@@ -389,11 +389,11 @@ public final class GS4QueryEvent extends Event {
                 return name;
             }
 
-            public void setName(@NotNull String name) {
+            public void setName(@NotNull final String name) {
                 this.name = name;
             }
 
-            public void setVersion(@NotNull String version) {
+            public void setVersion(@NotNull final String version) {
                 this.version = version;
             }
 
@@ -403,7 +403,7 @@ public final class GS4QueryEvent extends Event {
             }
 
             @NotNull
-            public static PluginInformation of(@NotNull String name, @NotNull String version) {
+            public static PluginInformation of(@NotNull final String name, @NotNull final String version) {
                 return new PluginInformation(name, version);
             }
         }
diff --git a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
index baac2e4f090a490372ef4aed92c8a5771955e921..d6302ab0af55d50be71817d9bbfdcc16c9f8d909 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/PaperServerListPingEvent.java
@@ -42,8 +42,8 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
     private Object[] players;
 
     @Deprecated
-    public PaperServerListPingEvent(@NotNull StatusClient client, @NotNull String motd, int numPlayers, int maxPlayers,
-            @NotNull String version, int protocolVersion, @Nullable CachedServerIcon favicon) {
+    public PaperServerListPingEvent(@NotNull final StatusClient client, @NotNull final String motd, final int numPlayers, final int maxPlayers,
+                                    @NotNull final String version, final int protocolVersion, @Nullable final CachedServerIcon favicon) {
         super(client.getAddress().getAddress(), motd, numPlayers, maxPlayers);
         this.client = client;
         this.numPlayers = numPlayers;
@@ -52,8 +52,8 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
         setServerIcon(favicon);
     }
 
-    public PaperServerListPingEvent(@NotNull StatusClient client, @NotNull net.kyori.adventure.text.Component motd, int numPlayers, int maxPlayers,
-                                    @NotNull String version, int protocolVersion, @Nullable CachedServerIcon favicon) {
+    public PaperServerListPingEvent(@NotNull final StatusClient client, @NotNull final net.kyori.adventure.text.Component motd, final int numPlayers, final int maxPlayers,
+                                    @NotNull final String version, final int protocolVersion, @Nullable final CachedServerIcon favicon) {
         super(client.getAddress().getAddress(), motd, numPlayers, maxPlayers);
         this.client = client;
         this.numPlayers = numPlayers;
@@ -95,7 +95,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param numPlayers The number of online players
      */
-    public void setNumPlayers(int numPlayers) {
+    public void setNumPlayers(final int numPlayers) {
         if (this.numPlayers != numPlayers) {
             this.numPlayers = numPlayers;
             this.originalPlayerCount = false;
@@ -141,7 +141,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param hidePlayers {@code true} if the player count should be hidden
      */
-    public void setHidePlayers(boolean hidePlayers) {
+    public void setHidePlayers(final boolean hidePlayers) {
         this.hidePlayers = hidePlayers;
     }
 
@@ -174,7 +174,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param version The server version
      */
-    public void setVersion(@NotNull String version) {
+    public void setVersion(@NotNull final String version) {
         this.version = requireNonNull(version, "version");
     }
 
@@ -195,7 +195,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      *
      * @param protocolVersion The protocol version of the server
      */
-    public void setProtocolVersion(int protocolVersion) {
+    public void setProtocolVersion(final int protocolVersion) {
         this.protocolVersion = protocolVersion;
     }
 
@@ -242,7 +242,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
      * without sending a response to the client.</p>
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
@@ -276,7 +276,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
     }
 
     @NotNull
-    protected Player getBukkitPlayer(@NotNull Object player) {
+    protected Player getBukkitPlayer(@NotNull final Object player) {
         return (Player) player;
     }
 
@@ -315,7 +315,7 @@ public class PaperServerListPingEvent extends ServerListPingEvent implements Can
                 throw new IllegalStateException();
             }
 
-            UUID uniqueId = this.player.getUniqueId();
+            final UUID uniqueId = this.player.getUniqueId();
             this.player = null;
 
             // Remove player from iterator
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
index 8406c852c4fd806145ec8d89f176af464e0e922b..688a808a60eb1ba0922144c80137717843dfb3a3 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerExceptionEvent.java
@@ -14,7 +14,7 @@ public class ServerExceptionEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     @NotNull private final ServerException exception;
 
-    public ServerExceptionEvent(@NotNull ServerException exception) {
+    public ServerExceptionEvent(@NotNull final ServerException exception) {
         super(!Bukkit.isPrimaryThread());
         this.exception = Preconditions.checkNotNull(exception, "exception");
     }
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java
index 9fd28e03649f66f71fb7f0536a137557ec32cd25..47840cc574f7d110e0ed965829195fffd2cd6a0e 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerTickEndEvent.java
@@ -14,7 +14,7 @@ public class ServerTickEndEvent extends Event {
     private final double tickDuration;
     private final long timeEnd;
 
-    public ServerTickEndEvent(int tickNumber, double tickDuration, long timeRemaining) {
+    public ServerTickEndEvent(final int tickNumber, final double tickDuration, final long timeRemaining) {
         this.tickNumber = tickNumber;
         this.tickDuration = tickDuration;
         this.timeEnd = System.nanoTime() + timeRemaining;
diff --git a/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java b/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
index eac85f1f49088bb71afb01eff4d5f53887306461..c6d1e2f65bf903cdba5a62dc4167140d228393e0 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/ServerTickStartEvent.java
@@ -9,7 +9,7 @@ public class ServerTickStartEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     private final int tickNumber;
 
-    public ServerTickStartEvent(int tickNumber) {
+    public ServerTickStartEvent(final int tickNumber) {
         this.tickNumber = tickNumber;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java b/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
index 6ecb63067d73c8677d0c6c544ff5fc9b6f6ca9c0..1eac64525aefd98172508559e0a10cab64176e29 100644
--- a/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
+++ b/src/main/java/com/destroystokyo/paper/event/server/WhitelistToggleEvent.java
@@ -14,7 +14,7 @@ public class WhitelistToggleEvent extends Event {
 
     private final boolean enabled;
 
-    public WhitelistToggleEvent(boolean enabled) {
+    public WhitelistToggleEvent(final boolean enabled) {
         this.enabled = enabled;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java b/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
index 6fb39af0479a818f7f1465bcdfe505ab4ff7da1a..c382b2de9feafa875483db342a96250b404079ca 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerCommandException.java
@@ -14,21 +14,21 @@ public class ServerCommandException extends ServerException {
     private final CommandSender commandSender;
     private final String[] arguments;
 
-    public ServerCommandException(String message, Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerCommandException(final String message, final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause);
         this.commandSender = checkNotNull(commandSender, "commandSender");
         this.arguments = checkNotNull(arguments, "arguments");
         this.command = checkNotNull(command, "command");
     }
 
-    public ServerCommandException(Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerCommandException(final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(cause);
         this.commandSender = checkNotNull(commandSender, "commandSender");
         this.arguments = checkNotNull(arguments, "arguments");
         this.command = checkNotNull(command, "command");
     }
 
-    protected ServerCommandException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Command command, CommandSender commandSender, String[] arguments) {
+    protected ServerCommandException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause, enableSuppression, writableStackTrace);
         this.commandSender = checkNotNull(commandSender, "commandSender");
         this.arguments = checkNotNull(arguments, "arguments");
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
index 410b24139535cd5d8439ad581c43c61b5757fbf6..3be3bf6f3384b4a932eb4afee69f6e6488457e6d 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerEventException.java
@@ -14,19 +14,19 @@ public class ServerEventException extends ServerPluginException {
     private final Listener listener;
     private final Event event;
 
-    public ServerEventException(String message, Throwable cause, Plugin responsiblePlugin, Listener listener, Event event) {
+    public ServerEventException(final String message, final Throwable cause, final Plugin responsiblePlugin, final Listener listener, final Event event) {
         super(message, cause, responsiblePlugin);
         this.listener = checkNotNull(listener, "listener");
         this.event = checkNotNull(event, "event");
     }
 
-    public ServerEventException(Throwable cause, Plugin responsiblePlugin, Listener listener, Event event) {
+    public ServerEventException(final Throwable cause, final Plugin responsiblePlugin, final Listener listener, final Event event) {
         super(cause, responsiblePlugin);
         this.listener = checkNotNull(listener, "listener");
         this.event = checkNotNull(event, "event");
     }
 
-    protected ServerEventException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin, Listener listener, Event event) {
+    protected ServerEventException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin, final Listener listener, final Event event) {
         super(message, cause, enableSuppression, writableStackTrace, responsiblePlugin);
         this.listener = checkNotNull(listener, "listener");
         this.event = checkNotNull(event, "event");
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerException.java b/src/main/java/com/destroystokyo/paper/exception/ServerException.java
index c06ea3942447d4824b83ff839cb449fb818dede1..0d4a3369eb35da58e6bcc02cdaf1637bc8e9b57f 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerException.java
@@ -5,19 +5,19 @@ package com.destroystokyo.paper.exception;
  */
 public class ServerException extends Exception {
 
-    public ServerException(String message) {
+    public ServerException(final String message) {
         super(message);
     }
 
-    public ServerException(String message, Throwable cause) {
+    public ServerException(final String message, final Throwable cause) {
         super(message, cause);
     }
 
-    public ServerException(Throwable cause) {
+    public ServerException(final Throwable cause) {
         super(cause);
     }
 
-    protected ServerException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
+    protected ServerException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace) {
         super(message, cause, enableSuppression, writableStackTrace);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
index f235f199af9eb52933093224e991ae3b62948375..987b31de96aae3f32a8b25df66abf9c60b016dbd 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerInternalException.java
@@ -8,26 +8,26 @@ import com.destroystokyo.paper.event.server.ServerExceptionEvent;
  */
 public class ServerInternalException extends ServerException {
 
-    public ServerInternalException(String message) {
+    public ServerInternalException(final String message) {
         super(message);
     }
 
-    public ServerInternalException(String message, Throwable cause) {
+    public ServerInternalException(final String message, final Throwable cause) {
         super(message, cause);
     }
 
-    public ServerInternalException(Throwable cause) {
+    public ServerInternalException(final Throwable cause) {
         super(cause);
     }
 
-    protected ServerInternalException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace) {
+    protected ServerInternalException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace) {
         super(message, cause, enableSuppression, writableStackTrace);
     }
 
-    public static void reportInternalException(Throwable cause) {
+    public static void reportInternalException(final Throwable cause) {
         try {
             Bukkit.getPluginManager().callEvent(new ServerExceptionEvent(new ServerInternalException(cause)));
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             t.printStackTrace(); // Don't want to rethrow!
         }
     }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java
index f016ba3b1b62e554a9bacbb9635f2dbe441b3c4e..d02bd011f6a631e65b3a549673335e5d51252700 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginEnableDisableException.java
@@ -6,15 +6,15 @@ import org.bukkit.plugin.Plugin;
  * Thrown whenever there is an exception with any enabling or disabling of plugins.
  */
 public class ServerPluginEnableDisableException extends ServerPluginException {
-    public ServerPluginEnableDisableException(String message, Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginEnableDisableException(final String message, final Throwable cause, final Plugin responsiblePlugin) {
         super(message, cause, responsiblePlugin);
     }
 
-    public ServerPluginEnableDisableException(Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginEnableDisableException(final Throwable cause, final Plugin responsiblePlugin) {
         super(cause, responsiblePlugin);
     }
 
-    protected ServerPluginEnableDisableException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin) {
+    protected ServerPluginEnableDisableException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin) {
         super(message, cause, enableSuppression, writableStackTrace, responsiblePlugin);
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
index 144de8be0c7c5c5bc22c90412ac8b8373e44e1b9..639b8812bed6495cb33dc6d11b408535645ad84b 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginException.java
@@ -8,17 +8,17 @@ import static com.google.common.base.Preconditions.*;
  * Wrapper exception for all cases to which a plugin can be immediately blamed for
  */
 public class ServerPluginException extends ServerException {
-    public ServerPluginException(String message, Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginException(final String message, final Throwable cause, final Plugin responsiblePlugin) {
         super(message, cause);
         this.responsiblePlugin = checkNotNull(responsiblePlugin, "responsiblePlugin");
     }
 
-    public ServerPluginException(Throwable cause, Plugin responsiblePlugin) {
+    public ServerPluginException(final Throwable cause, final Plugin responsiblePlugin) {
         super(cause);
         this.responsiblePlugin = checkNotNull(responsiblePlugin, "responsiblePlugin");
     }
 
-    protected ServerPluginException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin) {
+    protected ServerPluginException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin) {
         super(message, cause, enableSuppression, writableStackTrace);
         this.responsiblePlugin = checkNotNull(responsiblePlugin, "responsiblePlugin");
     }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
index 89e132525cfae0ce979e37b3e2793df781e47227..3e7a15316f94c7dae89e08d539c3113a7b5c3cbb 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerPluginMessageException.java
@@ -14,21 +14,21 @@ public class ServerPluginMessageException extends ServerPluginException {
     private final String channel;
     private final byte[] data;
 
-    public ServerPluginMessageException(String message, Throwable cause, Plugin responsiblePlugin, Player player, String channel, byte[] data) {
+    public ServerPluginMessageException(final String message, final Throwable cause, final Plugin responsiblePlugin, final Player player, final String channel, final byte[] data) {
         super(message, cause, responsiblePlugin);
         this.player = checkNotNull(player, "player");
         this.channel = checkNotNull(channel, "channel");
         this.data = checkNotNull(data, "data");
     }
 
-    public ServerPluginMessageException(Throwable cause, Plugin responsiblePlugin, Player player, String channel, byte[] data) {
+    public ServerPluginMessageException(final Throwable cause, final Plugin responsiblePlugin, final Player player, final String channel, final byte[] data) {
         super(cause, responsiblePlugin);
         this.player = checkNotNull(player, "player");
         this.channel = checkNotNull(channel, "channel");
         this.data = checkNotNull(data, "data");
     }
 
-    protected ServerPluginMessageException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Plugin responsiblePlugin, Player player, String channel, byte[] data) {
+    protected ServerPluginMessageException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Plugin responsiblePlugin, final Player player, final String channel, final byte[] data) {
         super(message, cause, enableSuppression, writableStackTrace, responsiblePlugin);
         this.player = checkNotNull(player, "player");
         this.channel = checkNotNull(channel, "channel");
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java b/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
index 2d0b2d4a9b3e5bdeec0e4ea7ab69858d86aa3715..69c72f7dda094e35bc0ce772f0a87d6fbdf0f748 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerSchedulerException.java
@@ -11,17 +11,17 @@ public class ServerSchedulerException extends ServerPluginException {
 
     private final BukkitTask task;
 
-    public ServerSchedulerException(String message, Throwable cause, BukkitTask task) {
+    public ServerSchedulerException(final String message, final Throwable cause, final BukkitTask task) {
         super(message, cause, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
 
-    public ServerSchedulerException(Throwable cause, BukkitTask task) {
+    public ServerSchedulerException(final Throwable cause, final BukkitTask task) {
         super(cause, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
 
-    protected ServerSchedulerException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, BukkitTask task) {
+    protected ServerSchedulerException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final BukkitTask task) {
         super(message, cause, enableSuppression, writableStackTrace, task.getOwner());
         this.task = checkNotNull(task, "task");
     }
diff --git a/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java b/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java
index 5582999fe94c7a3dac655044ccc6d078cd9521a1..dd97631c6fa7b04938326013785cbf4affa27951 100644
--- a/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java
+++ b/src/main/java/com/destroystokyo/paper/exception/ServerTabCompleteException.java
@@ -8,15 +8,15 @@ import org.bukkit.command.CommandSender;
  */
 public class ServerTabCompleteException extends ServerCommandException {
 
-    public ServerTabCompleteException(String message, Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerTabCompleteException(final String message, final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause, command, commandSender, arguments);
     }
 
-    public ServerTabCompleteException(Throwable cause, Command command, CommandSender commandSender, String[] arguments) {
+    public ServerTabCompleteException(final Throwable cause, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(cause, command, commandSender, arguments);
     }
 
-    protected ServerTabCompleteException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Command command, CommandSender commandSender, String[] arguments) {
+    protected ServerTabCompleteException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Command command, final CommandSender commandSender, final String[] arguments) {
         super(message, cause, enableSuppression, writableStackTrace, command, commandSender, arguments);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java b/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
index 43e6576b1d1bb811f9feb22de0024d9c823cb21a..16e20e482b0b5075d1ccc9490e7e2f93f6c77e2f 100644
--- a/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
+++ b/src/main/java/com/destroystokyo/paper/inventory/ItemStackRecipeChoice.java
@@ -2,6 +2,7 @@ package com.destroystokyo.paper.inventory;
 
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.RecipeChoice;
+import org.jetbrains.annotations.NotNull;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -15,33 +16,33 @@ public class ItemStackRecipeChoice implements RecipeChoice {
 
     protected final List<ItemStack> choices = new ArrayList<>();
 
-    public ItemStackRecipeChoice(ItemStack choices) {
+    public ItemStackRecipeChoice(final ItemStack choices) {
         this.choices.add(choices);
     }
 
-    public ItemStackRecipeChoice(List<ItemStack> choices) {
+    public ItemStackRecipeChoice(final List<ItemStack> choices) {
         this.choices.addAll(choices);
     }
 
     @Override
-    public ItemStack getItemStack() {
+    public @NotNull ItemStack getItemStack() {
         return choices.isEmpty() ? null : choices.get(0);
     }
 
     @Override
-    public RecipeChoice clone() {
+    public @NotNull RecipeChoice clone() {
         try {
-            ItemStackRecipeChoice clone = (ItemStackRecipeChoice) super.clone();
+            final ItemStackRecipeChoice clone = (ItemStackRecipeChoice) super.clone();
             clone.choices.addAll(this.choices);
             return clone;
-        } catch (CloneNotSupportedException ex) {
+        } catch (final CloneNotSupportedException ex) {
             throw new AssertionError(ex);
         }
     }
 
     @Override
-    public boolean test(ItemStack itemStack) {
-        for (ItemStack stack : choices) {
+    public boolean test(final @NotNull ItemStack itemStack) {
+        for (final ItemStack stack : choices) {
             if (stack.isSimilar(itemStack)) {
                 return true;
             }
diff --git a/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java b/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
index 97815eeb231cf0706b34fa47a4f7d1bb786305b4..6bad56ddc34aa85df23244031296154df1fdb246 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/LootableInventory.java
@@ -37,7 +37,7 @@ public interface LootableInventory extends Lootable {
      * @param player The player to check
      * @return Whether or not this player has looted this block
      */
-    default boolean hasPlayerLooted(@NotNull Player player) {
+    default boolean hasPlayerLooted(@NotNull final Player player) {
         return hasPlayerLooted(player.getUniqueId());
     }
 
@@ -55,7 +55,7 @@ public interface LootableInventory extends Lootable {
      * @return Timestamp last looted, or null if player has not looted this object
      */
     @Nullable
-    default Long getLastLooted(@NotNull Player player) {
+    default Long getLastLooted(@NotNull final Player player) {
         return getLastLooted(player.getUniqueId());
     }
 
@@ -74,7 +74,7 @@ public interface LootableInventory extends Lootable {
      * @param looted true to add player to looted list, false to remove
      * @return The previous state of whether the player had looted this or not
      */
-    default boolean setHasPlayerLooted(@NotNull Player player, boolean looted) {
+    default boolean setHasPlayerLooted(@NotNull final Player player, final boolean looted) {
         return setHasPlayerLooted(player.getUniqueId(), looted);
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java b/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
index fd184f13f5e8ee5cf829fff4f44696e1f760430b..20d9dbab73d352b7d045a83b5b0f45028eb7bfa6 100644
--- a/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
+++ b/src/main/java/com/destroystokyo/paper/loottable/LootableInventoryReplenishEvent.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.NotNull;
 public class LootableInventoryReplenishEvent extends PlayerEvent implements Cancellable {
     @NotNull private final LootableInventory inventory;
 
-    public LootableInventoryReplenishEvent(@NotNull Player player, @NotNull LootableInventory inventory) {
+    public LootableInventoryReplenishEvent(@NotNull final Player player, @NotNull final LootableInventory inventory) {
         super(player);
         this.inventory = inventory;
     }
@@ -39,7 +39,7 @@ public class LootableInventoryReplenishEvent extends PlayerEvent implements Canc
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
index 2ef9a7bd55e2c9cf8cb20d5f77282676ae11181f..6364a79908f45d81effb6abcdd10b1042508f36f 100644
--- a/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
+++ b/src/main/java/com/destroystokyo/paper/profile/PlayerProfile.java
@@ -77,7 +77,7 @@ public interface PlayerProfile {
      * @param property The property to remove
      * @return If a property was removed
      */
-    default boolean removeProperty(@NotNull ProfileProperty property) {
+    default boolean removeProperty(@NotNull final ProfileProperty property) {
         return removeProperty(property.getName());
     }
 
@@ -86,9 +86,9 @@ public interface PlayerProfile {
      * @param properties The properties to remove
      * @return If any property was removed
      */
-    default boolean removeProperties(@NotNull Collection<ProfileProperty> properties) {
+    default boolean removeProperties(@NotNull final Collection<ProfileProperty> properties) {
         boolean removed = false;
-        for (ProfileProperty property : properties) {
+        for (final ProfileProperty property : properties) {
             if (removeProperty(property)) {
                 removed = true;
             }
diff --git a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
index 7b3b6ef533d32169fbeca389bd61cfc6b0e0faee..307c75c2d26f1197cc780b0cc32ec978e8f4d9b2 100644
--- a/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
+++ b/src/main/java/com/destroystokyo/paper/profile/ProfileProperty.java
@@ -14,11 +14,11 @@ public class ProfileProperty {
     private final String value;
     private final String signature;
 
-    public ProfileProperty(@NotNull String name, @NotNull String value) {
+    public ProfileProperty(@NotNull final String name, @NotNull final String value) {
         this(name, value, null);
     }
 
-    public ProfileProperty(@NotNull String name, @NotNull String value, @Nullable String signature) {
+    public ProfileProperty(@NotNull final String name, @NotNull final String value, @Nullable final String signature) {
         this.name = Preconditions.checkNotNull(name, "ProfileProperty name can not be null");
         this.value = Preconditions.checkNotNull(value, "ProfileProperty value can not be null");
         this.signature = signature;
@@ -56,10 +56,10 @@ public class ProfileProperty {
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
-        ProfileProperty that = (ProfileProperty) o;
+        final ProfileProperty that = (ProfileProperty) o;
         return Objects.equals(name, that.name) &&
                 Objects.equals(value, that.value) &&
                 Objects.equals(signature, that.signature);
diff --git a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
index b27281a6538cb223f6dffbf3859366dedbbf75f1..5d182da3164f1df059e3788cfe859ca00bf64e5f 100644
--- a/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
+++ b/src/main/java/com/destroystokyo/paper/util/SneakyThrow.java
@@ -4,12 +4,12 @@ import org.jetbrains.annotations.NotNull;
 
 public class SneakyThrow {
 
-    public static void sneaky(@NotNull Throwable exception) {
+    public static void sneaky(@NotNull final Throwable exception) {
         SneakyThrow.throwSneaky(exception);
     }
 
     @SuppressWarnings("unchecked")
-    private static <T extends Throwable> void throwSneaky(@NotNull Throwable exception) throws T {
+    private static <T extends Throwable> void throwSneaky(@NotNull final Throwable exception) throws T {
         throw (T) exception;
     }
 
diff --git a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java b/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
index a736d7bcdc5861a01b66ba36158db1c716339346..92983170f4a30ab67cfb8af738f5239d8a0a8f36 100644
--- a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
@@ -35,7 +35,7 @@ public interface VersionFetcher {
 
         @NotNull
         @Override
-        public Component getVersionMessage(@NotNull String serverVersion) {
+        public Component getVersionMessage(@NotNull final String serverVersion) {
             Bukkit.getLogger().warning("Version provider has not been set, cannot check for updates!");
             Bukkit.getLogger().info("Override the default implementation of org.bukkit.UnsafeValues#getVersionFetcher()");
             new Throwable().printStackTrace();
diff --git a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
index 5bb677ce585b856b3d3e589e29786a29619c56a7..4a4fb55adc29e6d2295bbc55c23306869a48fd90 100644
--- a/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
+++ b/src/main/java/com/destroystokyo/paper/utils/CachedSizeConcurrentLinkedQueue.java
@@ -9,8 +9,8 @@ public class CachedSizeConcurrentLinkedQueue<E> extends ConcurrentLinkedQueue<E>
     private final LongAdder cachedSize = new LongAdder();
 
     @Override
-    public boolean add(@NotNull E e) {
-        boolean result = super.add(e);
+    public boolean add(@NotNull final E e) {
+        final boolean result = super.add(e);
         if (result) {
             cachedSize.increment();
         }
@@ -20,7 +20,7 @@ public class CachedSizeConcurrentLinkedQueue<E> extends ConcurrentLinkedQueue<E>
     @Nullable
     @Override
     public E poll() {
-        E result = super.poll();
+        final E result = super.poll();
         if (result != null) {
             cachedSize.decrement();
         }
diff --git a/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java b/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
index 76f2cb9cd99cad2a9484eab2becd8c36f1dd91b3..4678d8c93eddbe89b90ef3d200c6b5f6d5e061f4 100644
--- a/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
+++ b/src/main/java/com/destroystokyo/paper/utils/PaperPluginLogger.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class PaperPluginLogger extends Logger {
 
     @NotNull
-    public static Logger getLogger(@NotNull PluginDescriptionFile description) {
+    public static Logger getLogger(@NotNull final PluginDescriptionFile description) {
         Logger logger = new PaperPluginLogger(description);
         if (!LogManager.getLogManager().addLogger(logger)) {
             // Disable this if it's going to happen across reloads anyways...
@@ -24,12 +24,12 @@ public class PaperPluginLogger extends Logger {
         return logger;
     }
 
-    private PaperPluginLogger(@NotNull PluginDescriptionFile description) {
+    private PaperPluginLogger(@NotNull final PluginDescriptionFile description) {
         super(description.getPrefix() != null ? description.getPrefix() : description.getName(), null);
     }
 
     @Override
-    public void setParent(@NotNull Logger parent) {
+    public void setParent(@NotNull final Logger parent) {
         if (getParent() != null) {
             warning("Ignoring attempt to change parent of plugin logger");
         } else {
diff --git a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
index a824684d550335eaf7373c7323ff0d63ab125c9d..ed08b6cfcd056935d23dd5a152952ccb150bd407 100644
--- a/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BellRingEvent.java
@@ -16,7 +16,7 @@ public class BellRingEvent extends BlockEvent implements Cancellable {
     private boolean cancelled;
     private final Entity entity;
 
-    public BellRingEvent(@NotNull Block block, @Nullable Entity entity) {
+    public BellRingEvent(@NotNull final Block block, @Nullable final Entity entity) {
         super(block);
         this.entity = entity;
     }
@@ -27,7 +27,7 @@ public class BellRingEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java b/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java
index dab794341170ed10d5a05c1b4c180d164e0f70e2..1b65302394868842912b3d795d067a2cff211d29 100644
--- a/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BlockFailedDispenseEvent.java
@@ -13,7 +13,7 @@ public class BlockFailedDispenseEvent extends BlockEvent {
 
     private boolean shouldPlayEffect = true;
 
-    public BlockFailedDispenseEvent(@NotNull Block theBlock) {
+    public BlockFailedDispenseEvent(@NotNull final Block theBlock) {
         super(theBlock);
     }
 
@@ -29,7 +29,7 @@ public class BlockFailedDispenseEvent extends BlockEvent {
      *
      * @param playEffect if the effect should be played
      */
-    public void shouldPlayEffect(boolean playEffect) {
+    public void shouldPlayEffect(final boolean playEffect) {
         this.shouldPlayEffect = playEffect;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java b/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
index 07aad3f4ff60a6a6de69634b0d31926e9c00e77b..473c8f5d53b8a7a51ec1c3c29f6e0d9111df9b7d 100644
--- a/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/BlockPreDispenseEvent.java
@@ -13,7 +13,7 @@ public class BlockPreDispenseEvent extends BlockEvent implements Cancellable {
     private final ItemStack itemStack;
     private final int slot;
 
-    public BlockPreDispenseEvent(@NotNull Block block, @NotNull ItemStack itemStack, int slot) {
+    public BlockPreDispenseEvent(@NotNull final Block block, @NotNull final ItemStack itemStack, final int slot) {
         super(block);
         this.itemStack = itemStack;
         this.slot = slot;
@@ -54,7 +54,7 @@ public class BlockPreDispenseEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java b/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
index 5495b87330518363498e1ac5d8f0a832be35fefb..488068bb69e781339ada74d60e0b167dd0d43b1f 100644
--- a/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/DragonEggFormEvent.java
@@ -22,8 +22,8 @@ public class DragonEggFormEvent extends BlockFormEvent implements Cancellable {
 	private final DragonBattle dragonBattle;
 	private boolean cancelled;
 	
-	public DragonEggFormEvent(@NotNull Block block, @NotNull BlockState newState,
-			@NotNull DragonBattle dragonBattle) {
+	public DragonEggFormEvent(@NotNull final Block block, @NotNull final BlockState newState,
+	                          @NotNull final DragonBattle dragonBattle) {
 		super(block, newState);
 		this.dragonBattle = dragonBattle;
 	}
@@ -34,7 +34,7 @@ public class DragonEggFormEvent extends BlockFormEvent implements Cancellable {
 	}
 	
 	@Override
-	public void setCancelled(boolean cancelled) {
+	public void setCancelled(final boolean cancelled) {
 		this.cancelled = cancelled;
 	}
 	
diff --git a/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java b/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
index aa7d440b797eac9e62678d03cc87f42838758bfd..e56aba72b9e81285e1846a66d3699120af056045 100644
--- a/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/PlayerShearBlockEvent.java
@@ -27,7 +27,7 @@ public class PlayerShearBlockEvent extends PlayerEvent implements Cancellable {
     private final EquipmentSlot hand;
     private final List<ItemStack> drops;
 
-    public PlayerShearBlockEvent(@NotNull Player who, @NotNull Block block, @NotNull ItemStack item, @NotNull EquipmentSlot hand, @NotNull List<ItemStack> drops) {
+    public PlayerShearBlockEvent(@NotNull final Player who, @NotNull final Block block, @NotNull final ItemStack item, @NotNull final EquipmentSlot hand, @NotNull final List<ItemStack> drops) {
         super(who);
         this.block = block;
         this.item = item;
@@ -91,7 +91,7 @@ public class PlayerShearBlockEvent extends PlayerEvent implements Cancellable {
      * @param cancel whether the shearing of the block should be cancelled or not.
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java b/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java
index cc067ae118af9957b1b9f5c8d45f63f9154f4942..40678de326b413591402d0890d54790f852a779f 100644
--- a/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java
+++ b/src/main/java/io/papermc/paper/event/block/TargetHitEvent.java
@@ -20,7 +20,7 @@ public class TargetHitEvent extends ProjectileHitEvent implements Cancellable {
     private boolean cancelled;
     private int signalStrength;
 
-    public TargetHitEvent(@NotNull Projectile projectile, @NotNull Block block, @NotNull BlockFace blockFace, int signalStrength) {
+    public TargetHitEvent(@NotNull final Projectile projectile, @NotNull final Block block, @NotNull final BlockFace blockFace, final int signalStrength) {
         super(projectile, null, block, blockFace);
         this.signalStrength = signalStrength;
     }
@@ -31,7 +31,7 @@ public class TargetHitEvent extends ProjectileHitEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
@@ -60,7 +60,7 @@ public class TargetHitEvent extends ProjectileHitEvent implements Cancellable {
      *
      * @param signalStrength the strength of the redstone signal to be emitted
      */
-    public void setSignalStrength(int signalStrength) {
+    public void setSignalStrength(final int signalStrength) {
         if (signalStrength < 0 || signalStrength > 15) {
             throw new IllegalArgumentException("Signal strength out of range (" + signalStrength + "), must be in range [0,15]");
         }
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
index 287f487b266d5c12fcf6f028452735e314d55636..d059fa50d885ffa48feba9424de566a34840435c 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityLoadCrossbowEvent.java
@@ -20,7 +20,7 @@ public class EntityLoadCrossbowEvent extends EntityEvent implements Cancellable
     private boolean cancelled;
     private boolean consumeItem = true;
 
-    public EntityLoadCrossbowEvent(@NotNull LivingEntity entity, @Nullable ItemStack crossbow, @NotNull EquipmentSlot hand) {
+    public EntityLoadCrossbowEvent(@NotNull final LivingEntity entity, @Nullable final ItemStack crossbow, @NotNull final EquipmentSlot hand) {
         super(entity);
         this.crossbow = crossbow;
         this.hand = hand;
@@ -64,7 +64,7 @@ public class EntityLoadCrossbowEvent extends EntityEvent implements Cancellable
      *
      * @param consume should the item be consumed
      */
-    public void setConsumeItem(boolean consume) {
+    public void setConsumeItem(final boolean consume) {
         this.consumeItem = consume;
     }
 
@@ -84,7 +84,7 @@ public class EntityLoadCrossbowEvent extends EntityEvent implements Cancellable
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
index e65537369b2a6687900bb62a1aeb1030921abb03..4171d844ffa4258763d017a5029793e1b3d6021b 100644
--- a/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
+++ b/src/main/java/io/papermc/paper/event/entity/EntityMoveEvent.java
@@ -17,7 +17,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
     private Location from;
     private Location to;
 
-    public EntityMoveEvent(@NotNull LivingEntity entity, @NotNull Location from, @NotNull Location to) {
+    public EntityMoveEvent(@NotNull final LivingEntity entity, @NotNull final Location from, @NotNull final Location to) {
         super(entity);
         this.from = from;
         this.to = to;
@@ -33,7 +33,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
         return canceled;
     }
 
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
@@ -52,7 +52,7 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
      *
      * @param from New location to mark as the entity's previous location
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         validateLocation(from);
         this.from = from;
     }
@@ -72,12 +72,12 @@ public class EntityMoveEvent extends EntityEvent implements Cancellable {
      *
      * @param to New Location this entity will move to
      */
-    public void setTo(@NotNull Location to) {
+    public void setTo(@NotNull final Location to) {
         validateLocation(to);
         this.to = to;
     }
 
-    private void validateLocation(@NotNull Location loc) {
+    private void validateLocation(@NotNull final Location loc) {
         Preconditions.checkArgument(true, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
diff --git a/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java b/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
index 2c1cda1126e577a88f19071e958eddb5a38785af..c2cf844b43de9edafeb9bdef7f323ea896019c7b 100644
--- a/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
+++ b/src/main/java/io/papermc/paper/event/packet/PlayerChunkLoadEvent.java
@@ -19,7 +19,7 @@ public class PlayerChunkLoadEvent extends ChunkEvent {
     private static final HandlerList handlers = new HandlerList();
     private final Player player;
 
-    public PlayerChunkLoadEvent(@NotNull Chunk chunk, @NotNull Player player) {
+    public PlayerChunkLoadEvent(@NotNull final Chunk chunk, @NotNull final Player player) {
         super(chunk);
         this.player = player;
     }
diff --git a/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java b/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
index 12163a7b0591a7d022dc7eb9ee6608a1b6c39d9b..c319a5ba69c474da2d16fadb16e11a0efdeeeee6 100644
--- a/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
+++ b/src/main/java/io/papermc/paper/event/packet/PlayerChunkUnloadEvent.java
@@ -17,7 +17,7 @@ public class PlayerChunkUnloadEvent extends ChunkEvent {
     private static final HandlerList handlers = new HandlerList();
     private final Player player;
 
-    public PlayerChunkUnloadEvent(@NotNull Chunk chunk, @NotNull Player player) {
+    public PlayerChunkUnloadEvent(@NotNull final Chunk chunk, @NotNull final Player player) {
         super(chunk);
         this.player = player;
     }
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
index c80183a79713b1e73549911e474a8c585cfdeb52..53136865f04efcd372433700d211ea2e3daa257b 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerChangeBeaconEffectEvent.java
@@ -22,7 +22,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
 
     private boolean isCancelled;
 
-    public PlayerChangeBeaconEffectEvent(@NotNull Player player, @Nullable PotionEffectType primary, @Nullable PotionEffectType secondary, @Nullable Block beacon) {
+    public PlayerChangeBeaconEffectEvent(@NotNull final Player player, @Nullable final PotionEffectType primary, @Nullable final PotionEffectType secondary, @Nullable final Block beacon) {
         super(player);
         this.primary = primary;
         this.secondary = secondary;
@@ -44,7 +44,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      *
      * @param primary the primary effect
      */
-    public void setPrimary(@Nullable PotionEffectType primary) {
+    public void setPrimary(@Nullable final PotionEffectType primary) {
         this.primary = primary;
     }
 
@@ -63,7 +63,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      *
      * @param secondary the secondary effect
      */
-    public void setSecondary(@Nullable PotionEffectType secondary) {
+    public void setSecondary(@Nullable final PotionEffectType secondary) {
         this.secondary = secondary;
     }
 
@@ -95,7 +95,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      *
      * @param consumeItem true if item should be consumed
      */
-    public void setConsumeItem(boolean consumeItem) {
+    public void setConsumeItem(final boolean consumeItem) {
         this.consumeItem = consumeItem;
     }
 
@@ -125,7 +125,7 @@ public class PlayerChangeBeaconEffectEvent extends PlayerEvent implements Cancel
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java
index 4c141f3d8f668cdf9c75865a8e3ecbd012d9e521..7d42814ab26a45abaa052bb4ffea2d1abc2cd6ec 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerFlowerPotManipulateEvent.java
@@ -35,7 +35,7 @@ public class PlayerFlowerPotManipulateEvent extends PlayerEvent implements Cance
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java
index 58d18f05af13d836ddc62fcd30befcb06f07c57c..9fa51d3f0485f938282c2e3ed028cee1b7b0fca2 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerItemCooldownEvent.java
@@ -18,7 +18,7 @@ public class PlayerItemCooldownEvent extends PlayerEvent implements Cancellable
     private boolean cancelled;
     private int cooldown;
 
-    public PlayerItemCooldownEvent(@NotNull Player player, @NotNull Material type, int cooldown) {
+    public PlayerItemCooldownEvent(@NotNull final Player player, @NotNull final Material type, final int cooldown) {
         super(player);
         this.type = type;
         this.cooldown = cooldown;
@@ -49,7 +49,7 @@ public class PlayerItemCooldownEvent extends PlayerEvent implements Cancellable
      *
      * @param cooldown cooldown in ticks, has to be a positive number
      */
-    public void setCooldown(int cooldown) {
+    public void setCooldown(final int cooldown) {
         Preconditions.checkArgument(cooldown >= 0, "The cooldown has to be equal to or greater than 0!");
         this.cooldown = cooldown;
     }
@@ -60,7 +60,7 @@ public class PlayerItemCooldownEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
index dd4f82061877911a550ab58f6defecc36c4c8ddd..5f61b3e5f270dd8a3a4e09808db5f976252d303a 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLecternPageChangeEvent.java
@@ -20,7 +20,7 @@ public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancell
     private final int oldPage;
     private int newPage;
 
-    public PlayerLecternPageChangeEvent(@NotNull Player player, @NotNull Lectern lectern, @NotNull ItemStack book, @NotNull PageChangeDirection pageChangeDirection, int oldPage, int newPage) {
+    public PlayerLecternPageChangeEvent(@NotNull final Player player, @NotNull final Lectern lectern, @NotNull final ItemStack book, @NotNull final PageChangeDirection pageChangeDirection, final int oldPage, final int newPage) {
         super(player);
         this.lectern = lectern;
         this.book = book;
@@ -83,7 +83,7 @@ public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancell
      *
      * @param newPage the new paged changed to
      */
-    public void setNewPage(int newPage) {
+    public void setNewPage(final int newPage) {
         this.newPage = newPage;
     }
 
@@ -93,7 +93,7 @@ public class PlayerLecternPageChangeEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
index 8cb05709f7cb5dee993ff6fea1626c41b90a7d8b..5df665527377ca60aa0a6b369ba60262f3e691b0 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerLoomPatternSelectEvent.java
@@ -19,7 +19,7 @@ public class PlayerLoomPatternSelectEvent extends PlayerEvent implements Cancell
     private final LoomInventory loomInventory;
     private PatternType patternType;
 
-    public PlayerLoomPatternSelectEvent(@NotNull Player player, @NotNull LoomInventory loomInventory, @NotNull PatternType patternType) {
+    public PlayerLoomPatternSelectEvent(@NotNull final Player player, @NotNull final LoomInventory loomInventory, @NotNull final PatternType patternType) {
         super(player);
         this.loomInventory = loomInventory;
         this.patternType = patternType;
@@ -50,7 +50,7 @@ public class PlayerLoomPatternSelectEvent extends PlayerEvent implements Cancell
      *
      * @param patternType the pattern type
      */
-    public void setPatternType(@NotNull PatternType patternType) {
+    public void setPatternType(@NotNull final PatternType patternType) {
         this.patternType = patternType;
     }
 
@@ -60,7 +60,7 @@ public class PlayerLoomPatternSelectEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
index ef9e53a73eff469bbaa8fb20c634297acb9d1986..3b7b8fa3396662a1e0ff6bf15a83857e076008fa 100755
--- a/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerNameEntityEvent.java
@@ -19,7 +19,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
     private boolean persistent;
     private boolean cancelled;
 
-    public PlayerNameEntityEvent(@NotNull Player player, @NotNull LivingEntity entity, @NotNull Component name, boolean persistent) {
+    public PlayerNameEntityEvent(@NotNull final Player player, @NotNull final LivingEntity entity, @NotNull final Component name, final boolean persistent) {
         super(player);
         this.entity = entity;
         this.name = name;
@@ -40,7 +40,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      *
      * @param name the name
      */
-    public void setName(@Nullable Component name) {
+    public void setName(@Nullable final Component name) {
         this.name = name;
     }
 
@@ -59,7 +59,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      *
      * @param entity the entity
      */
-    public void setEntity(@NotNull LivingEntity entity) {
+    public void setEntity(@NotNull final LivingEntity entity) {
         this.entity = entity;
     }
 
@@ -77,7 +77,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      *
      * @param persistent persistent
      */
-    public void setPersistent(boolean persistent) {
+    public void setPersistent(final boolean persistent) {
         this.persistent = persistent;
     }
 
@@ -99,7 +99,7 @@ public class PlayerNameEntityEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
index fb1bca3a9d12096c9a2b2663f466a8ff5f2b4319..26a36e4cca4eca8c8e85289640fe0d460489fa4f 100644
--- a/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerStonecutterRecipeSelectEvent.java
@@ -16,7 +16,7 @@ public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements C
     private final StonecutterInventory stonecutterInventory;
     private StonecuttingRecipe stonecuttingRecipe;
 
-    public PlayerStonecutterRecipeSelectEvent(@NotNull Player player, @NotNull StonecutterInventory stonecutterInventory, @NotNull StonecuttingRecipe stonecuttingRecipe) {
+    public PlayerStonecutterRecipeSelectEvent(@NotNull final Player player, @NotNull final StonecutterInventory stonecutterInventory, @NotNull final StonecuttingRecipe stonecuttingRecipe) {
         super(player);
         this.stonecutterInventory = stonecutterInventory;
         this.stonecuttingRecipe = stonecuttingRecipe;
@@ -32,7 +32,7 @@ public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements C
         return stonecuttingRecipe;
     }
 
-    public void setStonecuttingRecipe(@NotNull StonecuttingRecipe stonecuttingRecipe) {
+    public void setStonecuttingRecipe(@NotNull final StonecuttingRecipe stonecuttingRecipe) {
         this.stonecuttingRecipe = stonecuttingRecipe;
     }
 
@@ -42,7 +42,7 @@ public class PlayerStonecutterRecipeSelectEvent extends PlayerEvent implements C
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
index 198e5464eae6b961c83148a57c18f91a4bb33cf6..19fbe7203d71f9ab343509601255b95e9921d600 100755
--- a/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
+++ b/src/main/java/io/papermc/paper/event/player/PlayerTradeEvent.java
@@ -22,7 +22,7 @@ public class PlayerTradeEvent extends PlayerEvent implements Cancellable {
     private final AbstractVillager villager;
     private MerchantRecipe trade;
 
-    public PlayerTradeEvent(@NotNull Player player, @NotNull AbstractVillager villager, @NotNull MerchantRecipe trade, boolean rewardExp, boolean increaseTradeUses) {
+    public PlayerTradeEvent(@NotNull final Player player, @NotNull final AbstractVillager villager, @NotNull final MerchantRecipe trade, final boolean rewardExp, final boolean increaseTradeUses) {
         super(player);
         this.villager = villager;
         this.trade = trade;
@@ -52,7 +52,7 @@ public class PlayerTradeEvent extends PlayerEvent implements Cancellable {
      * Sets the trade. This is then used to determine the next prices
      * @param trade the trade to use
      */
-    public void setTrade(@Nullable MerchantRecipe trade) {
+    public void setTrade(@Nullable final MerchantRecipe trade) {
         this.trade = trade;
     }
 
@@ -67,7 +67,7 @@ public class PlayerTradeEvent extends PlayerEvent implements Cancellable {
      * Sets whether the trade will try to reward exp
      * @param rewardExp try to reward exp
      */
-    public void setRewardExp(boolean rewardExp) {
+    public void setRewardExp(final boolean rewardExp) {
         this.rewardExp = rewardExp;
     }
 
@@ -82,7 +82,7 @@ public class PlayerTradeEvent extends PlayerEvent implements Cancellable {
      * Sets whether or not the trade will count as a use
      * @param increaseTradeUses true to count/false to not count
      */
-    public void setIncreaseTradeUses(boolean increaseTradeUses) {
+    public void setIncreaseTradeUses(final boolean increaseTradeUses) {
         this.increaseTradeUses = increaseTradeUses;
     }
 
@@ -104,7 +104,7 @@ public class PlayerTradeEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java b/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
index 7a8d6815c17a107039399298f7ac9f0612faee02..cf37126c971414481a1b687efd0c8e3a742328cb 100644
--- a/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
+++ b/src/main/java/io/papermc/paper/event/server/ServerResourcesReloadedEvent.java
@@ -16,7 +16,7 @@ public class ServerResourcesReloadedEvent extends ServerEvent {
 
     private final Cause cause;
 
-    public ServerResourcesReloadedEvent(@NotNull Cause cause) {
+    public ServerResourcesReloadedEvent(@NotNull final Cause cause) {
         this.cause = cause;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java b/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
index 45b6694fc5741831e2df638b1f760a3ca28a4907..2242d0ee8347d9d5ed24c3113214c7135d518ade 100644
--- a/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/StructureLocateEvent.java
@@ -28,7 +28,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
     private boolean findUnexplored;
     private boolean cancelled = false;
 
-    public StructureLocateEvent(@NotNull World world, @NotNull Location origin, @NotNull StructureType structureType, int radius, boolean findUnexplored) {
+    public StructureLocateEvent(@NotNull final World world, @NotNull final Location origin, @NotNull final StructureType structureType, final int radius, final boolean findUnexplored) {
         super(world);
         this.origin = origin;
         this.type = structureType;
@@ -66,7 +66,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param result the {@link Location} of the structure.
      */
-    public void setResult(@Nullable Location result) {
+    public void setResult(@Nullable final Location result) {
         this.result = result;
     }
 
@@ -85,7 +85,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param type the structure type.
      */
-    public void setType(@NotNull StructureType type) {
+    public void setType(@NotNull final StructureType type) {
         this.type = type;
     }
 
@@ -117,7 +117,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param radius the search radius.
      */
-    public void setRadius(int radius) {
+    public void setRadius(final int radius) {
         this.radius = radius;
     }
 
@@ -139,7 +139,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
      *
      * @param findUnexplored Whether to search for only unexplored structures.
      */
-    public void setFindUnexplored(boolean findUnexplored) {
+    public void setFindUnexplored(final boolean findUnexplored) {
         this.findUnexplored = findUnexplored;
     }
 
@@ -149,7 +149,7 @@ public class StructureLocateEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
index 588e057b3b243fc9eac0cb899434893d8cf79a59..3fe0b1b22e082c9ffe830c52697e9a54f8a1c02a 100644
--- a/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/WorldGameRuleChangeEvent.java
@@ -21,7 +21,7 @@ public class WorldGameRuleChangeEvent extends WorldEvent implements Cancellable
     private String value;
     private boolean cancelled;
 
-    public WorldGameRuleChangeEvent(@NotNull World world, @Nullable CommandSender commandSender, @NotNull GameRule<?> gameRule, @NotNull String value) {
+    public WorldGameRuleChangeEvent(@NotNull final World world, @Nullable final CommandSender commandSender, @NotNull final GameRule<?> gameRule, @NotNull final String value) {
         super(world);
         this.commandSender = commandSender;
         this.gameRule = gameRule;
@@ -63,7 +63,7 @@ public class WorldGameRuleChangeEvent extends WorldEvent implements Cancellable
      *
      * @param value the new value of the gamerule.
      */
-    public void setValue(@NotNull String value) {
+    public void setValue(@NotNull final String value) {
         this.value = value;
     }
 
@@ -73,7 +73,7 @@ public class WorldGameRuleChangeEvent extends WorldEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java
index 126fe50b519a8d7cd158f799058cb235f9c4cbdb..470c9228a2f3f24f4cdc5288894625654425a2e0 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeEvent.java
@@ -19,7 +19,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
     private long duration;
     private boolean cancelled;
 
-    public WorldBorderBoundsChangeEvent(@NotNull World world, @NotNull WorldBorder worldBorder, @NotNull Type type, double oldSize, double newSize, long duration) {
+    public WorldBorderBoundsChangeEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder, @NotNull final Type type, final double oldSize, final double newSize, final long duration) {
         super(world, worldBorder);
         this.type = type;
         this.oldSize = oldSize;
@@ -60,7 +60,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
      *
      * @param newSize the new size
      */
-    public void setNewSize(double newSize) {
+    public void setNewSize(final double newSize) {
         // PAIL: TODO: Magic Values
         this.newSize = Math.min(6.0E7D, Math.max(1.0D, newSize));
     }
@@ -80,7 +80,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
      *
      * @param duration the time in milliseconds for the change
      */
-    public void setDuration(long duration) {
+    public void setDuration(final long duration) {
         // PAIL: TODO: Magic Values
         this.duration = Math.min(9223372036854775L, Math.max(0L, duration));
         if (duration >= 0 && type == Type.INSTANT_MOVE) type = Type.STARTED_MOVE;
@@ -92,7 +92,7 @@ public class WorldBorderBoundsChangeEvent extends WorldBorderEvent implements Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java
index c3d578ae2c5615b0ebace99d9bacf100b086c971..959a949a80d70ea8d1733161296aa590661150b1 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderBoundsChangeFinishEvent.java
@@ -16,7 +16,7 @@ public class WorldBorderBoundsChangeFinishEvent extends WorldBorderEvent {
     private final double newSize;
     private final double duration;
 
-    public WorldBorderBoundsChangeFinishEvent(@NotNull World world, @NotNull WorldBorder worldBorder, double oldSize, double newSize, double duration) {
+    public WorldBorderBoundsChangeFinishEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder, final double oldSize, final double newSize, final double duration) {
         super(world, worldBorder);
         this.oldSize = oldSize;
         this.newSize = newSize;
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
index 934069219a75b5f6bbac99a95472553e5faac25f..3ddae552240b0b2c887c145ca19111eacf9fc6da 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderCenterChangeEvent.java
@@ -18,7 +18,7 @@ public class WorldBorderCenterChangeEvent extends WorldBorderEvent implements Ca
     private Location newCenter;
     private boolean cancelled;
 
-    public WorldBorderCenterChangeEvent(@NotNull World world, @NotNull WorldBorder worldBorder, @NotNull Location oldCenter, @NotNull Location newCenter) {
+    public WorldBorderCenterChangeEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder, @NotNull final Location oldCenter, @NotNull final Location newCenter) {
         super(world, worldBorder);
         this.oldCenter = oldCenter;
         this.newCenter = newCenter;
@@ -49,7 +49,7 @@ public class WorldBorderCenterChangeEvent extends WorldBorderEvent implements Ca
      *
      * @param newCenter the new center
      */
-    public void setNewCenter(@NotNull Location newCenter) {
+    public void setNewCenter(@NotNull final Location newCenter) {
         this.newCenter = newCenter;
     }
 
@@ -59,7 +59,7 @@ public class WorldBorderCenterChangeEvent extends WorldBorderEvent implements Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
index 1a7477a6fe0001fd7d9bca6e7d3a24edb4de9430..dcb01d7b54f50b9f1ac99b2b72d1fffc794d00b5 100644
--- a/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
+++ b/src/main/java/io/papermc/paper/event/world/border/WorldBorderEvent.java
@@ -9,7 +9,7 @@ public abstract class WorldBorderEvent extends WorldEvent {
 
     private final WorldBorder worldBorder;
 
-    public WorldBorderEvent(@NotNull World world, @NotNull WorldBorder worldBorder) {
+    public WorldBorderEvent(@NotNull final World world, @NotNull final WorldBorder worldBorder) {
         super(world);
         this.worldBorder = worldBorder;
     }
diff --git a/src/main/java/io/papermc/paper/inventory/ItemRarity.java b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
index 6e72efe45efd9ddf824dbeef1dec6562741f3d54..fbaf0a89900e1edfb6bfd6709814154c6e72a653 100644
--- a/src/main/java/io/papermc/paper/inventory/ItemRarity.java
+++ b/src/main/java/io/papermc/paper/inventory/ItemRarity.java
@@ -13,7 +13,7 @@ public enum ItemRarity {
 
     final TextColor color;
 
-    ItemRarity(TextColor color) {
+    ItemRarity(final TextColor color) {
         this.color = color;
     }
 
diff --git a/src/main/java/io/papermc/paper/tag/BaseTag.java b/src/main/java/io/papermc/paper/tag/BaseTag.java
index 8c5628038cebe83c195f825d9b18a10e75886479..7d764e526043444253952dca2d59d80da5005e34 100644
--- a/src/main/java/io/papermc/paper/tag/BaseTag.java
+++ b/src/main/java/io/papermc/paper/tag/BaseTag.java
@@ -16,29 +16,29 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
     protected final Set<T> tagged;
     private final List<Predicate<T>> globalPredicates;
 
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Predicate<T> filter) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final Predicate<T> filter) {
         this(clazz, key);
         add(filter);
     }
 
     @SafeVarargs
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull T...values) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final T...values) {
         this(clazz, key, Lists.newArrayList(values));
     }
 
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Collection<T> values) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final Collection<T> values) {
         this(clazz, key, values, o -> true);
     }
 
     @SafeVarargs
-    public BaseTag(@NotNull Class<T> clazz, @NotNull NamespacedKey key, @NotNull Collection<T> values, @NotNull Predicate<T>... globalPredicates) {
+    public BaseTag(@NotNull final Class<T> clazz, @NotNull final NamespacedKey key, @NotNull final Collection<T> values, @NotNull final Predicate<T>... globalPredicates) {
         this.key = key;
         this.tagged = clazz.isEnum() ? createEnumSet(clazz) : new HashSet<>();
         this.tagged.addAll(values);
         this.globalPredicates = Lists.newArrayList(globalPredicates);
     }
 
-    private <E> Set<E> createEnumSet(Class<E> enumClass) {
+    private <E> Set<E> createEnumSet(final Class<E> enumClass) {
         assert enumClass.isEnum();
         return (Set<E>) EnumSet.noneOf((Class<Enum>) enumClass);
     }
@@ -56,14 +56,14 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
     }
 
     @Override
-    public boolean isTagged(@NotNull T item) {
+    public boolean isTagged(@NotNull final T item) {
         return tagged.contains(item);
     }
 
     @SafeVarargs
     @NotNull
-    public final C add(@NotNull Tag<T>... tags) {
-        for (Tag<T> tag : tags) {
+    public final C add(@NotNull final Tag<T>... tags) {
+        for (final Tag<T> tag : tags) {
             add(tag.getValues());
         }
         return (C) this;
@@ -71,41 +71,41 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
 
     @SafeVarargs
     @NotNull
-    public final C add(@NotNull T... values) {
+    public final C add(@NotNull final T... values) {
         this.tagged.addAll(Lists.newArrayList(values));
         return (C) this;
     }
 
     @NotNull
-    public C add(@NotNull Collection<T> collection) {
+    public C add(@NotNull final Collection<T> collection) {
         this.tagged.addAll(collection);
         return (C) this;
     }
 
     @NotNull
-    public C add(@NotNull Predicate<T> filter) {
+    public C add(@NotNull final Predicate<T> filter) {
         return add(getAllPossibleValues().stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).filter(filter).collect(Collectors.toSet()));
     }
 
     @NotNull
-    public C contains(@NotNull String with) {
+    public C contains(@NotNull final String with) {
         return add(value -> getName(value).contains(with));
     }
 
     @NotNull
-    public C endsWith(@NotNull String with) {
+    public C endsWith(@NotNull final String with) {
         return add(value -> getName(value).endsWith(with));
     }
 
     @NotNull
-    public C startsWith(@NotNull String with) {
+    public C startsWith(@NotNull final String with) {
         return add(value -> getName(value).startsWith(with));
     }
 
     @SafeVarargs
     @NotNull
-    public final C not(@NotNull Tag<T>... tags) {
-        for (Tag<T> tag : tags) {
+    public final C not(@NotNull final Tag<T>... tags) {
+        for (final Tag<T> tag : tags) {
             not(tag.getValues());
         }
         return (C) this;
@@ -113,41 +113,41 @@ public abstract class BaseTag<T extends Keyed, C extends BaseTag<T, C>> implemen
 
     @SafeVarargs
     @NotNull
-    public final C not(@NotNull T... values) {
+    public final C not(@NotNull final T... values) {
         this.tagged.removeAll(Lists.newArrayList(values));
         return (C) this;
     }
 
     @NotNull
-    public C not(@NotNull Collection<T> values) {
+    public C not(@NotNull final Collection<T> values) {
         this.tagged.removeAll(values);
         return (C) this;
     }
 
     @NotNull
-    public C not(@NotNull Predicate<T> filter) {
+    public C not(@NotNull final Predicate<T> filter) {
         not(getAllPossibleValues().stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).filter(filter).collect(Collectors.toSet()));
         return (C) this;
     }
 
     @NotNull
-    public C notContains(@NotNull String with) {
+    public C notContains(@NotNull final String with) {
         return not(value -> getName(value).contains(with));
     }
 
     @NotNull
-    public C notEndsWith(@NotNull String with) {
+    public C notEndsWith(@NotNull final String with) {
         return not(value -> getName(value).endsWith(with));
     }
 
     @NotNull
-    public C notStartsWith(@NotNull String with) {
+    public C notStartsWith(@NotNull final String with) {
         return not(value -> getName(value).startsWith(with));
     }
 
     @NotNull
-    public C ensureSize(@NotNull String label, int size) {
-        long actual = this.tagged.stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).count();
+    public C ensureSize(@NotNull final String label, final int size) {
+        final long actual = this.tagged.stream().filter(globalPredicates.stream().reduce(Predicate::or).orElse(t -> true)).count();
         if (size != actual) {
             throw new IllegalStateException(key.toString() + ": " + label + " - Expected " + size + " values, got " + actual);
         }
diff --git a/src/main/java/io/papermc/paper/tag/EntitySetTag.java b/src/main/java/io/papermc/paper/tag/EntitySetTag.java
index 8426a95474633c3aa621c8dbfb0158017c82587d..73029824c84e71b13d83e507a59005dc7b16c7c4 100644
--- a/src/main/java/io/papermc/paper/tag/EntitySetTag.java
+++ b/src/main/java/io/papermc/paper/tag/EntitySetTag.java
@@ -12,20 +12,20 @@ import java.util.stream.Stream;
 
 public class EntitySetTag extends BaseTag<EntityType, EntitySetTag> {
 
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull Predicate<EntityType> filter) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final Predicate<EntityType> filter) {
         super(EntityType.class, key, filter);
     }
 
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull EntityType... values) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final EntityType... values) {
         super(EntityType.class, key, values);
     }
 
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull Collection<EntityType> values) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final Collection<EntityType> values) {
         super(EntityType.class, key, values);
     }
 
     @SafeVarargs
-    public EntitySetTag(@NotNull NamespacedKey key, @NotNull Collection<EntityType> values, @NotNull Predicate<EntityType>... globalPredicates) {
+    public EntitySetTag(@NotNull final NamespacedKey key, @NotNull final Collection<EntityType> values, @NotNull final Predicate<EntityType>... globalPredicates) {
         super(EntityType.class, key, values, globalPredicates);
     }
 
@@ -37,7 +37,7 @@ public class EntitySetTag extends BaseTag<EntityType, EntitySetTag> {
 
     @NotNull
     @Override
-    protected String getName(@NotNull EntityType value) {
+    protected String getName(@NotNull final EntityType value) {
         return value.name();
     }
 }
diff --git a/src/main/java/io/papermc/paper/tag/EntityTags.java b/src/main/java/io/papermc/paper/tag/EntityTags.java
index 9266c9d77e2eef7cd717dc729834a190f1fc7c1d..c8e3e96fdfeff5547859fb5f701968dbde451fea 100644
--- a/src/main/java/io/papermc/paper/tag/EntityTags.java
+++ b/src/main/java/io/papermc/paper/tag/EntityTags.java
@@ -6,7 +6,7 @@ import static org.bukkit.entity.EntityType.*;
 
 public class EntityTags {
 
-    private static NamespacedKey keyFor(String key) {
+    private static NamespacedKey keyFor(final String key) {
         //noinspection deprecation
         return new NamespacedKey("paper", key + "_settag");
     }
diff --git a/src/main/java/io/papermc/paper/world/MoonPhase.java b/src/main/java/io/papermc/paper/world/MoonPhase.java
index df05153397b42930cd53d37b30824c7e5f008f7e..c74dea6442e012cf9fe5b483bcca04ea514343e5 100644
--- a/src/main/java/io/papermc/paper/world/MoonPhase.java
+++ b/src/main/java/io/papermc/paper/world/MoonPhase.java
@@ -17,20 +17,20 @@ public enum MoonPhase {
 
     private final long day;
 
-    MoonPhase(long day) {
+    MoonPhase(final long day) {
         this.day = day;
     }
 
     private static final Map<Long, MoonPhase> BY_DAY = new HashMap<>();
 
     static {
-        for (MoonPhase phase : values()) {
+        for (final MoonPhase phase : values()) {
             BY_DAY.put(phase.day, phase);
         }
     }
 
     @NotNull
-    public static MoonPhase getPhase(long day) {
+    public static MoonPhase getPhase(final long day) {
         return BY_DAY.get(day % 8L);
     }
 }
diff --git a/src/main/java/org/bukkit/Art.java b/src/main/java/org/bukkit/Art.java
index 9362078becf402a74cdaedeb2cee96890e614af9..2b614793f88c0878167679ed3be144d5409b4557 100644
--- a/src/main/java/org/bukkit/Art.java
+++ b/src/main/java/org/bukkit/Art.java
@@ -43,7 +43,7 @@ public enum Art implements Keyed {
     private static final HashMap<String, Art> BY_NAME = Maps.newHashMap();
     private static final HashMap<Integer, Art> BY_ID = Maps.newHashMap();
 
-    Art(int id, int width, int height) {
+    Art(final int id, final int width, final int height) {
         this.id = id;
         this.width = width;
         this.height = height;
@@ -94,7 +94,7 @@ public enum Art implements Keyed {
      */
     @Deprecated
     @Nullable
-    public static Art getById(int id) {
+    public static Art getById(final int id) {
         return BY_ID.get(id);
     }
 
@@ -107,14 +107,14 @@ public enum Art implements Keyed {
      * @return The painting
      */
     @Nullable
-    public static Art getByName(@NotNull String name) {
+    public static Art getByName(@NotNull final String name) {
         Validate.notNull(name, "Name cannot be null");
 
         return BY_NAME.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     static {
-        for (Art art : values()) {
+        for (final Art art : values()) {
             BY_ID.put(art.id, art);
             BY_NAME.put(art.toString().toLowerCase(java.util.Locale.ENGLISH), art);
         }
diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
index 5f7208196684d9c8373df28b7cfb5f9e21baa41e..2b68cc1e01561c3d403c73990a9103f02d0f3f4e 100644
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -79,7 +79,7 @@ public final class Bukkit {
      *
      * @param server Server instance
      */
-    public static void setServer(@NotNull Server server) {
+    public static void setServer(@NotNull final Server server) {
         if (Bukkit.server != null) {
             throw new UnsupportedOperationException("Cannot redefine singleton Server");
         }
@@ -177,7 +177,7 @@ public final class Bukkit {
      *
      * @param maxPlayers the amount of players this server allows
      */
-    public static void setMaxPlayers(int maxPlayers) {
+    public static void setMaxPlayers(final int maxPlayers) {
         server.setMaxPlayers(maxPlayers);
     }
     // Paper end
@@ -272,7 +272,7 @@ public final class Bukkit {
      *
      * @param value true for whitelist on, false for off
      */
-    public static void setWhitelist(boolean value) {
+    public static void setWhitelist(final boolean value) {
         server.setWhitelist(value);
     }
 
@@ -304,7 +304,7 @@ public final class Bukkit {
      * @deprecated in favour of {@link Server#sendMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public static int broadcastMessage(@NotNull String message) {
+    public static int broadcastMessage(@NotNull final String message) {
         return server.broadcastMessage(message);
     }
 
@@ -316,7 +316,7 @@ public final class Bukkit {
      * @deprecated use {@code sendMessage} methods on {@link #getServer()} that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public static void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    public static void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         server.broadcast(component);
     }
 
@@ -327,7 +327,7 @@ public final class Bukkit {
      * @deprecated use {@code sendMessage} methods on {@link #getServer()} that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    public static void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    public static void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         server.broadcast(components);
     }
     // Paper end
@@ -486,7 +486,7 @@ public final class Bukkit {
      * @return a player if one was found, null otherwise
      */
     @Nullable
-    public static Player getPlayer(@NotNull String name) {
+    public static Player getPlayer(@NotNull final String name) {
         return server.getPlayer(name);
     }
 
@@ -497,7 +497,7 @@ public final class Bukkit {
      * @return a player object if one was found, null otherwise
      */
     @Nullable
-    public static Player getPlayerExact(@NotNull String name) {
+    public static Player getPlayerExact(@NotNull final String name) {
         return server.getPlayerExact(name);
     }
 
@@ -512,7 +512,7 @@ public final class Bukkit {
      * @return list of all possible players
      */
     @NotNull
-    public static List<Player> matchPlayer(@NotNull String name) {
+    public static List<Player> matchPlayer(@NotNull final String name) {
         return server.matchPlayer(name);
     }
 
@@ -523,7 +523,7 @@ public final class Bukkit {
      * @return a player object if one was found, null otherwise
      */
     @Nullable
-    public static Player getPlayer(@NotNull UUID id) {
+    public static Player getPlayer(@NotNull final UUID id) {
         return server.getPlayer(id);
     }
 
@@ -536,7 +536,7 @@ public final class Bukkit {
      * @return A UUID, or null if that player name is not registered with Minecraft and the server is in online mode
      */
     @Nullable
-    public static UUID getPlayerUniqueId(@NotNull String playerName) {
+    public static UUID getPlayerUniqueId(@NotNull final String playerName) {
         return server.getPlayerUniqueId(playerName);
     }
     // Paper end
@@ -592,7 +592,7 @@ public final class Bukkit {
      * @return newly created or loaded world
      */
     @Nullable
-    public static World createWorld(@NotNull WorldCreator creator) {
+    public static World createWorld(@NotNull final WorldCreator creator) {
         return server.createWorld(creator);
     }
 
@@ -603,7 +603,7 @@ public final class Bukkit {
      * @param save whether to save the chunks before unloading
      * @return true if successful, false otherwise
      */
-    public static boolean unloadWorld(@NotNull String name, boolean save) {
+    public static boolean unloadWorld(@NotNull final String name, final boolean save) {
         return server.unloadWorld(name, save);
     }
 
@@ -614,7 +614,7 @@ public final class Bukkit {
      * @param save whether to save the chunks before unloading
      * @return true if successful, false otherwise
      */
-    public static boolean unloadWorld(@NotNull World world, boolean save) {
+    public static boolean unloadWorld(@NotNull final World world, final boolean save) {
         return server.unloadWorld(world, save);
     }
 
@@ -625,7 +625,7 @@ public final class Bukkit {
      * @return a world with the given name, or null if none exists
      */
     @Nullable
-    public static World getWorld(@NotNull String name) {
+    public static World getWorld(@NotNull final String name) {
         return server.getWorld(name);
     }
 
@@ -636,7 +636,7 @@ public final class Bukkit {
      * @return a world with the given Unique ID, or null if none exists
      */
     @Nullable
-    public static World getWorld(@NotNull UUID uid) {
+    public static World getWorld(@NotNull final UUID uid) {
         return server.getWorld(uid);
     }
     // Paper start
@@ -647,7 +647,7 @@ public final class Bukkit {
      * @return a world with the given NamespacedKey, or null if none exists
      */
     @Nullable
-    public static World getWorld(@NotNull NamespacedKey worldKey) {
+    public static World getWorld(@NotNull final NamespacedKey worldKey) {
         return server.getWorld(worldKey);
     }
     // Paper end
@@ -661,7 +661,7 @@ public final class Bukkit {
      */
     @Deprecated
     @Nullable
-    public static MapView getMap(int id) {
+    public static MapView getMap(final int id) {
         return server.getMap(id);
     }
 
@@ -672,7 +672,7 @@ public final class Bukkit {
      * @return a newly created map view
      */
     @NotNull
-    public static MapView createMap(@NotNull World world) {
+    public static MapView createMap(@NotNull final World world) {
         return server.createMap(world);
     }
 
@@ -692,7 +692,7 @@ public final class Bukkit {
      *      org.bukkit.StructureType, int, boolean)
      */
     @NotNull
-    public static ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType) {
+    public static ItemStack createExplorerMap(@NotNull final World world, @NotNull final Location location, @NotNull final StructureType structureType) {
         return server.createExplorerMap(world, location, structureType);
     }
 
@@ -715,7 +715,7 @@ public final class Bukkit {
      *      org.bukkit.StructureType, int, boolean)
      */
     @NotNull
-    public static ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType, int radius, boolean findUnexplored) {
+    public static ItemStack createExplorerMap(@NotNull final World world, @NotNull final Location location, @NotNull final StructureType structureType, final int radius, final boolean findUnexplored) {
         return server.createExplorerMap(world, location, structureType, radius, findUnexplored);
     }
 
@@ -751,7 +751,7 @@ public final class Bukkit {
      * @return a plugin command if found, null otherwise
      */
     @Nullable
-    public static PluginCommand getPluginCommand(@NotNull String name) {
+    public static PluginCommand getPluginCommand(@NotNull final String name) {
         return server.getPluginCommand(name);
     }
 
@@ -772,7 +772,7 @@ public final class Bukkit {
      * @throws CommandException thrown when the executor for the given command
      *     fails with an unhandled exception
      */
-    public static boolean dispatchCommand(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException {
+    public static boolean dispatchCommand(@NotNull final CommandSender sender, @NotNull final String commandLine) throws CommandException {
         return server.dispatchCommand(sender, commandLine);
     }
 
@@ -784,7 +784,7 @@ public final class Bukkit {
      *     reason
      */
     @Contract("null -> false")
-    public static boolean addRecipe(@Nullable Recipe recipe) {
+    public static boolean addRecipe(@Nullable final Recipe recipe) {
         return server.addRecipe(recipe);
     }
 
@@ -796,7 +796,7 @@ public final class Bukkit {
      * @return a list of recipes with the given result
      */
     @NotNull
-    public static List<Recipe> getRecipesFor(@NotNull ItemStack result) {
+    public static List<Recipe> getRecipesFor(@NotNull final ItemStack result) {
         return server.getRecipesFor(result);
     }
 
@@ -807,7 +807,7 @@ public final class Bukkit {
      * @return the recipe for the given key or null.
      */
     @Nullable
-    public static Recipe getRecipe(@NotNull NamespacedKey recipeKey) {
+    public static Recipe getRecipe(@NotNull final NamespacedKey recipeKey) {
         return server.getRecipe(recipeKey);
     }
 
@@ -845,7 +845,7 @@ public final class Bukkit {
      * @param key NamespacedKey of recipe to remove.
      * @return True if recipe was removed
      */
-    public static boolean removeRecipe(@NotNull NamespacedKey key) {
+    public static boolean removeRecipe(@NotNull final NamespacedKey key) {
         return server.removeRecipe(key);
     }
 
@@ -873,7 +873,7 @@ public final class Bukkit {
      *
      * @param value new spawn radius, or 0 if none
      */
-    public static void setSpawnRadius(int value) {
+    public static void setSpawnRadius(final int value) {
         server.setSpawnRadius(value);
     }
 
@@ -921,7 +921,7 @@ public final class Bukkit {
      *     permissibles} must have to receive the broadcast
      * @return number of message recipients
      */
-    public static int broadcast(@NotNull net.kyori.adventure.text.Component message, @NotNull String permission) {
+    public static int broadcast(@NotNull final net.kyori.adventure.text.Component message, @NotNull final String permission) {
         return server.broadcast(message, permission);
     }
     // Paper end
@@ -936,7 +936,7 @@ public final class Bukkit {
      * @deprecated in favour of {@link #broadcast(net.kyori.adventure.text.Component, String)}
      */
     @Deprecated // Paper
-    public static int broadcast(@NotNull String message, @NotNull String permission) {
+    public static int broadcast(@NotNull final String message, @NotNull final String permission) {
         return server.broadcast(message, permission);
     }
 
@@ -958,7 +958,7 @@ public final class Bukkit {
      */
     @Deprecated
     @NotNull
-    public static OfflinePlayer getOfflinePlayer(@NotNull String name) {
+    public static OfflinePlayer getOfflinePlayer(@NotNull final String name) {
         return server.getOfflinePlayer(name);
     }
 
@@ -978,7 +978,7 @@ public final class Bukkit {
      * @see #getOfflinePlayer(java.util.UUID)
      */
     @Nullable
-    public static OfflinePlayer getOfflinePlayerIfCached(@NotNull String name) {
+    public static OfflinePlayer getOfflinePlayerIfCached(@NotNull final String name) {
         return server.getOfflinePlayerIfCached(name);
     }
     // Paper end
@@ -994,7 +994,7 @@ public final class Bukkit {
      * @return an offline player
      */
     @NotNull
-    public static OfflinePlayer getOfflinePlayer(@NotNull UUID id) {
+    public static OfflinePlayer getOfflinePlayer(@NotNull final UUID id) {
         return server.getOfflinePlayer(id);
     }
 
@@ -1013,7 +1013,7 @@ public final class Bukkit {
      *
      * @param address the IP address to ban
      */
-    public static void banIP(@NotNull String address) {
+    public static void banIP(@NotNull final String address) {
         server.banIP(address);
     }
 
@@ -1022,7 +1022,7 @@ public final class Bukkit {
      *
      * @param address the IP address to unban
      */
-    public static void unbanIP(@NotNull String address) {
+    public static void unbanIP(@NotNull final String address) {
         server.unbanIP(address);
     }
 
@@ -1046,7 +1046,7 @@ public final class Bukkit {
      * @return a ban list of the specified type
      */
     @NotNull
-    public static BanList getBanList(@NotNull BanList.Type type) {
+    public static BanList getBanList(@NotNull final BanList.Type type) {
         return server.getBanList(type);
     }
 
@@ -1075,7 +1075,7 @@ public final class Bukkit {
      *
      * @param mode the new game mode
      */
-    public static void setDefaultGameMode(@NotNull GameMode mode) {
+    public static void setDefaultGameMode(@NotNull final GameMode mode) {
         server.setDefaultGameMode(mode);
     }
 
@@ -1152,7 +1152,7 @@ public final class Bukkit {
      * @see InventoryType#isCreatable()
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type) {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, @NotNull final InventoryType type) {
         return server.createInventory(owner, type);
     }
 
@@ -1182,7 +1182,7 @@ public final class Bukkit {
      * @see InventoryType#isCreatable()
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull net.kyori.adventure.text.Component title) {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, @NotNull final InventoryType type, @NotNull final net.kyori.adventure.text.Component title) {
         return server.createInventory(owner, type, title);
     }
     // Paper end
@@ -1214,7 +1214,7 @@ public final class Bukkit {
      */
     @Deprecated // Paper
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, @NotNull InventoryType type, @NotNull String title) {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, @NotNull final InventoryType type, @NotNull final String title) {
         return server.createInventory(owner, type, title);
     }
 
@@ -1228,7 +1228,7 @@ public final class Bukkit {
      * @throws IllegalArgumentException if the size is not a multiple of 9
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, int size) throws IllegalArgumentException {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, final int size) throws IllegalArgumentException {
         return server.createInventory(owner, size);
     }
 
@@ -1245,7 +1245,7 @@ public final class Bukkit {
      * @throws IllegalArgumentException if the size is not a multiple of 9
      */
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull net.kyori.adventure.text.Component title) throws IllegalArgumentException {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, final int size, @NotNull final net.kyori.adventure.text.Component title) throws IllegalArgumentException {
         return server.createInventory(owner, size, title);
     }
     // Paper end
@@ -1264,7 +1264,7 @@ public final class Bukkit {
      */
     @Deprecated // Paper
     @NotNull
-    public static Inventory createInventory(@Nullable InventoryHolder owner, int size, @NotNull String title) throws IllegalArgumentException {
+    public static Inventory createInventory(@Nullable final InventoryHolder owner, final int size, @NotNull final String title) throws IllegalArgumentException {
         return server.createInventory(owner, size, title);
     }
 
@@ -1276,7 +1276,7 @@ public final class Bukkit {
      * when the merchant inventory is viewed
      * @return a new merchant
      */
-    public static @NotNull Merchant createMerchant(@Nullable net.kyori.adventure.text.Component title) {
+    public static @NotNull Merchant createMerchant(@Nullable final net.kyori.adventure.text.Component title) {
         return server.createMerchant(title);
     }
     // Paper start
@@ -1290,7 +1290,7 @@ public final class Bukkit {
      */
     @NotNull
     @Deprecated // Paper
-    public static Merchant createMerchant(@Nullable String title) {
+    public static Merchant createMerchant(@Nullable final String title) {
         return server.createMerchant(title);
     }
 
@@ -1465,7 +1465,7 @@ public final class Bukkit {
      *     ServerListPingEvent#setServerIcon(CachedServerIcon)}
      */
     @NotNull
-    public static CachedServerIcon loadServerIcon(@NotNull File file) throws IllegalArgumentException, Exception {
+    public static CachedServerIcon loadServerIcon(@NotNull final File file) throws IllegalArgumentException, Exception {
         return server.loadServerIcon(file);
     }
 
@@ -1483,7 +1483,7 @@ public final class Bukkit {
      *     ServerListPingEvent#setServerIcon(CachedServerIcon)}
      */
     @NotNull
-    public static CachedServerIcon loadServerIcon(@NotNull BufferedImage image) throws IllegalArgumentException, Exception {
+    public static CachedServerIcon loadServerIcon(@NotNull final BufferedImage image) throws IllegalArgumentException, Exception {
         return server.loadServerIcon(image);
     }
 
@@ -1495,7 +1495,7 @@ public final class Bukkit {
      *
      * @param threshold the idle timeout in minutes
      */
-    public static void setIdleTimeout(int threshold) {
+    public static void setIdleTimeout(final int threshold) {
         server.setIdleTimeout(threshold);
     }
 
@@ -1518,7 +1518,7 @@ public final class Bukkit {
      *
      */
     @NotNull
-    public static ChunkGenerator.ChunkData createChunkData(@NotNull World world) {
+    public static ChunkGenerator.ChunkData createChunkData(@NotNull final World world) {
         return server.createChunkData(world);
     }
 
@@ -1533,7 +1533,7 @@ public final class Bukkit {
      *
      */
     @NotNull
-    public static ChunkGenerator.ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
+    public static ChunkGenerator.ChunkData createVanillaChunkData(@NotNull final World world, final int x, final int z) {
         return server.createVanillaChunkData(world, x, z);
     }
     // Paper stop
@@ -1549,7 +1549,7 @@ public final class Bukkit {
      * @return the created boss bar
      */
     @NotNull
-    public static BossBar createBossBar(@Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags) {
+    public static BossBar createBossBar(@Nullable final String title, @NotNull final BarColor color, @NotNull final BarStyle style, @NotNull final BarFlag... flags) {
         return server.createBossBar(title, color, style, flags);
     }
 
@@ -1568,7 +1568,7 @@ public final class Bukkit {
      * @return the created boss bar
      */
     @NotNull
-    public static KeyedBossBar createBossBar(@NotNull NamespacedKey key, @Nullable String title, @NotNull BarColor color, @NotNull BarStyle style, @NotNull BarFlag... flags) {
+    public static KeyedBossBar createBossBar(@NotNull final NamespacedKey key, @Nullable final String title, @NotNull final BarColor color, @NotNull final BarStyle style, @NotNull final BarFlag... flags) {
         return server.createBossBar(key, title, color, style, flags);
     }
 
@@ -1607,7 +1607,7 @@ public final class Bukkit {
      * @return bossbar or null if not exists
      */
     @Nullable
-    public static KeyedBossBar getBossBar(@NotNull NamespacedKey key) {
+    public static KeyedBossBar getBossBar(@NotNull final NamespacedKey key) {
         return server.getBossBar(key);
     }
 
@@ -1626,7 +1626,7 @@ public final class Bukkit {
      * @param key unique bossbar key
      * @return true if removal succeeded or false
      */
-    public static boolean removeBossBar(@NotNull NamespacedKey key) {
+    public static boolean removeBossBar(@NotNull final NamespacedKey key) {
         return server.removeBossBar(key);
     }
 
@@ -1637,7 +1637,7 @@ public final class Bukkit {
      * @return the entity with the given UUID, or null if it isn't found
      */
     @Nullable
-    public static Entity getEntity(@NotNull UUID uuid) {
+    public static Entity getEntity(@NotNull final UUID uuid) {
         return server.getEntity(uuid);
     }
 
@@ -1646,7 +1646,6 @@ public final class Bukkit {
      * Gets the current server TPS
      * @return current server TPS (1m, 5m, 15m in Paper-Server)
      */
-    @NotNull
     public static double[] getTPS() {
         return server.getTPS();
     }
@@ -1656,7 +1655,6 @@ public final class Bukkit {
      *
      * @return A sample of the servers last tick times (in nanos)
      */
-    @NotNull
     public static long[] getTickTimes() {
         return server.getTickTimes();
     }
@@ -1678,7 +1676,7 @@ public final class Bukkit {
      * @return advancement or null if not exists
      */
     @Nullable
-    public static Advancement getAdvancement(@NotNull NamespacedKey key) {
+    public static Advancement getAdvancement(@NotNull final NamespacedKey key) {
         return server.getAdvancement(key);
     }
 
@@ -1701,7 +1699,7 @@ public final class Bukkit {
      * @return new data instance
      */
     @NotNull
-    public static BlockData createBlockData(@NotNull Material material) {
+    public static BlockData createBlockData(@NotNull final Material material) {
         return server.createBlockData(material);
     }
 
@@ -1714,7 +1712,7 @@ public final class Bukkit {
      * @return new data instance
      */
     @NotNull
-    public static BlockData createBlockData(@NotNull Material material, @Nullable Consumer<BlockData> consumer) {
+    public static BlockData createBlockData(@NotNull final Material material, @Nullable final Consumer<BlockData> consumer) {
         return server.createBlockData(material, consumer);
     }
 
@@ -1727,7 +1725,7 @@ public final class Bukkit {
      * @throws IllegalArgumentException if the specified data is not valid
      */
     @NotNull
-    public static BlockData createBlockData(@NotNull String data) throws IllegalArgumentException {
+    public static BlockData createBlockData(@NotNull final String data) throws IllegalArgumentException {
         return server.createBlockData(data);
     }
 
@@ -1743,7 +1741,7 @@ public final class Bukkit {
      */
     @NotNull
     @Contract("null, null -> fail")
-    public static BlockData createBlockData(@Nullable Material material, @Nullable String data) throws IllegalArgumentException {
+    public static BlockData createBlockData(@Nullable final Material material, @Nullable final String data) throws IllegalArgumentException {
         return server.createBlockData(material, data);
     }
 
@@ -1766,7 +1764,7 @@ public final class Bukkit {
      * @return the tag or null
      */
     @UndefinedNullability // Paper
-    public static <T extends Keyed> Tag<T> getTag(@NotNull String registry, @NotNull NamespacedKey tag, @NotNull Class<T> clazz) {
+    public static <T extends Keyed> Tag<T> getTag(@NotNull final String registry, @NotNull final NamespacedKey tag, @NotNull final Class<T> clazz) {
         return server.getTag(registry, tag, clazz);
     }
 
@@ -1784,7 +1782,7 @@ public final class Bukkit {
      * @return all defined tags
      */
     @NotNull
-    public static <T extends Keyed> Iterable<Tag<T>> getTags(@NotNull String registry, @NotNull Class<T> clazz) {
+    public static <T extends Keyed> Iterable<Tag<T>> getTags(@NotNull final String registry, @NotNull final Class<T> clazz) {
         return server.getTags(registry, clazz);
     }
 
@@ -1795,7 +1793,7 @@ public final class Bukkit {
      * @return the LootTable, or null if no LootTable is found with that name
      */
     @Nullable
-    public static LootTable getLootTable(@NotNull NamespacedKey key) {
+    public static LootTable getLootTable(@NotNull final NamespacedKey key) {
         return server.getLootTable(key);
     }
 
@@ -1820,7 +1818,7 @@ public final class Bukkit {
      * or a parameter is null
      */
     @NotNull
-    public static List<Entity> selectEntities(@NotNull CommandSender sender, @NotNull String selector) throws IllegalArgumentException {
+    public static List<Entity> selectEntities(@NotNull final CommandSender sender, @NotNull final String selector) throws IllegalArgumentException {
         return server.selectEntities(sender, selector);
     }
 
@@ -1887,7 +1885,7 @@ public final class Bukkit {
      * @return A PlayerProfile object
      */
     @NotNull
-    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull UUID uuid) {
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull final UUID uuid) {
         return server.createProfile(uuid);
     }
 
@@ -1897,7 +1895,7 @@ public final class Bukkit {
      * @return A PlayerProfile object
      */
     @NotNull
-    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull String name) {
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@NotNull final String name) {
         return server.createProfile(name);
     }
 
@@ -1911,7 +1909,7 @@ public final class Bukkit {
      * @return A PlayerProfile object
      */
     @NotNull
-    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable UUID uuid, @Nullable String name) {
+    public static com.destroystokyo.paper.profile.PlayerProfile createProfile(@Nullable final UUID uuid, @Nullable final String name) {
         return server.createProfile(uuid, name);
     }
 
diff --git a/src/main/java/org/bukkit/ChatColor.java b/src/main/java/org/bukkit/ChatColor.java
index c1bd0da5e7c4c6f5dc4c661c47132f05d5822fbc..021a8b30cba6e8cfccdfddc4df37974f61aa4163 100644
--- a/src/main/java/org/bukkit/ChatColor.java
+++ b/src/main/java/org/bukkit/ChatColor.java
@@ -248,11 +248,11 @@ public enum ChatColor {
     private static final Map<Integer, ChatColor> BY_ID = Maps.newHashMap();
     private static final Map<Character, ChatColor> BY_CHAR = Maps.newHashMap();
 
-    ChatColor(char code, int intCode) {
+    ChatColor(final char code, final int intCode) {
         this(code, intCode, false);
     }
 
-    ChatColor(char code, int intCode, boolean isFormat) {
+    ChatColor(final char code, final int intCode, final boolean isFormat) {
         this.code = code;
         this.intCode = intCode;
         this.isFormat = isFormat;
@@ -305,7 +305,7 @@ public enum ChatColor {
      *     or null if it doesn't exist
      */
     @Nullable
-    public static ChatColor getByChar(char code) {
+    public static ChatColor getByChar(final char code) {
         return BY_CHAR.get(code);
     }
 
@@ -317,9 +317,9 @@ public enum ChatColor {
      *     or null if it doesn't exist
      */
     @Nullable
-    public static ChatColor getByChar(@NotNull String code) {
+    public static ChatColor getByChar(@NotNull final String code) {
         Validate.notNull(code, "Code cannot be null");
-        Validate.isTrue(code.length() > 0, "Code must have at least one char");
+        Validate.isTrue(!code.isEmpty(), "Code must have at least one char");
 
         return BY_CHAR.get(code.charAt(0));
     }
@@ -351,10 +351,10 @@ public enum ChatColor {
      * @return Text containing the ChatColor.COLOR_CODE color code character.
      */
     @NotNull
-    public static String translateAlternateColorCodes(char altColorChar, @NotNull String textToTranslate) {
+    public static String translateAlternateColorCodes(final char altColorChar, @NotNull final String textToTranslate) {
         Validate.notNull(textToTranslate, "Cannot translate null text");
 
-        char[] b = textToTranslate.toCharArray();
+        final char[] b = textToTranslate.toCharArray();
         for (int i = 0; i < b.length - 1; i++) {
             if (b[i] == altColorChar && "0123456789AaBbCcDdEeFfKkLlMmNnOoRrXx".indexOf(b[i + 1]) > -1) {
                 b[i] = ChatColor.COLOR_CHAR;
@@ -372,33 +372,33 @@ public enum ChatColor {
      * @return Any remaining ChatColors to pass onto the next line.
      */
     @NotNull
-    public static String getLastColors(@NotNull String input) {
+    public static String getLastColors(@NotNull final String input) {
         Validate.notNull(input, "Cannot get last colors from null text");
 
-        StringBuilder result = new StringBuilder();
-        int length = input.length();
+        final StringBuilder result = new StringBuilder();
+        final int length = input.length();
 
         // Search backwards from the end as it is faster
         for (int index = length - 1; index > -1; index--) {
-            char section = input.charAt(index);
+            final char section = input.charAt(index);
             if (section == COLOR_CHAR && index < length - 1) {
                 // Paper start - Support hex colors
                 if (index > 11 && input.charAt(index - 12) == COLOR_CHAR && (input.charAt(index - 11) == 'x' || input.charAt(index - 11) == 'X')) {
-                    String color = input.substring(index - 12, index + 2);
+                    final String color = input.substring(index - 12, index + 2);
                     if (HEX_COLOR_PATTERN.matcher(color).matches()) {
                         result.insert(0, color);
                         break;
                     }
                 }
                 // Paper end
-                char c = input.charAt(index + 1);
-                ChatColor color = getByChar(c);
+                final char c = input.charAt(index + 1);
+                final ChatColor color = getByChar(c);
 
                 if (color != null) {
                     result.insert(0, color.toString());
 
                     // Once we find a color or reset we can stop searching
-                    if (color.isColor() || color.equals(RESET)) {
+                    if (color.isColor() || color == RESET) {
                         break;
                     }
                 }
@@ -409,7 +409,7 @@ public enum ChatColor {
     }
 
     static {
-        for (ChatColor color : values()) {
+        for (final ChatColor color : values()) {
             BY_ID.put(color.intCode, color);
             BY_CHAR.put(color.code, color);
         }
diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
index 98263d896f316983609432c45b85401a2692432d..e44409af7d3976032a9201b507ec325b3cc7664a 100644
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -42,7 +42,7 @@ public interface Chunk extends PersistentDataHolder {
      * @param loc Location to get chunk key
      * @return Location's chunk coordinates packed into a long
      */
-    static long getChunkKey(@NotNull Location loc) {
+    static long getChunkKey(@NotNull final Location loc) {
         return getChunkKey((int) Math.floor(loc.getX()) >> 4, (int) Math.floor(loc.getZ()) >> 4);
     }
 
@@ -51,8 +51,8 @@ public interface Chunk extends PersistentDataHolder {
      * @param z Z Coordinate
      * @return Chunk coordinates packed into a long
      */
-    static long getChunkKey(int x, int z) {
-        return (long) x & 0xffffffffL | ((long) z & 0xffffffffL) << 32;
+    static long getChunkKey(final int x, final int z) {
+        return x & 0xffffffffL | (z & 0xffffffffL) << 32;
     }
     // Paper end
 
diff --git a/src/main/java/org/bukkit/CoalType.java b/src/main/java/org/bukkit/CoalType.java
index 08c13c92859f9d38b497245ec0aa94e225f2f378..1fc5c7a28e87cd469c01e3cfa77cffe178ee3afe 100644
--- a/src/main/java/org/bukkit/CoalType.java
+++ b/src/main/java/org/bukkit/CoalType.java
@@ -45,7 +45,7 @@ public enum CoalType {
     }
 
     static {
-        for (CoalType type : values()) {
+        for (final CoalType type : values()) {
             BY_DATA.put(type.data, type);
         }
     }
diff --git a/src/main/java/org/bukkit/Color.java b/src/main/java/org/bukkit/Color.java
index 863f46ed84ef14371d322723484c1c8dd792d413..b4606ca8394d37e41c5dd6ecb585953f5a774836 100644
--- a/src/main/java/org/bukkit/Color.java
+++ b/src/main/java/org/bukkit/Color.java
@@ -116,7 +116,7 @@ public final class Color implements ConfigurationSerializable {
      * @throws IllegalArgumentException if any value is strictly {@literal >255 or <0}
      */
     @NotNull
-    public static Color fromRGB(int red, int green, int blue) throws IllegalArgumentException {
+    public static Color fromRGB(final int red, final int green, final int blue) throws IllegalArgumentException {
         return new Color(red, green, blue);
     }
 
@@ -130,7 +130,7 @@ public final class Color implements ConfigurationSerializable {
      * @throws IllegalArgumentException if any value is strictly {@literal >255 or <0}
      */
     @NotNull
-    public static Color fromBGR(int blue, int green, int red) throws IllegalArgumentException {
+    public static Color fromBGR(final int blue, final int green, final int red) throws IllegalArgumentException {
         return new Color(red, green, blue);
     }
 
@@ -144,7 +144,7 @@ public final class Color implements ConfigurationSerializable {
      *     bits
      */
     @NotNull
-    public static Color fromRGB(int rgb) throws IllegalArgumentException {
+    public static Color fromRGB(final int rgb) throws IllegalArgumentException {
         Validate.isTrue((rgb >> 24) == 0, "Extrenuous data in: ", rgb);
         return fromRGB(rgb >> 16 & BIT_MASK, rgb >> 8 & BIT_MASK, rgb & BIT_MASK);
     }
@@ -159,12 +159,12 @@ public final class Color implements ConfigurationSerializable {
      *     bits
      */
     @NotNull
-    public static Color fromBGR(int bgr) throws IllegalArgumentException {
+    public static Color fromBGR(final int bgr) throws IllegalArgumentException {
         Validate.isTrue((bgr >> 24) == 0, "Extrenuous data in: ", bgr);
         return fromBGR(bgr >> 16 & BIT_MASK, bgr >> 8 & BIT_MASK, bgr & BIT_MASK);
     }
 
-    private Color(int red, int green, int blue) {
+    private Color(final int red, final int green, final int blue) {
         Validate.isTrue(red >= 0 && red <= BIT_MASK, "Red is not between 0-255: ", red);
         Validate.isTrue(green >= 0 && green <= BIT_MASK, "Green is not between 0-255: ", green);
         Validate.isTrue(blue >= 0 && blue <= BIT_MASK, "Blue is not between 0-255: ", blue);
@@ -190,7 +190,7 @@ public final class Color implements ConfigurationSerializable {
      * @return a new color object with the red component
      */
     @NotNull
-    public Color setRed(int red) {
+    public Color setRed(final int red) {
         return fromRGB(red, getGreen(), getBlue());
     }
 
@@ -210,7 +210,7 @@ public final class Color implements ConfigurationSerializable {
      * @return a new color object with the red component
      */
     @NotNull
-    public Color setGreen(int green) {
+    public Color setGreen(final int green) {
         return fromRGB(getRed(), green, getBlue());
     }
 
@@ -230,7 +230,7 @@ public final class Color implements ConfigurationSerializable {
      * @return a new color object with the red component
      */
     @NotNull
-    public Color setBlue(int blue) {
+    public Color setBlue(final int blue) {
         return fromRGB(getRed(), getGreen(), blue);
     }
 
@@ -261,10 +261,10 @@ public final class Color implements ConfigurationSerializable {
      */
     // TODO: Javadoc what this method does, not what it mimics. API != Implementation
     @NotNull
-    public Color mixDyes(@NotNull DyeColor... colors) {
+    public Color mixDyes(@NotNull final DyeColor... colors) {
         Validate.noNullElements(colors, "Colors cannot be null");
 
-        Color[] toPass = new Color[colors.length];
+        final Color[] toPass = new Color[colors.length];
         for (int i = 0; i < colors.length; i++) {
             toPass[i] = colors[i].getColor();
         }
@@ -281,33 +281,33 @@ public final class Color implements ConfigurationSerializable {
      */
     // TODO: Javadoc what this method does, not what it mimics. API != Implementation
     @NotNull
-    public Color mixColors(@NotNull Color... colors) {
+    public Color mixColors(@NotNull final Color... colors) {
         Validate.noNullElements(colors, "Colors cannot be null");
 
         int totalRed = this.getRed();
         int totalGreen = this.getGreen();
         int totalBlue = this.getBlue();
         int totalMax = Math.max(Math.max(totalRed, totalGreen), totalBlue);
-        for (Color color : colors) {
+        for (final Color color : colors) {
             totalRed += color.getRed();
             totalGreen += color.getGreen();
             totalBlue += color.getBlue();
             totalMax += Math.max(Math.max(color.getRed(), color.getGreen()), color.getBlue());
         }
 
-        float averageRed = totalRed / (colors.length + 1);
-        float averageGreen = totalGreen / (colors.length + 1);
-        float averageBlue = totalBlue / (colors.length + 1);
-        float averageMax = totalMax / (colors.length + 1);
+        final float averageRed = totalRed / (colors.length + 1);
+        final float averageGreen = totalGreen / (colors.length + 1);
+        final float averageBlue = totalBlue / (colors.length + 1);
+        final float averageMax = totalMax / (colors.length + 1);
 
-        float maximumOfAverages = Math.max(Math.max(averageRed, averageGreen), averageBlue);
-        float gainFactor = averageMax / maximumOfAverages;
+        final float maximumOfAverages = Math.max(Math.max(averageRed, averageGreen), averageBlue);
+        final float gainFactor = averageMax / maximumOfAverages;
 
         return Color.fromRGB((int) (averageRed * gainFactor), (int) (averageGreen * gainFactor), (int) (averageBlue * gainFactor));
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         if (!(o instanceof Color)) {
             return false;
         }
@@ -331,7 +331,7 @@ public final class Color implements ConfigurationSerializable {
     }
 
     @NotNull
-    public static Color deserialize(@NotNull Map<String, Object> map) {
+    public static Color deserialize(@NotNull final Map<String, Object> map) {
         return fromRGB(
             asInt("RED", map),
             asInt("GREEN", map),
@@ -339,8 +339,8 @@ public final class Color implements ConfigurationSerializable {
         );
     }
 
-    private static int asInt(@NotNull String string, @NotNull Map<String, Object> map) {
-        Object value = map.get(string);
+    private static int asInt(@NotNull final String string, @NotNull final Map<String, Object> map) {
+        final Object value = map.get(string);
         if (value == null) {
             throw new IllegalArgumentException(string + " not in map " + map);
         }
diff --git a/src/main/java/org/bukkit/CropState.java b/src/main/java/org/bukkit/CropState.java
index 81c36d9cb3af02cffe8fe5a8f91962f9576aa5b4..be729c829f10e6de66502f34515028c9e17f32bd 100644
--- a/src/main/java/org/bukkit/CropState.java
+++ b/src/main/java/org/bukkit/CropState.java
@@ -76,7 +76,7 @@ public enum CropState {
     }
 
     static {
-        for (CropState cropState : values()) {
+        for (final CropState cropState : values()) {
             BY_DATA.put(cropState.getData(), cropState);
         }
     }
diff --git a/src/main/java/org/bukkit/Difficulty.java b/src/main/java/org/bukkit/Difficulty.java
index 4486124dc938fda6a31ed35391dfeef581ea1327..c50dd8c7b546623b496665a86eabaaf9ad2ef22e 100644
--- a/src/main/java/org/bukkit/Difficulty.java
+++ b/src/main/java/org/bukkit/Difficulty.java
@@ -67,7 +67,7 @@ public enum Difficulty {
     }
 
     static {
-        for (Difficulty diff : values()) {
+        for (final Difficulty diff : values()) {
             BY_ID.put(diff.value, diff);
         }
     }
diff --git a/src/main/java/org/bukkit/DyeColor.java b/src/main/java/org/bukkit/DyeColor.java
index 97ba9d190265a9b27993cfb36bd13d22fd0145d6..b3bf55152fd61ca52b302adfc65067be86a5e84e 100644
--- a/src/main/java/org/bukkit/DyeColor.java
+++ b/src/main/java/org/bukkit/DyeColor.java
@@ -85,7 +85,7 @@ public enum DyeColor {
     private static final Map<Color, DyeColor> BY_COLOR;
     private static final Map<Color, DyeColor> BY_FIREWORK;
 
-    DyeColor(final int woolData, final int dyeData, /*@NotNull*/ Color color, /*@NotNull*/ Color firework) {
+    DyeColor(final int woolData, final int dyeData, /*@NotNull*/ final Color color, /*@NotNull*/ final Color firework) {
         this.woolData = (byte) woolData;
         this.dyeData = (byte) dyeData;
         this.color = color;
@@ -148,7 +148,7 @@ public enum DyeColor {
     @Deprecated
     @Nullable
     public static DyeColor getByWoolData(final byte data) {
-        int i = 0xff & data;
+        final int i = 0xff & data;
         if (i >= BY_WOOL_DATA.length) {
             return null;
         }
@@ -167,7 +167,7 @@ public enum DyeColor {
     @Deprecated
     @Nullable
     public static DyeColor getByDyeData(final byte data) {
-        int i = 0xff & data;
+        final int i = 0xff & data;
         if (i >= BY_DYE_DATA.length) {
             return null;
         }
@@ -207,17 +207,17 @@ public enum DyeColor {
      */
     @Deprecated
     @NotNull
-    public static DyeColor legacyValueOf(@Nullable String name) {
+    public static DyeColor legacyValueOf(@Nullable final String name) {
         return "SILVER".equals(name) ? DyeColor.LIGHT_GRAY : DyeColor.valueOf(name);
     }
 
     static {
         BY_WOOL_DATA = values();
         BY_DYE_DATA = values();
-        ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
-        ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
+        final ImmutableMap.Builder<Color, DyeColor> byColor = ImmutableMap.builder();
+        final ImmutableMap.Builder<Color, DyeColor> byFirework = ImmutableMap.builder();
 
-        for (DyeColor color : values()) {
+        for (final DyeColor color : values()) {
             BY_WOOL_DATA[color.woolData & 0xff] = color;
             BY_DYE_DATA[color.dyeData & 0xff] = color;
             byColor.put(color.getColor(), color);
diff --git a/src/main/java/org/bukkit/Effect.java b/src/main/java/org/bukkit/Effect.java
index 0f598fa0560d14b44dcc65205364870c0bbfa0d8..a7e11c73cf5b4fdec70b2b60fd57fa6f2ddc03be 100644
--- a/src/main/java/org/bukkit/Effect.java
+++ b/src/main/java/org/bukkit/Effect.java
@@ -267,11 +267,11 @@ public enum Effect {
     private final Class<?> data;
     private static final Map<Integer, Effect> BY_ID = Maps.newHashMap();
 
-    Effect(int id, /*@NotNull*/ Type type) {
+    Effect(final int id, /*@NotNull*/ final Type type) {
         this(id, type, null);
     }
 
-    Effect(int id, /*@NotNull*/ Type type, /*@Nullable*/ Class<?> data) {
+    Effect(final int id, /*@NotNull*/ final Type type, /*@Nullable*/ final Class<?> data) {
         this.id = id;
         this.type = type;
         this.data = data;
@@ -314,12 +314,12 @@ public enum Effect {
      */
     @Deprecated
     @Nullable
-    public static Effect getById(int id) {
+    public static Effect getById(final int id) {
         return BY_ID.get(id);
     }
 
     static {
-        for (Effect effect : values()) {
+        for (final Effect effect : values()) {
             BY_ID.put(effect.id, effect);
         }
     }
diff --git a/src/main/java/org/bukkit/EntityEffect.java b/src/main/java/org/bukkit/EntityEffect.java
index 0d8ee0cb1aae826fae0a920cdbf4152550c7375c..3e89a8f5901708d804d3ef86c3627c2f8610f104 100644
--- a/src/main/java/org/bukkit/EntityEffect.java
+++ b/src/main/java/org/bukkit/EntityEffect.java
@@ -215,7 +215,7 @@ public enum EntityEffect {
     private final byte data;
     private final Class<? extends Entity> applicable;
 
-    EntityEffect(final int data, /*@NotNull*/ Class<? extends Entity> clazz) {
+    EntityEffect(final int data, /*@NotNull*/ final Class<? extends Entity> clazz) {
         this.data = (byte) data;
         this.applicable = clazz;
     }
diff --git a/src/main/java/org/bukkit/FireworkEffect.java b/src/main/java/org/bukkit/FireworkEffect.java
index 52d56d1775dd2e74b821de40a9c6a316c320024c..38457d12a4133dd3c92b054b3f28e077f5382b5d 100644
--- a/src/main/java/org/bukkit/FireworkEffect.java
+++ b/src/main/java/org/bukkit/FireworkEffect.java
@@ -74,7 +74,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @throws IllegalArgumentException If type is null
          */
         @NotNull
-        public Builder with(@NotNull Type type) throws IllegalArgumentException {
+        public Builder with(@NotNull final Type type) throws IllegalArgumentException {
             Validate.notNull(type, "Cannot have null type");
             this.type = type;
             return this;
@@ -98,7 +98,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @return This object, for chaining
          */
         @NotNull
-        public Builder flicker(boolean flicker) {
+        public Builder flicker(final boolean flicker) {
             this.flicker = flicker;
             return this;
         }
@@ -121,7 +121,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @return This object, for chaining
          */
         @NotNull
-        public Builder trail(boolean trail) {
+        public Builder trail(final boolean trail) {
             this.trail = trail;
             return this;
         }
@@ -134,7 +134,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          * @throws IllegalArgumentException If color is null
          */
         @NotNull
-        public Builder withColor(@NotNull Color color) throws IllegalArgumentException {
+        public Builder withColor(@NotNull final Color color) throws IllegalArgumentException {
             Validate.notNull(color, "Cannot have null color");
 
             colors.add(color);
@@ -152,14 +152,14 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withColor(@NotNull Color... colors) throws IllegalArgumentException {
+        public Builder withColor(@NotNull final Color... colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
             }
 
-            ImmutableList.Builder<Color> list = this.colors;
-            for (Color color : colors) {
+            final ImmutableList.Builder<Color> list = this.colors;
+            for (final Color color : colors) {
                 Validate.notNull(color, "Color cannot be null");
                 list.add(color);
             }
@@ -178,11 +178,11 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withColor(@NotNull Iterable<?> colors) throws IllegalArgumentException {
+        public Builder withColor(@NotNull final Iterable<?> colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
 
-            ImmutableList.Builder<Color> list = this.colors;
-            for (Object color : colors) {
+            final ImmutableList.Builder<Color> list = this.colors;
+            for (final Object color : colors) {
                 if (!(color instanceof Color)) {
                     throw new IllegalArgumentException(color + " is not a Color in " + colors);
                 }
@@ -202,7 +202,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withFade(@NotNull Color color) throws IllegalArgumentException {
+        public Builder withFade(@NotNull final Color color) throws IllegalArgumentException {
             Validate.notNull(color, "Cannot have null color");
 
             if (fadeColors == null) {
@@ -224,7 +224,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withFade(@NotNull Color... colors) throws IllegalArgumentException {
+        public Builder withFade(@NotNull final Color... colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
             if (colors.length == 0) {
                 return this;
@@ -235,7 +235,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
                 list = this.fadeColors = ImmutableList.builder();
             }
 
-            for (Color color : colors) {
+            for (final Color color : colors) {
                 Validate.notNull(color, "Color cannot be null");
                 list.add(color);
             }
@@ -254,7 +254,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
          *     thrown after changes have occurred)
          */
         @NotNull
-        public Builder withFade(@NotNull Iterable<?> colors) throws IllegalArgumentException {
+        public Builder withFade(@NotNull final Iterable<?> colors) throws IllegalArgumentException {
             Validate.notNull(colors, "Cannot have null colors");
 
             ImmutableList.Builder<Color> list = this.fadeColors;
@@ -262,7 +262,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
                 list = this.fadeColors = ImmutableList.builder();
             }
 
-            for (Object color : colors) {
+            for (final Object color : colors) {
                 if (!(color instanceof Color)) {
                     throw new IllegalArgumentException(color + " is not a Color in " + colors);
                 }
@@ -305,7 +305,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
     private final Type type;
     private String string = null;
 
-    FireworkEffect(boolean flicker, boolean trail, @NotNull ImmutableList<Color> colors, @NotNull ImmutableList<Color> fadeColors, @NotNull Type type) {
+    FireworkEffect(final boolean flicker, final boolean trail, @NotNull final ImmutableList<Color> colors, @NotNull final ImmutableList<Color> fadeColors, @NotNull final Type type) {
         if (colors.isEmpty()) {
             throw new IllegalStateException("Cannot make FireworkEffect without any color");
         }
@@ -370,8 +370,8 @@ public final class FireworkEffect implements ConfigurationSerializable {
      * @return the resulting serializable
      */
     @NotNull
-    public static ConfigurationSerializable deserialize(@NotNull Map<String, Object> map) {
-        Type type = Type.valueOf((String) map.get(TYPE));
+    public static ConfigurationSerializable deserialize(@NotNull final Map<String, Object> map) {
+        final Type type = Type.valueOf((String) map.get(TYPE));
 
         return builder()
             .flicker((Boolean) map.get(FLICKER))
@@ -417,7 +417,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
@@ -426,7 +426,7 @@ public final class FireworkEffect implements ConfigurationSerializable {
             return false;
         }
 
-        FireworkEffect that = (FireworkEffect) obj;
+        final FireworkEffect that = (FireworkEffect) obj;
         return this.flicker == that.flicker
                 && this.trail == that.trail
                 && this.type == that.type
diff --git a/src/main/java/org/bukkit/GameMode.java b/src/main/java/org/bukkit/GameMode.java
index 6696bc74edecfbbbe929518f1040f0f8204f941b..de388eb15855e8e672bfbd07d927bcf0e47b88b1 100644
--- a/src/main/java/org/bukkit/GameMode.java
+++ b/src/main/java/org/bukkit/GameMode.java
@@ -66,7 +66,7 @@ public enum GameMode {
     }
 
     static {
-        for (GameMode mode : values()) {
+        for (final GameMode mode : values()) {
             BY_ID.put(mode.getValue(), mode);
         }
     }
diff --git a/src/main/java/org/bukkit/GameRule.java b/src/main/java/org/bukkit/GameRule.java
index 6d253140f33562da57e2d57c8383d8e774a5f183..ba1475ac93c2cb88de9ae4e577ea7521de2fe9fc 100644
--- a/src/main/java/org/bukkit/GameRule.java
+++ b/src/main/java/org/bukkit/GameRule.java
@@ -204,7 +204,7 @@ public final class GameRule<T> {
     private final String name;
     private final Class<T> type;
 
-    private GameRule(@NotNull String name, @NotNull Class<T> clazz) {
+    private GameRule(@NotNull final String name, @NotNull final Class<T> clazz) {
         Preconditions.checkNotNull(name, "GameRule name cannot be null");
         Preconditions.checkNotNull(clazz, "GameRule type cannot be null");
         Preconditions.checkArgument(clazz == Boolean.class || clazz == Integer.class, "Must be of type Boolean or Integer. Found %s ", clazz.getName());
@@ -234,14 +234,14 @@ public final class GameRule<T> {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
         if (!(obj instanceof GameRule)) {
             return false;
         }
-        GameRule<?> other = (GameRule<?>) obj;
+        final GameRule<?> other = (GameRule<?>) obj;
         return this.getName().equals(other.getName()) && this.getType() == other.getType();
     }
 
@@ -258,7 +258,7 @@ public final class GameRule<T> {
      * name
      */
     @Nullable
-    public static GameRule<?> getByName(@NotNull String rule) {
+    public static GameRule<?> getByName(@NotNull final String rule) {
         Preconditions.checkNotNull(rule, "Rule cannot be null");
         return gameRules.get(rule);
     }
diff --git a/src/main/java/org/bukkit/GrassSpecies.java b/src/main/java/org/bukkit/GrassSpecies.java
index b5a01dd864132fb9f59193d073de867b68367dc5..cfa3d98e7c9408a1b27b9ec038485de0da85b50d 100644
--- a/src/main/java/org/bukkit/GrassSpecies.java
+++ b/src/main/java/org/bukkit/GrassSpecies.java
@@ -55,7 +55,7 @@ public enum GrassSpecies {
     }
 
     static {
-        for (GrassSpecies grassSpecies : values()) {
+        for (final GrassSpecies grassSpecies : values()) {
             BY_DATA.put(grassSpecies.getData(), grassSpecies);
         }
     }
diff --git a/src/main/java/org/bukkit/Instrument.java b/src/main/java/org/bukkit/Instrument.java
index 519bc38e6916c034b549aaf24b0df10834a3b5a1..bb2c6341361ddda1d391f322dc5aa8aa7ff08e7a 100644
--- a/src/main/java/org/bukkit/Instrument.java
+++ b/src/main/java/org/bukkit/Instrument.java
@@ -106,7 +106,7 @@ public enum Instrument {
     }
 
     static {
-        for (Instrument instrument : Instrument.values()) {
+        for (final Instrument instrument : Instrument.values()) {
             BY_DATA.put(instrument.getType(), instrument);
         }
     }
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
index 5b84b74c22f30bb8e284ecb519232ce4ca09b920..f6ceaafaebd5f1d6b652e77afafc302f53940501 100644
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -76,7 +76,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      *
      * @param world New world that this location resides in
      */
-    public void setWorld(@Nullable World world) {
+    public void setWorld(@Nullable final World world) {
         this.world = (world == null) ? null : new WeakReference<>(world);
     }
 
@@ -90,7 +90,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
             return false;
         }
 
-        World world = this.world.get();
+        final World world = this.world.get();
         return world != null && Bukkit.getWorld(world.getUID()) != null;
     }
 
@@ -107,7 +107,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
             return null;
         }
 
-        World world = this.world.get();
+        final World world = this.world.get();
         Preconditions.checkArgument(world != null, "World unloaded");
         return world;
     }
@@ -137,7 +137,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      *
      * @param x X-coordinate
      */
-    public void setX(double x) {
+    public void setX(final double x) {
         this.x = x;
     }
 
@@ -165,7 +165,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      *
      * @param y y-coordinate
      */
-    public void setY(double y) {
+    public void setY(final double y) {
         this.y = y;
     }
 
@@ -193,7 +193,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      *
      * @param z z-coordinate
      */
-    public void setZ(double z) {
+    public void setZ(final double z) {
         this.z = z;
     }
 
@@ -230,7 +230,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      *
      * @param yaw new rotation's yaw
      */
-    public void setYaw(float yaw) {
+    public void setYaw(final float yaw) {
         this.yaw = yaw;
     }
 
@@ -264,7 +264,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      *
      * @param pitch new incline's pitch
      */
-    public void setPitch(float pitch) {
+    public void setPitch(final float pitch) {
         this.pitch = pitch;
     }
 
@@ -293,14 +293,14 @@ public class Location implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Vector getDirection() {
-        Vector vector = new Vector();
+        final Vector vector = new Vector();
 
-        double rotX = this.getYaw();
-        double rotY = this.getPitch();
+        final double rotX = this.getYaw();
+        final double rotY = this.getPitch();
 
         vector.setY(-Math.sin(Math.toRadians(rotY)));
 
-        double xz = Math.cos(Math.toRadians(rotY));
+        final double xz = Math.cos(Math.toRadians(rotY));
 
         vector.setX(-xz * Math.sin(Math.toRadians(rotX)));
         vector.setZ(xz * Math.cos(Math.toRadians(rotX)));
@@ -316,7 +316,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the same location
      */
     @NotNull
-    public Location setDirection(@NotNull Vector vector) {
+    public Location setDirection(@NotNull final Vector vector) {
         /*
          * Sin = Opp / Hyp
          * Cos = Adj / Hyp
@@ -334,12 +334,12 @@ public class Location implements Cloneable, ConfigurationSerializable {
             return this;
         }
 
-        double theta = Math.atan2(-x, z);
+        final double theta = Math.atan2(-x, z);
         yaw = (float) Math.toDegrees((theta + _2PI) % _2PI);
 
-        double x2 = NumberConversions.square(x);
-        double z2 = NumberConversions.square(z);
-        double xz = Math.sqrt(x2 + z2);
+        final double x2 = NumberConversions.square(x);
+        final double z2 = NumberConversions.square(z);
+        final double xz = Math.sqrt(x2 + z2);
         pitch = (float) Math.toDegrees(Math.atan(-vector.getY() / xz));
 
         return this;
@@ -354,7 +354,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @throws IllegalArgumentException for differing worlds
      */
     @NotNull
-    public Location add(@NotNull Location vec) {
+    public Location add(@NotNull final Location vec) {
         if (vec.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot add Locations of differing worlds");
         }
@@ -373,7 +373,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the same location
      */
     @NotNull
-    public Location add(@NotNull Vector vec) {
+    public Location add(@NotNull final Vector vec) {
         this.x += vec.getX();
         this.y += vec.getY();
         this.z += vec.getZ();
@@ -390,7 +390,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the same location
      */
     @NotNull
-    public Location add(double x, double y, double z) {
+    public Location add(final double x, final double y, final double z) {
         this.x += x;
         this.y += y;
         this.z += z;
@@ -406,7 +406,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @throws IllegalArgumentException for differing worlds
      */
     @NotNull
-    public Location subtract(@NotNull Location vec) {
+    public Location subtract(@NotNull final Location vec) {
         if (vec.getWorld() != getWorld()) {
             throw new IllegalArgumentException("Cannot add Locations of differing worlds");
         }
@@ -425,7 +425,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the same location
      */
     @NotNull
-    public Location subtract(@NotNull Vector vec) {
+    public Location subtract(@NotNull final Vector vec) {
         this.x -= vec.getX();
         this.y -= vec.getY();
         this.z -= vec.getZ();
@@ -443,7 +443,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the same location
      */
     @NotNull
-    public Location subtract(double x, double y, double z) {
+    public Location subtract(final double x, final double y, final double z) {
         this.x -= x;
         this.y -= y;
         this.z -= z;
@@ -488,7 +488,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @throws IllegalArgumentException for differing worlds
      * @see Vector
      */
-    public double distance(@NotNull Location o) {
+    public double distance(@NotNull final Location o) {
         return Math.sqrt(distanceSquared(o));
     }
 
@@ -500,7 +500,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @throws IllegalArgumentException for differing worlds
      * @see Vector
      */
-    public double distanceSquared(@NotNull Location o) {
+    public double distanceSquared(@NotNull final Location o) {
 	    if (o.getWorld() == null || getWorld() == null) {
 	        throw new IllegalArgumentException("Cannot measure distance to a null world");
 	    } else if (o.getWorld() != getWorld()) {
@@ -519,7 +519,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @see Vector
      */
     @NotNull
-    public Location multiply(double m) {
+    public Location multiply(final double m) {
         x *= m;
         y *= m;
         z *= m;
@@ -549,7 +549,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return true if a chunk has been generated at this location
      */
     public boolean isGenerated() {
-        World world = this.getWorld();
+        final World world = this.getWorld();
         Preconditions.checkNotNull(world, "Location has no world!");
         return world.isChunkGenerated(locToBlock(x) >> 4, locToBlock(z) >> 4);
     }
@@ -564,7 +564,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return self (not cloned)
      */
     @NotNull
-    public Location set(double x, double y, double z) {
+    public Location set(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -582,7 +582,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return self (not cloned)
      */
     @NotNull
-    public Location add(@NotNull Location base, double x, double y, double z) {
+    public Location add(@NotNull final Location base, final double x, final double y, final double z) {
         return this.set(base.x + x, base.y + y, base.z + z);
     }
 
@@ -597,7 +597,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return self (not cloned)
      */
     @NotNull
-    public Location subtract(@NotNull Location base, double x, double y, double z) {
+    public Location subtract(@NotNull final Location base, final double x, final double y, final double z) {
         return this.set(base.x - x, base.y - y, base.z - z);
     }
 
@@ -606,7 +606,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Location toBlockLocation() {
-        Location blockLoc = clone();
+        final Location blockLoc = clone();
         blockLoc.setX(getBlockX());
         blockLoc.setY(getBlockY());
         blockLoc.setZ(getBlockZ());
@@ -628,7 +628,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Location toCenterLocation() {
-        Location centerLoc = clone();
+        final Location centerLoc = clone();
         centerLoc.setX(getBlockX() + 0.5);
         centerLoc.setY(getBlockY() + 0.5);
         centerLoc.setZ(getBlockZ() + 0.5);
@@ -684,7 +684,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(float power) {
+    public boolean createExplosion(final float power) {
         return this.getWorld().createExplosion(this, power);
     }
 
@@ -698,7 +698,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(float power, boolean setFire) {
+    public boolean createExplosion(final float power, final boolean setFire) {
         return this.getWorld().createExplosion(this, power, setFire);
     }
 
@@ -711,7 +711,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(float power, boolean setFire, boolean breakBlocks) {
+    public boolean createExplosion(final float power, final boolean setFire, final boolean breakBlocks) {
         return this.getWorld().createExplosion(this, power, setFire, breakBlocks);
     }
 
@@ -724,7 +724,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@Nullable Entity source, float power) {
+    public boolean createExplosion(@Nullable final Entity source, final float power) {
         return this.getWorld().createExplosion(source, this, power, true, true);
     }
 
@@ -739,7 +739,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@Nullable Entity source, float power, boolean setFire) {
+    public boolean createExplosion(@Nullable final Entity source, final float power, final boolean setFire) {
         return this.getWorld().createExplosion(source, this, power, setFire, true);
     }
 
@@ -753,7 +753,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    public boolean createExplosion(@NotNull Entity source, float power, boolean setFire, boolean breakBlocks) {
+    public boolean createExplosion(@NotNull final Entity source, final float power, final boolean setFire, final boolean breakBlocks) {
         return this.getWorld().createExplosion(source, this, power, setFire, breakBlocks);
     }
 
@@ -768,8 +768,8 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Entity> getNearbyEntities(double x, double y, double z) {
-        World world = this.getWorld();
+    public Collection<Entity> getNearbyEntities(final double x, final double y, final double z) {
+        final World world = this.getWorld();
         if (world == null) {
             throw new IllegalArgumentException("Location has no world");
         }
@@ -782,7 +782,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double radius) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, radius, radius, radius);
     }
 
@@ -793,7 +793,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xzRadius, double yRadius) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xzRadius, yRadius, xzRadius);
     }
 
@@ -805,7 +805,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xRadius, double yRadius, double zRadius) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xRadius, yRadius, zRadius);
     }
 
@@ -816,7 +816,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double radius, @Nullable Predicate<LivingEntity> predicate) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double radius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, radius, radius, radius, predicate);
     }
 
@@ -828,7 +828,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xzRadius, final double yRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -841,7 +841,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<LivingEntity> getNearbyLivingEntities(double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
+    public Collection<LivingEntity> getNearbyLivingEntities(final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -851,7 +851,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double radius) {
+    public Collection<Player> getNearbyPlayers(final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, radius, radius, radius);
     }
 
@@ -862,7 +862,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xzRadius, double yRadius) {
+    public Collection<Player> getNearbyPlayers(final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xzRadius, yRadius, xzRadius);
     }
 
@@ -874,7 +874,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xRadius, double yRadius, double zRadius) {
+    public Collection<Player> getNearbyPlayers(final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xRadius, yRadius, zRadius);
     }
 
@@ -885,7 +885,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double radius, @Nullable Predicate<Player> predicate) {
+    public Collection<Player> getNearbyPlayers(final double radius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, radius, radius, radius, predicate);
     }
 
@@ -897,7 +897,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
+    public Collection<Player> getNearbyPlayers(final double xzRadius, final double yRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -910,7 +910,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    public Collection<Player> getNearbyPlayers(double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
+    public Collection<Player> getNearbyPlayers(final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -922,7 +922,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities of type clazz near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double radius) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double radius) {
         return getNearbyEntitiesByType(clazz, radius, radius, radius, null);
     }
 
@@ -935,7 +935,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xzRadius, double yRadius) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(clazz, xzRadius, yRadius, xzRadius, null);
     }
 
@@ -949,7 +949,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xRadius, double yRadius, double zRadius) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(clazz, xRadius, yRadius, zRadius, null);
     }
 
@@ -962,7 +962,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double radius, @Nullable Predicate<T> predicate) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double radius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, radius, radius, radius, predicate);
     }
 
@@ -976,7 +976,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, final double xzRadius, final double yRadius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -991,8 +991,8 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
-        World world = this.getWorld();
+    public <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends Entity> clazz, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<T> predicate) {
+        final World world = this.getWorld();
         if (world == null) {
             throw new IllegalArgumentException("Location has no world");
         }
@@ -1000,7 +1000,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
     }
     // Paper end
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -1009,8 +1009,8 @@ public class Location implements Cloneable, ConfigurationSerializable {
         }
         final Location other = (Location) obj;
 
-        World world = (this.world == null) ? null : this.world.get();
-        World otherWorld = (other.world == null) ? null : other.world.get();
+        final World world = (this.world == null) ? null : this.world.get();
+        final World otherWorld = (other.world == null) ? null : other.world.get();
         if (!Objects.equals(world, otherWorld)) {
             return false;
         }
@@ -1033,7 +1033,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
     public int hashCode() {
         int hash = 3;
 
-        World world = (this.world == null) ? null : this.world.get();
+        final World world = (this.world == null) ? null : this.world.get();
         hash = 19 * hash + (world != null ? world.hashCode() : 0);
         hash = 19 * hash + (int) (Double.doubleToLongBits(this.x) ^ (Double.doubleToLongBits(this.x) >>> 32));
         hash = 19 * hash + (int) (Double.doubleToLongBits(this.y) ^ (Double.doubleToLongBits(this.y) >>> 32));
@@ -1045,7 +1045,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
 
     @Override
     public String toString() {
-        World world = (this.world == null) ? null : this.world.get();
+        final World world = (this.world == null) ? null : this.world.get();
         return "Location{" + "world=" + world + ",x=" + x + ",y=" + y + ",z=" + z + ",pitch=" + pitch + ",yaw=" + yaw + '}';
     }
 
@@ -1065,7 +1065,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
     public Location clone() {
         try {
             return (Location) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -1090,7 +1090,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @param loc Precise coordinate
      * @return Block coordinate
      */
-    public static int locToBlock(double loc) {
+    public static int locToBlock(final double loc) {
         return NumberConversions.floor(loc);
     }
 
@@ -1098,7 +1098,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
     @Utility
     @NotNull
     public Map<String, Object> serialize() {
-        Map<String, Object> data = new HashMap<>();
+        final Map<String, Object> data = new HashMap<>();
 
         if (this.world != null) {
             data.put("world", getWorld().getName());
@@ -1123,7 +1123,7 @@ public class Location implements Cloneable, ConfigurationSerializable {
      * @see ConfigurationSerializable
      */
     @NotNull
-    public static Location deserialize(@NotNull Map<String, Object> args) {
+    public static Location deserialize(@NotNull final Map<String, Object> args) {
         World world = null;
         if (args.containsKey("world")) {
             world = Bukkit.getWorld((String) args.get("world"));
diff --git a/src/main/java/org/bukkit/Material.java b/src/main/java/org/bukkit/Material.java
index 78dd678d1381487334b1f3614030a5364838e2a2..48789b3db2eb442321d10ac282bb0dd22befd6ae 100644
--- a/src/main/java/org/bukkit/Material.java
+++ b/src/main/java/org/bukkit/Material.java
@@ -5,6 +5,9 @@ import java.lang.reflect.Constructor;
 import java.util.Locale;
 import java.util.Map;
 import java.util.function.Consumer;
+import java.util.regex.Pattern;
+
+import io.papermc.paper.inventory.ItemRarity;
 import org.apache.commons.lang.Validate;
 import org.bukkit.block.data.Ageable;
 import org.bukkit.block.data.AnaloguePowerable;
@@ -79,7 +82,8 @@ import org.bukkit.block.data.type.TripwireHook;
 import org.bukkit.block.data.type.TurtleEgg;
 import org.bukkit.block.data.type.Wall;
 import org.bukkit.block.data.type.WallSign;
-import org.bukkit.material.MaterialData;
+import org.bukkit.map.MapView;
+import org.bukkit.material.*;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -2588,19 +2592,19 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_COBBLESTONE(4),
     @Deprecated
-    LEGACY_WOOD(5, org.bukkit.material.Wood.class),
+    LEGACY_WOOD(5, Wood.class),
     @Deprecated
     LEGACY_SAPLING(6, org.bukkit.material.Sapling.class),
     @Deprecated
     LEGACY_BEDROCK(7),
     @Deprecated
-    LEGACY_WATER(8, org.bukkit.material.MaterialData.class),
+    LEGACY_WATER(8, MaterialData.class),
     @Deprecated
-    LEGACY_STATIONARY_WATER(9, org.bukkit.material.MaterialData.class),
+    LEGACY_STATIONARY_WATER(9, MaterialData.class),
     @Deprecated
-    LEGACY_LAVA(10, org.bukkit.material.MaterialData.class),
+    LEGACY_LAVA(10, MaterialData.class),
     @Deprecated
-    LEGACY_STATIONARY_LAVA(11, org.bukkit.material.MaterialData.class),
+    LEGACY_STATIONARY_LAVA(11, MaterialData.class),
     @Deprecated
     LEGACY_SAND(12),
     @Deprecated
@@ -2612,7 +2616,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_COAL_ORE(16),
     @Deprecated
-    LEGACY_LOG(17, org.bukkit.material.Tree.class),
+    LEGACY_LOG(17, Tree.class),
     @Deprecated
     LEGACY_LEAVES(18, org.bukkit.material.Leaves.class),
     @Deprecated
@@ -2626,29 +2630,29 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_DISPENSER(23, org.bukkit.material.Dispenser.class),
     @Deprecated
-    LEGACY_SANDSTONE(24, org.bukkit.material.Sandstone.class),
+    LEGACY_SANDSTONE(24, Sandstone.class),
     @Deprecated
     LEGACY_NOTE_BLOCK(25),
     @Deprecated
     LEGACY_BED_BLOCK(26, org.bukkit.material.Bed.class),
     @Deprecated
-    LEGACY_POWERED_RAIL(27, org.bukkit.material.PoweredRail.class),
+    LEGACY_POWERED_RAIL(27, PoweredRail.class),
     @Deprecated
-    LEGACY_DETECTOR_RAIL(28, org.bukkit.material.DetectorRail.class),
+    LEGACY_DETECTOR_RAIL(28, DetectorRail.class),
     @Deprecated
-    LEGACY_PISTON_STICKY_BASE(29, org.bukkit.material.PistonBaseMaterial.class),
+    LEGACY_PISTON_STICKY_BASE(29, PistonBaseMaterial.class),
     @Deprecated
     LEGACY_WEB(30),
     @Deprecated
-    LEGACY_LONG_GRASS(31, org.bukkit.material.LongGrass.class),
+    LEGACY_LONG_GRASS(31, LongGrass.class),
     @Deprecated
     LEGACY_DEAD_BUSH(32),
     @Deprecated
-    LEGACY_PISTON_BASE(33, org.bukkit.material.PistonBaseMaterial.class),
+    LEGACY_PISTON_BASE(33, PistonBaseMaterial.class),
     @Deprecated
-    LEGACY_PISTON_EXTENSION(34, org.bukkit.material.PistonExtensionMaterial.class),
+    LEGACY_PISTON_EXTENSION(34, PistonExtensionMaterial.class),
     @Deprecated
-    LEGACY_WOOL(35, org.bukkit.material.Wool.class),
+    LEGACY_WOOL(35, Wool.class),
     @Deprecated
     LEGACY_PISTON_MOVING_PIECE(36),
     @Deprecated
@@ -2664,9 +2668,9 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_IRON_BLOCK(42),
     @Deprecated
-    LEGACY_DOUBLE_STEP(43, org.bukkit.material.Step.class),
+    LEGACY_DOUBLE_STEP(43, Step.class),
     @Deprecated
-    LEGACY_STEP(44, org.bukkit.material.Step.class),
+    LEGACY_STEP(44, Step.class),
     @Deprecated
     LEGACY_BRICK(45),
     @Deprecated
@@ -2678,7 +2682,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_OBSIDIAN(49),
     @Deprecated
-    LEGACY_TORCH(50, org.bukkit.material.Torch.class),
+    LEGACY_TORCH(50, Torch.class),
     @Deprecated
     LEGACY_FIRE(51),
     @Deprecated
@@ -2696,9 +2700,9 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_WORKBENCH(58),
     @Deprecated
-    LEGACY_CROPS(59, org.bukkit.material.Crops.class),
+    LEGACY_CROPS(59, Crops.class),
     @Deprecated
-    LEGACY_SOIL(60, org.bukkit.material.MaterialData.class),
+    LEGACY_SOIL(60, MaterialData.class),
     @Deprecated
     LEGACY_FURNACE(61, org.bukkit.material.Furnace.class),
     @Deprecated
@@ -2710,29 +2714,29 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_LADDER(65, org.bukkit.material.Ladder.class),
     @Deprecated
-    LEGACY_RAILS(66, org.bukkit.material.Rails.class),
+    LEGACY_RAILS(66, Rails.class),
     @Deprecated
     LEGACY_COBBLESTONE_STAIRS(67, org.bukkit.material.Stairs.class),
     @Deprecated
     LEGACY_WALL_SIGN(68, 64, org.bukkit.material.Sign.class),
     @Deprecated
-    LEGACY_LEVER(69, org.bukkit.material.Lever.class),
+    LEGACY_LEVER(69, Lever.class),
     @Deprecated
-    LEGACY_STONE_PLATE(70, org.bukkit.material.PressurePlate.class),
+    LEGACY_STONE_PLATE(70, PressurePlate.class),
     @Deprecated
     LEGACY_IRON_DOOR_BLOCK(71, org.bukkit.material.Door.class),
     @Deprecated
-    LEGACY_WOOD_PLATE(72, org.bukkit.material.PressurePlate.class),
+    LEGACY_WOOD_PLATE(72, PressurePlate.class),
     @Deprecated
     LEGACY_REDSTONE_ORE(73),
     @Deprecated
     LEGACY_GLOWING_REDSTONE_ORE(74),
     @Deprecated
-    LEGACY_REDSTONE_TORCH_OFF(75, org.bukkit.material.RedstoneTorch.class),
+    LEGACY_REDSTONE_TORCH_OFF(75, RedstoneTorch.class),
     @Deprecated
-    LEGACY_REDSTONE_TORCH_ON(76, org.bukkit.material.RedstoneTorch.class),
+    LEGACY_REDSTONE_TORCH_ON(76, RedstoneTorch.class),
     @Deprecated
-    LEGACY_STONE_BUTTON(77, org.bukkit.material.Button.class),
+    LEGACY_STONE_BUTTON(77, Button.class),
     @Deprecated
     LEGACY_SNOW(78),
     @Deprecated
@@ -2740,17 +2744,17 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_SNOW_BLOCK(80),
     @Deprecated
-    LEGACY_CACTUS(81, org.bukkit.material.MaterialData.class),
+    LEGACY_CACTUS(81, MaterialData.class),
     @Deprecated
     LEGACY_CLAY(82),
     @Deprecated
-    LEGACY_SUGAR_CANE_BLOCK(83, org.bukkit.material.MaterialData.class),
+    LEGACY_SUGAR_CANE_BLOCK(83, MaterialData.class),
     @Deprecated
     LEGACY_JUKEBOX(84),
     @Deprecated
     LEGACY_FENCE(85),
     @Deprecated
-    LEGACY_PUMPKIN(86, org.bukkit.material.Pumpkin.class),
+    LEGACY_PUMPKIN(86, Pumpkin.class),
     @Deprecated
     LEGACY_NETHERRACK(87),
     @Deprecated
@@ -2760,25 +2764,25 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_PORTAL(90),
     @Deprecated
-    LEGACY_JACK_O_LANTERN(91, org.bukkit.material.Pumpkin.class),
+    LEGACY_JACK_O_LANTERN(91, Pumpkin.class),
     @Deprecated
     LEGACY_CAKE_BLOCK(92, 64, org.bukkit.material.Cake.class),
     @Deprecated
-    LEGACY_DIODE_BLOCK_OFF(93, org.bukkit.material.Diode.class),
+    LEGACY_DIODE_BLOCK_OFF(93, Diode.class),
     @Deprecated
-    LEGACY_DIODE_BLOCK_ON(94, org.bukkit.material.Diode.class),
+    LEGACY_DIODE_BLOCK_ON(94, Diode.class),
     @Deprecated
     LEGACY_STAINED_GLASS(95),
     @Deprecated
     LEGACY_TRAP_DOOR(96, org.bukkit.material.TrapDoor.class),
     @Deprecated
-    LEGACY_MONSTER_EGGS(97, org.bukkit.material.MonsterEggs.class),
+    LEGACY_MONSTER_EGGS(97, MonsterEggs.class),
     @Deprecated
-    LEGACY_SMOOTH_BRICK(98, org.bukkit.material.SmoothBrick.class),
+    LEGACY_SMOOTH_BRICK(98, SmoothBrick.class),
     @Deprecated
-    LEGACY_HUGE_MUSHROOM_1(99, org.bukkit.material.Mushroom.class),
+    LEGACY_HUGE_MUSHROOM_1(99, Mushroom.class),
     @Deprecated
-    LEGACY_HUGE_MUSHROOM_2(100, org.bukkit.material.Mushroom.class),
+    LEGACY_HUGE_MUSHROOM_2(100, Mushroom.class),
     @Deprecated
     LEGACY_IRON_FENCE(101),
     @Deprecated
@@ -2786,11 +2790,11 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_MELON_BLOCK(103),
     @Deprecated
-    LEGACY_PUMPKIN_STEM(104, org.bukkit.material.MaterialData.class),
+    LEGACY_PUMPKIN_STEM(104, MaterialData.class),
     @Deprecated
-    LEGACY_MELON_STEM(105, org.bukkit.material.MaterialData.class),
+    LEGACY_MELON_STEM(105, MaterialData.class),
     @Deprecated
-    LEGACY_VINE(106, org.bukkit.material.Vine.class),
+    LEGACY_VINE(106, Vine.class),
     @Deprecated
     LEGACY_FENCE_GATE(107, org.bukkit.material.Gate.class),
     @Deprecated
@@ -2808,13 +2812,13 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_NETHER_BRICK_STAIRS(114, org.bukkit.material.Stairs.class),
     @Deprecated
-    LEGACY_NETHER_WARTS(115, org.bukkit.material.NetherWarts.class),
+    LEGACY_NETHER_WARTS(115, NetherWarts.class),
     @Deprecated
     LEGACY_ENCHANTMENT_TABLE(116),
     @Deprecated
-    LEGACY_BREWING_STAND(117, org.bukkit.material.MaterialData.class),
+    LEGACY_BREWING_STAND(117, MaterialData.class),
     @Deprecated
-    LEGACY_CAULDRON(118, org.bukkit.material.Cauldron.class),
+    LEGACY_CAULDRON(118, Cauldron.class),
     @Deprecated
     LEGACY_ENDER_PORTAL(119),
     @Deprecated
@@ -2828,11 +2832,11 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_REDSTONE_LAMP_ON(124),
     @Deprecated
-    LEGACY_WOOD_DOUBLE_STEP(125, org.bukkit.material.Wood.class),
+    LEGACY_WOOD_DOUBLE_STEP(125, Wood.class),
     @Deprecated
-    LEGACY_WOOD_STEP(126, org.bukkit.material.WoodenStep.class),
+    LEGACY_WOOD_STEP(126, WoodenStep.class),
     @Deprecated
-    LEGACY_COCOA(127, org.bukkit.material.CocoaPlant.class),
+    LEGACY_COCOA(127, CocoaPlant.class),
     @Deprecated
     LEGACY_SANDSTONE_STAIRS(128, org.bukkit.material.Stairs.class),
     @Deprecated
@@ -2852,21 +2856,21 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_JUNGLE_WOOD_STAIRS(136, org.bukkit.material.Stairs.class),
     @Deprecated
-    LEGACY_COMMAND(137, org.bukkit.material.Command.class),
+    LEGACY_COMMAND(137, Command.class),
     @Deprecated
     LEGACY_BEACON(138),
     @Deprecated
     LEGACY_COBBLE_WALL(139),
     @Deprecated
-    LEGACY_FLOWER_POT(140, org.bukkit.material.FlowerPot.class),
+    LEGACY_FLOWER_POT(140, FlowerPot.class),
     @Deprecated
-    LEGACY_CARROT(141, org.bukkit.material.Crops.class),
+    LEGACY_CARROT(141, Crops.class),
     @Deprecated
-    LEGACY_POTATO(142, org.bukkit.material.Crops.class),
+    LEGACY_POTATO(142, Crops.class),
     @Deprecated
-    LEGACY_WOOD_BUTTON(143, org.bukkit.material.Button.class),
+    LEGACY_WOOD_BUTTON(143, Button.class),
     @Deprecated
-    LEGACY_SKULL(144, org.bukkit.material.Skull.class),
+    LEGACY_SKULL(144, Skull.class),
     @Deprecated
     LEGACY_ANVIL(145),
     @Deprecated
@@ -2892,7 +2896,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_QUARTZ_STAIRS(156, org.bukkit.material.Stairs.class),
     @Deprecated
-    LEGACY_ACTIVATOR_RAIL(157, org.bukkit.material.PoweredRail.class),
+    LEGACY_ACTIVATOR_RAIL(157, PoweredRail.class),
     @Deprecated
     LEGACY_DROPPER(158, org.bukkit.material.Dispenser.class),
     @Deprecated
@@ -2902,7 +2906,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_LEAVES_2(161, org.bukkit.material.Leaves.class),
     @Deprecated
-    LEGACY_LOG_2(162, org.bukkit.material.Tree.class),
+    LEGACY_LOG_2(162, Tree.class),
     @Deprecated
     LEGACY_ACACIA_STAIRS(163, org.bukkit.material.Stairs.class),
     @Deprecated
@@ -2930,9 +2934,9 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_DOUBLE_PLANT(175),
     @Deprecated
-    LEGACY_STANDING_BANNER(176, org.bukkit.material.Banner.class),
+    LEGACY_STANDING_BANNER(176, Banner.class),
     @Deprecated
-    LEGACY_WALL_BANNER(177, org.bukkit.material.Banner.class),
+    LEGACY_WALL_BANNER(177, Banner.class),
     @Deprecated
     LEGACY_DAYLIGHT_DETECTOR_INVERTED(178),
     @Deprecated
@@ -2992,15 +2996,15 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_END_BRICKS(206),
     @Deprecated
-    LEGACY_BEETROOT_BLOCK(207, org.bukkit.material.Crops.class),
+    LEGACY_BEETROOT_BLOCK(207, Crops.class),
     @Deprecated
     LEGACY_GRASS_PATH(208),
     @Deprecated
     LEGACY_END_GATEWAY(209),
     @Deprecated
-    LEGACY_COMMAND_REPEATING(210, org.bukkit.material.Command.class),
+    LEGACY_COMMAND_REPEATING(210, Command.class),
     @Deprecated
-    LEGACY_COMMAND_CHAIN(211, org.bukkit.material.Command.class),
+    LEGACY_COMMAND_CHAIN(211, Command.class),
     @Deprecated
     LEGACY_FROSTED_ICE(212),
     @Deprecated
@@ -3101,7 +3105,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_ARROW(262),
     @Deprecated
-    LEGACY_COAL(263, org.bukkit.material.Coal.class),
+    LEGACY_COAL(263, Coal.class),
     @Deprecated
     LEGACY_DIAMOND(264),
     @Deprecated
@@ -3277,7 +3281,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_COOKED_FISH(350),
     @Deprecated
-    LEGACY_INK_SACK(351, org.bukkit.material.Dye.class),
+    LEGACY_INK_SACK(351, Dye.class),
     @Deprecated
     LEGACY_BONE(352),
     @Deprecated
@@ -3291,10 +3295,10 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_COOKIE(357),
     /**
-     * @see org.bukkit.map.MapView
+     * @see MapView
      */
     @Deprecated
-    LEGACY_MAP(358, org.bukkit.material.MaterialData.class),
+    LEGACY_MAP(358, MaterialData.class),
     @Deprecated
     LEGACY_SHEARS(359, 1, 238),
     @Deprecated
@@ -3324,7 +3328,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_NETHER_STALK(372),
     @Deprecated
-    LEGACY_POTION(373, 1, org.bukkit.material.MaterialData.class),
+    LEGACY_POTION(373, 1, MaterialData.class),
     @Deprecated
     LEGACY_GLASS_BOTTLE(374),
     @Deprecated
@@ -3344,7 +3348,7 @@ public enum Material implements Keyed {
     @Deprecated
     LEGACY_SPECKLED_MELON(382),
     @Deprecated
-    LEGACY_MONSTER_EGG(383, 64, org.bukkit.material.SpawnEgg.class),
+    LEGACY_MONSTER_EGG(383, 64, SpawnEgg.class),
     @Deprecated
     LEGACY_EXP_BOTTLE(384, 64),
     @Deprecated
@@ -3512,6 +3516,8 @@ public enum Material implements Keyed {
 
     @Deprecated
     public static final String LEGACY_PREFIX = "LEGACY_";
+    private static final Pattern WHITESPACE_REGEX = Pattern.compile("\\s+");
+    private static final Pattern NOT_WORD_REGEX = Pattern.compile("\\W");
 
     private final int id;
     private final Constructor<? extends MaterialData> ctor;
@@ -3557,7 +3563,7 @@ public enum Material implements Keyed {
             } else {
                 this.ctor = null;
             }
-        } catch (NoSuchMethodException | SecurityException ex) {
+        } catch (final NoSuchMethodException | SecurityException ex) {
             throw new AssertionError(ex);
         }
     }
@@ -3591,7 +3597,7 @@ public enum Material implements Keyed {
      * @return the item rarity
      */
     @NotNull
-    public io.papermc.paper.inventory.ItemRarity getItemRarity() {
+    public ItemRarity getItemRarity() {
         return Bukkit.getUnsafe().getItemRarity(this);
     }
     // Paper end
@@ -3662,7 +3668,7 @@ public enum Material implements Keyed {
      * @return new data instance
      */
     @NotNull
-    public BlockData createBlockData(@Nullable Consumer<BlockData> consumer) {
+    public BlockData createBlockData(@Nullable final Consumer<BlockData> consumer) {
         return Bukkit.createBlockData(this, consumer);
     }
 
@@ -3676,7 +3682,7 @@ public enum Material implements Keyed {
      * @throws IllegalArgumentException if the specified data is not valid
      */
     @NotNull
-    public BlockData createBlockData(@Nullable String data) throws IllegalArgumentException {
+    public BlockData createBlockData(@Nullable final String data) throws IllegalArgumentException {
         return Bukkit.createBlockData(this, data);
     }
 
@@ -3705,7 +3711,7 @@ public enum Material implements Keyed {
         Validate.isTrue(legacy, "Cannot get new data of Modern Material");
         try {
             return ctor.newInstance(this, raw);
-        } catch (InstantiationException ex) {
+        } catch (final InstantiationException ex) {
             final Throwable t = ex.getCause();
             if (t instanceof RuntimeException) {
                 throw (RuntimeException) t;
@@ -3714,7 +3720,7 @@ public enum Material implements Keyed {
                 throw (Error) t;
             }
             throw new AssertionError(t);
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             throw new AssertionError(t);
         }
     }
@@ -3783,13 +3789,13 @@ public enum Material implements Keyed {
      * @return Material if found, or null
      */
     @Nullable
-    public static Material getMaterial(@NotNull String name, boolean legacyName) {
+    public static Material getMaterial(@NotNull String name, final boolean legacyName) {
         if (legacyName) {
             if (!name.startsWith(LEGACY_PREFIX)) {
                 name = LEGACY_PREFIX + name;
             }
 
-            Material match = BY_NAME.get(name);
+            final Material match = BY_NAME.get(name);
             return Bukkit.getUnsafe().fromLegacy(match);
         }
 
@@ -3820,11 +3826,11 @@ public enum Material implements Keyed {
      *
      * @param name Name of the material to get
      * @param legacyName whether this is a legacy name (see
-     * {@link #getMaterial(java.lang.String, boolean)}
+     * {@link #getMaterial(String, boolean)}
      * @return Material if found, or null
      */
     @Nullable
-    public static Material matchMaterial(@NotNull final String name, boolean legacyName) {
+    public static Material matchMaterial(@NotNull final String name, final boolean legacyName) {
         Validate.notNull(name, "Name cannot be null");
 
         String filtered = name;
@@ -3832,14 +3838,14 @@ public enum Material implements Keyed {
             filtered = filtered.substring((NamespacedKey.MINECRAFT + ":").length());
         }
 
-        filtered = filtered.toUpperCase(java.util.Locale.ENGLISH);
+        filtered = filtered.toUpperCase(Locale.ENGLISH);
 
-        filtered = filtered.replaceAll("\\s+", "_").replaceAll("\\W", "");
+        filtered = NOT_WORD_REGEX.matcher(WHITESPACE_REGEX.matcher(filtered).replaceAll("_")).replaceAll("");
         return getMaterial(filtered, legacyName);
     }
 
     static {
-        for (Material material : values()) {
+        for (final Material material : values()) {
             BY_NAME.put(material.name(), material);
             material.isBlock = material.isBlock0(); // Paper
         }
diff --git a/src/main/java/org/bukkit/NamespacedKey.java b/src/main/java/org/bukkit/NamespacedKey.java
index 985857b5936399be5968d4748a2a3cb8276436f3..6df4eb9077f392ce8191164a8caf2cae7560ed3c 100644
--- a/src/main/java/org/bukkit/NamespacedKey.java
+++ b/src/main/java/org/bukkit/NamespacedKey.java
@@ -45,14 +45,14 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @deprecated should never be used by plugins, for internal use only!!
      */
     @Deprecated
-    public NamespacedKey(@NotNull String namespace, @NotNull String key) {
+    public NamespacedKey(@NotNull final String namespace, @NotNull final String key) {
         Preconditions.checkArgument(VALID_NAMESPACE.matcher(namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", namespace);
         Preconditions.checkArgument(VALID_KEY.matcher(key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", key);
 
         this.namespace = namespace;
         this.key = key;
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedKey must be less than 256 characters", string);
     }
 
@@ -68,7 +68,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @param plugin the plugin to use for the namespace
      * @param key the key to create
      */
-    public NamespacedKey(@NotNull Plugin plugin, @NotNull String key) {
+    public NamespacedKey(@NotNull final Plugin plugin, @NotNull final String key) {
         Preconditions.checkArgument(true, "Plugin cannot be null");
         Preconditions.checkArgument(true, "Key cannot be null");
 
@@ -79,7 +79,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
         Preconditions.checkArgument(VALID_NAMESPACE.matcher(this.namespace).matches(), "Invalid namespace. Must be [a-z0-9._-]: %s", this.namespace);
         Preconditions.checkArgument(VALID_KEY.matcher(this.key).matches(), "Invalid key. Must be [a-z0-9/._-]: %s", this.key);
 
-        String string = toString();
+        final String string = toString();
         Preconditions.checkArgument(string.length() < 256, "NamespacedKey must be less than 256 characters (%s)", string);
     }
 
@@ -104,7 +104,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -139,7 +139,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @return new key in the Minecraft namespace
      */
     @NotNull
-    public static NamespacedKey minecraft(@NotNull String key) {
+    public static NamespacedKey minecraft(@NotNull final String key) {
         return new NamespacedKey(MINECRAFT, key);
     }
 
@@ -168,18 +168,18 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @see #fromString(String)
      */
     @Nullable
-    public static NamespacedKey fromString(@NotNull String string, @Nullable Plugin defaultNamespace) {
+    public static NamespacedKey fromString(@NotNull final String string, @Nullable final Plugin defaultNamespace) {
         //noinspection ConstantConditions
         Preconditions.checkArgument(string != null && !string.isEmpty(), "Input string must not be empty or null");
 
-        String[] components = string.split(":", 3);
+        final String[] components = string.split(":", 3);
         if (components.length > 2) {
             return null;
         }
 
-        String key = (components.length == 2) ? components[1] : "";
+        final String key = (components.length == 2) ? components[1] : "";
         if (components.length == 1) {
-            String value = components[0];
+            final String value = components[0];
             if (value.isEmpty() || !VALID_KEY.matcher(value).matches()) {
                 return null;
             }
@@ -189,7 +189,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
             return null;
         }
 
-        String namespace = components[0];
+        final String namespace = components[0];
         if (namespace.isEmpty()) {
             return (defaultNamespace != null) ? new NamespacedKey(defaultNamespace, key) : minecraft(key);
         }
@@ -212,7 +212,7 @@ public final class NamespacedKey implements net.kyori.adventure.key.Key, com.des
      * @see #fromString(String, Plugin)
      */
     @Nullable
-    public static NamespacedKey fromString(@NotNull String key) {
+    public static NamespacedKey fromString(@NotNull final String key) {
         return fromString(key, null);
     }
 
diff --git a/src/main/java/org/bukkit/Note.java b/src/main/java/org/bukkit/Note.java
index 5e6ebb866d729c12a751d21a4156e8b821a4a434..9420a1c25fe855443bd18a2fc4b8c5f1d00c893f 100644
--- a/src/main/java/org/bukkit/Note.java
+++ b/src/main/java/org/bukkit/Note.java
@@ -30,7 +30,7 @@ public class Note {
         /** The number of tones including sharped tones. */
         public static final byte TONES_COUNT = 12;
 
-        Tone(int id, boolean sharpable) {
+        Tone(final int id, final boolean sharpable) {
             this.id = (byte) (id % TONES_COUNT);
             this.sharpable = sharpable;
         }
@@ -56,8 +56,8 @@ public class Note {
          * @deprecated Magic value
          */
         @Deprecated
-        public byte getId(boolean sharped) {
-            byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
+        public byte getId(final boolean sharped) {
+            final byte id = (byte) (sharped && sharpable ? this.id + 1 : this.id);
 
             return (byte) (id % TONES_COUNT);
         }
@@ -81,7 +81,7 @@ public class Note {
          * @deprecated Magic value
          */
         @Deprecated
-        public boolean isSharped(byte id) {
+        public boolean isSharped(final byte id) {
             if (id == getId(false)) {
                 return false;
             } else if (id == getId(true)) {
@@ -101,12 +101,12 @@ public class Note {
          */
         @Deprecated
         @Nullable
-        public static Tone getById(byte id) {
+        public static Tone getById(final byte id) {
             return BY_DATA.get(id);
         }
 
         static {
-            for (Tone tone : values()) {
+            for (final Tone tone : values()) {
                 int id = tone.id % TONES_COUNT;
                 BY_DATA.put((byte) id, tone);
 
@@ -126,7 +126,7 @@ public class Note {
      * @param note Internal note id. {@link #getId()} always return this
      *     value. The value has to be in the interval [0;&nbsp;24].
      */
-    public Note(int note) {
+    public Note(final int note) {
         Validate.isTrue(note >= 0 && note <= 24, "The note value has to be between 0 and 24.");
 
         this.note = (byte) note;
@@ -140,7 +140,7 @@ public class Note {
      *     to be F#.
      * @param sharped Set if the tone is sharped (e.g. for F#).
      */
-    public Note(int octave, @NotNull Tone tone, boolean sharped) {
+    public Note(final int octave, @NotNull Tone tone, boolean sharped) {
         if (sharped && !tone.isSharpable()) {
             tone = Tone.values()[tone.ordinal() + 1];
             sharped = false;
@@ -160,7 +160,7 @@ public class Note {
      * @return The new note.
      */
     @NotNull
-    public static Note flat(int octave, @NotNull Tone tone) {
+    public static Note flat(final int octave, @NotNull Tone tone) {
         Validate.isTrue(octave != 2, "Octave cannot be 2 for flats");
         tone = tone == Tone.G ? Tone.F : Tone.values()[tone.ordinal() - 1];
         return new Note(octave, tone, tone.isSharpable());
@@ -175,7 +175,7 @@ public class Note {
      * @return The new note.
      */
     @NotNull
-    public static Note sharp(int octave, @NotNull Tone tone) {
+    public static Note sharp(final int octave, @NotNull final Tone tone) {
         return new Note(octave, tone, true);
     }
 
@@ -187,7 +187,7 @@ public class Note {
      * @return The new note.
      */
     @NotNull
-    public static Note natural(int octave, @NotNull Tone tone) {
+    public static Note natural(final int octave, @NotNull final Tone tone) {
         Validate.isTrue(octave != 2, "Octave cannot be 2 for naturals");
         return new Note(octave, tone, false);
     }
@@ -250,7 +250,7 @@ public class Note {
      * @return if this note is sharped.
      */
     public boolean isSharped() {
-        byte note = getToneByte();
+        final byte note = getToneByte();
         return Tone.getById(note).isSharped(note);
     }
 
@@ -263,14 +263,14 @@ public class Note {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj)
             return true;
         if (obj == null)
             return false;
         if (getClass() != obj.getClass())
             return false;
-        Note other = (Note) obj;
+        final Note other = (Note) obj;
 	    return note == other.note;
     }
 
diff --git a/src/main/java/org/bukkit/OfflinePlayer.java b/src/main/java/org/bukkit/OfflinePlayer.java
index b359f3ba63d908620e0cdf9d97cba3b9bef3651f..7a4e60f2d2c549e9ea7d8efe3ead32ba4708a015 100644
--- a/src/main/java/org/bukkit/OfflinePlayer.java
+++ b/src/main/java/org/bukkit/OfflinePlayer.java
@@ -52,7 +52,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    default BanEntry banPlayer(@Nullable String reason) {
+    default BanEntry banPlayer(@Nullable final String reason) {
         return banPlayer(reason, null, null);
     }
 
@@ -63,7 +63,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    default BanEntry banPlayer(@Nullable String reason, @Nullable String source) {
+    default BanEntry banPlayer(@Nullable final String reason, @Nullable final String source) {
         return banPlayer(reason, null, source);
     }
 
@@ -74,7 +74,7 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires) {
+    default BanEntry banPlayer(@Nullable final String reason, @Nullable final java.util.Date expires) {
         return banPlayer(reason, expires, null);
     }
 
@@ -86,12 +86,12 @@ public interface OfflinePlayer extends ServerOperator, AnimalTamer, Configuratio
      * @return Ban Entry
      */
     @NotNull
-    default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source) {
+    default BanEntry banPlayer(@Nullable final String reason, @Nullable final java.util.Date expires, @Nullable final String source) {
         return banPlayer(reason, expires, source, true);
     }
     @NotNull
-    default BanEntry banPlayer(@Nullable String reason, @Nullable java.util.Date expires, @Nullable String source, boolean kickIfOnline) {
-        BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.NAME).addBan(getName(), reason, expires, source);
+    default BanEntry banPlayer(@Nullable final String reason, @Nullable final java.util.Date expires, @Nullable final String source, final boolean kickIfOnline) {
+        final BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.NAME).addBan(getName(), reason, expires, source);
         if (kickIfOnline && isOnline()) {
             getPlayer().kickPlayer(reason);
         }
diff --git a/src/main/java/org/bukkit/Particle.java b/src/main/java/org/bukkit/Particle.java
index 2a21e7b4cdd65261e5a979c7302e3083273908eb..f95a1dbcba7ff2463e3121dc287fd73791b2935c 100644
--- a/src/main/java/org/bukkit/Particle.java
+++ b/src/main/java/org/bukkit/Particle.java
@@ -93,7 +93,7 @@ public enum Particle {
         dataType = Void.class;
     }
 
-    Particle(/*@NotNull*/ Class<?> data) {
+    Particle(/*@NotNull*/ final Class<?> data) {
         dataType = data;
     }
 
@@ -126,7 +126,7 @@ public enum Particle {
         private final Color color;
         private final float size;
 
-        public DustOptions(@NotNull Color color, float size) {
+        public DustOptions(@NotNull final Color color, final float size) {
             Preconditions.checkArgument(true, "color");
             this.color = color;
             this.size = size;
diff --git a/src/main/java/org/bukkit/Registry.java b/src/main/java/org/bukkit/Registry.java
index f29f8a18c6d9c2654b7df08f375d965bd2ec3ed8..5b00784b7b980319bf9ed1c28f7f8e9d9585eb3a 100644
--- a/src/main/java/org/bukkit/Registry.java
+++ b/src/main/java/org/bukkit/Registry.java
@@ -35,7 +35,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public Advancement get(@NotNull NamespacedKey key) {
+        public Advancement get(@NotNull final NamespacedKey key) {
             return Bukkit.getAdvancement(key);
         }
 
@@ -73,7 +73,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public KeyedBossBar get(@NotNull NamespacedKey key) {
+        public KeyedBossBar get(@NotNull final NamespacedKey key) {
             return Bukkit.getBossBar(key);
         }
 
@@ -92,7 +92,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public Enchantment get(@NotNull NamespacedKey key) {
+        public Enchantment get(@NotNull final NamespacedKey key) {
             return Enchantment.getByKey(key);
         }
 
@@ -159,7 +159,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public MemoryKey get(@NotNull NamespacedKey key) {
+        public MemoryKey get(@NotNull final NamespacedKey key) {
             return MemoryKey.getByKey(key);
         }
     };
@@ -183,14 +183,14 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         private final Map<NamespacedKey, T> map;
 
-        protected SimpleRegistry(@NotNull Class<T> type) {
+        protected SimpleRegistry(@NotNull final Class<T> type) {
             this(type, t -> true);
         }
 
-        protected SimpleRegistry(@NotNull Class<T> type, @NotNull Predicate<T> predicate) {
-            ImmutableMap.Builder<NamespacedKey, T> builder = ImmutableMap.builder();
+        protected SimpleRegistry(@NotNull final Class<T> type, @NotNull final Predicate<T> predicate) {
+            final ImmutableMap.Builder<NamespacedKey, T> builder = ImmutableMap.builder();
 
-            for (T entry : type.getEnumConstants()) {
+            for (final T entry : type.getEnumConstants()) {
                 if (predicate.test(entry)) {
                     builder.put(entry.getKey(), entry);
                 }
@@ -201,7 +201,7 @@ public interface Registry<T extends Keyed> extends Iterable<T> {
 
         @Nullable
         @Override
-        public T get(@NotNull NamespacedKey key) {
+        public T get(@NotNull final NamespacedKey key) {
             return map.get(key);
         }
 
diff --git a/src/main/java/org/bukkit/SandstoneType.java b/src/main/java/org/bukkit/SandstoneType.java
index f483a07d5debe2747af2c2a6ea17548ff467fd13..70baa00b54a19f73087f26a0852c3bfe9ccf1876 100644
--- a/src/main/java/org/bukkit/SandstoneType.java
+++ b/src/main/java/org/bukkit/SandstoneType.java
@@ -45,7 +45,7 @@ public enum SandstoneType {
     }
 
     static {
-        for (SandstoneType type : values()) {
+        for (final SandstoneType type : values()) {
             BY_DATA.put(type.data, type);
         }
     }
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 19ea7156b24472a9f205fbd1d19b49c041ddcdcf..39b199cbbf2aa8c9b56b2cca0e6d2080fe37d899 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -254,7 +254,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    default void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         spigot().broadcast(component);
     }
 
@@ -265,7 +265,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
      */
     @Deprecated
-    default void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().broadcast(components);
     }
     // Paper end
@@ -1348,14 +1348,13 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      *
      * @return current server TPS (1m, 5m, 15m in Paper-Server)
      */
-    @NotNull double[] getTPS();
+    double[] getTPS();
 
     /**
      * Get a sample of the servers last tick times (in nanos)
      *
      * @return A sample of the servers last tick times (in nanos)
      */
-    @NotNull
     long[] getTickTimes();
 
     /**
@@ -1553,7 +1552,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -1564,7 +1563,7 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void broadcast(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void broadcast(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
diff --git a/src/main/java/org/bukkit/Sound.java b/src/main/java/org/bukkit/Sound.java
index 5f27c9d85e0af0b6cf8dd16c445882dc38d5fc78..57b00c60378989048b8b63a94037e9092f73136e 100644
--- a/src/main/java/org/bukkit/Sound.java
+++ b/src/main/java/org/bukkit/Sound.java
@@ -1007,7 +1007,7 @@ public enum Sound implements Keyed, net.kyori.adventure.sound.Sound.Type { // Pa
 
     private final NamespacedKey key;
 
-    Sound(String key) {
+    Sound(final String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/Statistic.java b/src/main/java/org/bukkit/Statistic.java
index 1d9b81c4181f8daffa546bfe374c274c4d7c0009..e69447987bcacb17f81f455708e8f6eb8899de9c 100644
--- a/src/main/java/org/bukkit/Statistic.java
+++ b/src/main/java/org/bukkit/Statistic.java
@@ -100,7 +100,7 @@ public enum Statistic implements Keyed {
         this(Type.UNTYPED);
     }
 
-    Statistic(/*@NotNull*/ Type type) {
+    Statistic(/*@NotNull*/ final Type type) {
         this.type = type;
         this.key = NamespacedKey.minecraft(name().toLowerCase(Locale.ROOT));
     }
diff --git a/src/main/java/org/bukkit/StructureType.java b/src/main/java/org/bukkit/StructureType.java
index 8acb2b9de398ab5f4b18c46e9ab9eb964df8be3f..58e48dd81d9d363728afb529b2bca76c0702ae67 100644
--- a/src/main/java/org/bukkit/StructureType.java
+++ b/src/main/java/org/bukkit/StructureType.java
@@ -174,7 +174,7 @@ public final class StructureType {
      * when creating explorer maps. Use null to indicate this structure should
      * not be compatible with explorer maps.
      */
-    private StructureType(@NotNull String name, @Nullable MapCursor.Type mapIcon) {
+    private StructureType(@NotNull final String name, @Nullable final MapCursor.Type mapIcon) {
         Validate.notEmpty(name, "Structure name cannot be empty");
         this.name = name;
         this.mapCursor = mapIcon;
@@ -203,14 +203,14 @@ public final class StructureType {
     }
 
     @Override
-    public boolean equals(Object other) {
+    public boolean equals(final Object other) {
         if (this == other) {
             return true;
         }
         if (!(other instanceof StructureType)) {
             return false;
         }
-        StructureType that = (StructureType) other;
+        final StructureType that = (StructureType) other;
         return this.name.equals(that.name) && this.mapCursor == that.mapCursor;
     }
 
@@ -228,7 +228,7 @@ public final class StructureType {
     }
 
     @NotNull
-    private static <T extends StructureType> T register(@NotNull T type) {
+    private static <T extends StructureType> T register(@NotNull final T type) {
         Preconditions.checkNotNull(type, "Cannot register null StructureType.");
         Preconditions.checkArgument(!structureTypeMap.containsKey(type.getName()), "Cannot register same StructureType twice. %s", type.getName());
         StructureType.structureTypeMap.put(type.getName(), type);
diff --git a/src/main/java/org/bukkit/TreeSpecies.java b/src/main/java/org/bukkit/TreeSpecies.java
index ab88f1de67a87ee04b4733251217026297913e4b..f8c318947da178abb1f3a8915206fd89057e8a8c 100644
--- a/src/main/java/org/bukkit/TreeSpecies.java
+++ b/src/main/java/org/bukkit/TreeSpecies.java
@@ -68,7 +68,7 @@ public enum TreeSpecies {
     }
 
     static {
-        for (TreeSpecies species : values()) {
+        for (final TreeSpecies species : values()) {
             BY_DATA.put(species.data, species);
         }
     }
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index 4cf0bdd8799fbbd4a95e993378e66d409451a91d..93806ed476abd0d57ec4dabccafa1c5b97d5d6d2 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -88,7 +88,7 @@ public interface UnsafeValues {
 
     boolean isSupportedApiVersion(String apiVersion);
 
-    static boolean isLegacyPlugin(org.bukkit.plugin.Plugin plugin) {
+    static boolean isLegacyPlugin(final org.bukkit.plugin.Plugin plugin) {
         return !Bukkit.getUnsafe().isSupportedApiVersion(plugin.getDescription().getAPIVersion());
     }
 
diff --git a/src/main/java/org/bukkit/Warning.java b/src/main/java/org/bukkit/Warning.java
index bc3f621689306e8806233f1af59cf38783f176da..e093240987da5d6f71e5233bacc20d340d2b67b5 100644
--- a/src/main/java/org/bukkit/Warning.java
+++ b/src/main/java/org/bukkit/Warning.java
@@ -66,7 +66,7 @@ public @interface Warning {
          *     specifies false for {@link Warning#value()}, true otherwise.
          *     </ul>
          */
-        public boolean printFor(@Nullable Warning warning) {
+        public boolean printFor(@Nullable final Warning warning) {
             if (Boolean.getBoolean("paper.alwaysPrintWarningState")) return true; // Paper
             if (this == DEFAULT) {
                 return warning == null || warning.value();
@@ -87,7 +87,7 @@ public @interface Warning {
             if (value == null) {
                 return DEFAULT;
             }
-            WarningState state = values.get(value.toLowerCase());
+            final WarningState state = values.get(value.toLowerCase());
             if (state == null) {
                 return DEFAULT;
             }
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
index 9b29ad97b87cba4177b501f1592ddb118fdf2a58..37d748e5877ee29dc176076887c490f3763b9eb5 100644
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -104,10 +104,10 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see Block#getBlockKey(int, int, int)
      */
     @NotNull
-    default Block getBlockAtKey(long key) {
-        int x = Block.getBlockKeyX(key);
-        int y = Block.getBlockKeyY(key);
-        int z = Block.getBlockKeyZ(key);
+    default Block getBlockAtKey(final long key) {
+        final int x = Block.getBlockKeyX(key);
+        final int y = Block.getBlockKeyY(key);
+        final int z = Block.getBlockKeyZ(key);
         return getBlockAt(x, y, z);
     }
 
@@ -119,10 +119,10 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see Block#getBlockKey(int, int, int)
      */
     @NotNull
-    default Location getLocationAtKey(long key) {
-        int x = Block.getBlockKeyX(key);
-        int y = Block.getBlockKeyY(key);
-        int z = Block.getBlockKeyZ(key);
+    default Location getLocationAtKey(final long key) {
+        final int x = Block.getBlockKeyX(key);
+        final int y = Block.getBlockKeyY(key);
+        final int z = Block.getBlockKeyZ(key);
         return new Location(this, x, y, z);
     }
     // Paper end
@@ -199,7 +199,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @see com.destroystokyo.paper.HeightmapType
      */
     @Deprecated
-    default int getHighestBlockYAt(@NotNull Location location, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
+    default int getHighestBlockYAt(@NotNull final Location location, @NotNull final com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
         return this.getHighestBlockYAt(location.getBlockX(), location.getBlockZ(), heightmap);
     }
 
@@ -219,7 +219,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      */
     @Deprecated
     @NotNull
-    default Block getHighestBlockAt(int x, int z, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
+    default Block getHighestBlockAt(final int x, final int z, @NotNull final com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
         return this.getBlockAt(x, this.getHighestBlockYAt(x, z, heightmap), z);
     }
 
@@ -239,7 +239,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      */
     @Deprecated
     @NotNull
-    default Block getHighestBlockAt(@NotNull Location location, @NotNull com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
+    default Block getHighestBlockAt(@NotNull final Location location, @NotNull final com.destroystokyo.paper.HeightmapType heightmap) throws UnsupportedOperationException {
         return this.getHighestBlockAt(location.getBlockX(), location.getBlockZ(), heightmap);
     }
     // Paper end
@@ -329,7 +329,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return The chunk at the specified key
      */
     @NotNull
-    default Chunk getChunkAt(long chunkKey) {
+    default Chunk getChunkAt(final long chunkKey) {
         return getChunkAt((int) chunkKey, (int) (chunkKey >> 32));
     }
 
@@ -340,7 +340,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param chunkKey The Chunk Key to look up the chunk by
      * @return true if the chunk has been generated, otherwise false
      */
-    default boolean isChunkGenerated(long chunkKey) {
+    default boolean isChunkGenerated(final long chunkKey) {
         return isChunkGenerated((int) chunkKey, (int) (chunkKey >> 32));
     }
 
@@ -365,7 +365,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
 
         // backwards compat to old api
         @Override
-        default void accept(@NotNull Chunk chunk) {
+        default void accept(@NotNull final Chunk chunk) {
             onLoad(chunk);
         }
     }
@@ -390,7 +390,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *           will be executed synchronously
      */
     @Deprecated
-    default void getChunkAtAsync(int x, int z, @NotNull ChunkLoadCallback cb) {
+    default void getChunkAtAsync(final int x, final int z, @NotNull final ChunkLoadCallback cb) {
         getChunkAtAsync(x, z, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -416,7 +416,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *           will be executed synchronously
      */
     @Deprecated
-    default void getChunkAtAsync(@NotNull Location loc, @NotNull ChunkLoadCallback cb) {
+    default void getChunkAtAsync(@NotNull final Location loc, @NotNull final ChunkLoadCallback cb) {
         getChunkAtAsync(loc, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -442,7 +442,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *           will be executed synchronously
      */
     @Deprecated
-    default void getChunkAtAsync(@NotNull Block block, @NotNull ChunkLoadCallback cb) {
+    default void getChunkAtAsync(@NotNull final Block block, @NotNull final ChunkLoadCallback cb) {
         getChunkAtAsync(block, true).thenAccept(cb::onLoad).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -467,7 +467,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    default void getChunkAtAsync(int x, int z, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(final int x, final int z, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(x, z, true).thenAccept(cb).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -493,7 +493,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    default void getChunkAtAsync(int x, int z, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(final int x, final int z, final boolean gen, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(x, z, gen).thenAccept(cb).exceptionally((ex) -> {
             Bukkit.getLogger().log(java.util.logging.Level.WARNING, "Exception in chunk load callback", ex);
             return null;
@@ -517,7 +517,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    default void getChunkAtAsync(@NotNull Location loc, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull final Location loc, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true, cb);
     }
 
@@ -539,7 +539,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    default void getChunkAtAsync(@NotNull Location loc, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull final Location loc, final boolean gen, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen, cb);
     }
 
@@ -560,7 +560,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    default void getChunkAtAsync(@NotNull Block block, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull final Block block, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true, cb);
     }
 
@@ -582,7 +582,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param cb Callback to receive the chunk when it is loaded.
      *           will be executed synchronously
      */
-    default void getChunkAtAsync(@NotNull Block block, boolean gen, @NotNull java.util.function.Consumer<Chunk> cb) {
+    default void getChunkAtAsync(@NotNull final Block block, final boolean gen, @NotNull final java.util.function.Consumer<Chunk> cb) {
         getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen, cb);
     }
 
@@ -602,7 +602,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Location loc) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true);
     }
 
@@ -623,7 +623,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Location loc, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Location loc, final boolean gen) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen);
     }
 
@@ -643,7 +643,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Block block) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true);
     }
 
@@ -664,7 +664,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull Block block, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(@NotNull final Block block, final boolean gen) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen);
     }
 
@@ -686,7 +686,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(final int x, final int z) {
         return getChunkAtAsync(x, z, true);
     }
 
@@ -709,7 +709,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(int x, int z, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsync(final int x, final int z, final boolean gen) {
         return getChunkAtAsync(x, z, gen, false);
     }
 
@@ -729,7 +729,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Location loc) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, true, true);
     }
 
@@ -750,7 +750,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Location loc, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Location loc, final boolean gen) {
         return getChunkAtAsync((int)Math.floor(loc.getX()) >> 4, (int)Math.floor(loc.getZ()) >> 4, gen, true);
     }
 
@@ -770,7 +770,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Block block) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, true, true);
     }
 
@@ -791,7 +791,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull Block block, boolean gen) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(@NotNull final Block block, final boolean gen) {
         return getChunkAtAsync(block.getX() >> 4, block.getZ() >> 4, gen, true);
     }
 
@@ -813,7 +813,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return Future that will resolve when the chunk is loaded
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(int x, int z) {
+    default java.util.concurrent.CompletableFuture<Chunk> getChunkAtAsyncUrgently(final int x, final int z) {
         return getChunkAtAsync(x, z, true, true);
     }
 
@@ -1275,7 +1275,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius);
     }
 
@@ -1287,7 +1287,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius);
     }
 
@@ -1300,7 +1300,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius);
     }
 
@@ -1312,7 +1312,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection
      */
     @NotNull
-    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double radius, @Nullable Predicate<LivingEntity> predicate) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double radius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, radius, radius, radius, predicate);
     }
 
@@ -1325,7 +1325,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection
      */
     @NotNull
-    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<LivingEntity> predicate) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xzRadius, final double yRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -1339,7 +1339,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<LivingEntity> predicate) {
+    default Collection<LivingEntity> getNearbyLivingEntities(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<LivingEntity> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.LivingEntity.class, loc, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -1350,7 +1350,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius) {
+    default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double radius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius);
     }
 
@@ -1362,7 +1362,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of living entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius) {
+    default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius);
     }
 
@@ -1375,7 +1375,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius);
     }
 
@@ -1387,7 +1387,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double radius, @Nullable Predicate<Player> predicate) {
+    default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double radius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, radius, radius, radius, predicate);
     }
 
@@ -1400,7 +1400,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<Player> predicate) {
+    default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xzRadius, final double yRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -1414,7 +1414,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of players near location. This will always be a non-null collection.
      */
     @NotNull
-    default Collection<Player> getNearbyPlayers(@NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<Player> predicate) {
+    default Collection<Player> getNearbyPlayers(@NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<Player> predicate) {
         return getNearbyEntitiesByType(org.bukkit.entity.Player.class, loc, xRadius, yRadius, zRadius, predicate);
     }
 
@@ -1427,7 +1427,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double radius) {
         return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, null);
     }
 
@@ -1441,7 +1441,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double xzRadius, final double yRadius) {
         return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, null);
     }
 
@@ -1456,7 +1456,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius) {
         return getNearbyEntitiesByType(clazz, loc, xRadius, yRadius, zRadius, null);
     }
 
@@ -1470,7 +1470,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double radius, @Nullable Predicate<T> predicate) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double radius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, loc, radius, radius, radius, predicate);
     }
 
@@ -1485,7 +1485,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @return the collection of entities near location. This will always be a non-null collection.
      */
     @NotNull
-    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends T> clazz, @NotNull Location loc, double xzRadius, double yRadius, @Nullable Predicate<T> predicate) {
+    default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable final Class<? extends T> clazz, @NotNull final Location loc, final double xzRadius, final double yRadius, @Nullable final Predicate<T> predicate) {
         return getNearbyEntitiesByType(clazz, loc, xzRadius, yRadius, xzRadius, predicate);
     }
 
@@ -1501,12 +1501,12 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
       * @return the collection of entities near location. This will always be a non-null collection.
       */
      @NotNull
-     default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, @NotNull Location loc, double xRadius, double yRadius, double zRadius, @Nullable Predicate<T> predicate) {
+     default <T extends Entity> Collection<T> getNearbyEntitiesByType(@Nullable Class<? extends Entity> clazz, @NotNull final Location loc, final double xRadius, final double yRadius, final double zRadius, @Nullable final Predicate<T> predicate) {
         if (clazz == null) {
             clazz = Entity.class;
         }
-        List<T> nearby = new ArrayList<>();
-        for (Entity bukkitEntity : getNearbyEntities(loc, xRadius, yRadius, zRadius)) {
+        final List<T> nearby = new ArrayList<>();
+        for (final Entity bukkitEntity : getNearbyEntities(loc, xRadius, yRadius, zRadius)) {
             //noinspection unchecked
             if (clazz.isAssignableFrom(bukkitEntity.getClass()) && (predicate == null || predicate.test((T) bukkitEntity))) {
                 //noinspection unchecked
@@ -2077,7 +2077,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power, boolean setFire) {
+    default boolean createExplosion(@Nullable final Entity source, @NotNull final Location loc, final float power, final boolean setFire) {
         return createExplosion(source, loc, power, setFire, true);
     }
     /**
@@ -2089,7 +2089,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    default boolean createExplosion(@Nullable Entity source, @NotNull Location loc, float power) {
+    default boolean createExplosion(@Nullable final Entity source, @NotNull final Location loc, final float power) {
         return createExplosion(source, loc, power, true, true);
     }
     /**
@@ -2102,7 +2102,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param breakBlocks Whether or not to have blocks be destroyed
      * @return false if explosion was canceled, otherwise true
      */
-    default boolean createExplosion(@NotNull Entity source, float power, boolean setFire, boolean breakBlocks) {
+    default boolean createExplosion(@NotNull final Entity source, final float power, final boolean setFire, final boolean breakBlocks) {
         return createExplosion(source, source.getLocation(), power, setFire, breakBlocks);
     }
     /**
@@ -2116,7 +2116,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param setFire Whether or not to set blocks on fire
      * @return false if explosion was canceled, otherwise true
      */
-    default boolean createExplosion(@NotNull Entity source, float power, boolean setFire) {
+    default boolean createExplosion(@NotNull final Entity source, final float power, final boolean setFire) {
         return createExplosion(source, source.getLocation(), power, setFire, true);
     }
 
@@ -2128,7 +2128,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param power The power of explosion, where 4F is TNT
      * @return false if explosion was canceled, otherwise true
      */
-    default boolean createExplosion(@NotNull Entity source, float power) {
+    default boolean createExplosion(@NotNull final Entity source, final float power) {
         return createExplosion(source, source.getLocation(), power, true, true);
     }
     // Paper end
@@ -2219,7 +2219,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
 
     // Paper start
     @NotNull
-    default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
+    default <T extends Entity> T spawn(@NotNull final Location location, @NotNull final Class<T> clazz, @NotNull final CreatureSpawnEvent.SpawnReason reason) throws IllegalArgumentException {
         return spawn(location, clazz, reason, null);
     }
 
@@ -2240,22 +2240,22 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *     {@link Entity} requested cannot be spawned
      */
     @NotNull
-    default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @Nullable Consumer<T> function) throws IllegalArgumentException {
+    default <T extends Entity> T spawn(@NotNull final Location location, @NotNull final Class<T> clazz, @Nullable final Consumer<T> function) throws IllegalArgumentException {
         return spawn(location, clazz, CreatureSpawnEvent.SpawnReason.CUSTOM, function);
     }
 
     @NotNull
-    default <T extends Entity> T spawn(@NotNull Location location, @NotNull Class<T> clazz, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<T> function) throws IllegalArgumentException {
+    default <T extends Entity> T spawn(@NotNull final Location location, @NotNull final Class<T> clazz, @NotNull final CreatureSpawnEvent.SpawnReason reason, @Nullable final Consumer<T> function) throws IllegalArgumentException {
         return spawn(location, clazz, function, reason);
     }
 
     @NotNull
-    default Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason) {
+    default Entity spawnEntity(@NotNull final Location loc, @NotNull final EntityType type, @NotNull final CreatureSpawnEvent.SpawnReason reason) {
         return spawn(loc, (Class<Entity>) type.getEntityClass(), reason, null);
     }
 
     @NotNull
-    default Entity spawnEntity(@NotNull Location loc, @NotNull EntityType type, @NotNull CreatureSpawnEvent.SpawnReason reason, @Nullable Consumer<Entity> function) {
+    default Entity spawnEntity(@NotNull final Location loc, @NotNull final EntityType type, @NotNull final CreatureSpawnEvent.SpawnReason reason, @Nullable final Consumer<Entity> function) {
         return spawn(loc, (Class<Entity>) type.getEntityClass(), reason, function);
     }
 
@@ -3294,7 +3294,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      * @param data the data to use for the particle or null,
      *             the type of this depends on {@link Particle#getDataType()}
      */
-    default <T> void spawnParticle(@NotNull Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, null, null, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }// Paper start - Expand Particle API
+    default <T> void spawnParticle(@NotNull final Particle particle, final double x, final double y, final double z, final int count, final double offsetX, final double offsetY, final double offsetZ, final double extra, @Nullable final T data) { spawnParticle(particle, null, null, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }// Paper start - Expand Particle API
     /**
      * Spawns the particle (the number of times specified by count)
      * at the target location. The position of each particle will be
@@ -3317,7 +3317,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
      *             the type of this depends on {@link Particle#getDataType()}
      * @param <T> Type
      */
-    default <T> void spawnParticle(@NotNull Particle particle, @Nullable List<Player> receivers, @NotNull Player source, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, @Nullable T data) { spawnParticle(particle, receivers, source, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }
+    default <T> void spawnParticle(@NotNull final Particle particle, @Nullable final List<Player> receivers, @NotNull final Player source, final double x, final double y, final double z, final int count, final double offsetX, final double offsetY, final double offsetZ, final double extra, @Nullable final T data) { spawnParticle(particle, receivers, source, x, y, z, count, offsetX, offsetY, offsetZ, extra, data, true); }
     /**
      * Spawns the particle (the number of times specified by count)
      * at the target location. The position of each particle will be
@@ -3468,7 +3468,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
          * @return The lightning entity.
          */
         @NotNull
-        public LightningStrike strikeLightning(@NotNull Location loc, boolean isSilent) {
+        public LightningStrike strikeLightning(@NotNull final Location loc, final boolean isSilent) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -3480,7 +3480,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
          * @return The lightning entity.
          */
         @NotNull
-        public LightningStrike strikeLightningEffect(@NotNull Location loc, boolean isSilent) {
+        public LightningStrike strikeLightningEffect(@NotNull final Location loc, final boolean isSilent) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }
@@ -3544,7 +3544,7 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
         private final int id;
         private static final Map<Integer, Environment> lookup = new HashMap<>();
 
-        Environment(int id) {
+        Environment(final int id) {
             this.id = id;
         }
 
@@ -3568,12 +3568,12 @@ public interface World extends PluginMessageRecipient, Metadatable, net.kyori.ad
          */
         @Deprecated
         @Nullable
-        public static Environment getEnvironment(int id) {
+        public static Environment getEnvironment(final int id) {
             return lookup.get(id);
         }
 
         static {
-            for (Environment env : values()) {
+            for (final Environment env : values()) {
                 lookup.put(env.getId(), env);
             }
         }
diff --git a/src/main/java/org/bukkit/WorldBorder.java b/src/main/java/org/bukkit/WorldBorder.java
index fe48b47a9e158337f156884b5fe7cb67dec6a23e..761eeb2d8303c05697c9e1e567a0c5348f4cb2c8 100644
--- a/src/main/java/org/bukkit/WorldBorder.java
+++ b/src/main/java/org/bukkit/WorldBorder.java
@@ -126,7 +126,7 @@ public interface WorldBorder {
      * @deprecated use {@link #isInside(Location)} for an upstream compatible replacement
      */
     @Deprecated
-    default boolean isInBounds(@NotNull Location location) {
+    default boolean isInBounds(@NotNull final Location location) {
         return this.isInside(location);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/WorldCreator.java b/src/main/java/org/bukkit/WorldCreator.java
index 978ecfcbfaec32470e2977143771e38a574873df..719e064cadbb2547595f17c7b0f9fd5036133268 100644
--- a/src/main/java/org/bukkit/WorldCreator.java
+++ b/src/main/java/org/bukkit/WorldCreator.java
@@ -26,7 +26,7 @@ public class WorldCreator {
      *
      * @param name Name of the world that will be created
      */
-    public WorldCreator(@NotNull String name) {
+    public WorldCreator(@NotNull final String name) {
         // Paper start
         this(name, NamespacedKey.minecraft(name.toLowerCase(java.util.Locale.ENGLISH).replace(" ", "_")));
     }
@@ -37,7 +37,7 @@ public class WorldCreator {
      * @param levelName LevelName of the world that will be created
      * @param worldKey NamespacedKey of the world that will be created
      */
-    public WorldCreator(@NotNull String levelName, @NotNull NamespacedKey worldKey) {
+    public WorldCreator(@NotNull final String levelName, @NotNull final NamespacedKey worldKey) {
 	    this.name = levelName;
         this.seed = (new Random()).nextLong();
         this.key = worldKey;
@@ -49,7 +49,7 @@ public class WorldCreator {
      *
      * @param worldKey NamespacedKey of the world that will be created
      */
-    public WorldCreator(@NotNull NamespacedKey worldKey) {
+    public WorldCreator(@NotNull final NamespacedKey worldKey) {
         this(worldKey.getKey(), worldKey);
     }
 
@@ -70,7 +70,7 @@ public class WorldCreator {
      * @param worldKey NamespacedKey of the world that will be created
      */
     @NotNull
-    public static WorldCreator ofNameAndKey(@NotNull String levelName, @NotNull NamespacedKey worldKey) {
+    public static WorldCreator ofNameAndKey(@NotNull final String levelName, @NotNull final NamespacedKey worldKey) {
         return new WorldCreator(levelName, worldKey);
     }
 
@@ -81,7 +81,7 @@ public class WorldCreator {
      * @param worldKey NamespacedKey of the world that will be created
      */
     @NotNull
-    public static WorldCreator ofKey(@NotNull NamespacedKey worldKey) {
+    public static WorldCreator ofKey(@NotNull final NamespacedKey worldKey) {
         return new WorldCreator(worldKey);
     }
     // Paper end
@@ -93,7 +93,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator copy(@NotNull World world) {
+    public WorldCreator copy(@NotNull final World world) {
 
 	    seed = world.getSeed();
         environment = world.getEnvironment();
@@ -112,7 +112,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator copy(@NotNull WorldCreator creator) {
+    public WorldCreator copy(@NotNull final WorldCreator creator) {
 
 	    seed = creator.seed();
         environment = creator.environment();
@@ -151,7 +151,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator seed(long seed) {
+    public WorldCreator seed(final long seed) {
         this.seed = seed;
 
         return this;
@@ -174,7 +174,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator environment(@NotNull World.Environment env) {
+    public WorldCreator environment(@NotNull final World.Environment env) {
         this.environment = env;
 
         return this;
@@ -197,7 +197,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator type(@NotNull WorldType type) {
+    public WorldCreator type(@NotNull final WorldType type) {
         this.type = type;
 
         return this;
@@ -226,7 +226,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generator(@Nullable ChunkGenerator generator) {
+    public WorldCreator generator(@Nullable final ChunkGenerator generator) {
         this.generator = generator;
 
         return this;
@@ -246,7 +246,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generator(@Nullable String generator) {
+    public WorldCreator generator(@Nullable final String generator) {
         this.generator = getGeneratorForName(name, generator, Bukkit.getConsoleSender());
 
         return this;
@@ -268,7 +268,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generator(@Nullable String generator, @Nullable CommandSender output) {
+    public WorldCreator generator(@Nullable final String generator, @Nullable final CommandSender output) {
         this.generator = getGeneratorForName(name, generator, output);
 
         return this;
@@ -292,7 +292,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generatorSettings(@NotNull String generatorSettings) {
+    public WorldCreator generatorSettings(@NotNull final String generatorSettings) {
         this.generatorSettings = generatorSettings;
 
         return this;
@@ -317,7 +317,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator generateStructures(boolean generate) {
+    public WorldCreator generateStructures(final boolean generate) {
         this.generateStructures = generate;
 
         return this;
@@ -341,7 +341,7 @@ public class WorldCreator {
      * @return This object, for chaining
      */
     @NotNull
-    public WorldCreator hardcore(boolean hardcore) {
+    public WorldCreator hardcore(final boolean hardcore) {
         this.hardcore = hardcore;
 
         return this;
@@ -378,7 +378,7 @@ public class WorldCreator {
      * @return Resulting WorldCreator
      */
     @NotNull
-    public static WorldCreator name(@NotNull String name) {
+    public static WorldCreator name(@NotNull final String name) {
         return new WorldCreator(name);
     }
 
@@ -399,7 +399,7 @@ public class WorldCreator {
      * @return Resulting generator, or null
      */
     @Nullable
-    public static ChunkGenerator getGeneratorForName(@NotNull String world, @Nullable String name, @Nullable CommandSender output) {
+    public static ChunkGenerator getGeneratorForName(@NotNull final String world, @Nullable final String name, @Nullable CommandSender output) {
         ChunkGenerator result = null;
 
 	    if (output == null) {
@@ -407,9 +407,9 @@ public class WorldCreator {
         }
 
         if (name != null) {
-            String[] split = name.split(":", 2);
-            String id = (split.length > 1) ? split[1] : null;
-            Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
+            final String[] split = name.split(":", 2);
+            final String id = (split.length > 1) ? split[1] : null;
+            final Plugin plugin = Bukkit.getPluginManager().getPlugin(split[0]);
 
             if (plugin == null) {
                 output.sendMessage("Could not set generator for world '" + world + "': Plugin '" + split[0] + "' does not exist");
diff --git a/src/main/java/org/bukkit/WorldType.java b/src/main/java/org/bukkit/WorldType.java
index afe2ecdd3b38e78fa165a5cc52058279e3e0a768..7957183824f16b49fb2297c834b148184b0fc88f 100644
--- a/src/main/java/org/bukkit/WorldType.java
+++ b/src/main/java/org/bukkit/WorldType.java
@@ -17,7 +17,7 @@ public enum WorldType {
     private static final Map<String, WorldType> BY_NAME = Maps.newHashMap();
     private final String name;
 
-    WorldType(/*@NotNull*/ String name) {
+    WorldType(/*@NotNull*/ final String name) {
         this.name = name;
     }
 
@@ -38,12 +38,12 @@ public enum WorldType {
      * @return Requested WorldType, or null if not found
      */
     @Nullable
-    public static WorldType getByName(@NotNull String name) {
+    public static WorldType getByName(@NotNull final String name) {
         return BY_NAME.get(name.toUpperCase(java.util.Locale.ENGLISH));
     }
 
     static {
-        for (WorldType type : values()) {
+        for (final WorldType type : values()) {
             BY_NAME.put(type.name, type);
         }
     }
diff --git a/src/main/java/org/bukkit/attribute/Attribute.java b/src/main/java/org/bukkit/attribute/Attribute.java
index b9ad84c2d6250e568a6ca5459ff3918d7a2de680..e87460eabd0a266ea4c37e7768a06d2d51a7fb95 100644
--- a/src/main/java/org/bukkit/attribute/Attribute.java
+++ b/src/main/java/org/bukkit/attribute/Attribute.java
@@ -64,7 +64,7 @@ public enum Attribute implements Keyed {
 
     private final NamespacedKey key;
 
-    Attribute(String key) {
+    Attribute(final String key) {
         this.key = NamespacedKey.minecraft(key);
     }
 
diff --git a/src/main/java/org/bukkit/attribute/AttributeModifier.java b/src/main/java/org/bukkit/attribute/AttributeModifier.java
index 8b2f2795f691c83cd42c22f55ea39157fcd1ef99..32f2489e2e4a6c6d8d8b78664df3af52aefe8753 100644
--- a/src/main/java/org/bukkit/attribute/AttributeModifier.java
+++ b/src/main/java/org/bukkit/attribute/AttributeModifier.java
@@ -23,15 +23,15 @@ public class AttributeModifier implements ConfigurationSerializable {
     private final Operation operation;
     private final EquipmentSlot slot;
 
-    public AttributeModifier(@NotNull String name, double amount, @NotNull Operation operation) {
+    public AttributeModifier(@NotNull final String name, final double amount, @NotNull final Operation operation) {
         this(UUID.randomUUID(), name, amount, operation);
     }
 
-    public AttributeModifier(@NotNull UUID uuid, @NotNull String name, double amount, @NotNull Operation operation) {
+    public AttributeModifier(@NotNull final UUID uuid, @NotNull final String name, final double amount, @NotNull final Operation operation) {
         this(uuid, name, amount, operation, null);
     }
 
-    public AttributeModifier(@NotNull UUID uuid, @NotNull String name, double amount, @NotNull Operation operation, @Nullable EquipmentSlot slot) {
+    public AttributeModifier(@NotNull final UUID uuid, @NotNull final String name, final double amount, @NotNull final Operation operation, @Nullable final EquipmentSlot slot) {
         Validate.notNull(uuid, "UUID cannot be null");
         Validate.notNull(name, "Name cannot be null");
         Validate.notNull(operation, "Operation cannot be null");
@@ -95,7 +95,7 @@ public class AttributeModifier implements ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        Map<String, Object> data = new HashMap<>();
+        final Map<String, Object> data = new HashMap<>();
         data.put("uuid", uuid.toString());
         data.put("name", name);
         data.put("operation", operation.ordinal());
@@ -107,12 +107,12 @@ public class AttributeModifier implements ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object other) {
+    public boolean equals(final Object other) {
         if (!(other instanceof AttributeModifier)) {
             return false;
         }
-        AttributeModifier mod = (AttributeModifier) other;
-        boolean slots = (this.slot != null ? (this.slot == mod.slot) : mod.slot == null);
+        final AttributeModifier mod = (AttributeModifier) other;
+        final boolean slots = (this.slot != null ? (this.slot == mod.slot) : mod.slot == null);
         return this.uuid.equals(mod.uuid) && this.name.equals(mod.name) && this.amount == mod.amount && this.operation == mod.operation && slots;
     }
 
@@ -139,7 +139,7 @@ public class AttributeModifier implements ConfigurationSerializable {
     }
 
     @NotNull
-    public static AttributeModifier deserialize(@NotNull Map<String, Object> args) {
+    public static AttributeModifier deserialize(@NotNull final Map<String, Object> args) {
         if (args.containsKey("slot")) {
             return new AttributeModifier(UUID.fromString((String) args.get("uuid")), (String) args.get("name"), NumberConversions.toDouble(args.get("amount")), Operation.values()[NumberConversions.toInt(args.get("operation"))], EquipmentSlot.valueOf((args.get("slot").toString().toUpperCase())));
         }
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
index 0bf67e1134c3fd6c69b6d166de0bed892c693224..a2b42fd0b4f6264e7b65707bea45d66c7619a80f 100644
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -181,7 +181,7 @@ public interface Block extends Metadatable {
      *
      * @return This block's x, y, and z coordinates packed into a long value
      */
-    static long getBlockKey(int x, int y, int z) {
+    static long getBlockKey(final int x, final int y, final int z) {
         return ((long)x & 0x7FFFFFF) | (((long)z & 0x7FFFFFF) << 27) | ((long)y << 54);
     }
 
@@ -191,7 +191,7 @@ public interface Block extends Metadatable {
      * @see Block#getBlockKey(int, int, int)
      * @return The x component from the packed value.
      */
-    static int getBlockKeyX(long packed) {
+    static int getBlockKeyX(final long packed) {
         return (int) ((packed << 37) >> 37);
     }
 
@@ -201,7 +201,7 @@ public interface Block extends Metadatable {
      * @see Block#getBlockKey(int, int, int)
      * @return The y component from the packed value.
      */
-    static int getBlockKeyY(long packed) {
+    static int getBlockKeyY(final long packed) {
         return (int) (packed >>> 54);
     }
 
@@ -211,7 +211,7 @@ public interface Block extends Metadatable {
      * @see Block#getBlockKey(int, int, int)
      * @return The z component from the packed value.
      */
-    static int getBlockKeyZ(long packed) {
+    static int getBlockKeyZ(final long packed) {
         return (int) ((packed << 10) >> 37);
     }
 
@@ -631,8 +631,7 @@ public interface Block extends Metadatable {
      * @param itemStack {@link ItemStack} used to mine this Block
      * @return the speed that this Block will be mined by the given {@link ItemStack}
      */
-    @NotNull
-    default float getDestroySpeed(@NotNull ItemStack itemStack) {
+    default float getDestroySpeed(@NotNull final ItemStack itemStack) {
         return getDestroySpeed(itemStack, false);
     }
 
@@ -644,7 +643,6 @@ public interface Block extends Metadatable {
      * @param considerEnchants true to look at enchants on the itemstack
      * @return the speed that this Block will be mined by the given {@link org.bukkit.inventory.ItemStack}
      */
-    @NotNull
     float getDestroySpeed(@NotNull ItemStack itemStack, boolean considerEnchants);
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/block/BlockFace.java b/src/main/java/org/bukkit/block/BlockFace.java
index fbb0052a8651b933f48d288965f413fe9967a036..50453180e4b332e437dff5a505c865e48b726ac8 100644
--- a/src/main/java/org/bukkit/block/BlockFace.java
+++ b/src/main/java/org/bukkit/block/BlockFace.java
@@ -77,7 +77,7 @@ public enum BlockFace {
      */
     @NotNull
     public Vector getDirection() {
-        Vector direction = new Vector(modX, modY, modZ);
+        final Vector direction = new Vector(modX, modY, modZ);
         if (modX != 0 || modY != 0 || modZ != 0) {
             direction.normalize();
         }
diff --git a/src/main/java/org/bukkit/block/DoubleChest.java b/src/main/java/org/bukkit/block/DoubleChest.java
index 78f6969e50db87cae7b54ee3631122330206251f..470028bc19b6b9c1b22577a943783ac8b12e73fb 100644
--- a/src/main/java/org/bukkit/block/DoubleChest.java
+++ b/src/main/java/org/bukkit/block/DoubleChest.java
@@ -14,7 +14,7 @@ import org.jetbrains.annotations.Nullable;
 public class DoubleChest implements InventoryHolder {
     private final DoubleChestInventory inventory;
 
-    public DoubleChest(@NotNull DoubleChestInventory chest) {
+    public DoubleChest(@NotNull final DoubleChestInventory chest) {
         inventory = chest;
     }
 
@@ -36,12 +36,12 @@ public class DoubleChest implements InventoryHolder {
 
     // Paper start - getHolder without snapshot
     @Nullable
-    public InventoryHolder getLeftSide(boolean useSnapshot) {
+    public InventoryHolder getLeftSide(final boolean useSnapshot) {
         return inventory.getLeftSide().getHolder(useSnapshot);
     }
 
     @Nullable
-    public InventoryHolder getRightSide(boolean useSnapshot) {
+    public InventoryHolder getRightSide(final boolean useSnapshot) {
         return inventory.getRightSide().getHolder(useSnapshot);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/block/PistonMoveReaction.java b/src/main/java/org/bukkit/block/PistonMoveReaction.java
index c80667eae67361fd433b8fbd9eaf1ef0d76e0b03..ccfcbf26ae7bd8761868e7976568b8f3363609bb 100644
--- a/src/main/java/org/bukkit/block/PistonMoveReaction.java
+++ b/src/main/java/org/bukkit/block/PistonMoveReaction.java
@@ -37,12 +37,12 @@ public enum PistonMoveReaction {
     private final int id;
     private static final Map<Integer, PistonMoveReaction> byId = new HashMap<>();
     static {
-        for (PistonMoveReaction reaction : PistonMoveReaction.values()) {
+        for (final PistonMoveReaction reaction : PistonMoveReaction.values()) {
             byId.put(reaction.id, reaction);
         }
     }
 
-    PistonMoveReaction(int id) {
+    PistonMoveReaction(final int id) {
         this.id = id;
     }
 
@@ -62,7 +62,7 @@ public enum PistonMoveReaction {
      */
     @Deprecated
     @Nullable
-    public static PistonMoveReaction getById(int id) {
+    public static PistonMoveReaction getById(final int id) {
         return byId.get(id);
     }
 }
diff --git a/src/main/java/org/bukkit/block/banner/Pattern.java b/src/main/java/org/bukkit/block/banner/Pattern.java
index 2c616b638226b6bbf45cd60e621a85271fe5cb1d..9b62b67cf1661694566078ec5c98d9deab5554cc 100644
--- a/src/main/java/org/bukkit/block/banner/Pattern.java
+++ b/src/main/java/org/bukkit/block/banner/Pattern.java
@@ -24,7 +24,7 @@ public class Pattern implements ConfigurationSerializable {
      * @param color   the pattern color
      * @param pattern the pattern type
      */
-    public Pattern(@NotNull DyeColor color, @NotNull PatternType pattern) {
+    public Pattern(@NotNull final DyeColor color, @NotNull final PatternType pattern) {
         this.color = color;
         this.pattern = pattern;
     }
@@ -34,13 +34,13 @@ public class Pattern implements ConfigurationSerializable {
      *
      * @param map the map to deserialize from
      */
-    public Pattern(@NotNull Map<String, Object> map) {
+    public Pattern(@NotNull final Map<String, Object> map) {
         color = DyeColor.legacyValueOf(getString(map, COLOR));
         pattern = PatternType.getByIdentifier(getString(map, PATTERN));
     }
 
-    private static String getString(@NotNull Map<?, ?> map, @NotNull Object key) {
-        Object str = map.get(key);
+    private static String getString(@NotNull final Map<?, ?> map, @NotNull final Object key) {
+        final Object str = map.get(key);
         if (str instanceof String) {
             return (String) str;
         }
@@ -85,7 +85,7 @@ public class Pattern implements ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/block/banner/PatternType.java b/src/main/java/org/bukkit/block/banner/PatternType.java
index 11372d5cc9ad60d91ad30ca55278df5d25c1305b..6c211a6565cbd47a3e250cf5e37f06568cf43ee1 100644
--- a/src/main/java/org/bukkit/block/banner/PatternType.java
+++ b/src/main/java/org/bukkit/block/banner/PatternType.java
@@ -53,12 +53,12 @@ public enum PatternType {
     private static final Map<String, PatternType> byString = new HashMap<>();
 
     static {
-        for (PatternType p : values()) {
+        for (final PatternType p : values()) {
             byString.put(p.identifier, p);
         }
     }
 
-    PatternType(/*@NotNull*/ String key) {
+    PatternType(/*@NotNull*/ final String key) {
         this.identifier = key;
     }
 
@@ -82,7 +82,7 @@ public enum PatternType {
      */
     @Contract("null -> null")
     @Nullable
-    public static PatternType getByIdentifier(@Nullable String identifier) {
+    public static PatternType getByIdentifier(@Nullable final String identifier) {
         return byString.get(identifier);
     }
 }
diff --git a/src/main/java/org/bukkit/command/BufferedCommandSender.java b/src/main/java/org/bukkit/command/BufferedCommandSender.java
index f9a00aecca5ec41b460bf41dfe1c69694768cf98..139c48f6fd41bf7633ddc40a28f22c9914e01d5e 100644
--- a/src/main/java/org/bukkit/command/BufferedCommandSender.java
+++ b/src/main/java/org/bukkit/command/BufferedCommandSender.java
@@ -5,7 +5,7 @@ import org.jetbrains.annotations.NotNull;
 public class BufferedCommandSender implements MessageCommandSender {
     private final StringBuffer buffer = new StringBuffer();
     @Override
-    public void sendMessage(@NotNull String message) {
+    public void sendMessage(@NotNull final String message) {
         buffer.append(message);
         buffer.append("\n");
     }
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
index b478046be86e87a2c4e8cfb4274a0b829fa5b4b7..6624419635c1e54204e3b1c8b9f07746ee6449f2 100644
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -32,11 +32,11 @@ public abstract class Command {
     public co.aikar.timings.Timing timings; // Paper
     @NotNull public String getTimingName() {return getName();} // Paper
 
-    protected Command(@NotNull String name) {
+    protected Command(@NotNull final String name) {
         this(name, "", "/" + name, new ArrayList<>());
     }
 
-    protected Command(@NotNull String name, @NotNull String description, @NotNull String usageMessage, @NotNull List<String> aliases) {
+    protected Command(@NotNull final String name, @NotNull final String description, @NotNull final String usageMessage, @NotNull final List<String> aliases) {
         this.name = name;
         this.nextLabel = name;
         this.label = name;
@@ -68,7 +68,7 @@ public abstract class Command {
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) throws IllegalArgumentException {
         return tabComplete0(sender, alias, args, null);
     }
 
@@ -85,12 +85,12 @@ public abstract class Command {
      * @throws IllegalArgumentException if sender, alias, or args is null
      */
     @NotNull
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args, @Nullable Location location) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args, @Nullable final Location location) throws IllegalArgumentException {
         return tabComplete(sender, alias, args);
     }
 
     @NotNull
-    private List<String> tabComplete0(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args, @Nullable Location location) throws IllegalArgumentException {
+    private List<String> tabComplete0(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args, @Nullable final Location location) throws IllegalArgumentException {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
@@ -99,13 +99,13 @@ public abstract class Command {
             return ImmutableList.of();
         }
 
-        String lastWord = args[args.length - 1];
+        final String lastWord = args[args.length - 1];
 
-        Player senderPlayer = sender instanceof Player ? (Player) sender : null;
+        final Player senderPlayer = sender instanceof Player ? (Player) sender : null;
 
-        ArrayList<String> matchedPlayers = new ArrayList<>();
-        for (Player player : sender.getServer().getOnlinePlayers()) {
-            String name = player.getName();
+        final ArrayList<String> matchedPlayers = new ArrayList<>();
+        for (final Player player : sender.getServer().getOnlinePlayers()) {
+            final String name = player.getName();
             if ((senderPlayer == null || senderPlayer.canSee(player)) && StringUtil.startsWithIgnoreCase(name, lastWord)) {
                 matchedPlayers.add(name);
             }
@@ -136,7 +136,7 @@ public abstract class Command {
      * @return returns true if the name change happened instantly or false if
      *     the command was already registered
      */
-    public boolean setName(@NotNull String name) {
+    public boolean setName(@NotNull final String name) {
         if (isRegistered()) {
             this.name = name;
             return true;
@@ -161,7 +161,7 @@ public abstract class Command {
      *
      * @param permission Permission name or null
      */
-    public void setPermission(@Nullable String permission) {
+    public void setPermission(@Nullable final String permission) {
         this.permission = permission;
     }
 
@@ -175,15 +175,15 @@ public abstract class Command {
      * @param target User to test
      * @return true if they can use it, otherwise false
      */
-    public boolean testPermission(@NotNull CommandSender target) {
+    public boolean testPermission(@NotNull final CommandSender target) {
         if (testPermissionSilent(target)) {
             return true;
         }
 
         if (permissionMessage == null) {
             target.sendMessage(Bukkit.getPermissionMessage()); // Paper
-        } else if (permissionMessage.length() != 0) {
-            for (String line : permissionMessage.replace("<permission>", permission).split("\n")) {
+        } else if (!permissionMessage.isEmpty()) {
+            for (final String line : permissionMessage.replace("<permission>", permission).split("\n")) {
                 target.sendMessage(line);
             }
         }
@@ -200,12 +200,12 @@ public abstract class Command {
      * @param target User to test
      * @return true if they can use it, otherwise false
      */
-    public boolean testPermissionSilent(@NotNull CommandSender target) {
-        if ((permission == null) || (permission.length() == 0)) {
+    public boolean testPermissionSilent(@NotNull final CommandSender target) {
+        if ((permission == null) || (permission.isEmpty())) {
             return true;
         }
 
-        for (String p : permission.split(";")) {
+        for (final String p : permission.split(";")) {
             if (target.hasPermission(p)) {
                 return true;
             }
@@ -235,7 +235,7 @@ public abstract class Command {
      * @return returns true if the name change happened instantly or false if
      *     the command was already registered
      */
-    public boolean setLabel(@NotNull String name) {
+    public boolean setLabel(@NotNull final String name) {
 	    this.nextLabel = name;
         if (isRegistered()) {
             this.label = name;
@@ -252,7 +252,7 @@ public abstract class Command {
      * @return true if the registration was successful (the current registered
      *     CommandMap was the passed CommandMap or null) false otherwise
      */
-    public boolean register(@NotNull CommandMap commandMap) {
+    public boolean register(@NotNull final CommandMap commandMap) {
         if (allowChangesFrom(commandMap)) {
             this.commandMap = commandMap;
             return true;
@@ -270,7 +270,7 @@ public abstract class Command {
      *     registered CommandMap was the passed CommandMap or null) false
      *     otherwise
      */
-    public boolean unregister(@NotNull CommandMap commandMap) {
+    public boolean unregister(@NotNull final CommandMap commandMap) {
         if (allowChangesFrom(commandMap)) {
             this.commandMap = null;
             this.activeAliases = new ArrayList<>(this.aliases);
@@ -281,7 +281,7 @@ public abstract class Command {
         return false;
     }
 
-    private boolean allowChangesFrom(@NotNull CommandMap commandMap) {
+    private boolean allowChangesFrom(@NotNull final CommandMap commandMap) {
         return (null == this.commandMap || this.commandMap == commandMap);
     }
 
@@ -345,7 +345,7 @@ public abstract class Command {
      * @return this command object, for chaining
      */
     @NotNull
-    public Command setAliases(@NotNull List<String> aliases) {
+    public Command setAliases(@NotNull final List<String> aliases) {
         this.aliases = aliases;
         if (isRegistered()) {
             this.activeAliases = new ArrayList<>(aliases);
@@ -362,7 +362,7 @@ public abstract class Command {
      * @return this command object, for chaining
      */
     @NotNull
-    public Command setDescription(@NotNull String description) {
+    public Command setDescription(@NotNull final String description) {
         this.description = description;
         return this;
     }
@@ -375,7 +375,7 @@ public abstract class Command {
      * @return this command object, for chaining
      */
     @NotNull
-    public Command setPermissionMessage(@Nullable String permissionMessage) {
+    public Command setPermissionMessage(@Nullable final String permissionMessage) {
         this.permissionMessage = permissionMessage;
         return this;
     }
@@ -387,27 +387,27 @@ public abstract class Command {
      * @return this command object, for chaining
      */
     @NotNull
-    public Command setUsage(@NotNull String usage) {
+    public Command setUsage(@NotNull final String usage) {
         this.usageMessage = usage;
         return this;
     }
 
-    public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull String message) {
+    public static void broadcastCommandMessage(@NotNull final CommandSender source, @NotNull final String message) {
         broadcastCommandMessage(source, message, true);
     }
 
-    public static void broadcastCommandMessage(@NotNull CommandSender source, @NotNull String message, boolean sendToSource) {
-        String result = source.getName() + ": " + message;
+    public static void broadcastCommandMessage(@NotNull final CommandSender source, @NotNull final String message, final boolean sendToSource) {
+        final String result = source.getName() + ": " + message;
 
         if (source instanceof BlockCommandSender) {
-            BlockCommandSender blockCommandSender = (BlockCommandSender) source;
+            final BlockCommandSender blockCommandSender = (BlockCommandSender) source;
 
             if (!blockCommandSender.getBlock().getWorld().getGameRuleValue(GameRule.COMMAND_BLOCK_OUTPUT)) {
                 Bukkit.getConsoleSender().sendMessage(result);
                 return;
             }
         } else if (source instanceof CommandMinecart) {
-            CommandMinecart commandMinecart = (CommandMinecart) source;
+            final CommandMinecart commandMinecart = (CommandMinecart) source;
 
             if (!commandMinecart.getWorld().getGameRuleValue(GameRule.COMMAND_BLOCK_OUTPUT)) {
                 Bukkit.getConsoleSender().sendMessage(result);
@@ -415,16 +415,16 @@ public abstract class Command {
             }
         }
 
-        Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
-        String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + ChatColor.GRAY + ChatColor.ITALIC + "]";
+        final Set<Permissible> users = Bukkit.getPluginManager().getPermissionSubscriptions(Server.BROADCAST_CHANNEL_ADMINISTRATIVE);
+        final String colored = ChatColor.GRAY + "" + ChatColor.ITALIC + "[" + result + ChatColor.GRAY + ChatColor.ITALIC + "]";
 
         if (sendToSource && !(source instanceof ConsoleCommandSender)) {
             source.sendMessage(message);
         }
 
-        for (Permissible user : users) {
+        for (final Permissible user : users) {
             if (user instanceof CommandSender && user.hasPermission(Server.BROADCAST_CHANNEL_ADMINISTRATIVE)) {
-                CommandSender target = (CommandSender) user;
+                final CommandSender target = (CommandSender) user;
 
                 if (target instanceof ConsoleCommandSender) {
                     target.sendMessage(result);
diff --git a/src/main/java/org/bukkit/command/CommandException.java b/src/main/java/org/bukkit/command/CommandException.java
index b63015f40282b0f9e441b63276ccab3d81daa19d..4e3fbb5b6b9ac826f7cf63bc0d968f2b328d08b2 100644
--- a/src/main/java/org/bukkit/command/CommandException.java
+++ b/src/main/java/org/bukkit/command/CommandException.java
@@ -18,11 +18,11 @@ public class CommandException extends RuntimeException {
      *
      * @param msg the detail message.
      */
-    public CommandException(String msg) {
+    public CommandException(final String msg) {
         super(msg);
     }
 
-    public CommandException(String msg, Throwable cause) {
+    public CommandException(final String msg, final Throwable cause) {
         super(msg, cause);
     }
 }
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
index 4937cf8e4af36013a9ccc8cbc4e9c89ba4eae41f..57760dcf9ae9862ea90a1fe9c87cc6d91ba40122 100644
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -70,7 +70,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -81,7 +81,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -93,7 +93,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -105,7 +105,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }
@@ -130,7 +130,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @deprecated use {@link #sendMessage(Identity, Component, MessageType)} instead
      */
     @Deprecated
-    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         this.sendMessage(component.toLegacyText());
     }
 
@@ -144,7 +144,7 @@ public interface CommandSender extends net.kyori.adventure.audience.Audience, Pe
      * @deprecated use {@link #sendMessage(Identity, Component, MessageType)} instead
      */
     @Deprecated
-    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         this.sendMessage(new net.md_5.bungee.api.chat.TextComponent(components).toLegacyText());
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/command/FormattedCommandAlias.java b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
index b627b78a899e8e674310f5ff0b3d0f5b3fe67a0c..3a8bc0b10a3645d935d301abe86730305159c59f 100644
--- a/src/main/java/org/bukkit/command/FormattedCommandAlias.java
+++ b/src/main/java/org/bukkit/command/FormattedCommandAlias.java
@@ -10,20 +10,20 @@ import org.jetbrains.annotations.NotNull;
 public class FormattedCommandAlias extends Command {
     private final String[] formatStrings;
 
-    public FormattedCommandAlias(@NotNull String alias, @NotNull String[] formatStrings) {
+    public FormattedCommandAlias(@NotNull final String alias, @NotNull final String[] formatStrings) {
         super(alias);
         timings = co.aikar.timings.TimingsManager.getCommandTiming("minecraft", this); // Spigot
         this.formatStrings = formatStrings;
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String commandLabel, @NotNull final String[] args) {
         boolean result = false;
-        ArrayList<String> commands = new ArrayList<>();
-        for (String formatString : formatStrings) {
+        final ArrayList<String> commands = new ArrayList<>();
+        for (final String formatString : formatStrings) {
             try {
                 commands.add(buildCommand(sender, formatString, args)); // Paper
-            } catch (Throwable throwable) {
+            } catch (final Throwable throwable) {
                 if (throwable instanceof IllegalArgumentException) {
                     sender.sendMessage(throwable.getMessage());
                 } else {
@@ -33,20 +33,20 @@ public class FormattedCommandAlias extends Command {
             }
         }
 
-        for (String command : commands) {
+        for (final String command : commands) {
             result |= Bukkit.dispatchCommand(sender, command);
         }
 
         return result;
     }
 
-    private String buildCommand(@NotNull CommandSender sender, @NotNull String formatString, @NotNull String[] args) { // Paper
+    private String buildCommand(@NotNull final CommandSender sender, @NotNull String formatString, @NotNull final String[] args) { // Paper
         if (formatString.contains("$sender")) { // Paper
             formatString = formatString.replaceAll(Pattern.quote("$sender"), Matcher.quoteReplacement(sender.getName())); // Paper
         } // Paper
         int index = formatString.indexOf('$');
         while (index != -1) {
-            int start = index;
+            final int start = index;
 
             if (index > 0 && formatString.charAt(start - 1) == '\\') {
                 formatString = formatString.substring(0, start - 1) + formatString.substring(start);
@@ -63,8 +63,8 @@ public class FormattedCommandAlias extends Command {
 
             // Move index past the $
             index++;
-            int argStart = index;
-            while (index < formatString.length() && inRange(((int) formatString.charAt(index)) - 48, 0, 9)) {
+            final int argStart = index;
+            while (index < formatString.length() && inRange(formatString.charAt(index) - 48, 0, 9)) {
                 // Move index past current digit
                 index++;
             }
@@ -91,13 +91,13 @@ public class FormattedCommandAlias extends Command {
                 index++;
             }
 
-            int end = index;
+            final int end = index;
 
             if (required && position >= args.length) {
                 throw new IllegalArgumentException("Missing required argument " + (position + 1));
             }
 
-            StringBuilder replacement = new StringBuilder();
+            final StringBuilder replacement = new StringBuilder();
             if (rest && position < args.length) {
                 for (int i = position; i < args.length; i++) {
                     if (i != position) {
@@ -109,7 +109,7 @@ public class FormattedCommandAlias extends Command {
                 replacement.append(args[position]);
             }
 
-            formatString = formatString.substring(0, start) + replacement.toString() + formatString.substring(end);
+            formatString = formatString.substring(0, start) + replacement + formatString.substring(end);
             // Move index past the replaced data so we don't process it again
             index = start + replacement.length();
 
@@ -124,7 +124,7 @@ public class FormattedCommandAlias extends Command {
     @Override // Paper
     public String getTimingName() {return "Command Forwarder - " + super.getTimingName();} // Paper
 
-    private static boolean inRange(int i, int j, int k) {
+    private static boolean inRange(final int i, final int j, final int k) {
         return i >= j && i <= k;
     }
 }
diff --git a/src/main/java/org/bukkit/command/MessageCommandSender.java b/src/main/java/org/bukkit/command/MessageCommandSender.java
index a7ef1f51c2b96617a32e6e7b1723e8770ba8a6a8..b0abbc4f2c03e134a76dcf74decd75b7626f99e3 100644
--- a/src/main/java/org/bukkit/command/MessageCommandSender.java
+++ b/src/main/java/org/bukkit/command/MessageCommandSender.java
@@ -20,20 +20,20 @@ import org.jetbrains.annotations.Nullable;
 public interface MessageCommandSender extends CommandSender {
 
     @Override
-    default void sendMessage(@NotNull String[] messages) {
-        for (String message : messages) {
+    default void sendMessage(@NotNull final String[] messages) {
+        for (final String message : messages) {
             sendMessage(message);
         }
     }
 
     @Override
-    default void sendMessage(@Nullable UUID sender, @NotNull String message) {
+    default void sendMessage(@Nullable final UUID sender, @NotNull final String message) {
         sendMessage(message);
     }
 
     @Override
-    default void sendMessage(@Nullable UUID sender, @NotNull String[] messages) {
-        for (String message : messages) {
+    default void sendMessage(@Nullable final UUID sender, @NotNull final String[] messages) {
+        for (final String message : messages) {
             sendMessage(message);
         }
     }
@@ -56,56 +56,56 @@ public interface MessageCommandSender extends CommandSender {
     }
 
     @Override
-    default void setOp(boolean value) {
+    default void setOp(final boolean value) {
         throw new NotImplementedException();
     }
 
     @Override
-    default boolean isPermissionSet(@NotNull String name) {
+    default boolean isPermissionSet(@NotNull final String name) {
         throw new NotImplementedException();
     }
 
     @Override
-    default boolean isPermissionSet(@NotNull Permission perm) {
+    default boolean isPermissionSet(@NotNull final Permission perm) {
         throw new NotImplementedException();
     }
 
     @Override
-    default boolean hasPermission(@NotNull String name) {
+    default boolean hasPermission(@NotNull final String name) {
         throw new NotImplementedException();
     }
 
     @Override
-    default boolean hasPermission(@NotNull Permission perm) {
+    default boolean hasPermission(@NotNull final Permission perm) {
         throw new NotImplementedException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value) {
         throw new NotImplementedException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin) {
         throw new NotImplementedException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value, final int ticks) {
         throw new NotImplementedException();
     }
 
     @NotNull
     @Override
-    default PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
+    default PermissionAttachment addAttachment(@NotNull final Plugin plugin, final int ticks) {
         throw new NotImplementedException();
     }
 
     @Override
-    default void removeAttachment(@NotNull PermissionAttachment attachment) {
+    default void removeAttachment(@NotNull final PermissionAttachment attachment) {
         throw new NotImplementedException();
     }
 
diff --git a/src/main/java/org/bukkit/command/MultipleCommandAlias.java b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
index d07f28ac39426456dfa743832eebee42dcca883d..6bfa4ba3471e99cd9912dec5eab7285af5ff1956 100644
--- a/src/main/java/org/bukkit/command/MultipleCommandAlias.java
+++ b/src/main/java/org/bukkit/command/MultipleCommandAlias.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
 public class MultipleCommandAlias extends Command {
     private final Command[] commands;
 
-    public MultipleCommandAlias(@NotNull String name, @NotNull Command[] commands) {
+    public MultipleCommandAlias(@NotNull final String name, @NotNull final Command[] commands) {
         super(name);
         this.commands = commands;
     }
@@ -24,10 +24,10 @@ public class MultipleCommandAlias extends Command {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String commandLabel, @NotNull final String[] args) {
         boolean result = false;
 
-        for (Command command : commands) {
+        for (final Command command : commands) {
             result |= command.execute(sender, commandLabel, args);
         }
 
diff --git a/src/main/java/org/bukkit/command/PluginCommand.java b/src/main/java/org/bukkit/command/PluginCommand.java
index 7f153000eee0f563ee4f1e3c218aadb5b6a33a97..75341213c84a680bde0335aaa60281166e1c1010 100644
--- a/src/main/java/org/bukkit/command/PluginCommand.java
+++ b/src/main/java/org/bukkit/command/PluginCommand.java
@@ -14,7 +14,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
     private CommandExecutor executor;
     private TabCompleter completer;
 
-    protected PluginCommand(@NotNull String name, @NotNull Plugin owner) {
+    protected PluginCommand(@NotNull final String name, @NotNull final Plugin owner) {
         super(name);
         this.executor = owner;
         this.owningPlugin = owner;
@@ -30,7 +30,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      * @return true if the command was successful, otherwise false
      */
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String commandLabel, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String commandLabel, @NotNull final String[] args) {
         boolean success = false;
 
         if (!owningPlugin.isEnabled()) {
@@ -43,12 +43,12 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
 
         try {
             success = executor.onCommand(sender, this, commandLabel, args);
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             throw new CommandException("Unhandled exception executing command '" + commandLabel + "' in plugin " + owningPlugin.getDescription().getFullName(), ex);
         }
 
-        if (!success && usageMessage.length() > 0) {
-            for (String line : usageMessage.replace("<command>", commandLabel).split("\n")) {
+        if (!success && !usageMessage.isEmpty()) {
+            for (final String line : usageMessage.replace("<command>", commandLabel).split("\n")) {
                 sender.sendMessage(line);
             }
         }
@@ -61,7 +61,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      *
      * @param executor New executor to run
      */
-    public void setExecutor(@Nullable CommandExecutor executor) {
+    public void setExecutor(@Nullable final CommandExecutor executor) {
         this.executor = executor == null ? owningPlugin : executor;
     }
 
@@ -83,7 +83,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      *
      * @param completer New tab completer
      */
-    public void setTabCompleter(@Nullable TabCompleter completer) {
+    public void setTabCompleter(@Nullable final TabCompleter completer) {
         this.completer = completer;
     }
 
@@ -127,7 +127,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
      */
     @NotNull
     @Override
-    public java.util.List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws CommandException, IllegalArgumentException {
+    public java.util.List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) throws CommandException, IllegalArgumentException {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
@@ -140,10 +140,10 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
             if (completions == null && executor instanceof TabCompleter) {
                 completions = ((TabCompleter) executor).onTabComplete(sender, this, alias, args);
             }
-        } catch (Throwable ex) {
-            StringBuilder message = new StringBuilder();
+        } catch (final Throwable ex) {
+            final StringBuilder message = new StringBuilder();
             message.append("Unhandled exception during tab completion for command '/").append(alias).append(' ');
-            for (String arg : args) {
+            for (final String arg : args) {
                 message.append(arg).append(' ');
             }
             message.deleteCharAt(message.length() - 1).append("' in plugin ").append(owningPlugin.getDescription().getFullName());
@@ -158,7 +158,7 @@ public final class PluginCommand extends Command implements PluginIdentifiableCo
 
     @Override
     public String toString() {
-        StringBuilder stringBuilder = new StringBuilder(super.toString());
+        final StringBuilder stringBuilder = new StringBuilder(super.toString());
         stringBuilder.deleteCharAt(stringBuilder.length() - 1);
         stringBuilder.append(", ").append(owningPlugin.getDescription().getFullName()).append(')');
         return stringBuilder.toString();
diff --git a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
index 2af4e9d2e0d70badb9437d316655393f45aac2e8..266e50b8039dff8e99895304decc5e42fe16501b 100644
--- a/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
+++ b/src/main/java/org/bukkit/command/PluginCommandYamlParser.java
@@ -11,22 +11,22 @@ import org.jetbrains.annotations.NotNull;
 public class PluginCommandYamlParser {
 
     @NotNull
-    public static List<Command> parse(@NotNull Plugin plugin) {
-        List<Command> pluginCmds = new ArrayList<>();
+    public static List<Command> parse(@NotNull final Plugin plugin) {
+        final List<Command> pluginCmds = new ArrayList<>();
 
-        Map<String, Map<String, Object>> map = plugin.getDescription().getCommands();
+        final Map<String, Map<String, Object>> map = plugin.getDescription().getCommands();
 
-	    for (Entry<String, Map<String, Object>> entry : map.entrySet()) {
+	    for (final Entry<String, Map<String, Object>> entry : map.entrySet()) {
             if (entry.getKey().contains(":")) {
                 Bukkit.getServer().getLogger().severe("Could not load command " + entry.getKey() + " for plugin " + plugin.getName() + ": Illegal Characters");
                 continue;
             }
-            Command newCmd = new PluginCommand(entry.getKey(), plugin);
-            Object description = entry.getValue().get("description");
-            Object usage = entry.getValue().get("usage");
-            Object aliases = entry.getValue().get("aliases");
-            Object permission = entry.getValue().get("permission");
-            Object permissionMessage = entry.getValue().get("permission-message");
+            final Command newCmd = new PluginCommand(entry.getKey(), plugin);
+            final Object description = entry.getValue().get("description");
+            final Object usage = entry.getValue().get("usage");
+            final Object aliases = entry.getValue().get("aliases");
+            final Object permission = entry.getValue().get("permission");
+            final Object permissionMessage = entry.getValue().get("permission-message");
 
             if (description != null) {
                 newCmd.setDescription(description.toString());
@@ -37,10 +37,10 @@ public class PluginCommandYamlParser {
             }
 
             if (aliases != null) {
-                List<String> aliasList = new ArrayList<>();
+                final List<String> aliasList = new ArrayList<>();
 
                 if (aliases instanceof List) {
-                    for (Object o : (List<?>) aliases) {
+                    for (final Object o : (List<?>) aliases) {
                         if (o.toString().contains(":")) {
                             Bukkit.getServer().getLogger().severe("Could not load alias " + o.toString() + " for plugin " + plugin.getName() + ": Illegal Characters");
                             continue;
diff --git a/src/main/java/org/bukkit/command/SimpleCommandMap.java b/src/main/java/org/bukkit/command/SimpleCommandMap.java
index bd096f806e506ca518cdb6f39c834e6db3a239d0..14f1dfb1bb30f1c9441a5bbf49f9573a8f7338d0 100644
--- a/src/main/java/org/bukkit/command/SimpleCommandMap.java
+++ b/src/main/java/org/bukkit/command/SimpleCommandMap.java
@@ -49,8 +49,8 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public void registerAll(@NotNull String fallbackPrefix, @NotNull List<Command> commands) {
-	    for (Command c : commands) {
+    public void registerAll(@NotNull final String fallbackPrefix, @NotNull final List<Command> commands) {
+	    for (final Command c : commands) {
 	        register(fallbackPrefix, c);
 	    }
     }
@@ -59,7 +59,7 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public boolean register(@NotNull String fallbackPrefix, @NotNull Command command) {
+    public boolean register(@NotNull final String fallbackPrefix, @NotNull final Command command) {
         return register(command.getName(), fallbackPrefix, command);
     }
 
@@ -67,13 +67,13 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public boolean register(@NotNull String label, @NotNull String fallbackPrefix, @NotNull Command command) {
+    public boolean register(@NotNull String label, @NotNull String fallbackPrefix, @NotNull final Command command) {
         command.timings = co.aikar.timings.TimingsManager.getCommandTiming(fallbackPrefix, command); // Paper
         label = label.toLowerCase(java.util.Locale.ENGLISH).trim();
         fallbackPrefix = fallbackPrefix.toLowerCase(java.util.Locale.ENGLISH).trim();
-        boolean registered = register(label, command, false, fallbackPrefix);
+        final boolean registered = register(label, command, false, fallbackPrefix);
 
-        Iterator<String> iterator = command.getAliases().iterator();
+        final Iterator<String> iterator = command.getAliases().iterator();
         while (iterator.hasNext()) {
             if (!register(iterator.next(), command, true, fallbackPrefix)) {
                 iterator.remove();
@@ -102,7 +102,7 @@ public class SimpleCommandMap implements CommandMap {
      *     unique address
      * @return true if command was registered, false otherwise.
      */
-    private synchronized boolean register(@NotNull String label, @NotNull Command command, boolean isAlias, @NotNull String fallbackPrefix) {
+    private synchronized boolean register(@NotNull final String label, @NotNull final Command command, final boolean isAlias, @NotNull final String fallbackPrefix) {
         knownCommands.put(fallbackPrefix + ":" + label, command);
         if ((command instanceof BukkitCommand || isAlias) && knownCommands.containsKey(label)) {
             // Request is for an alias/fallback command and it conflicts with
@@ -111,10 +111,10 @@ public class SimpleCommandMap implements CommandMap {
             return false;
         }
 
-        boolean registered = true;
+        final boolean registered = true;
 
         // If the command exists but is an alias we overwrite it, otherwise we return
-        Command conflict = knownCommands.get(label);
+        final Command conflict = knownCommands.get(label);
         if (conflict != null && conflict.getLabel().equals(label)) {
             return false;
         }
@@ -131,15 +131,15 @@ public class SimpleCommandMap implements CommandMap {
      * {@inheritDoc}
      */
     @Override
-    public boolean dispatch(@NotNull CommandSender sender, @NotNull String commandLine) throws CommandException {
-        String[] args = commandLine.split(" ");
+    public boolean dispatch(@NotNull final CommandSender sender, @NotNull final String commandLine) throws CommandException {
+        final String[] args = commandLine.split(" ");
 
         if (args.length == 0) {
             return false;
         }
 
-        String sentCommandLabel = args[0].toLowerCase(java.util.Locale.ENGLISH);
-        Command target = getCommand(sentCommandLabel);
+        final String sentCommandLabel = args[0].toLowerCase(java.util.Locale.ENGLISH);
+        final Command target = getCommand(sentCommandLabel);
 
         if (target == null) {
             return false;
@@ -152,17 +152,17 @@ public class SimpleCommandMap implements CommandMap {
         // Paper end
 
         try {
-            try (co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources
+            try (final co.aikar.timings.Timing ignored = target.timings.startTiming()) { // Paper - use try with resources
             // Note: we don't return the result of target.execute as thats success / failure, we return handled (true) or not handled (false)
             target.execute(sender, sentCommandLabel, Arrays.copyOfRange(args, 1, args.length));
             } // target.timings.stopTiming(); // Spigot // Paper
-        } catch (CommandException ex) {
+        } catch (final CommandException ex) {
             server.getPluginManager().callEvent(new ServerExceptionEvent(new ServerCommandException(ex, target, sender, args))); // Paper
             //target.timings.stopTiming(); // Spigot // Paper
             throw ex;
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             //target.timings.stopTiming(); // Spigot // Paper
-            String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
+            final String msg = "Unhandled exception executing '" + commandLine + "' in " + target;
             server.getPluginManager().callEvent(new ServerExceptionEvent(new ServerCommandException(ex, target, sender, args))); // Paper
             throw new CommandException(msg, ex);
         }
@@ -173,7 +173,7 @@ public class SimpleCommandMap implements CommandMap {
 
     @Override
     public synchronized void clearCommands() {
-        for (Map.Entry<String, Command> entry : knownCommands.entrySet()) {
+        for (final Map.Entry<String, Command> entry : knownCommands.entrySet()) {
             entry.getValue().unregister(this);
         }
         knownCommands.clear();
@@ -182,38 +182,38 @@ public class SimpleCommandMap implements CommandMap {
 
     @Override
     @Nullable
-    public Command getCommand(@NotNull String name) {
+    public Command getCommand(@NotNull final String name) {
         return knownCommands.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
     @Nullable
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String cmdLine) {
         return tabComplete(sender, cmdLine, null);
     }
 
     @Override
     @Nullable
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String cmdLine, @Nullable Location location) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String cmdLine, @Nullable final Location location) {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(cmdLine, "Command line cannot null");
 
-        int spaceIndex = cmdLine.indexOf(' ');
+        final int spaceIndex = cmdLine.indexOf(' ');
 
         if (spaceIndex == -1) {
-            ArrayList<String> completions = new ArrayList<>();
-            Map<String, Command> knownCommands = this.knownCommands;
+            final ArrayList<String> completions = new ArrayList<>();
+            final Map<String, Command> knownCommands = this.knownCommands;
 
             final String prefix = (sender instanceof Player ? "/" : "");
 
-            for (Map.Entry<String, Command> commandEntry : knownCommands.entrySet()) {
-                Command command = commandEntry.getValue();
+            for (final Map.Entry<String, Command> commandEntry : knownCommands.entrySet()) {
+                final Command command = commandEntry.getValue();
 
                 if (!command.testPermissionSilent(sender)) {
                     continue;
                 }
 
-                String name = commandEntry.getKey(); // Use the alias, not command name
+                final String name = commandEntry.getKey(); // Use the alias, not command name
 
                 if (StringUtil.startsWithIgnoreCase(name, cmdLine)) {
                     completions.add(prefix + name);
@@ -224,8 +224,8 @@ public class SimpleCommandMap implements CommandMap {
             return completions;
         }
 
-        String commandName = cmdLine.substring(0, spaceIndex);
-        Command target = getCommand(commandName);
+        final String commandName = cmdLine.substring(0, spaceIndex);
+        final Command target = getCommand(commandName);
 
         if (target == null) {
             return null;
@@ -235,14 +235,14 @@ public class SimpleCommandMap implements CommandMap {
             return null;
         }
 
-        String[] args = cmdLine.substring(spaceIndex + 1).split(" ", -1);
+        final String[] args = cmdLine.substring(spaceIndex + 1).split(" ", -1);
 
         try {
             return target.tabComplete(sender, commandName, args, location);
-        } catch (CommandException ex) {
+        } catch (final CommandException ex) {
             throw ex;
-        } catch (Throwable ex) {
-            String msg = "Unhandled exception executing tab-completer for '" + cmdLine + "' in " + target;
+        } catch (final Throwable ex) {
+            final String msg = "Unhandled exception executing tab-completer for '" + cmdLine + "' in " + target;
             server.getPluginManager().callEvent(new ServerExceptionEvent(new ServerTabCompleteException(msg, ex, target, sender, args))); // Paper
             throw new CommandException(msg, ex);
         }
@@ -254,25 +254,25 @@ public class SimpleCommandMap implements CommandMap {
     }
 
     public void registerServerAliases() {
-        Map<String, String[]> values = server.getCommandAliases();
+        final Map<String, String[]> values = server.getCommandAliases();
 
-        for (Map.Entry<String, String[]> entry : values.entrySet()) {
-            String alias = entry.getKey();
+        for (final Map.Entry<String, String[]> entry : values.entrySet()) {
+            final String alias = entry.getKey();
             if (alias.contains(" ")) {
                 server.getLogger().warning("Could not register alias " + alias + " because it contains illegal characters");
                 continue;
             }
 
-            String[] commandStrings = entry.getValue();
-            List<String> targets = new ArrayList<>();
-            StringBuilder bad = new StringBuilder();
+            final String[] commandStrings = entry.getValue();
+            final List<String> targets = new ArrayList<>();
+            final StringBuilder bad = new StringBuilder();
 
-            for (String commandString : commandStrings) {
-                String[] commandArgs = commandString.split(" ");
-                Command command = getCommand(commandArgs[0]);
+            for (final String commandString : commandStrings) {
+                final String[] commandArgs = commandString.split(" ");
+                final Command command = getCommand(commandArgs[0]);
 
                 if (command == null) {
-                    if (bad.length() > 0) {
+                    if (!bad.isEmpty()) {
                         bad.append(", ");
                     }
                     bad.append(commandString);
@@ -281,13 +281,13 @@ public class SimpleCommandMap implements CommandMap {
                 }
             }
 
-            if (bad.length() > 0) {
+            if (!bad.isEmpty()) {
                 server.getLogger().warning("Could not register alias " + alias + " because it contains commands that do not exist: " + bad);
                 continue;
             }
 
             // We register these as commands so they have absolute priority.
-            if (targets.size() > 0) {
+            if (!targets.isEmpty()) {
                 knownCommands.put(alias.toLowerCase(java.util.Locale.ENGLISH), new FormattedCommandAlias(alias.toLowerCase(java.util.Locale.ENGLISH), targets.toArray(new String[0])));
             } else {
                 knownCommands.remove(alias.toLowerCase(java.util.Locale.ENGLISH));
diff --git a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
index cb032d038f52e6b9cf51c203cfc01cc4a7622772..4e985663f7922da7fe412898d12f2408cb1b1928 100644
--- a/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/BukkitCommand.java
@@ -5,11 +5,11 @@ import org.bukkit.command.Command;
 import org.jetbrains.annotations.NotNull;
 
 public abstract class BukkitCommand extends Command {
-    protected BukkitCommand(@NotNull String name) {
+    protected BukkitCommand(@NotNull final String name) {
         super(name);
     }
 
-    protected BukkitCommand(@NotNull String name, @NotNull String description, @NotNull String usageMessage, @NotNull List<String> aliases) {
+    protected BukkitCommand(@NotNull final String name, @NotNull final String description, @NotNull final String usageMessage, @NotNull final List<String> aliases) {
         super(name, description, usageMessage, aliases);
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/HelpCommand.java b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
index 32d58e3df7246e56b028f6d8bcf8bdeca564560a..9b036b4887187f6ae499ba9cffe44c80a7b31755 100644
--- a/src/main/java/org/bukkit/command/defaults/HelpCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/HelpCommand.java
@@ -30,13 +30,13 @@ public class HelpCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String[] args) {
         if (!testPermission(sender)) return true;
 
-        String command;
+        final String command;
         int pageNumber;
-        int pageHeight;
-        int pageWidth;
+        final int pageHeight;
+        final int pageWidth;
 
         if (args.length == 0) {
             command = "";
@@ -45,7 +45,7 @@ public class HelpCommand extends BukkitCommand {
             command = StringUtils.join(ArrayUtils.subarray(args, 0, args.length - 1), " ");
             try {
                 pageNumber = NumberUtils.createInteger(args[args.length - 1]);
-            } catch (NumberFormatException exception) {
+            } catch (final NumberFormatException exception) {
                 pageNumber = 1;
             }
             if (pageNumber <= 0) {
@@ -64,7 +64,7 @@ public class HelpCommand extends BukkitCommand {
             pageWidth = ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH;
         }
 
-        HelpMap helpMap = Bukkit.getServer().getHelpMap();
+        final HelpMap helpMap = Bukkit.getServer().getHelpMap();
         HelpTopic topic = helpMap.getHelpTopic(command);
 
         if (topic == null) {
@@ -80,9 +80,9 @@ public class HelpCommand extends BukkitCommand {
             return true;
         }
 
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(topic.getFullText(sender), pageNumber, pageWidth, pageHeight);
+        final ChatPaginator.ChatPage page = ChatPaginator.paginate(topic.getFullText(sender), pageNumber, pageWidth, pageHeight);
 
-        StringBuilder header = new StringBuilder();
+        final StringBuilder header = new StringBuilder();
         header.append(ChatColor.YELLOW);
         header.append("--------- ");
         header.append(ChatColor.WHITE);
@@ -107,16 +107,16 @@ public class HelpCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
 
         if (args.length == 1) {
-            List<String> matchedTopics = new ArrayList<>();
-            String searchString = args[0];
-            for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
-                String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
+            final List<String> matchedTopics = new ArrayList<>();
+            final String searchString = args[0];
+            for (final HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
+                final String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
 
                 if (trimmedTopic.startsWith(searchString)) {
                     matchedTopics.add(trimmedTopic);
@@ -129,15 +129,15 @@ public class HelpCommand extends BukkitCommand {
 
     @Nullable
     protected HelpTopic findPossibleMatches(@NotNull String searchString) {
-        int maxDistance = (searchString.length() / 5) + 3;
-        Set<HelpTopic> possibleMatches = new TreeSet<>(HelpTopicComparator.helpTopicComparatorInstance());
+        final int maxDistance = (searchString.length() / 5) + 3;
+        final Set<HelpTopic> possibleMatches = new TreeSet<>(HelpTopicComparator.helpTopicComparatorInstance());
 
         if (searchString.startsWith("/")) {
             searchString = searchString.substring(1);
         }
 
-        for (HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
-            String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
+        for (final HelpTopic topic : Bukkit.getServer().getHelpMap().getHelpTopics()) {
+            final String trimmedTopic = topic.getName().startsWith("/") ? topic.getName().substring(1) : topic.getName();
 
             if (trimmedTopic.length() < searchString.length()) {
                 continue;
@@ -152,7 +152,7 @@ public class HelpCommand extends BukkitCommand {
             }
         }
 
-        if (possibleMatches.size() > 0) {
+        if (!possibleMatches.isEmpty()) {
             return new IndexHelpTopic("Search", null, null, possibleMatches, "Search for: " + searchString);
         } else {
             return null;
@@ -168,7 +168,7 @@ public class HelpCommand extends BukkitCommand {
      * @return The number of substitutions, deletions, insertions, and
      * transpositions required to get from s1 to s2.
      */
-    protected static int damerauLevenshteinDistance(@Nullable String s1, @Nullable String s2) {
+    protected static int damerauLevenshteinDistance(@Nullable final String s1, @Nullable final String s2) {
         if (s1 == null && s2 == null) {
             return 0;
         }
@@ -179,11 +179,11 @@ public class HelpCommand extends BukkitCommand {
             return s2.length();
         }
 
-        int s1Len = s1.length();
-        int s2Len = s2.length();
-        int[][] H = new int[s1Len + 2][s2Len + 2];
+        final int s1Len = s1.length();
+        final int s2Len = s2.length();
+        final int[][] H = new int[s1Len + 2][s2Len + 2];
 
-        int INF = s1Len + s2Len;
+        final int INF = s1Len + s2Len;
         H[0][0] = INF;
         for (int i = 0; i <= s1Len; i++) {
             H[i + 1][1] = i;
@@ -194,8 +194,8 @@ public class HelpCommand extends BukkitCommand {
             H[0][j + 1] = INF;
         }
 
-        Map<Character, Integer> sd = new HashMap<>();
-        for (char Letter : (s1 + s2).toCharArray()) {
+        final Map<Character, Integer> sd = new HashMap<>();
+        for (final char Letter : (s1 + s2).toCharArray()) {
             if (!sd.containsKey(Letter)) {
                 sd.put(Letter, 0);
             }
@@ -204,8 +204,8 @@ public class HelpCommand extends BukkitCommand {
         for (int i = 1; i <= s1Len; i++) {
             int DB = 0;
             for (int j = 1; j <= s2Len; j++) {
-                int i1 = sd.get(s2.charAt(j - 1));
-                int j1 = DB;
+                final int i1 = sd.get(s2.charAt(j - 1));
+                final int j1 = DB;
 
                 if (s1.charAt(i - 1) == s2.charAt(j - 1)) {
                     H[i + 1][j + 1] = H[i][j];
diff --git a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
index 59e241f59251222cdaac762f9577c7977bb194c1..18d082e560f6cc1176586d9c57612aee3b1a27b5 100644
--- a/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/PluginsCommand.java
@@ -12,7 +12,7 @@ import org.bukkit.plugin.Plugin;
 import org.jetbrains.annotations.NotNull;
 
 public class PluginsCommand extends BukkitCommand {
-    public PluginsCommand(@NotNull String name) {
+    public PluginsCommand(@NotNull final String name) {
         super(name);
         this.description = "Gets a list of plugins running on the server";
         this.usageMessage = "/plugins";
@@ -21,7 +21,7 @@ public class PluginsCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String[] args) {
         if (!testPermission(sender)) return true;
 
         sender.sendMessage("Plugins " + getPluginList());
@@ -30,27 +30,27 @@ public class PluginsCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) throws IllegalArgumentException {
         return Collections.emptyList();
     }
 
     @NotNull
     private String getPluginList() {
         // Paper start
-        TreeMap<String, Plugin> plugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
+        final TreeMap<String, Plugin> plugins = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);
 
-        for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+        for (final Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
             plugins.put(plugin.getDescription().getName(), plugin);
         }
 
-        StringBuilder pluginList = new StringBuilder();
-        for (Map.Entry<String, Plugin> entry : plugins.entrySet()) {
-            if (pluginList.length() > 0) {
+        final StringBuilder pluginList = new StringBuilder();
+        for (final Map.Entry<String, Plugin> entry : plugins.entrySet()) {
+            if (!pluginList.isEmpty()) {
                 pluginList.append(ChatColor.WHITE);
                 pluginList.append(", ");
             }
 
-            Plugin plugin = entry.getValue();
+            final Plugin plugin = entry.getValue();
 
             pluginList.append(plugin.isEnabled() ? ChatColor.GREEN : ChatColor.RED);
             // Paper start - Add an asterisk to legacy plugins (so admins are aware)
@@ -61,12 +61,12 @@ public class PluginsCommand extends BukkitCommand {
             pluginList.append(pluginName);
             // Paper end
 
-            if (plugin.getDescription().getProvides().size() > 0) {
+            if (!plugin.getDescription().getProvides().isEmpty()) {
                 pluginList.append(" (").append(String.join(", ", plugin.getDescription().getProvides())).append(")");
             }
         }
 
-        return "(" + plugins.size() + "): " + pluginList.toString();
+        return "(" + plugins.size() + "): " + pluginList;
         // Paper end
     }
 
diff --git a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
index cc7e094f79aa4ba21117db1e745ac225433a4325..3a8dc3dde0ca956aa669de83ec83ec645aa093f2 100644
--- a/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ReloadCommand.java
@@ -9,7 +9,7 @@ import org.bukkit.command.CommandSender;
 import org.jetbrains.annotations.NotNull;
 
 public class ReloadCommand extends BukkitCommand {
-    public ReloadCommand(@NotNull String name) {
+    public ReloadCommand(@NotNull final String name) {
         super(name);
         this.description = "Reloads the server configuration and plugins";
         this.usageMessage = "/reload [permissions|commands|confirm]"; // Paper
@@ -18,7 +18,7 @@ public class ReloadCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) { // Paper
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String[] args) { // Paper
         if (!testPermission(sender)) return true;
 
         // Paper start - Reload permissions.yml & require confirm
@@ -58,7 +58,7 @@ public class ReloadCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) throws IllegalArgumentException {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) throws IllegalArgumentException {
         return com.google.common.collect.Lists.newArrayList("permissions", "commands"); // Paper
     }
 }
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index c3b888684d5489b751dff521a68f8e2591e74b61..508732a957d1d7bc2eccfd0b51bd91610c06a39c 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -38,7 +38,7 @@ public class VersionCommand extends BukkitCommand {
         return versionFetcher;
     }
 
-    public VersionCommand(@NotNull String name) {
+    public VersionCommand(@NotNull final String name) {
         super(name);
 
         this.description = "Gets the version of this server including any plugins in use";
@@ -48,17 +48,17 @@ public class VersionCommand extends BukkitCommand {
     }
 
     @Override
-    public boolean execute(@NotNull CommandSender sender, @NotNull String currentAlias, @NotNull String[] args) {
+    public boolean execute(@NotNull final CommandSender sender, @NotNull final String currentAlias, @NotNull final String[] args) {
         if (!testPermission(sender)) return true;
 
         if (args.length == 0) {
             //sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")"); // Paper - moved to setVersionMessage
             sendVersion(sender);
         } else {
-            StringBuilder name = new StringBuilder();
+            final StringBuilder name = new StringBuilder();
 
-            for (String arg : args) {
-                if (name.length() > 0) {
+            for (final String arg : args) {
+                if (!name.isEmpty()) {
                     name.append(' ');
                 }
 
@@ -66,7 +66,7 @@ public class VersionCommand extends BukkitCommand {
             }
 
             String pluginName = name.toString();
-            Plugin exactPlugin = Bukkit.getPluginManager().getPlugin(pluginName);
+            final Plugin exactPlugin = Bukkit.getPluginManager().getPlugin(pluginName);
             if (exactPlugin != null) {
                 describeToSender(exactPlugin, sender);
                 return true;
@@ -74,7 +74,7 @@ public class VersionCommand extends BukkitCommand {
 
             boolean found = false;
             pluginName = pluginName.toLowerCase(java.util.Locale.ENGLISH);
-            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+            for (final Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 if (plugin.getName().toLowerCase(java.util.Locale.ENGLISH).contains(pluginName)) {
                     describeToSender(plugin, sender);
                     found = true;
@@ -89,8 +89,8 @@ public class VersionCommand extends BukkitCommand {
         return true;
     }
 
-    private void describeToSender(@NotNull Plugin plugin, @NotNull CommandSender sender) {
-        PluginDescriptionFile desc = plugin.getDescription();
+    private void describeToSender(@NotNull final Plugin plugin, @NotNull final CommandSender sender) {
+        final PluginDescriptionFile desc = plugin.getDescription();
         sender.sendMessage(ChatColor.GREEN + desc.getName() + ChatColor.WHITE + " version " + ChatColor.GREEN + desc.getVersion());
 
         if (desc.getDescription() != null) {
@@ -116,10 +116,10 @@ public class VersionCommand extends BukkitCommand {
 
     @NotNull
     private String getNameList(@NotNull final List<String> names) {
-        StringBuilder result = new StringBuilder();
+        final StringBuilder result = new StringBuilder();
 
         for (int i = 0; i < names.size(); i++) {
-            if (result.length() > 0) {
+            if (!result.isEmpty()) {
                 result.append(ChatColor.WHITE);
 
                 if (i < names.size() - 1) {
@@ -138,15 +138,15 @@ public class VersionCommand extends BukkitCommand {
 
     @NotNull
     @Override
-    public List<String> tabComplete(@NotNull CommandSender sender, @NotNull String alias, @NotNull String[] args) {
+    public List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, @NotNull final String[] args) {
         Validate.notNull(sender, "Sender cannot be null");
         Validate.notNull(args, "Arguments cannot be null");
         Validate.notNull(alias, "Alias cannot be null");
 
         if (args.length == 1) {
-            List<String> completions = new ArrayList<>();
-            String toComplete = args[0].toLowerCase(java.util.Locale.ENGLISH);
-            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+            final List<String> completions = new ArrayList<>();
+            final String toComplete = args[0].toLowerCase(java.util.Locale.ENGLISH);
+            for (final Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
                 if (StringUtil.startsWithIgnoreCase(plugin.getName(), toComplete)) {
                     completions.add(plugin.getName());
                 }
@@ -163,7 +163,7 @@ public class VersionCommand extends BukkitCommand {
     private boolean versionTaskStarted = false;
     private long lastCheck = 0;
 
-    private void sendVersion(@NotNull CommandSender sender) {
+    private void sendVersion(@NotNull final CommandSender sender) {
         if (hasVersion) {
             if (System.currentTimeMillis() - lastCheck > getVersionFetcher().getCacheTime()) { // Paper - use version supplier
                 lastCheck = System.currentTimeMillis();
@@ -191,7 +191,7 @@ public class VersionCommand extends BukkitCommand {
     }
 
     private void obtainVersion() {
-        String version = Bukkit.getVersion();
+        final String version = Bukkit.getVersion();
         // Paper start
         if (version.startsWith("null")) { // running from ide?
             setVersionMessage(Component.text("Unknown version, custom build?", net.kyori.adventure.text.format.NamedTextColor.YELLOW));
@@ -250,7 +250,7 @@ public class VersionCommand extends BukkitCommand {
         try {
             hasVersion = true;
             versionTaskStarted = false;
-            for (CommandSender sender : versionWaiters) {
+            for (final CommandSender sender : versionWaiters) {
                 sender.sendMessage(versionMessage);
             }
             versionWaiters.clear();
@@ -259,19 +259,19 @@ public class VersionCommand extends BukkitCommand {
         }
     }
 
-    private static int getDistance(@NotNull String repo, @NotNull String hash) {
+    private static int getDistance(@NotNull final String repo, @NotNull final String hash) {
         try {
-            try (BufferedReader reader = Resources.asCharSource(
+            try (final BufferedReader reader = Resources.asCharSource(
                 new URL("https://hub.spigotmc.org/stash/rest/api/1.0/projects/SPIGOT/repos/" + repo + "/commits?since=" + URLEncoder.encode(hash, StandardCharsets.UTF_8) + "&withCounts=true"),
                 Charsets.UTF_8
             ).openBufferedStream()) {
-                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                final JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
                 return obj.get("totalCount").getAsInt();
-            } catch (JsonSyntaxException ex) {
+            } catch (final JsonSyntaxException ex) {
                 ex.printStackTrace();
                 return -1;
             }
-        } catch (IOException e) {
+        } catch (final IOException e) {
             e.printStackTrace();
             return -1;
         }
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
index 356bad6bc7878765fae9f98b4d907591733067dd..9b5ec569ab8e5e2aa7133cd1767d88ff2ab07b86 100644
--- a/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationOptions.java
@@ -11,7 +11,7 @@ public class ConfigurationOptions {
     private boolean copyDefaults = false;
     private final Configuration configuration;
 
-    protected ConfigurationOptions(@NotNull Configuration configuration) {
+    protected ConfigurationOptions(@NotNull final Configuration configuration) {
         this.configuration = configuration;
     }
 
@@ -49,7 +49,7 @@ public class ConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public ConfigurationOptions pathSeparator(char value) {
+    public ConfigurationOptions pathSeparator(final char value) {
         this.pathSeparator = value;
         return this;
     }
@@ -88,7 +88,7 @@ public class ConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public ConfigurationOptions copyDefaults(boolean value) {
+    public ConfigurationOptions copyDefaults(final boolean value) {
         this.copyDefaults = value;
         return this;
     }
diff --git a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
index d23480e59f8f34d6a88e915bc368ecc8e434d281..76d47e1aecbf01d9b600eaa5f9eaf5f6b4d91ee8 100644
--- a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
+++ b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
@@ -18,7 +18,7 @@ public class InvalidConfigurationException extends Exception {
      *
      * @param msg The details of the exception.
      */
-    public InvalidConfigurationException(String msg) {
+    public InvalidConfigurationException(final String msg) {
         super(msg);
     }
 
@@ -28,7 +28,7 @@ public class InvalidConfigurationException extends Exception {
      *
      * @param cause The cause of the exception.
      */
-    public InvalidConfigurationException(Throwable cause) {
+    public InvalidConfigurationException(final Throwable cause) {
         super(cause);
     }
 
@@ -39,7 +39,7 @@ public class InvalidConfigurationException extends Exception {
      * @param cause The cause of the exception.
      * @param msg The details of the exception.
      */
-    public InvalidConfigurationException(String msg, Throwable cause) {
+    public InvalidConfigurationException(final String msg, final Throwable cause) {
         super(msg, cause);
     }
 }
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
index 010a97fee25233929e933aafad9a34a15bc4b847..579b4b634f2e3ae9e27237c82c9c831ae1d04702 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfiguration.java
@@ -26,12 +26,12 @@ public class MemoryConfiguration extends MemorySection implements Configuration
      * @param defaults Default value provider
      * @throws IllegalArgumentException Thrown if defaults is null
      */
-    public MemoryConfiguration(@Nullable Configuration defaults) {
+    public MemoryConfiguration(@Nullable final Configuration defaults) {
         this.defaults = defaults;
     }
 
     @Override
-    public void addDefault(@NotNull String path, @Nullable Object value) {
+    public void addDefault(@NotNull final String path, @Nullable final Object value) {
         Validate.notNull(path, "Path may not be null");
 
         if (defaults == null) {
@@ -42,23 +42,23 @@ public class MemoryConfiguration extends MemorySection implements Configuration
     }
 
     @Override
-    public void addDefaults(@NotNull Map<String, Object> defaults) {
+    public void addDefaults(@NotNull final Map<String, Object> defaults) {
         Validate.notNull(defaults, "Defaults may not be null");
 
-        for (Map.Entry<String, Object> entry : defaults.entrySet()) {
+        for (final Map.Entry<String, Object> entry : defaults.entrySet()) {
             addDefault(entry.getKey(), entry.getValue());
         }
     }
 
     @Override
-    public void addDefaults(@NotNull Configuration defaults) {
+    public void addDefaults(@NotNull final Configuration defaults) {
         Validate.notNull(defaults, "Defaults may not be null");
 
         addDefaults(defaults.getValues(true));
     }
 
     @Override
-    public void setDefaults(@NotNull Configuration defaults) {
+    public void setDefaults(@NotNull final Configuration defaults) {
         Validate.notNull(defaults, "Defaults may not be null");
 
         this.defaults = defaults;
diff --git a/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java b/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
index ead85f6faee840404f4eaeba635a82df7796cb28..6afe09b5c7f22946f7b9be3a2cc46b440f635956 100644
--- a/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/MemoryConfigurationOptions.java
@@ -7,7 +7,7 @@ import org.jetbrains.annotations.NotNull;
  * MemoryConfiguration}
  */
 public class MemoryConfigurationOptions extends ConfigurationOptions {
-    protected MemoryConfigurationOptions(@NotNull MemoryConfiguration configuration) {
+    protected MemoryConfigurationOptions(@NotNull final MemoryConfiguration configuration) {
         super(configuration);
     }
 
@@ -19,14 +19,14 @@ public class MemoryConfigurationOptions extends ConfigurationOptions {
 
     @NotNull
     @Override
-    public MemoryConfigurationOptions copyDefaults(boolean value) {
+    public MemoryConfigurationOptions copyDefaults(final boolean value) {
         super.copyDefaults(value);
         return this;
     }
 
     @NotNull
     @Override
-    public MemoryConfigurationOptions pathSeparator(char value) {
+    public MemoryConfigurationOptions pathSeparator(final char value) {
         super.pathSeparator(value);
         return this;
     }
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
index f3ed8274c00d03fd56eebea938c32fb0e268ebd7..1269d75194e76d892f0da258b9e131a6dfde03b4 100644
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -57,7 +57,7 @@ public class MemorySection implements ConfigurationSection {
      * @throws IllegalArgumentException Thrown is parent or path is null, or
      *     if parent contains no root Configuration.
      */
-    protected MemorySection(@NotNull ConfigurationSection parent, @NotNull String path) {
+    protected MemorySection(@NotNull final ConfigurationSection parent, @NotNull final String path) {
         Validate.notNull(parent, "Parent cannot be null");
         Validate.notNull(path, "Path cannot be null");
 
@@ -72,12 +72,12 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public Set<String> getKeys(boolean deep) {
-        Set<String> result = new LinkedHashSet<>();
+    public Set<String> getKeys(final boolean deep) {
+        final Set<String> result = new LinkedHashSet<>();
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root != null && root.options().copyDefaults()) {
-            ConfigurationSection defaults = getDefaultSection();
+            final ConfigurationSection defaults = getDefaultSection();
 
             if (defaults != null) {
                 result.addAll(defaults.getKeys(deep));
@@ -91,12 +91,12 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public Map<String, Object> getValues(boolean deep) {
-        Map<String, Object> result = new LinkedHashMap<>();
+    public Map<String, Object> getValues(final boolean deep) {
+        final Map<String, Object> result = new LinkedHashMap<>();
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root != null && root.options().copyDefaults()) {
-            ConfigurationSection defaults = getDefaultSection();
+            final ConfigurationSection defaults = getDefaultSection();
 
             if (defaults != null) {
                 result.putAll(defaults.getValues(deep));
@@ -109,18 +109,18 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public boolean contains(@NotNull String path) {
+    public boolean contains(@NotNull final String path) {
         return contains(path, false);
     }
 
     @Override
-    public boolean contains(@NotNull String path, boolean ignoreDefault) {
+    public boolean contains(@NotNull final String path, final boolean ignoreDefault) {
         return ((ignoreDefault) ? get(path, null) : get(path)) != null;
     }
 
     @Override
-    public boolean isSet(@NotNull String path) {
-        Configuration root = getRoot();
+    public boolean isSet(@NotNull final String path) {
+        final Configuration root = getRoot();
         if (root == null) {
             return false;
         }
@@ -155,10 +155,10 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public void addDefault(@NotNull String path, @Nullable Object value) {
+    public void addDefault(@NotNull final String path, @Nullable final Object value) {
         Validate.notNull(path, "Path cannot be null");
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot add default without root");
         }
@@ -171,8 +171,8 @@ public class MemorySection implements ConfigurationSection {
     @Override
     @Nullable
     public ConfigurationSection getDefaultSection() {
-        Configuration root = getRoot();
-        Configuration defaults = root == null ? null : root.getDefaults();
+        final Configuration root = getRoot();
+        final Configuration defaults = root == null ? null : root.getDefaults();
 
         if (defaults != null) {
             if (defaults.isConfigurationSection(getCurrentPath())) {
@@ -184,10 +184,10 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public void set(@NotNull String path, @Nullable Object value) {
+    public void set(@NotNull final String path, @Nullable final Object value) {
         Validate.notEmpty(path, "Cannot set to an empty path");
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot use section without a root");
         }
@@ -198,8 +198,8 @@ public class MemorySection implements ConfigurationSection {
         int i1 = -1, i2;
         ConfigurationSection section = this;
         while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
-            String node = path.substring(i2, i1);
-            ConfigurationSection subSection = section.getConfigurationSection(node);
+            final String node = path.substring(i2, i1);
+            final ConfigurationSection subSection = section.getConfigurationSection(node);
             if (subSection == null) {
                 if (value == null) {
                     // no need to create missing sub-sections if we want to remove the value:
@@ -211,7 +211,7 @@ public class MemorySection implements ConfigurationSection {
             }
         }
 
-        String key = path.substring(i2);
+        final String key = path.substring(i2);
         if (section == this) {
             if (value == null) {
                 map.remove(key);
@@ -225,20 +225,20 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @Nullable
-    public Object get(@NotNull String path) {
+    public Object get(@NotNull final String path) {
         return get(path, getDefault(path));
     }
 
     @Override
     @Nullable
-    public Object get(@NotNull String path, @Nullable Object def) {
+    public Object get(@NotNull final String path, @Nullable final Object def) {
         Validate.notNull(path, "Path cannot be null");
 
-        if (path.length() == 0) {
+        if (path.isEmpty()) {
             return this;
         }
 
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot access section without a root");
         }
@@ -255,9 +255,9 @@ public class MemorySection implements ConfigurationSection {
             }
         }
 
-        String key = path.substring(i2);
+        final String key = path.substring(i2);
         if (section == this) {
-            Object result = map.get(key);
+            final Object result = map.get(key);
             return (result == null) ? def : result;
         }
         return section.get(key, def);
@@ -265,9 +265,9 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public ConfigurationSection createSection(@NotNull String path) {
+    public ConfigurationSection createSection(@NotNull final String path) {
         Validate.notEmpty(path, "Cannot create section at empty path");
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot create section without a root");
         }
@@ -278,8 +278,8 @@ public class MemorySection implements ConfigurationSection {
         int i1 = -1, i2;
         ConfigurationSection section = this;
         while ((i1 = path.indexOf(separator, i2 = i1 + 1)) != -1) {
-            String node = path.substring(i2, i1);
-            ConfigurationSection subSection = section.getConfigurationSection(node);
+            final String node = path.substring(i2, i1);
+            final ConfigurationSection subSection = section.getConfigurationSection(node);
             if (subSection == null) {
                 section = section.createSection(node);
             } else {
@@ -287,9 +287,9 @@ public class MemorySection implements ConfigurationSection {
             }
         }
 
-        String key = path.substring(i2);
+        final String key = path.substring(i2);
         if (section == this) {
-            ConfigurationSection result = new MemorySection(this, key);
+            final ConfigurationSection result = new MemorySection(this, key);
             map.put(key, result);
             return result;
         }
@@ -298,10 +298,10 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public ConfigurationSection createSection(@NotNull String path, @NotNull Map<?, ?> map) {
-        ConfigurationSection section = createSection(path);
+    public ConfigurationSection createSection(@NotNull final String path, @NotNull final Map<?, ?> map) {
+        final ConfigurationSection section = createSection(path);
 
-        for (Map.Entry<?, ?> entry : map.entrySet()) {
+        for (final Map.Entry<?, ?> entry : map.entrySet()) {
             if (entry.getValue() instanceof Map) {
                 section.createSection(entry.getKey().toString(), (Map<?, ?>) entry.getValue());
             } else {
@@ -315,129 +315,129 @@ public class MemorySection implements ConfigurationSection {
     // Primitives
     @Override
     @Nullable
-    public String getString(@NotNull String path) {
-        Object def = getDefault(path);
+    public String getString(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getString(path, def != null ? def.toString() : null);
     }
 
     @Override
     @Nullable
-    public String getString(@NotNull String path, @Nullable String def) {
-        Object val = get(path, def);
+    public String getString(@NotNull final String path, @Nullable final String def) {
+        final Object val = get(path, def);
         return (val != null) ? val.toString() : def;
     }
 
     @Override
-    public boolean isString(@NotNull String path) {
-        Object val = get(path);
+    public boolean isString(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof String;
     }
 
     @Override
-    public int getInt(@NotNull String path) {
-        Object def = getDefault(path);
+    public int getInt(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getInt(path, (def instanceof Number) ? toInt(def) : 0);
     }
 
     @Override
-    public int getInt(@NotNull String path, int def) {
-        Object val = get(path, def);
+    public int getInt(@NotNull final String path, final int def) {
+        final Object val = get(path, def);
         return (val instanceof Number) ? toInt(val) : def;
     }
 
     @Override
-    public boolean isInt(@NotNull String path) {
-        Object val = get(path);
+    public boolean isInt(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Integer;
     }
 
     @Override
-    public boolean getBoolean(@NotNull String path) {
-        Object def = getDefault(path);
+    public boolean getBoolean(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getBoolean(path, (def instanceof Boolean) ? (Boolean) def : false);
     }
 
     @Override
-    public boolean getBoolean(@NotNull String path, boolean def) {
-        Object val = get(path, def);
+    public boolean getBoolean(@NotNull final String path, final boolean def) {
+        final Object val = get(path, def);
         return (val instanceof Boolean) ? (Boolean) val : def;
     }
 
     @Override
-    public boolean isBoolean(@NotNull String path) {
-        Object val = get(path);
+    public boolean isBoolean(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Boolean;
     }
 
     @Override
-    public double getDouble(@NotNull String path) {
-        Object def = getDefault(path);
+    public double getDouble(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getDouble(path, (def instanceof Number) ? toDouble(def) : 0);
     }
 
     @Override
-    public double getDouble(@NotNull String path, double def) {
-        Object val = get(path, def);
+    public double getDouble(@NotNull final String path, final double def) {
+        final Object val = get(path, def);
         return (val instanceof Number) ? toDouble(val) : def;
     }
 
     @Override
-    public boolean isDouble(@NotNull String path) {
-        Object val = get(path);
+    public boolean isDouble(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Double;
     }
 
     @Override
-    public long getLong(@NotNull String path) {
-        Object def = getDefault(path);
+    public long getLong(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getLong(path, (def instanceof Number) ? toLong(def) : 0);
     }
 
     @Override
-    public long getLong(@NotNull String path, long def) {
-        Object val = get(path, def);
+    public long getLong(@NotNull final String path, final long def) {
+        final Object val = get(path, def);
         return (val instanceof Number) ? toLong(val) : def;
     }
 
     @Override
-    public boolean isLong(@NotNull String path) {
-        Object val = get(path);
+    public boolean isLong(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof Long;
     }
 
     // Java
     @Override
     @Nullable
-    public List<?> getList(@NotNull String path) {
-        Object def = getDefault(path);
+    public List<?> getList(@NotNull final String path) {
+        final Object def = getDefault(path);
         return getList(path, (def instanceof List) ? (List<?>) def : null);
     }
 
     @Override
     @Nullable
-    public List<?> getList(@NotNull String path, @Nullable List<?> def) {
-        Object val = get(path, def);
+    public List<?> getList(@NotNull final String path, @Nullable final List<?> def) {
+        final Object val = get(path, def);
         return (List<?>) ((val instanceof List) ? val : def);
     }
 
     @Override
-    public boolean isList(@NotNull String path) {
-        Object val = get(path);
+    public boolean isList(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof List;
     }
 
     @Override
     @NotNull
-    public List<String> getStringList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<String> getStringList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<String> result = new ArrayList<>();
+        final List<String> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if ((object instanceof String) || (isPrimitiveWrapper(object))) {
                 result.add(String.valueOf(object));
             }
@@ -448,22 +448,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Integer> getIntegerList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Integer> getIntegerList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Integer> result = new ArrayList<>();
+        final List<Integer> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Integer) {
                 result.add((Integer) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Integer.valueOf((String) object));
-                } catch (Exception ignored) {
+                } catch (final Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((int) (Character) object);
@@ -477,16 +477,16 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Boolean> getBooleanList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Boolean> getBooleanList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Boolean> result = new ArrayList<>();
+        final List<Boolean> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Boolean) {
                 result.add((Boolean) object);
             } else if (object instanceof String) {
@@ -503,22 +503,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Double> getDoubleList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Double> getDoubleList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Double> result = new ArrayList<>();
+        final List<Double> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Double) {
                 result.add((Double) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Double.valueOf((String) object));
-                } catch (Exception ignored) {
+                } catch (final Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((double) (Character) object);
@@ -532,22 +532,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Float> getFloatList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Float> getFloatList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Float> result = new ArrayList<>();
+        final List<Float> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Float) {
                 result.add((Float) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Float.valueOf((String) object));
-                } catch (Exception ignored) {
+                } catch (final Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((float) (Character) object);
@@ -561,22 +561,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Long> getLongList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Long> getLongList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Long> result = new ArrayList<>();
+        final List<Long> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Long) {
                 result.add((Long) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Long.valueOf((String) object));
-                } catch (Exception ignored) {
+                } catch (final Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((long) (Character) object);
@@ -590,22 +590,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Byte> getByteList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Byte> getByteList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Byte> result = new ArrayList<>();
+        final List<Byte> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Byte) {
                 result.add((Byte) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Byte.valueOf((String) object));
-                } catch (Exception ignored) {
+                } catch (final Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((byte) ((Character) object).charValue());
@@ -619,20 +619,20 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Character> getCharacterList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Character> getCharacterList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Character> result = new ArrayList<>();
+        final List<Character> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Character) {
                 result.add((Character) object);
             } else if (object instanceof String) {
-                String str = (String) object;
+                final String str = (String) object;
 
                 if (str.length() == 1) {
                     result.add(str.charAt(0));
@@ -647,22 +647,22 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Short> getShortList(@NotNull String path) {
-        List<?> list = getList(path);
+    public List<Short> getShortList(@NotNull final String path) {
+        final List<?> list = getList(path);
 
         if (list == null) {
             return new ArrayList<>(0);
         }
 
-        List<Short> result = new ArrayList<>();
+        final List<Short> result = new ArrayList<>();
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Short) {
                 result.add((Short) object);
             } else if (object instanceof String) {
                 try {
                     result.add(Short.valueOf((String) object));
-                } catch (Exception ignored) {
+                } catch (final Exception ignored) {
                 }
             } else if (object instanceof Character) {
                 result.add((short) ((Character) object).charValue());
@@ -676,15 +676,15 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     @NotNull
-    public List<Map<?, ?>> getMapList(@NotNull String path) {
-        List<?> list = getList(path);
-        List<Map<?, ?>> result = new ArrayList<>();
+    public List<Map<?, ?>> getMapList(@NotNull final String path) {
+        final List<?> list = getList(path);
+        final List<Map<?, ?>> result = new ArrayList<>();
 
         if (list == null) {
             return result;
         }
 
-        for (Object object : list) {
+        for (final Object object : list) {
             if (object instanceof Map) {
                 result.add((Map<?, ?>) object);
             }
@@ -696,120 +696,120 @@ public class MemorySection implements ConfigurationSection {
     // Bukkit
     @Nullable
     @Override
-    public <T> T getObject(@NotNull String path, @NotNull Class<T> clazz) {
+    public <T> T getObject(@NotNull final String path, @NotNull final Class<T> clazz) {
         Validate.notNull(clazz, "Class cannot be null");
-        Object def = getDefault(path);
+        final Object def = getDefault(path);
         return getObject(path, clazz, (clazz.isInstance(def)) ? clazz.cast(def) : null);
     }
 
     @Nullable
     @Override
-    public <T> T getObject(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
+    public <T> T getObject(@NotNull final String path, @NotNull final Class<T> clazz, @Nullable final T def) {
         Validate.notNull(clazz, "Class cannot be null");
-        Object val = get(path, def);
+        final Object val = get(path, def);
         return (clazz.isInstance(val)) ? clazz.cast(val) : def;
     }
 
     @Nullable
     @Override
-    public <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz) {
+    public <T extends ConfigurationSerializable> T getSerializable(@NotNull final String path, @NotNull final Class<T> clazz) {
         return getObject(path, clazz);
     }
 
     @Nullable
     @Override
-    public <T extends ConfigurationSerializable> T getSerializable(@NotNull String path, @NotNull Class<T> clazz, @Nullable T def) {
+    public <T extends ConfigurationSerializable> T getSerializable(@NotNull final String path, @NotNull final Class<T> clazz, @Nullable final T def) {
         return getObject(path, clazz, def);
     }
 
     @Override
     @Nullable
-    public Vector getVector(@NotNull String path) {
+    public Vector getVector(@NotNull final String path) {
         return getSerializable(path, Vector.class);
     }
 
     @Override
     @Nullable
-    public Vector getVector(@NotNull String path, @Nullable Vector def) {
+    public Vector getVector(@NotNull final String path, @Nullable final Vector def) {
         return getSerializable(path, Vector.class, def);
     }
 
     @Override
-    public boolean isVector(@NotNull String path) {
+    public boolean isVector(@NotNull final String path) {
         return getSerializable(path, Vector.class) != null;
     }
 
     @Override
     @Nullable
-    public OfflinePlayer getOfflinePlayer(@NotNull String path) {
+    public OfflinePlayer getOfflinePlayer(@NotNull final String path) {
         return getSerializable(path, OfflinePlayer.class);
     }
 
     @Override
     @Nullable
-    public OfflinePlayer getOfflinePlayer(@NotNull String path, @Nullable OfflinePlayer def) {
+    public OfflinePlayer getOfflinePlayer(@NotNull final String path, @Nullable final OfflinePlayer def) {
         return getSerializable(path, OfflinePlayer.class, def);
     }
 
     @Override
-    public boolean isOfflinePlayer(@NotNull String path) {
+    public boolean isOfflinePlayer(@NotNull final String path) {
         return getSerializable(path, OfflinePlayer.class) != null;
     }
 
     @Override
     @Nullable
-    public ItemStack getItemStack(@NotNull String path) {
+    public ItemStack getItemStack(@NotNull final String path) {
         return getSerializable(path, ItemStack.class);
     }
 
     @Override
     @Nullable
-    public ItemStack getItemStack(@NotNull String path, @Nullable ItemStack def) {
+    public ItemStack getItemStack(@NotNull final String path, @Nullable final ItemStack def) {
         return getSerializable(path, ItemStack.class, def);
     }
 
     @Override
-    public boolean isItemStack(@NotNull String path) {
+    public boolean isItemStack(@NotNull final String path) {
         return getSerializable(path, ItemStack.class) != null;
     }
 
     @Override
     @Nullable
-    public Color getColor(@NotNull String path) {
+    public Color getColor(@NotNull final String path) {
         return getSerializable(path, Color.class);
     }
 
     @Override
     @Nullable
-    public Color getColor(@NotNull String path, @Nullable Color def) {
+    public Color getColor(@NotNull final String path, @Nullable final Color def) {
         return getSerializable(path, Color.class, def);
     }
 
     @Override
-    public boolean isColor(@NotNull String path) {
+    public boolean isColor(@NotNull final String path) {
         return getSerializable(path, Color.class) != null;
     }
 
     @Override
     @Nullable
-    public Location getLocation(@NotNull String path) {
+    public Location getLocation(@NotNull final String path) {
         return getSerializable(path, Location.class);
     }
 
     @Override
     @Nullable
-    public Location getLocation(@NotNull String path, @Nullable Location def) {
+    public Location getLocation(@NotNull final String path, @Nullable final Location def) {
         return getSerializable(path, Location.class, def);
     }
 
     @Override
-    public boolean isLocation(@NotNull String path) {
+    public boolean isLocation(@NotNull final String path) {
         return getSerializable(path, Location.class) != null;
     }
 
     @Override
     @Nullable
-    public ConfigurationSection getConfigurationSection(@NotNull String path) {
+    public ConfigurationSection getConfigurationSection(@NotNull final String path) {
         Object val = get(path, null);
         if (val != null) {
             return (val instanceof ConfigurationSection) ? (ConfigurationSection) val : null;
@@ -820,12 +820,12 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Override
-    public boolean isConfigurationSection(@NotNull String path) {
-        Object val = get(path);
+    public boolean isConfigurationSection(@NotNull final String path) {
+        final Object val = get(path);
         return val instanceof ConfigurationSection;
     }
 
-    protected boolean isPrimitiveWrapper(@Nullable Object input) {
+    protected boolean isPrimitiveWrapper(@Nullable final Object input) {
         return input instanceof Integer || input instanceof Boolean
                 || input instanceof Character || input instanceof Byte
                 || input instanceof Short || input instanceof Double
@@ -833,44 +833,44 @@ public class MemorySection implements ConfigurationSection {
     }
 
     @Nullable
-    protected Object getDefault(@NotNull String path) {
+    protected Object getDefault(@NotNull final String path) {
         Validate.notNull(path, "Path cannot be null");
 
-        Configuration root = getRoot();
-        Configuration defaults = root == null ? null : root.getDefaults();
+        final Configuration root = getRoot();
+        final Configuration defaults = root == null ? null : root.getDefaults();
         return (defaults == null) ? null : defaults.get(createPath(this, path));
     }
 
-    protected void mapChildrenKeys(@NotNull Set<String> output, @NotNull ConfigurationSection section, boolean deep) {
+    protected void mapChildrenKeys(@NotNull final Set<String> output, @NotNull final ConfigurationSection section, final boolean deep) {
         if (section instanceof MemorySection) {
-            MemorySection sec = (MemorySection) section;
+            final MemorySection sec = (MemorySection) section;
 
-            for (Map.Entry<String, Object> entry : sec.map.entrySet()) {
+            for (final Map.Entry<String, Object> entry : sec.map.entrySet()) {
                 output.add(createPath(section, entry.getKey(), this));
 
                 if ((deep) && (entry.getValue() instanceof ConfigurationSection)) {
-                    ConfigurationSection subsection = (ConfigurationSection) entry.getValue();
+                    final ConfigurationSection subsection = (ConfigurationSection) entry.getValue();
                     mapChildrenKeys(output, subsection, true);
                 }
             }
         } else {
-            Set<String> keys = section.getKeys(deep);
+            final Set<String> keys = section.getKeys(deep);
 
-            for (String key : keys) {
+            for (final String key : keys) {
                 output.add(createPath(section, key, this));
             }
         }
     }
 
-    protected void mapChildrenValues(@NotNull Map<String, Object> output, @NotNull ConfigurationSection section, boolean deep) {
+    protected void mapChildrenValues(@NotNull final Map<String, Object> output, @NotNull final ConfigurationSection section, final boolean deep) {
         if (section instanceof MemorySection) {
-            MemorySection sec = (MemorySection) section;
+            final MemorySection sec = (MemorySection) section;
 
-            for (Map.Entry<String, Object> entry : sec.map.entrySet()) {
+            for (final Map.Entry<String, Object> entry : sec.map.entrySet()) {
                 // Because of the copyDefaults call potentially copying out of order, we must remove and then add in our saved order
                 // This means that default values we haven't set end up getting placed first
                 // See SPIGOT-4558 for an example using spigot.yml - watch subsections move around to default order
-                String childPath = createPath(section, entry.getKey(), this);
+                final String childPath = createPath(section, entry.getKey(), this);
                 output.remove(childPath);
                 output.put(childPath, entry.getValue());
 
@@ -881,9 +881,9 @@ public class MemorySection implements ConfigurationSection {
                 }
             }
         } else {
-            Map<String, Object> values = section.getValues(deep);
+            final Map<String, Object> values = section.getValues(deep);
 
-            for (Map.Entry<String, Object> entry : values.entrySet()) {
+            for (final Map.Entry<String, Object> entry : values.entrySet()) {
                 output.put(createPath(section, entry.getKey(), this), entry.getValue());
             }
         }
@@ -901,7 +901,7 @@ public class MemorySection implements ConfigurationSection {
      * @return Full path of the section from its root.
      */
     @NotNull
-    public static String createPath(@NotNull ConfigurationSection section, @Nullable String key) {
+    public static String createPath(@NotNull final ConfigurationSection section, @Nullable final String key) {
         return createPath(section, key, section.getRoot());
     }
 
@@ -918,25 +918,25 @@ public class MemorySection implements ConfigurationSection {
      * @return Full path of the section from its root.
      */
     @NotNull
-    public static String createPath(@NotNull ConfigurationSection section, @Nullable String key, @Nullable ConfigurationSection relativeTo) {
+    public static String createPath(@NotNull final ConfigurationSection section, @Nullable final String key, @Nullable final ConfigurationSection relativeTo) {
         Validate.notNull(section, "Cannot create path without a section");
-        Configuration root = section.getRoot();
+        final Configuration root = section.getRoot();
         if (root == null) {
             throw new IllegalStateException("Cannot create path without a root");
         }
-        char separator = root.options().pathSeparator();
+        final char separator = root.options().pathSeparator();
 
-        StringBuilder builder = new StringBuilder();
+        final StringBuilder builder = new StringBuilder();
 	    for (ConfigurationSection parent = section; (parent != null) && (parent != relativeTo); parent = parent.getParent()) {
-	        if (builder.length() > 0) {
+	        if (!builder.isEmpty()) {
 	            builder.insert(0, separator);
 	        }
 
 	        builder.insert(0, parent.getName());
 	    }
 
-	    if ((key != null) && (key.length() > 0)) {
-            if (builder.length() > 0) {
+	    if ((key != null) && (!key.isEmpty())) {
+            if (!builder.isEmpty()) {
                 builder.append(separator);
             }
 
@@ -948,7 +948,7 @@ public class MemorySection implements ConfigurationSection {
 
     @Override
     public String toString() {
-        Configuration root = getRoot();
+        final Configuration root = getRoot();
         return getClass().getSimpleName() +
             "[path='" +
             getCurrentPath() +
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
index e266fa96b69acd81291da7cf72aa2615d45fb4f4..6ada68ab232acedcd78a45babf5f28ca29f74abe 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfiguration.java
@@ -38,7 +38,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *
      * @param defaults Default value provider
      */
-    public FileConfiguration(@Nullable Configuration defaults) {
+    public FileConfiguration(@Nullable final Configuration defaults) {
         super(defaults);
     }
 
@@ -57,14 +57,14 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     any reason.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void save(@NotNull File file) throws IOException {
+    public void save(@NotNull final File file) throws IOException {
         Validate.notNull(file, "File cannot be null");
 
         Files.createParentDirs(file);
 
-        String data = saveToString();
+        final String data = saveToString();
 
-        try (Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8)) {
+        try (final Writer writer = new OutputStreamWriter(new FileOutputStream(file), Charsets.UTF_8)) {
             writer.write(data);
         }
     }
@@ -84,7 +84,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     any reason.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void save(@NotNull String file) throws IOException {
+    public void save(@NotNull final String file) throws IOException {
         Validate.notNull(file, "File cannot be null");
 
         save(new File(file));
@@ -116,7 +116,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     a valid Configuration.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void load(@NotNull File file) throws FileNotFoundException, IOException, InvalidConfigurationException {
+    public void load(@NotNull final File file) throws FileNotFoundException, IOException, InvalidConfigurationException {
         Validate.notNull(file, "File cannot be null");
 
         final FileInputStream stream = new FileInputStream(file);
@@ -137,10 +137,10 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *      represent a valid Configuration
      * @throws IllegalArgumentException thrown when reader is null
      */
-    public void load(@NotNull Reader reader) throws IOException, InvalidConfigurationException {
-        BufferedReader input = reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
+    public void load(@NotNull final Reader reader) throws IOException, InvalidConfigurationException {
+        final BufferedReader input = reader instanceof BufferedReader ? (BufferedReader) reader : new BufferedReader(reader);
 
-        StringBuilder builder = new StringBuilder();
+        final StringBuilder builder = new StringBuilder();
 
         try {
             String line;
@@ -174,7 +174,7 @@ public abstract class FileConfiguration extends MemoryConfiguration {
      *     a valid Configuration.
      * @throws IllegalArgumentException Thrown when file is null.
      */
-    public void load(@NotNull String file) throws FileNotFoundException, IOException, InvalidConfigurationException {
+    public void load(@NotNull final String file) throws FileNotFoundException, IOException, InvalidConfigurationException {
         Validate.notNull(file, "File cannot be null");
 
         load(new File(file));
diff --git a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
index eaa0afacecb438bbd8aa2771e4cffd6125aa83d1..42ac060d5a06f483c08b4ce3f8b5155cc3d0e922 100644
--- a/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/file/FileConfigurationOptions.java
@@ -13,7 +13,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
     private String header = null;
     private boolean copyHeader = true;
 
-    protected FileConfigurationOptions(@NotNull MemoryConfiguration configuration) {
+    protected FileConfigurationOptions(@NotNull final MemoryConfiguration configuration) {
         super(configuration);
     }
 
@@ -25,14 +25,14 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
 
     @NotNull
     @Override
-    public FileConfigurationOptions copyDefaults(boolean value) {
+    public FileConfigurationOptions copyDefaults(final boolean value) {
         super.copyDefaults(value);
         return this;
     }
 
     @NotNull
     @Override
-    public FileConfigurationOptions pathSeparator(char value) {
+    public FileConfigurationOptions pathSeparator(final char value) {
         super.pathSeparator(value);
         return this;
     }
@@ -72,7 +72,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public FileConfigurationOptions header(@Nullable String value) {
+    public FileConfigurationOptions header(@Nullable final String value) {
         this.header = value;
         return this;
     }
@@ -119,7 +119,7 @@ public class FileConfigurationOptions extends MemoryConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public FileConfigurationOptions copyHeader(boolean value) {
+    public FileConfigurationOptions copyHeader(final boolean value) {
         copyHeader = value;
 
         return this;
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
index d2b1d7904cd8ccbd0a250b5d2e24d88885851d81..af502498a8b94180030267760613ab61fd1099a2 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfiguration.java
@@ -6,6 +6,8 @@ import java.io.IOException;
 import java.io.Reader;
 import java.util.Map;
 import java.util.logging.Level;
+import java.util.regex.Pattern;
+
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.configuration.Configuration;
@@ -25,6 +27,7 @@ import org.yaml.snakeyaml.representer.Representer;
 public class YamlConfiguration extends FileConfiguration {
     protected static final String COMMENT_PREFIX = "# ";
     protected static final String BLANK_CONFIG = "{}\n";
+    private static final Pattern NEWLINE_REGEX = Pattern.compile("\r?\n");
     private final DumperOptions yamlOptions = new DumperOptions();
     private final LoaderOptions loaderOptions = new LoaderOptions();
     private final Representer yamlRepresenter = new YamlRepresenter();
@@ -37,7 +40,7 @@ public class YamlConfiguration extends FileConfiguration {
         yamlOptions.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
         yamlRepresenter.setDefaultFlowStyle(DumperOptions.FlowStyle.BLOCK);
 
-        String header = buildHeader();
+        final String header = buildHeader();
         String dump = yaml.dump(getValues(false));
 
         if (dump.equals(BLANK_CONFIG)) {
@@ -48,21 +51,21 @@ public class YamlConfiguration extends FileConfiguration {
     }
 
     @Override
-    public void loadFromString(@NotNull String contents) throws InvalidConfigurationException {
+    public void loadFromString(@NotNull final String contents) throws InvalidConfigurationException {
         Validate.notNull(contents, "Contents cannot be null");
 
-        Map<?, ?> input;
+        final Map<?, ?> input;
         try {
             loaderOptions.setMaxAliasesForCollections(Integer.MAX_VALUE); // SPIGOT-5881: Not ideal, but was default pre SnakeYAML 1.26
             input = yaml.load(contents);
-        } catch (YAMLException e) {
+        } catch (final YAMLException e) {
             throw new InvalidConfigurationException(e);
-        } catch (ClassCastException e) {
+        } catch (final ClassCastException e) {
             throw new InvalidConfigurationException("Top level is not a Map.");
         }
 
-        String header = parseHeader(contents);
-        if (header.length() > 0) {
+        final String header = parseHeader(contents);
+        if (!header.isEmpty()) {
             options().header(header);
         }
 
@@ -73,10 +76,10 @@ public class YamlConfiguration extends FileConfiguration {
         }
     }
 
-    protected void convertMapsToSections(@NotNull Map<?, ?> input, @NotNull ConfigurationSection section) {
-        for (Map.Entry<?, ?> entry : input.entrySet()) {
-            String key = entry.getKey().toString();
-            Object value = entry.getValue();
+    protected void convertMapsToSections(@NotNull final Map<?, ?> input, @NotNull final ConfigurationSection section) {
+        for (final Map.Entry<?, ?> entry : input.entrySet()) {
+            final String key = entry.getKey().toString();
+            final Object value = entry.getValue();
 
             if (value instanceof Map) {
                 convertMapsToSections((Map<?, ?>) value, section.createSection(key));
@@ -87,14 +90,14 @@ public class YamlConfiguration extends FileConfiguration {
     }
 
     @NotNull
-    protected String parseHeader(@NotNull String input) {
-        String[] lines = input.split("\r?\n", -1);
-        StringBuilder result = new StringBuilder();
+    protected String parseHeader(@NotNull final String input) {
+        final String[] lines = NEWLINE_REGEX.split(input, -1);
+        final StringBuilder result = new StringBuilder();
         boolean readingHeader = true;
         boolean foundHeader = false;
 
         for (int i = 0; (i < lines.length) && (readingHeader); i++) {
-            String line = lines[i];
+            final String line = lines[i];
 
             if (line.startsWith(COMMENT_PREFIX)) {
                 if (i > 0) {
@@ -106,7 +109,7 @@ public class YamlConfiguration extends FileConfiguration {
                 }
 
                 foundHeader = true;
-            } else if ((foundHeader) && (line.length() == 0)) {
+            } else if ((foundHeader) && (line.isEmpty())) {
                 result.append("\n");
             } else if (foundHeader) {
                 readingHeader = false;
@@ -119,16 +122,16 @@ public class YamlConfiguration extends FileConfiguration {
     @NotNull
     @Override
     protected String buildHeader() {
-        String header = options().header();
+        final String header = options().header();
 
         if (options().copyHeader()) {
-            Configuration def = getDefaults();
+            final Configuration def = getDefaults();
 
             if ((def instanceof FileConfiguration)) {
-                FileConfiguration filedefaults = (FileConfiguration) def;
-                String defaultsHeader = filedefaults.buildHeader();
+                final FileConfiguration filedefaults = (FileConfiguration) def;
+                final String defaultsHeader = filedefaults.buildHeader();
 
-                if (defaultsHeader.length() > 0) {
+                if (!defaultsHeader.isEmpty()) {
                     return defaultsHeader;
                 }
             }
@@ -138,14 +141,14 @@ public class YamlConfiguration extends FileConfiguration {
             return "";
         }
 
-        StringBuilder builder = new StringBuilder();
-        String[] lines = header.split("\r?\n", -1);
+        final StringBuilder builder = new StringBuilder();
+        final String[] lines = NEWLINE_REGEX.split(header, -1);
         boolean startedHeader = false;
 
         for (int i = lines.length - 1; i >= 0; i--) {
             builder.insert(0, "\n");
 
-            if ((startedHeader) || (lines[i].length() != 0)) {
+            if ((startedHeader) || (!lines[i].isEmpty())) {
                 builder.insert(0, lines[i]);
                 builder.insert(0, COMMENT_PREFIX);
                 startedHeader = true;
@@ -179,15 +182,15 @@ public class YamlConfiguration extends FileConfiguration {
      * @throws IllegalArgumentException Thrown if file is null
      */
     @NotNull
-    public static YamlConfiguration loadConfiguration(@NotNull File file) {
+    public static YamlConfiguration loadConfiguration(@NotNull final File file) {
         Validate.notNull(file, "File cannot be null");
 
-        YamlConfiguration config = new YamlConfiguration();
+        final YamlConfiguration config = new YamlConfiguration();
 
         try {
             config.load(file);
-        } catch (FileNotFoundException ignored) {
-        } catch (IOException | InvalidConfigurationException ex) {
+        } catch (final FileNotFoundException ignored) {
+        } catch (final IOException | InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load " + file, ex);
         }
 
@@ -206,14 +209,14 @@ public class YamlConfiguration extends FileConfiguration {
      * @throws IllegalArgumentException Thrown if stream is null
      */
     @NotNull
-    public static YamlConfiguration loadConfiguration(@NotNull Reader reader) {
+    public static YamlConfiguration loadConfiguration(@NotNull final Reader reader) {
         Validate.notNull(reader, "Stream cannot be null");
 
-        YamlConfiguration config = new YamlConfiguration();
+        final YamlConfiguration config = new YamlConfiguration();
 
         try {
             config.load(reader);
-        } catch (IOException | InvalidConfigurationException ex) {
+        } catch (final IOException | InvalidConfigurationException ex) {
             Bukkit.getLogger().log(Level.SEVERE, "Cannot load configuration from stream", ex);
         }
 
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
index b2bf9785af9ba798d859927f4b98ab9e86776d10..c16239306a175a30f90fabe0ee04f92b79c59059 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConfigurationOptions.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.Nullable;
 public class YamlConfigurationOptions extends FileConfigurationOptions {
     private int indent = 2;
 
-    protected YamlConfigurationOptions(@NotNull YamlConfiguration configuration) {
+    protected YamlConfigurationOptions(@NotNull final YamlConfiguration configuration) {
         super(configuration);
     }
 
@@ -23,28 +23,28 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
 
     @NotNull
     @Override
-    public YamlConfigurationOptions copyDefaults(boolean value) {
+    public YamlConfigurationOptions copyDefaults(final boolean value) {
         super.copyDefaults(value);
         return this;
     }
 
     @NotNull
     @Override
-    public YamlConfigurationOptions pathSeparator(char value) {
+    public YamlConfigurationOptions pathSeparator(final char value) {
         super.pathSeparator(value);
         return this;
     }
 
     @NotNull
     @Override
-    public YamlConfigurationOptions header(@Nullable String value) {
+    public YamlConfigurationOptions header(@Nullable final String value) {
         super.header(value);
         return this;
     }
 
     @NotNull
     @Override
-    public YamlConfigurationOptions copyHeader(boolean value) {
+    public YamlConfigurationOptions copyHeader(final boolean value) {
         super.copyHeader(value);
         return this;
     }
@@ -69,7 +69,7 @@ public class YamlConfigurationOptions extends FileConfigurationOptions {
      * @return This object, for chaining
      */
     @NotNull
-    public YamlConfigurationOptions indent(int value) {
+    public YamlConfigurationOptions indent(final int value) {
         Validate.isTrue(value >= 2, "Indent must be at least 2 characters");
         Validate.isTrue(value <= 9, "Indent cannot be greater than 9 characters");
 
diff --git a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
index 9aa393f4ea654257d9bca7cf8eece5be6f446fbb..dd836ea128ba6b9ddd947f3592708eac659ffc43 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlConstructor.java
@@ -20,22 +20,22 @@ public class YamlConstructor extends SafeConstructor {
 
         @Nullable
         @Override
-        public Object construct(@NotNull Node node) {
+        public Object construct(@NotNull final Node node) {
             if (node.isTwoStepsConstruction()) {
                 throw new YAMLException("Unexpected referential mapping structure. Node: " + node);
             }
 
-            Map<?, ?> raw = (Map<?, ?>) super.construct(node);
+            final Map<?, ?> raw = (Map<?, ?>) super.construct(node);
 
             if (raw.containsKey(ConfigurationSerialization.SERIALIZED_TYPE_KEY)) {
-                Map<String, Object> typed = new LinkedHashMap<>(raw.size());
-                for (Map.Entry<?, ?> entry : raw.entrySet()) {
+                final Map<String, Object> typed = new LinkedHashMap<>(raw.size());
+                for (final Map.Entry<?, ?> entry : raw.entrySet()) {
                     typed.put(entry.getKey().toString(), entry.getValue());
                 }
 
                 try {
                     return ConfigurationSerialization.deserializeObject(typed);
-                } catch (IllegalArgumentException ex) {
+                } catch (final IllegalArgumentException ex) {
                     throw new YAMLException("Could not deserialize object", ex);
                 }
             }
@@ -44,7 +44,7 @@ public class YamlConstructor extends SafeConstructor {
         }
 
         @Override
-        public void construct2ndStep(@NotNull Node node, @NotNull Object object) {
+        public void construct2ndStep(@NotNull final Node node, @NotNull final Object object) {
             throw new YAMLException("Unexpected referential mapping structure. Node: " + node);
         }
     }
diff --git a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
index 67a3c7b8fccd375990fbc41b0b7a72e1ca595383..6da04705928a0380312e3150d5d003275562f1a8 100644
--- a/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
+++ b/src/main/java/org/bukkit/configuration/file/YamlRepresenter.java
@@ -23,7 +23,7 @@ public class YamlRepresenter extends Representer {
 
         @NotNull
         @Override
-        public Node representData(@NotNull Object data) {
+        public Node representData(@NotNull final Object data) {
             return super.representData(((ConfigurationSection) data).getValues(false));
         }
     }
@@ -32,9 +32,9 @@ public class YamlRepresenter extends Representer {
 
         @NotNull
         @Override
-        public Node representData(@NotNull Object data) {
-            ConfigurationSerializable serializable = (ConfigurationSerializable) data;
-            Map<String, Object> values = new LinkedHashMap<>();
+        public Node representData(@NotNull final Object data) {
+            final ConfigurationSerializable serializable = (ConfigurationSerializable) data;
+            final Map<String, Object> values = new LinkedHashMap<>();
             values.put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(serializable.getClass()));
             values.putAll(serializable.serialize());
 
diff --git a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
index 68a70ca27568096b7f11ae2c9ff933dc445f0ac7..5a9bba91c569713c145448aa20f4afcf2407ece4 100644
--- a/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
+++ b/src/main/java/org/bukkit/configuration/serialization/ConfigurationSerialization.java
@@ -45,14 +45,14 @@ public class ConfigurationSerialization {
         registerClass(BoundingBox.class);
     }
 
-    protected ConfigurationSerialization(@NotNull Class<? extends ConfigurationSerializable> clazz) {
+    protected ConfigurationSerialization(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
         this.clazz = clazz;
     }
 
     @Nullable
-    protected Method getMethod(@NotNull String name, boolean isStatic) {
+    protected Method getMethod(@NotNull final String name, final boolean isStatic) {
         try {
-            Method method = clazz.getDeclaredMethod(name, Map.class);
+            final Method method = clazz.getDeclaredMethod(name, Map.class);
 
             if (!ConfigurationSerializable.class.isAssignableFrom(method.getReturnType())) {
                 return null;
@@ -62,7 +62,7 @@ public class ConfigurationSerialization {
             }
 
             return method;
-        } catch (NoSuchMethodException | SecurityException ex) {
+        } catch (final NoSuchMethodException | SecurityException ex) {
             return null;
         }
     }
@@ -71,22 +71,22 @@ public class ConfigurationSerialization {
     protected Constructor<? extends ConfigurationSerializable> getConstructor() {
         try {
             return clazz.getConstructor(Map.class);
-        } catch (NoSuchMethodException | SecurityException ex) {
+        } catch (final NoSuchMethodException | SecurityException ex) {
             return null;
         }
     }
 
     @Nullable
-    protected ConfigurationSerializable deserializeViaMethod(@NotNull Method method, @NotNull Map<String, ?> args) {
+    protected ConfigurationSerializable deserializeViaMethod(@NotNull final Method method, @NotNull final Map<String, ?> args) {
         try {
-            ConfigurationSerializable result = (ConfigurationSerializable) method.invoke(null, args);
+            final ConfigurationSerializable result = (ConfigurationSerializable) method.invoke(null, args);
 
             if (result == null) {
                 Logger.getLogger(ConfigurationSerialization.class.getName()).log(Level.SEVERE, "Could not call method '" + method.toString() + "' of " + clazz + " for deserialization: method returned null");
             } else {
                 return result;
             }
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             Logger.getLogger(ConfigurationSerialization.class.getName()).log(
                     Level.SEVERE,
                     "Could not call method '" + method.toString() + "' of " + clazz + " for deserialization",
@@ -97,10 +97,10 @@ public class ConfigurationSerialization {
     }
 
     @Nullable
-    protected ConfigurationSerializable deserializeViaCtor(@NotNull Constructor<? extends ConfigurationSerializable> ctor, @NotNull Map<String, ?> args) {
+    protected ConfigurationSerializable deserializeViaCtor(@NotNull final Constructor<? extends ConfigurationSerializable> ctor, @NotNull final Map<String, ?> args) {
         try {
             return ctor.newInstance(args);
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             Logger.getLogger(ConfigurationSerialization.class.getName()).log(
                     Level.SEVERE,
                     "Could not call constructor '" + ctor.toString() + "' of " + clazz + " for deserialization",
@@ -111,7 +111,7 @@ public class ConfigurationSerialization {
     }
 
     @Nullable
-    public ConfigurationSerializable deserialize(@NotNull Map<String, ?> args) {
+    public ConfigurationSerializable deserialize(@NotNull final Map<String, ?> args) {
         Validate.notNull(args, "Args must not be null");
 
         ConfigurationSerializable result = null;
@@ -132,7 +132,7 @@ public class ConfigurationSerialization {
         }
 
         if (result == null) {
-            Constructor<? extends ConfigurationSerializable> constructor = getConstructor();
+            final Constructor<? extends ConfigurationSerializable> constructor = getConstructor();
 
             if (constructor != null) {
                 result = deserializeViaCtor(constructor, args);
@@ -158,7 +158,7 @@ public class ConfigurationSerialization {
      * @return New instance of the specified class
      */
     @Nullable
-    public static ConfigurationSerializable deserializeObject(@NotNull Map<String, ?> args, @NotNull Class<? extends ConfigurationSerializable> clazz) {
+    public static ConfigurationSerializable deserializeObject(@NotNull final Map<String, ?> args, @NotNull final Class<? extends ConfigurationSerializable> clazz) {
         return new ConfigurationSerialization(clazz).deserialize(args);
     }
 
@@ -177,12 +177,12 @@ public class ConfigurationSerialization {
      * @return New instance of the specified class
      */
     @Nullable
-    public static ConfigurationSerializable deserializeObject(@NotNull Map<String, ?> args) {
+    public static ConfigurationSerializable deserializeObject(@NotNull final Map<String, ?> args) {
         Class<? extends ConfigurationSerializable> clazz = null;
 
         if (args.containsKey(SERIALIZED_TYPE_KEY)) {
             try {
-                String alias = (String) args.get(SERIALIZED_TYPE_KEY);
+                final String alias = (String) args.get(SERIALIZED_TYPE_KEY);
 
                 if (alias == null) {
                     throw new IllegalArgumentException("Cannot have null alias");
@@ -191,7 +191,7 @@ public class ConfigurationSerialization {
                 if (clazz == null) {
                     throw new IllegalArgumentException("Specified class does not exist ('" + alias + "')");
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 ex.fillInStackTrace();
                 throw ex;
             }
@@ -208,8 +208,8 @@ public class ConfigurationSerialization {
      *
      * @param clazz Class to register
      */
-    public static void registerClass(@NotNull Class<? extends ConfigurationSerializable> clazz) {
-        DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
+    public static void registerClass(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
+        final DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
 
         if (delegate == null) {
             registerClass(clazz, getAlias(clazz));
@@ -225,7 +225,7 @@ public class ConfigurationSerialization {
      * @param alias Alias to register as
      * @see SerializableAs
      */
-    public static void registerClass(@NotNull Class<? extends ConfigurationSerializable> clazz, @NotNull String alias) {
+    public static void registerClass(@NotNull final Class<? extends ConfigurationSerializable> clazz, @NotNull final String alias) {
         aliases.put(alias, clazz);
     }
 
@@ -234,7 +234,7 @@ public class ConfigurationSerialization {
      *
      * @param alias Alias to unregister
      */
-    public static void unregisterClass(@NotNull String alias) {
+    public static void unregisterClass(@NotNull final String alias) {
         aliases.remove(alias);
     }
 
@@ -244,7 +244,7 @@ public class ConfigurationSerialization {
      *
      * @param clazz Class to unregister
      */
-    public static void unregisterClass(@NotNull Class<? extends ConfigurationSerializable> clazz) {
+    public static void unregisterClass(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
         while (aliases.values().remove(clazz)) {
         }
     }
@@ -257,7 +257,7 @@ public class ConfigurationSerialization {
      * @return Registered class, or null if not found
      */
     @Nullable
-    public static Class<? extends ConfigurationSerializable> getClassByAlias(@NotNull String alias) {
+    public static Class<? extends ConfigurationSerializable> getClassByAlias(@NotNull final String alias) {
         return aliases.get(alias);
     }
 
@@ -269,7 +269,7 @@ public class ConfigurationSerialization {
      * @return Alias to use for the class
      */
     @NotNull
-    public static String getAlias(@NotNull Class<? extends ConfigurationSerializable> clazz) {
+    public static String getAlias(@NotNull final Class<? extends ConfigurationSerializable> clazz) {
         DelegateDeserialization delegate = clazz.getAnnotation(DelegateDeserialization.class);
 
         if (delegate != null) {
@@ -280,7 +280,7 @@ public class ConfigurationSerialization {
             }
         }
 
-	    SerializableAs alias = clazz.getAnnotation(SerializableAs.class);
+	    final SerializableAs alias = clazz.getAnnotation(SerializableAs.class);
 
 	    if (alias != null) {
 	        return alias.value();
diff --git a/src/main/java/org/bukkit/conversations/BooleanPrompt.java b/src/main/java/org/bukkit/conversations/BooleanPrompt.java
index de60fa65f4ad6785f8dce44284f94024d18d4f79..df9a8816a4a4d9c2ad39f096f76277ebb2445802 100644
--- a/src/main/java/org/bukkit/conversations/BooleanPrompt.java
+++ b/src/main/java/org/bukkit/conversations/BooleanPrompt.java
@@ -11,19 +11,15 @@ import org.jetbrains.annotations.Nullable;
  */
 public abstract class BooleanPrompt extends ValidatingPrompt {
 
-    public BooleanPrompt() {
-        super();
-    }
-
-    @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
-        String[] accepted = {/* Apache values: */ "true", "false", "on", "off", "yes", "no", /* Additional values: */ "y", "n", "1", "0", "right", "wrong", "correct", "incorrect", "valid", "invalid"};
+	@Override
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
+        final String[] accepted = {/* Apache values: */ "true", "false", "on", "off", "yes", "no", /* Additional values: */ "y", "n", "1", "0", "right", "wrong", "correct", "incorrect", "valid", "invalid"};
         return ArrayUtils.contains(accepted, input.toLowerCase());
     }
 
     @Nullable
     @Override
-    protected Prompt acceptValidatedInput(@NotNull ConversationContext context, @NotNull String input) {
+    protected Prompt acceptValidatedInput(@NotNull final ConversationContext context, @NotNull String input) {
         if (input.equalsIgnoreCase("y") || input.equals("1") || input.equalsIgnoreCase("right") || input.equalsIgnoreCase("correct") || input.equalsIgnoreCase("valid")) input = "true";
         return acceptValidatedInput(context, BooleanUtils.toBoolean(input));
     }
diff --git a/src/main/java/org/bukkit/conversations/Conversation.java b/src/main/java/org/bukkit/conversations/Conversation.java
index e23eb284322fe1c1635ad10016057411a85c4967..370b32d5c77884f51a2d6967fee1cbde3d47abdf 100644
--- a/src/main/java/org/bukkit/conversations/Conversation.java
+++ b/src/main/java/org/bukkit/conversations/Conversation.java
@@ -53,7 +53,7 @@ public class Conversation {
      * @param forWhom The entity for whom this conversation is mediating.
      * @param firstPrompt The first prompt in the conversation graph.
      */
-    public Conversation(@Nullable Plugin plugin, @NotNull Conversable forWhom, @Nullable Prompt firstPrompt) {
+    public Conversation(@Nullable final Plugin plugin, @NotNull final Conversable forWhom, @Nullable final Prompt firstPrompt) {
         this(plugin, forWhom, firstPrompt, new HashMap<>());
     }
 
@@ -66,7 +66,7 @@ public class Conversation {
      * @param initialSessionData Any initial values to put in the conversation
      *     context sessionData map.
      */
-    public Conversation(@Nullable Plugin plugin, @NotNull Conversable forWhom, @Nullable Prompt firstPrompt, @NotNull Map<Object, Object> initialSessionData) {
+    public Conversation(@Nullable final Plugin plugin, @NotNull final Conversable forWhom, @Nullable final Prompt firstPrompt, @NotNull final Map<Object, Object> initialSessionData) {
         this.firstPrompt = firstPrompt;
         this.context = new ConversationContext(plugin, forWhom, initialSessionData);
         this.modal = true;
@@ -104,7 +104,7 @@ public class Conversation {
      *
      * @param modal The new conversation modality.
      */
-    void setModal(boolean modal) {
+    void setModal(final boolean modal) {
         this.modal = modal;
     }
 
@@ -126,7 +126,7 @@ public class Conversation {
      *
      * @param localEchoEnabled The status of local echo.
      */
-    public void setLocalEchoEnabled(boolean localEchoEnabled) {
+    public void setLocalEchoEnabled(final boolean localEchoEnabled) {
         this.localEchoEnabled = localEchoEnabled;
     }
 
@@ -147,7 +147,7 @@ public class Conversation {
      *
      * @param prefix The ConversationPrefix to use.
      */
-    void setPrefix(@NotNull ConversationPrefix prefix) {
+    void setPrefix(@NotNull final ConversationPrefix prefix) {
         this.prefix = prefix;
     }
 
@@ -156,7 +156,7 @@ public class Conversation {
      *
      * @param canceller The {@link ConversationCanceller} to add.
      */
-    void addConversationCanceller(@NotNull ConversationCanceller canceller) {
+    void addConversationCanceller(@NotNull final ConversationCanceller canceller) {
         canceller.setConversation(this);
         this.cancellers.add(canceller);
     }
@@ -215,7 +215,7 @@ public class Conversation {
      *
      * @param input The user's chat text.
      */
-    public void acceptInput(@NotNull String input) {
+    public void acceptInput(@NotNull final String input) {
         if (currentPrompt != null) {
 
             // Echo the user's input
@@ -224,7 +224,7 @@ public class Conversation {
             }
 
             // Test for conversation abandonment based on input
-            for (ConversationCanceller canceller : cancellers) {
+            for (final ConversationCanceller canceller : cancellers) {
                 if (canceller.cancelBasedOnInput(context, input)) {
                     abandon(new ConversationAbandonedEvent(this, canceller));
                     return;
@@ -242,7 +242,7 @@ public class Conversation {
      *
      * @param listener The listener to add.
      */
-    public synchronized void addConversationAbandonedListener(@NotNull ConversationAbandonedListener listener) {
+    public synchronized void addConversationAbandonedListener(@NotNull final ConversationAbandonedListener listener) {
         abandonedListeners.add(listener);
     }
 
@@ -251,7 +251,7 @@ public class Conversation {
      *
      * @param listener The listener to remove.
      */
-    public synchronized void removeConversationAbandonedListener(@NotNull ConversationAbandonedListener listener) {
+    public synchronized void removeConversationAbandonedListener(@NotNull final ConversationAbandonedListener listener) {
         abandonedListeners.remove(listener);
     }
 
@@ -269,12 +269,12 @@ public class Conversation {
      *
      * @param details Details about why the conversation was abandoned
      */
-    public synchronized void abandon(@NotNull ConversationAbandonedEvent details) {
+    public synchronized void abandon(@NotNull final ConversationAbandonedEvent details) {
         if (!abandoned) {
             abandoned = true;
             currentPrompt = null;
             context.getForWhom().abandonConversation(this);
-            for (ConversationAbandonedListener listener : abandonedListeners) {
+            for (final ConversationAbandonedListener listener : abandonedListeners) {
                 listener.conversationAbandoned(details);
             }
         }
diff --git a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
index f6fc05e1ea65b5ea8932c61330fa399b44ca788b..f3f2b9edfad24ca6e8cbcea12c2da9dd7ee3abc1 100644
--- a/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
+++ b/src/main/java/org/bukkit/conversations/ConversationAbandonedEvent.java
@@ -14,11 +14,11 @@ public class ConversationAbandonedEvent extends EventObject {
     private final ConversationContext context;
     private final ConversationCanceller canceller;
 
-    public ConversationAbandonedEvent(@NotNull Conversation conversation) {
+    public ConversationAbandonedEvent(@NotNull final Conversation conversation) {
         this(conversation, null);
     }
 
-    public ConversationAbandonedEvent(@NotNull Conversation conversation, @Nullable ConversationCanceller canceller) {
+    public ConversationAbandonedEvent(@NotNull final Conversation conversation, @Nullable final ConversationCanceller canceller) {
         super(conversation);
         this.context = conversation.getContext();
         this.canceller = canceller;
diff --git a/src/main/java/org/bukkit/conversations/ConversationContext.java b/src/main/java/org/bukkit/conversations/ConversationContext.java
index 5bc0d36fe2a0f0e8f1cd3fb077f6b2285d60cbf4..b965a532b638c95b2c47aeccfecbacd1a4c6c95a 100644
--- a/src/main/java/org/bukkit/conversations/ConversationContext.java
+++ b/src/main/java/org/bukkit/conversations/ConversationContext.java
@@ -22,7 +22,7 @@ public class ConversationContext {
      * @param initialSessionData Any initial values to put in the sessionData
      *     map.
      */
-    public ConversationContext(@Nullable Plugin plugin, @NotNull Conversable forWhom, @NotNull Map<Object, Object> initialSessionData) {
+    public ConversationContext(@Nullable final Plugin plugin, @NotNull final Conversable forWhom, @NotNull final Map<Object, Object> initialSessionData) {
         this.plugin = plugin;
         this.forWhom = forWhom;
         this.sessionData = initialSessionData;
@@ -69,7 +69,7 @@ public class ConversationContext {
      * @return The requested session data.
      */
     @Nullable
-    public Object getSessionData(@NotNull Object key) {
+    public Object getSessionData(@NotNull final Object key) {
         return sessionData.get(key);
     }
 
@@ -81,7 +81,7 @@ public class ConversationContext {
      * @param key The session data key.
      * @param value The session data value.
      */
-    public void setSessionData(@NotNull Object key, @Nullable Object value) {
+    public void setSessionData(@NotNull final Object key, @Nullable final Object value) {
         sessionData.put(key, value);
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/ConversationFactory.java b/src/main/java/org/bukkit/conversations/ConversationFactory.java
index 04949fcfdca9a728ce210e10b3d96e7429b63a03..41bac6735e04959bd52fa63c3de125162118e1b6 100644
--- a/src/main/java/org/bukkit/conversations/ConversationFactory.java
+++ b/src/main/java/org/bukkit/conversations/ConversationFactory.java
@@ -37,7 +37,7 @@ public class ConversationFactory {
      *
      * @param plugin The plugin that owns the factory.
      */
-    public ConversationFactory(@NotNull Plugin plugin) {
+    public ConversationFactory(@NotNull final Plugin plugin) {
         this.plugin = plugin;
         isModal = true;
         localEchoEnabled = true;
@@ -60,7 +60,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withModality(boolean modal) {
+    public ConversationFactory withModality(final boolean modal) {
         isModal = modal;
         return this;
     }
@@ -74,7 +74,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withLocalEcho(boolean localEchoEnabled) {
+    public ConversationFactory withLocalEcho(final boolean localEchoEnabled) {
         this.localEchoEnabled = localEchoEnabled;
         return this;
     }
@@ -89,7 +89,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withPrefix(@NotNull ConversationPrefix prefix) {
+    public ConversationFactory withPrefix(@NotNull final ConversationPrefix prefix) {
         this.prefix = prefix;
         return this;
     }
@@ -104,7 +104,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withTimeout(int timeoutSeconds) {
+    public ConversationFactory withTimeout(final int timeoutSeconds) {
         return withConversationCanceller(new InactivityConversationCanceller(plugin, timeoutSeconds));
     }
 
@@ -117,7 +117,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withFirstPrompt(@Nullable Prompt firstPrompt) {
+    public ConversationFactory withFirstPrompt(@Nullable final Prompt firstPrompt) {
         this.firstPrompt = firstPrompt;
         return this;
     }
@@ -131,7 +131,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withInitialSessionData(@NotNull Map<Object, Object> initialSessionData) {
+    public ConversationFactory withInitialSessionData(@NotNull final Map<Object, Object> initialSessionData) {
         this.initialSessionData = initialSessionData;
         return this;
     }
@@ -144,7 +144,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withEscapeSequence(@NotNull String escapeSequence) {
+    public ConversationFactory withEscapeSequence(@NotNull final String escapeSequence) {
         return withConversationCanceller(new ExactMatchConversationCanceller(escapeSequence));
     }
 
@@ -155,7 +155,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory withConversationCanceller(@NotNull ConversationCanceller canceller) {
+    public ConversationFactory withConversationCanceller(@NotNull final ConversationCanceller canceller) {
         cancellers.add(canceller);
         return this;
     }
@@ -169,7 +169,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory thatExcludesNonPlayersWithMessage(@Nullable String playerOnlyMessage) {
+    public ConversationFactory thatExcludesNonPlayersWithMessage(@Nullable final String playerOnlyMessage) {
         this.playerOnlyMessage = playerOnlyMessage;
         return this;
     }
@@ -182,7 +182,7 @@ public class ConversationFactory {
      * @return This object.
      */
     @NotNull
-    public ConversationFactory addConversationAbandonedListener(@NotNull ConversationAbandonedListener listener) {
+    public ConversationFactory addConversationAbandonedListener(@NotNull final ConversationAbandonedListener listener) {
         abandonedListeners.add(listener);
         return this;
     }
@@ -195,28 +195,28 @@ public class ConversationFactory {
      * @return A new conversation.
      */
     @NotNull
-    public Conversation buildConversation(@NotNull Conversable forWhom) {
+    public Conversation buildConversation(@NotNull final Conversable forWhom) {
         //Abort conversation construction if we aren't supposed to talk to non-players
         if (playerOnlyMessage != null && !(forWhom instanceof Player)) {
             return new Conversation(plugin, forWhom, new NotPlayerMessagePrompt());
         }
 
         //Clone any initial session data
-        Map<Object, Object> copiedInitialSessionData = new HashMap<>(initialSessionData);
+        final Map<Object, Object> copiedInitialSessionData = new HashMap<>(initialSessionData);
 
         //Build and return a conversation
-        Conversation conversation = new Conversation(plugin, forWhom, firstPrompt, copiedInitialSessionData);
+        final Conversation conversation = new Conversation(plugin, forWhom, firstPrompt, copiedInitialSessionData);
         conversation.setModal(isModal);
         conversation.setLocalEchoEnabled(localEchoEnabled);
         conversation.setPrefix(prefix);
 
         //Clone the conversation cancellers
-        for (ConversationCanceller canceller : cancellers) {
+        for (final ConversationCanceller canceller : cancellers) {
             conversation.addConversationCanceller(canceller.clone());
         }
 
         //Add the ConversationAbandonedListeners
-        for (ConversationAbandonedListener listener : abandonedListeners) {
+        for (final ConversationAbandonedListener listener : abandonedListeners) {
             conversation.addConversationAbandonedListener(listener);
         }
 
@@ -227,13 +227,13 @@ public class ConversationFactory {
 
         @Override
         @NotNull
-        public String getPromptText(@NotNull ConversationContext context) {
+        public String getPromptText(@NotNull final ConversationContext context) {
             return playerOnlyMessage;
         }
 
         @Nullable
         @Override
-        protected Prompt getNextPrompt(@NotNull ConversationContext context) {
+        protected Prompt getNextPrompt(@NotNull final ConversationContext context) {
             return Prompt.END_OF_CONVERSATION;
         }
     }
diff --git a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
index 68745ae516e9db691a6ce76938db21589dc9ced3..3175ac77cf527096a7c108814fa0a6aac6c44b0b 100644
--- a/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ExactMatchConversationCanceller.java
@@ -15,15 +15,15 @@ public class ExactMatchConversationCanceller implements ConversationCanceller {
      * @param escapeSequence The string that, if entered by the user, will
      *     cancel the conversation.
      */
-    public ExactMatchConversationCanceller(@NotNull String escapeSequence) {
+    public ExactMatchConversationCanceller(@NotNull final String escapeSequence) {
         this.escapeSequence = escapeSequence;
     }
 
     @Override
-    public void setConversation(@NotNull Conversation conversation) {}
+    public void setConversation(@NotNull final Conversation conversation) {}
 
     @Override
-    public boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input) {
+    public boolean cancelBasedOnInput(@NotNull final ConversationContext context, @NotNull final String input) {
         return input.equals(escapeSequence);
     }
 
diff --git a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
index 9bf3336faea731c495bc7f64558654769731d6e1..a319836082971357032b39703b158ae6d09b7983 100644
--- a/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
+++ b/src/main/java/org/bukkit/conversations/FixedSetPrompt.java
@@ -21,7 +21,7 @@ public abstract class FixedSetPrompt extends ValidatingPrompt {
      * @param fixedSet A fixed set of strings, one of which the user must
      *     type.
      */
-    public FixedSetPrompt(@NotNull String... fixedSet) {
+    public FixedSetPrompt(@NotNull final String... fixedSet) {
         super();
         this.fixedSet = Arrays.asList(fixedSet);
     }
@@ -29,7 +29,7 @@ public abstract class FixedSetPrompt extends ValidatingPrompt {
     private FixedSetPrompt() {}
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return fixedSet.contains(input);
     }
 
diff --git a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
index 6be47b28c2c56cbfbe2a1c00f51dace985aa60c0..9c4446cb04864d76589bb4d1f409e1450e05eb87 100644
--- a/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/InactivityConversationCanceller.java
@@ -19,19 +19,19 @@ public class InactivityConversationCanceller implements ConversationCanceller {
      * @param plugin The owning plugin.
      * @param timeoutSeconds The number of seconds of inactivity to wait.
      */
-    public InactivityConversationCanceller(@NotNull Plugin plugin, int timeoutSeconds) {
+    public InactivityConversationCanceller(@NotNull final Plugin plugin, final int timeoutSeconds) {
         this.plugin = plugin;
         this.timeoutSeconds = timeoutSeconds;
     }
 
     @Override
-    public void setConversation(@NotNull Conversation conversation) {
+    public void setConversation(@NotNull final Conversation conversation) {
         this.conversation = conversation;
         startTimer();
     }
 
     @Override
-    public boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input) {
+    public boolean cancelBasedOnInput(@NotNull final ConversationContext context, @NotNull final String input) {
         // Reset the inactivity timer
         stopTimer();
         startTimer();
@@ -54,7 +54,7 @@ public class InactivityConversationCanceller implements ConversationCanceller {
                 startTimer();
             } else if (conversation.getState() == Conversation.ConversationState.STARTED) {
                 cancelling(conversation);
-                conversation.abandon(new ConversationAbandonedEvent(conversation, InactivityConversationCanceller.this));
+                conversation.abandon(new ConversationAbandonedEvent(conversation, this));
             }
         }, timeoutSeconds * 20L);
     }
@@ -76,7 +76,7 @@ public class InactivityConversationCanceller implements ConversationCanceller {
      *
      * @param conversation The conversation being abandoned.
      */
-    protected void cancelling(@NotNull Conversation conversation) {
+    protected void cancelling(@NotNull final Conversation conversation) {
 
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java b/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
index 0a289564a57d9b871a57d3611a228861fa1e91f4..98b5fa1c9eaed77307dfb0350e14bc0f0044709b 100644
--- a/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
+++ b/src/main/java/org/bukkit/conversations/ManuallyAbandonedConversationCanceller.java
@@ -9,12 +9,12 @@ import org.jetbrains.annotations.NotNull;
  */
 public class ManuallyAbandonedConversationCanceller implements ConversationCanceller {
     @Override
-    public void setConversation(@NotNull Conversation conversation) {
+    public void setConversation(@NotNull final Conversation conversation) {
         throw new UnsupportedOperationException();
     }
 
     @Override
-    public boolean cancelBasedOnInput(@NotNull ConversationContext context, @NotNull String input) {
+    public boolean cancelBasedOnInput(@NotNull final ConversationContext context, @NotNull final String input) {
         throw new UnsupportedOperationException();
     }
 
diff --git a/src/main/java/org/bukkit/conversations/MessagePrompt.java b/src/main/java/org/bukkit/conversations/MessagePrompt.java
index e066166e5d8a43676c675d7fe369c94dde22df6e..73e7a79ef6b989e96015eb7923048aac3d71eeeb 100644
--- a/src/main/java/org/bukkit/conversations/MessagePrompt.java
+++ b/src/main/java/org/bukkit/conversations/MessagePrompt.java
@@ -9,18 +9,14 @@ import org.jetbrains.annotations.Nullable;
  */
 public abstract class MessagePrompt implements Prompt {
 
-    public MessagePrompt() {
-        super();
-    }
-
-    /**
+	/**
      * Message prompts never wait for user input before continuing.
      *
      * @param context Context information about the conversation.
      * @return Always false.
      */
     @Override
-    public boolean blocksForInput(@NotNull ConversationContext context) {
+    public boolean blocksForInput(@NotNull final ConversationContext context) {
         return false;
     }
 
@@ -34,7 +30,7 @@ public abstract class MessagePrompt implements Prompt {
      */
     @Override
     @Nullable
-    public Prompt acceptInput(@NotNull ConversationContext context, @Nullable String input) {
+    public Prompt acceptInput(@NotNull final ConversationContext context, @Nullable final String input) {
         return getNextPrompt(context);
     }
 
diff --git a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
index 6ee8ebb1e56080ee91fcdaa49a5b8fcbef675be7..0307abef0b30d30903f5d2feb1d442ca708a2d0d 100644
--- a/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/NullConversationPrefix.java
@@ -16,7 +16,7 @@ public class NullConversationPrefix implements ConversationPrefix {
      */
     @Override
     @NotNull
-    public String getPrefix(@NotNull ConversationContext context) {
+    public String getPrefix(@NotNull final ConversationContext context) {
         return "";
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/NumericPrompt.java b/src/main/java/org/bukkit/conversations/NumericPrompt.java
index 5da28a3b43cd8c5ac707b978d7a7254e8f5ffb00..eb88b4ea5745f175b5b71b5a9a04049f794cf0ee 100644
--- a/src/main/java/org/bukkit/conversations/NumericPrompt.java
+++ b/src/main/java/org/bukkit/conversations/NumericPrompt.java
@@ -9,12 +9,9 @@ import org.jetbrains.annotations.Nullable;
  * Number} response from the user.
  */
 public abstract class NumericPrompt extends ValidatingPrompt {
-    public NumericPrompt() {
-        super();
-    }
 
-    @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+	@Override
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return NumberUtils.isNumber(input) && isNumberValid(context, NumberUtils.createNumber(input));
     }
 
@@ -26,16 +23,16 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @param input The number the player provided.
      * @return The validity of the player's input.
      */
-    protected boolean isNumberValid(@NotNull ConversationContext context, @NotNull Number input) {
+    protected boolean isNumberValid(@NotNull final ConversationContext context, @NotNull final Number input) {
         return true;
     }
 
     @Nullable
     @Override
-    protected Prompt acceptValidatedInput(@NotNull ConversationContext context, @NotNull String input) {
+    protected Prompt acceptValidatedInput(@NotNull final ConversationContext context, @NotNull final String input) {
         try {
             return acceptValidatedInput(context, NumberUtils.createNumber(input));
-        } catch (NumberFormatException e) {
+        } catch (final NumberFormatException e) {
             return acceptValidatedInput(context, NumberUtils.INTEGER_ZERO);
         }
     }
@@ -53,7 +50,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
 
     @Nullable
     @Override
-    protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected String getFailedValidationText(@NotNull final ConversationContext context, @NotNull final String invalidInput) {
         if (NumberUtils.isNumber(invalidInput)) {
             return getFailedValidationText(context, NumberUtils.createNumber(invalidInput));
         } else {
@@ -70,7 +67,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getInputNotNumericText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected String getInputNotNumericText(@NotNull final ConversationContext context, @NotNull final String invalidInput) {
         return null;
     }
 
@@ -83,7 +80,7 @@ public abstract class NumericPrompt extends ValidatingPrompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull Number invalidInput) {
+    protected String getFailedValidationText(@NotNull final ConversationContext context, @NotNull final Number invalidInput) {
         return null;
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
index 4078c49d2d6288fd29f6d35efadbb0cae7f801d5..03b8d58d1053fe1e7325eaa0f5af6454e0fe906d 100644
--- a/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
+++ b/src/main/java/org/bukkit/conversations/PlayerNamePrompt.java
@@ -12,19 +12,19 @@ import org.jetbrains.annotations.Nullable;
 public abstract class PlayerNamePrompt extends ValidatingPrompt {
     private final Plugin plugin;
 
-    public PlayerNamePrompt(@NotNull Plugin plugin) {
+    public PlayerNamePrompt(@NotNull final Plugin plugin) {
         super();
         this.plugin = plugin;
     }
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return plugin.getServer().getPlayer(input) != null;
     }
 
     @Nullable
     @Override
-    protected Prompt acceptValidatedInput(@NotNull ConversationContext context, @NotNull String input) {
+    protected Prompt acceptValidatedInput(@NotNull final ConversationContext context, @NotNull final String input) {
         return acceptValidatedInput(context, plugin.getServer().getPlayer(input));
     }
 
diff --git a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
index 64b4f837d27b1b0815e5bb57ccc637db22cc3b6c..e66a3a75208a0f393a2830acf740610d45bc89cb 100644
--- a/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
+++ b/src/main/java/org/bukkit/conversations/PluginNameConversationPrefix.java
@@ -16,11 +16,11 @@ public class PluginNameConversationPrefix implements ConversationPrefix {
 
     private final String cachedPrefix;
 
-    public PluginNameConversationPrefix(@NotNull Plugin plugin) {
+    public PluginNameConversationPrefix(@NotNull final Plugin plugin) {
         this(plugin, " > ", ChatColor.LIGHT_PURPLE);
     }
 
-    public PluginNameConversationPrefix(@NotNull Plugin plugin, @NotNull String separator, @NotNull ChatColor prefixColor) {
+    public PluginNameConversationPrefix(@NotNull final Plugin plugin, @NotNull final String separator, @NotNull final ChatColor prefixColor) {
         this.separator = separator;
         this.prefixColor = prefixColor;
         this.plugin = plugin;
@@ -36,7 +36,7 @@ public class PluginNameConversationPrefix implements ConversationPrefix {
      */
     @Override
     @NotNull
-    public String getPrefix(@NotNull ConversationContext context) {
+    public String getPrefix(@NotNull final ConversationContext context) {
         return cachedPrefix;
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/RegexPrompt.java b/src/main/java/org/bukkit/conversations/RegexPrompt.java
index 6b3f1e4591d68fe6698cd960b97b04c82f67366d..d3207940467a36041462b92e616da5d819673da0 100644
--- a/src/main/java/org/bukkit/conversations/RegexPrompt.java
+++ b/src/main/java/org/bukkit/conversations/RegexPrompt.java
@@ -11,11 +11,11 @@ public abstract class RegexPrompt extends ValidatingPrompt {
 
     private Pattern pattern;
 
-    public RegexPrompt(@NotNull String regex) {
+    public RegexPrompt(@NotNull final String regex) {
         this(Pattern.compile(regex));
     }
 
-    public RegexPrompt(@NotNull Pattern pattern) {
+    public RegexPrompt(@NotNull final Pattern pattern) {
         super();
         this.pattern = pattern;
     }
@@ -23,7 +23,7 @@ public abstract class RegexPrompt extends ValidatingPrompt {
     private RegexPrompt() {}
 
     @Override
-    protected boolean isInputValid(@NotNull ConversationContext context, @NotNull String input) {
+    protected boolean isInputValid(@NotNull final ConversationContext context, @NotNull final String input) {
         return pattern.matcher(input).matches();
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/StringPrompt.java b/src/main/java/org/bukkit/conversations/StringPrompt.java
index f9b86d6d5bd1263c0bcf419a9d2923b8a4c35916..9919090f1f191f3b82e6949ea5a70a65c470edad 100644
--- a/src/main/java/org/bukkit/conversations/StringPrompt.java
+++ b/src/main/java/org/bukkit/conversations/StringPrompt.java
@@ -15,7 +15,7 @@ public abstract class StringPrompt implements Prompt {
      * @return True.
      */
     @Override
-    public boolean blocksForInput(@NotNull ConversationContext context) {
+    public boolean blocksForInput(@NotNull final ConversationContext context) {
         return true;
     }
 }
diff --git a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
index c57b6cb479fdaf135d8153605268b615b31325d7..18a44b374bf991109e96b7cef7c051a1c96d6c9d 100644
--- a/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
+++ b/src/main/java/org/bukkit/conversations/ValidatingPrompt.java
@@ -10,11 +10,8 @@ import org.jetbrains.annotations.Nullable;
  * a valid response.
  */
 public abstract class ValidatingPrompt implements Prompt {
-    public ValidatingPrompt() {
-        super();
-    }
 
-    /**
+	/**
      * Accepts and processes input from the user and validates it. If
      * validation fails, this prompt is returned for re-execution, otherwise
      * the next Prompt in the prompt graph is returned.
@@ -25,11 +22,11 @@ public abstract class ValidatingPrompt implements Prompt {
      */
     @Override
     @Nullable
-    public Prompt acceptInput(@NotNull ConversationContext context, @Nullable String input) {
+    public Prompt acceptInput(@NotNull final ConversationContext context, @Nullable final String input) {
         if (isInputValid(context, input)) {
             return acceptValidatedInput(context, input);
         } else {
-            String failPrompt = getFailedValidationText(context, input);
+            final String failPrompt = getFailedValidationText(context, input);
             if (failPrompt != null) {
                 context.getForWhom().sendRawMessage(ChatColor.RED + failPrompt);
             }
@@ -45,7 +42,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * @return True.
      */
     @Override
-    public boolean blocksForInput(@NotNull ConversationContext context) {
+    public boolean blocksForInput(@NotNull final ConversationContext context) {
         return true;
     }
 
@@ -79,7 +76,7 @@ public abstract class ValidatingPrompt implements Prompt {
      * @return A message explaining how to correct the input.
      */
     @Nullable
-    protected String getFailedValidationText(@NotNull ConversationContext context, @NotNull String invalidInput) {
+    protected String getFailedValidationText(@NotNull final ConversationContext context, @NotNull final String invalidInput) {
         return null;
     }
 }
diff --git a/src/main/java/org/bukkit/enchantments/Enchantment.java b/src/main/java/org/bukkit/enchantments/Enchantment.java
index 8bd8239d39384ced19d7979485115a58565345a2..71abf032bf393cb6b9e642c3090e83af9b16e93f 100644
--- a/src/main/java/org/bukkit/enchantments/Enchantment.java
+++ b/src/main/java/org/bukkit/enchantments/Enchantment.java
@@ -211,7 +211,7 @@ public abstract class Enchantment implements Keyed {
     private static boolean acceptingNew = true;
     private final NamespacedKey key;
 
-    public Enchantment(@NotNull NamespacedKey key) {
+    public Enchantment(@NotNull final NamespacedKey key) {
         this.key = key;
     }
 
@@ -310,7 +310,7 @@ public abstract class Enchantment implements Keyed {
     // Paper end
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -338,7 +338,7 @@ public abstract class Enchantment implements Keyed {
      *
      * @param enchantment Enchantment to register
      */
-    public static void registerEnchantment(@NotNull Enchantment enchantment) {
+    public static void registerEnchantment(@NotNull final Enchantment enchantment) {
         if (byKey.containsKey(enchantment.key) || byName.containsKey(enchantment.getName())) {
             throw new IllegalArgumentException("Cannot set already-set enchantment");
         } else if (!isAcceptingRegistrations()) {
@@ -373,7 +373,7 @@ public abstract class Enchantment implements Keyed {
      */
     @Contract("null -> null")
     @Nullable
-    public static Enchantment getByKey(@Nullable NamespacedKey key) {
+    public static Enchantment getByKey(@Nullable final NamespacedKey key) {
         return byKey.get(key);
     }
 
@@ -387,7 +387,7 @@ public abstract class Enchantment implements Keyed {
     @Deprecated
     @Contract("null -> null")
     @Nullable
-    public static Enchantment getByName(@Nullable String name) {
+    public static Enchantment getByName(@Nullable final String name) {
         return byName.get(name);
     }
 
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java b/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java
index 76761b4b4a4ef066f92f0dbcc77bfcd8179e55bc..dffd3fcb19dadd09cbb73ce2cc69fd11a07b5b62 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentOffer.java
@@ -12,7 +12,7 @@ public class EnchantmentOffer {
     private int enchantmentLevel;
     private int cost;
 
-    public EnchantmentOffer(@NotNull Enchantment enchantment, int enchantmentLevel, int cost) {
+    public EnchantmentOffer(@NotNull final Enchantment enchantment, final int enchantmentLevel, final int cost) {
         this.enchantment = enchantment;
         this.enchantmentLevel = enchantmentLevel;
         this.cost = cost;
@@ -33,7 +33,7 @@ public class EnchantmentOffer {
      *
      * @param enchantment type of the enchantment
      */
-    public void setEnchantment(@NotNull Enchantment enchantment) {
+    public void setEnchantment(@NotNull final Enchantment enchantment) {
         Validate.notNull(enchantment, "The enchantment may not be null!");
 
         this.enchantment = enchantment;
@@ -53,7 +53,7 @@ public class EnchantmentOffer {
      *
      * @param enchantmentLevel level of the enchantment
      */
-    public void setEnchantmentLevel(int enchantmentLevel) {
+    public void setEnchantmentLevel(final int enchantmentLevel) {
         Validate.isTrue(enchantmentLevel > 0, "The enchantment level must be greater than 0!");
 
         this.enchantmentLevel = enchantmentLevel;
@@ -75,7 +75,7 @@ public class EnchantmentOffer {
      *
      * @param cost cost for this enchantment
      */
-    public void setCost(int cost) {
+    public void setCost(final int cost) {
         Validate.isTrue(cost > 0, "The cost must be greater than 0!");
 
         this.cost = cost;
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
index 635e07a6b0e255c4fdad58ba9d281c807af4e229..5f71622d20ca158f45afed55bf08e3162c47fb81 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentTarget.java
@@ -16,8 +16,8 @@ public enum EnchantmentTarget {
     @Deprecated
     ALL {
         @Override
-        public boolean includes(@NotNull Material item) {
-            for (EnchantmentTarget target : EnchantmentTarget.values()) {
+        public boolean includes(@NotNull final Material item) {
+            for (final EnchantmentTarget target : EnchantmentTarget.values()) {
                 if (target != this && target.includes(item)) {
                     return true;
                 }
@@ -32,7 +32,7 @@ public enum EnchantmentTarget {
      */
     ARMOR {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return ARMOR_FEET.includes(item)
                 || ARMOR_LEGS.includes(item)
                 || ARMOR_HEAD.includes(item)
@@ -45,13 +45,13 @@ public enum EnchantmentTarget {
      */
     ARMOR_FEET {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.LEATHER_BOOTS)
-                || item.equals(Material.CHAINMAIL_BOOTS)
-                || item.equals(Material.IRON_BOOTS)
-                || item.equals(Material.DIAMOND_BOOTS)
-                || item.equals(Material.GOLDEN_BOOTS)
-                || item.equals(Material.NETHERITE_BOOTS);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.LEATHER_BOOTS
+                || item == Material.CHAINMAIL_BOOTS
+                || item == Material.IRON_BOOTS
+                || item == Material.DIAMOND_BOOTS
+                || item == Material.GOLDEN_BOOTS
+                || item == Material.NETHERITE_BOOTS;
         }
     },
 
@@ -60,13 +60,13 @@ public enum EnchantmentTarget {
      */
     ARMOR_LEGS {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.LEATHER_LEGGINGS)
-                || item.equals(Material.CHAINMAIL_LEGGINGS)
-                || item.equals(Material.IRON_LEGGINGS)
-                || item.equals(Material.DIAMOND_LEGGINGS)
-                || item.equals(Material.GOLDEN_LEGGINGS)
-                || item.equals(Material.NETHERITE_LEGGINGS);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.LEATHER_LEGGINGS
+                || item == Material.CHAINMAIL_LEGGINGS
+                || item == Material.IRON_LEGGINGS
+                || item == Material.DIAMOND_LEGGINGS
+                || item == Material.GOLDEN_LEGGINGS
+                || item == Material.NETHERITE_LEGGINGS;
         }
     },
 
@@ -75,13 +75,13 @@ public enum EnchantmentTarget {
      */
     ARMOR_TORSO {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.LEATHER_CHESTPLATE)
-                || item.equals(Material.CHAINMAIL_CHESTPLATE)
-                || item.equals(Material.IRON_CHESTPLATE)
-                || item.equals(Material.DIAMOND_CHESTPLATE)
-                || item.equals(Material.GOLDEN_CHESTPLATE)
-                || item.equals(Material.NETHERITE_CHESTPLATE);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.LEATHER_CHESTPLATE
+                || item == Material.CHAINMAIL_CHESTPLATE
+                || item == Material.IRON_CHESTPLATE
+                || item == Material.DIAMOND_CHESTPLATE
+                || item == Material.GOLDEN_CHESTPLATE
+                || item == Material.NETHERITE_CHESTPLATE;
         }
     },
 
@@ -90,14 +90,14 @@ public enum EnchantmentTarget {
      */
     ARMOR_HEAD {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.LEATHER_HELMET)
-                || item.equals(Material.CHAINMAIL_HELMET)
-                || item.equals(Material.DIAMOND_HELMET)
-                || item.equals(Material.IRON_HELMET)
-                || item.equals(Material.GOLDEN_HELMET)
-                || item.equals(Material.TURTLE_HELMET)
-                || item.equals(Material.NETHERITE_HELMET);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.LEATHER_HELMET
+                || item == Material.CHAINMAIL_HELMET
+                || item == Material.DIAMOND_HELMET
+                || item == Material.IRON_HELMET
+                || item == Material.GOLDEN_HELMET
+                || item == Material.TURTLE_HELMET
+                || item == Material.NETHERITE_HELMET;
         }
     },
 
@@ -106,13 +106,13 @@ public enum EnchantmentTarget {
      */
     WEAPON {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.WOODEN_SWORD)
-                || item.equals(Material.STONE_SWORD)
-                || item.equals(Material.IRON_SWORD)
-                || item.equals(Material.DIAMOND_SWORD)
-                || item.equals(Material.GOLDEN_SWORD)
-                || item.equals(Material.NETHERITE_SWORD);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.WOODEN_SWORD
+                || item == Material.STONE_SWORD
+                || item == Material.IRON_SWORD
+                || item == Material.DIAMOND_SWORD
+                || item == Material.GOLDEN_SWORD
+                || item == Material.NETHERITE_SWORD;
         }
     },
 
@@ -121,31 +121,31 @@ public enum EnchantmentTarget {
      */
     TOOL {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.WOODEN_SHOVEL)
-                || item.equals(Material.STONE_SHOVEL)
-                || item.equals(Material.IRON_SHOVEL)
-                || item.equals(Material.DIAMOND_SHOVEL)
-                || item.equals(Material.GOLDEN_SHOVEL)
-                || item.equals(Material.NETHERITE_SHOVEL)
-                || item.equals(Material.WOODEN_PICKAXE)
-                || item.equals(Material.STONE_PICKAXE)
-                || item.equals(Material.IRON_PICKAXE)
-                || item.equals(Material.DIAMOND_PICKAXE)
-                || item.equals(Material.GOLDEN_PICKAXE)
-                || item.equals(Material.NETHERITE_PICKAXE)
-                || item.equals(Material.WOODEN_AXE)
-                || item.equals(Material.STONE_AXE)
-                || item.equals(Material.IRON_AXE)
-                || item.equals(Material.DIAMOND_AXE)
-                || item.equals(Material.GOLDEN_AXE)
-                || item.equals(Material.NETHERITE_AXE)
-                || item.equals(Material.WOODEN_HOE)
-                || item.equals(Material.STONE_HOE)
-                || item.equals(Material.IRON_HOE)
-                || item.equals(Material.DIAMOND_HOE)
-                || item.equals(Material.GOLDEN_HOE)
-                || item.equals(Material.NETHERITE_HOE);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.WOODEN_SHOVEL
+                || item == Material.STONE_SHOVEL
+                || item == Material.IRON_SHOVEL
+                || item == Material.DIAMOND_SHOVEL
+                || item == Material.GOLDEN_SHOVEL
+                || item == Material.NETHERITE_SHOVEL
+                || item == Material.WOODEN_PICKAXE
+                || item == Material.STONE_PICKAXE
+                || item == Material.IRON_PICKAXE
+                || item == Material.DIAMOND_PICKAXE
+                || item == Material.GOLDEN_PICKAXE
+                || item == Material.NETHERITE_PICKAXE
+                || item == Material.WOODEN_AXE
+                || item == Material.STONE_AXE
+                || item == Material.IRON_AXE
+                || item == Material.DIAMOND_AXE
+                || item == Material.GOLDEN_AXE
+                || item == Material.NETHERITE_AXE
+                || item == Material.WOODEN_HOE
+                || item == Material.STONE_HOE
+                || item == Material.IRON_HOE
+                || item == Material.DIAMOND_HOE
+                || item == Material.GOLDEN_HOE
+                || item == Material.NETHERITE_HOE;
         }
     },
 
@@ -154,8 +154,8 @@ public enum EnchantmentTarget {
      */
     BOW {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.BOW);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.BOW;
         }
     },
 
@@ -164,8 +164,8 @@ public enum EnchantmentTarget {
      */
     FISHING_ROD {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.FISHING_ROD);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.FISHING_ROD;
         }
     },
 
@@ -174,7 +174,7 @@ public enum EnchantmentTarget {
      */
     BREAKABLE {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return item.getMaxDurability() > 0 && item.getMaxStackSize() == 1;
         }
     },
@@ -184,17 +184,17 @@ public enum EnchantmentTarget {
      */
     WEARABLE {
         @Override
-        public boolean includes(@NotNull Material item) {
+        public boolean includes(@NotNull final Material item) {
             return ARMOR.includes(item)
-                    || item.equals(Material.ELYTRA)
-                    || item.equals(Material.CARVED_PUMPKIN)
-                    || item.equals(Material.JACK_O_LANTERN)
-                    || item.equals(Material.SKELETON_SKULL)
-                    || item.equals(Material.WITHER_SKELETON_SKULL)
-                    || item.equals(Material.ZOMBIE_HEAD)
-                    || item.equals(Material.PLAYER_HEAD)
-                    || item.equals(Material.CREEPER_HEAD)
-                    || item.equals(Material.DRAGON_HEAD);
+                    || item == Material.ELYTRA
+                    || item == Material.CARVED_PUMPKIN
+                    || item == Material.JACK_O_LANTERN
+                    || item == Material.SKELETON_SKULL
+                    || item == Material.WITHER_SKELETON_SKULL
+                    || item == Material.ZOMBIE_HEAD
+                    || item == Material.PLAYER_HEAD
+                    || item == Material.CREEPER_HEAD
+                    || item == Material.DRAGON_HEAD;
         }
     },
 
@@ -203,8 +203,8 @@ public enum EnchantmentTarget {
      */
     TRIDENT {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.TRIDENT);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.TRIDENT;
         }
     },
 
@@ -213,8 +213,8 @@ public enum EnchantmentTarget {
      */
     CROSSBOW {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return item.equals(Material.CROSSBOW);
+        public boolean includes(@NotNull final Material item) {
+            return item == Material.CROSSBOW;
         }
     },
 
@@ -223,8 +223,8 @@ public enum EnchantmentTarget {
      */
     VANISHABLE {
         @Override
-        public boolean includes(@NotNull Material item) {
-            return BREAKABLE.includes(item) || (WEARABLE.includes(item) && !item.equals(Material.ELYTRA)) || item.equals(Material.COMPASS);
+        public boolean includes(@NotNull final Material item) {
+            return BREAKABLE.includes(item) || (WEARABLE.includes(item) && item != Material.ELYTRA) || item == Material.COMPASS;
         }
     };
 
@@ -242,7 +242,7 @@ public enum EnchantmentTarget {
      * @param item The item to check
      * @return True if the target includes the item
      */
-    public boolean includes(@NotNull ItemStack item) {
+    public boolean includes(@NotNull final ItemStack item) {
         return includes(item.getType());
     }
 }
diff --git a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
index 4d5f0837bd0e02a30c943d8969fb6b13452322e0..b3206342c728366a57cfe4f86f50b27a9a502026 100644
--- a/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
+++ b/src/main/java/org/bukkit/enchantments/EnchantmentWrapper.java
@@ -8,7 +8,7 @@ import org.jetbrains.annotations.NotNull;
  * A simple wrapper for ease of selecting {@link Enchantment}s
  */
 public class EnchantmentWrapper extends Enchantment {
-    public EnchantmentWrapper(@NotNull String name) {
+    public EnchantmentWrapper(@NotNull final String name) {
         super(NamespacedKey.minecraft(name));
     }
 
@@ -39,7 +39,7 @@ public class EnchantmentWrapper extends Enchantment {
     }
 
     @Override
-    public boolean canEnchantItem(@NotNull ItemStack item) {
+    public boolean canEnchantItem(@NotNull final ItemStack item) {
         return getEnchantment().canEnchantItem(item);
     }
 
@@ -60,13 +60,13 @@ public class EnchantmentWrapper extends Enchantment {
     }
 
     @Override
-    public boolean conflictsWith(@NotNull Enchantment other) {
+    public boolean conflictsWith(@NotNull final Enchantment other) {
         return getEnchantment().conflictsWith(other);
     }
     // Paper start
     @NotNull
     @Override
-    public net.kyori.adventure.text.Component displayName(int level) {
+    public net.kyori.adventure.text.Component displayName(final int level) {
         return getEnchantment().displayName(level);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/entity/AbstractArrow.java b/src/main/java/org/bukkit/entity/AbstractArrow.java
index 5185fa3a781f5374c4fa3a292191b4244c6f2a12..4afa582d8fbb62c728715ec8f4407417af7aa2cc 100644
--- a/src/main/java/org/bukkit/entity/AbstractArrow.java
+++ b/src/main/java/org/bukkit/entity/AbstractArrow.java
@@ -170,7 +170,7 @@ public interface AbstractArrow extends Projectile {
      * @deprecated Use {@link Arrow#setPickupStatus(PickupStatus)} with {@link PickupStatus} as an upstream compatible replacement for this function
      */
     @Deprecated
-    default void setPickupRule(PickupRule rule) {
+    default void setPickupRule(final PickupRule rule) {
         this.setPickupStatus(PickupStatus.valueOf(rule.name()));
     }
 
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
index a6101c39d72b83e98201ea2d1a38b0e750cd9655..c7454cd7898c74ea2c14b74e6425d0f5e8eb574c 100644
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -161,7 +161,7 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return A future that will be completed with the result of the teleport
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc) {
+    default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull final Location loc) {
         return teleportAsync(loc, TeleportCause.PLUGIN);
     }
     /**
@@ -171,8 +171,8 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Persistent
      * @return A future that will be completed with the result of the teleport
      */
     @NotNull
-    default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull Location loc, @NotNull TeleportCause cause) {
-        java.util.concurrent.CompletableFuture<Boolean> future = new java.util.concurrent.CompletableFuture<>();
+    default java.util.concurrent.CompletableFuture<Boolean> teleportAsync(@NotNull final Location loc, @NotNull final TeleportCause cause) {
+        final java.util.concurrent.CompletableFuture<Boolean> future = new java.util.concurrent.CompletableFuture<>();
         loc.getWorld().getChunkAtAsyncUrgently(loc).thenAccept((chunk) -> future.complete(teleport(loc, cause))).exceptionally(ex -> {
             future.completeExceptionally(ex);
             return null;
diff --git a/src/main/java/org/bukkit/entity/EntityType.java b/src/main/java/org/bukkit/entity/EntityType.java
index 706785b290fca73f5c7fb3a70e0b3f048dc300b5..1bc4a7f5a6b56bb9511a6ea61fa927b44024caba 100644
--- a/src/main/java/org/bukkit/entity/EntityType.java
+++ b/src/main/java/org/bukkit/entity/EntityType.java
@@ -292,7 +292,7 @@ public enum EntityType implements Keyed {
     private static final Map<Short, EntityType> ID_MAP = new HashMap<>();
 
     static {
-        for (EntityType type : values()) {
+        for (final EntityType type : values()) {
             if (type.name != null) {
                 NAME_MAP.put(type.name.toLowerCase(java.util.Locale.ENGLISH), type);
             }
@@ -317,11 +317,11 @@ public enum EntityType implements Keyed {
         NAME_MAP.put("zombie_pigman", ZOMBIFIED_PIGLIN);
     }
 
-    EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId) {
+    EntityType(/*@Nullable*/ final String name, /*@Nullable*/ final Class<? extends Entity> clazz, final int typeId) {
         this(name, clazz, typeId, true);
     }
 
-    EntityType(/*@Nullable*/ String name, /*@Nullable*/ Class<? extends Entity> clazz, int typeId, boolean independent) {
+    EntityType(/*@Nullable*/ final String name, /*@Nullable*/ final Class<? extends Entity> clazz, final int typeId, final boolean independent) {
         this.name = name;
         this.clazz = clazz;
         this.typeId = (short) typeId;
@@ -376,7 +376,7 @@ public enum EntityType implements Keyed {
     @Deprecated
     @Contract("null -> null")
     @Nullable
-    public static EntityType fromName(@Nullable String name) {
+    public static EntityType fromName(@Nullable final String name) {
         if (name == null) {
             return null;
         }
@@ -392,7 +392,7 @@ public enum EntityType implements Keyed {
      */
     @Deprecated
     @Nullable
-    public static EntityType fromId(int id) {
+    public static EntityType fromId(final int id) {
         if (id > Short.MAX_VALUE) {
             return null;
         }
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 7aee4a34b2070467e1483d983d4f05d2c68d229b..a852c3a5b6221316fed4d7439215ccf91c75b8ad 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -88,7 +88,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no block is within maxDistance
      */
     @Nullable
-    default Block getTargetBlock(int maxDistance) {
+    default Block getTargetBlock(final int maxDistance) {
         return getTargetBlock(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -110,7 +110,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no block is targeted
      */
     @Nullable
-    default org.bukkit.block.BlockFace getTargetBlockFace(int maxDistance) {
+    default org.bukkit.block.BlockFace getTargetBlockFace(final int maxDistance) {
         return getTargetBlockFace(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -132,7 +132,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no block is targeted
      */
     @Nullable
-    default com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(int maxDistance) {
+    default com.destroystokyo.paper.block.TargetBlockInfo getTargetBlockInfo(final int maxDistance) {
         return getTargetBlockInfo(maxDistance, com.destroystokyo.paper.block.TargetBlockInfo.FluidMode.NEVER);
     }
 
@@ -153,7 +153,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @return entity being targeted, or null if no entity is targeted
      */
     @Nullable
-    default Entity getTargetEntity(int maxDistance) {
+    default Entity getTargetEntity(final int maxDistance) {
         return getTargetEntity(maxDistance, false);
     }
 
@@ -174,7 +174,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *     or null if no entity is targeted
      */
     @Nullable
-    default com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(int maxDistance) {
+    default com.destroystokyo.paper.entity.TargetEntityInfo getTargetEntityInfo(final int maxDistance) {
         return getTargetEntityInfo(maxDistance, false);
     }
 
@@ -803,7 +803,7 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      *
      * @param item item to pickup
      */
-    default void playPickupItemAnimation(@NotNull Item item) {
+    default void playPickupItemAnimation(@NotNull final Item item) {
         playPickupItemAnimation(item, item.getItemStack().getAmount());
     }
 
diff --git a/src/main/java/org/bukkit/entity/Ocelot.java b/src/main/java/org/bukkit/entity/Ocelot.java
index b9c44cda331d31ce3db6dda6df776b87375f1e2e..0083b8778108f3aaa73c97a8bfad6ff7488f2d76 100644
--- a/src/main/java/org/bukkit/entity/Ocelot.java
+++ b/src/main/java/org/bukkit/entity/Ocelot.java
@@ -39,12 +39,12 @@ public interface Ocelot extends Animals {
         private final int id;
 
         static {
-            for (Type type : values()) {
+            for (final Type type : values()) {
                 types[type.getId()] = type;
             }
         }
 
-        Type(int id) {
+        Type(final int id) {
             this.id = id;
         }
 
@@ -68,7 +68,7 @@ public interface Ocelot extends Animals {
          */
         @Deprecated
         @Nullable
-        public static Type getType(int id) {
+        public static Type getType(final int id) {
             return (id >= types.length) ? null : types[id];
         }
     }
diff --git a/src/main/java/org/bukkit/entity/Panda.java b/src/main/java/org/bukkit/entity/Panda.java
index a73dab225f715559600af18cd811a73bcc6a7268..835cb5121b8f6dd1f34f95caaf318b7ad98c79a8 100644
--- a/src/main/java/org/bukkit/entity/Panda.java
+++ b/src/main/java/org/bukkit/entity/Panda.java
@@ -49,7 +49,7 @@ public interface Panda extends Animals {
 
         private final boolean recessive;
 
-        Gene(boolean recessive) {
+        Gene(final boolean recessive) {
             this.recessive = recessive;
         }
 
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
index 344f68a1ea7bd11815f459cf798fed376df6a6c2..50fd43ce92d6b90ffe1d2ca20397eba386b85d46 100644
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -206,7 +206,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @return the player's address
      */
-    @Nullable InetSocketAddress getAddress();
+    @NotNull InetSocketAddress getAddress();
 
     /**
      * Sends this sender a message raw
@@ -531,7 +531,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @deprecated Magic value
      */
     @Deprecated
-    boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, @NotNull byte[] data);
+    boolean sendChunkChange(@NotNull Location loc, int sx, int sy, int sz, byte[] data);
 
     // Paper start
     /**
@@ -627,7 +627,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     // For reference, Bukkit defines this as nullable, while they impl isn't, we'll follow API.
     @Nullable
-    default BanEntry banPlayerFull(@Nullable String reason) {
+    default BanEntry banPlayerFull(@Nullable final String reason) {
         return banPlayerFull(reason, null, null);
     }
 
@@ -639,7 +639,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerFull(@Nullable String reason, @Nullable String source) {
+    default BanEntry banPlayerFull(@Nullable final String reason, @Nullable final String source) {
         return banPlayerFull(reason, null, source);
     }
 
@@ -651,7 +651,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerFull(@Nullable String reason, @Nullable Date expires) {
+    default BanEntry banPlayerFull(@Nullable final String reason, @Nullable final Date expires) {
         return banPlayerFull(reason, expires, null);
     }
 
@@ -664,7 +664,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerFull(@Nullable String reason, @Nullable Date expires, @Nullable String source) {
+    default BanEntry banPlayerFull(@Nullable final String reason, @Nullable final Date expires, @Nullable final String source) {
         banPlayer(reason, expires, source);
         return banPlayerIP(reason, expires, source, true);
     }
@@ -678,7 +678,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason, boolean kickPlayer) {
+    default BanEntry banPlayerIP(@Nullable final String reason, final boolean kickPlayer) {
         return banPlayerIP(reason, null, null, kickPlayer);
     }
 
@@ -691,7 +691,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason, @Nullable String source, boolean kickPlayer) {
+    default BanEntry banPlayerIP(@Nullable final String reason, @Nullable final String source, final boolean kickPlayer) {
         return banPlayerIP(reason, null, source, kickPlayer);
     }
 
@@ -704,7 +704,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, boolean kickPlayer) {
+    default BanEntry banPlayerIP(@Nullable final String reason, @Nullable final Date expires, final boolean kickPlayer) {
         return banPlayerIP(reason, expires, null, kickPlayer);
     }
 
@@ -716,7 +716,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason) {
+    default BanEntry banPlayerIP(@Nullable final String reason) {
         return banPlayerIP(reason, null, null);
     }
 
@@ -728,7 +728,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason, @Nullable String source) {
+    default BanEntry banPlayerIP(@Nullable final String reason, @Nullable final String source) {
         return banPlayerIP(reason, null, source);
     }
 
@@ -740,7 +740,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires) {
+    default BanEntry banPlayerIP(@Nullable final String reason, @Nullable final Date expires) {
         return banPlayerIP(reason, expires, null);
     }
 
@@ -753,7 +753,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, @Nullable String source) {
+    default BanEntry banPlayerIP(@Nullable final String reason, @Nullable final Date expires, @Nullable final String source) {
         return banPlayerIP(reason, expires, source, true);
     }
 
@@ -767,8 +767,8 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @return Ban Entry
      */
     @Nullable
-    default BanEntry banPlayerIP(@Nullable String reason, @Nullable Date expires, @Nullable String source, boolean kickPlayer) {
-        BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.IP).addBan(getAddress().getAddress().getHostAddress(), reason, expires, source);
+    default BanEntry banPlayerIP(@Nullable final String reason, @Nullable final Date expires, @Nullable final String source, final boolean kickPlayer) {
+        final BanEntry banEntry = Bukkit.getServer().getBanList(BanList.Type.IP).addBan(getAddress().getAddress().getHostAddress(), reason, expires, source);
         if (kickPlayer && isOnline()) {
             getPlayer().kickPlayer(reason);
         }
@@ -816,7 +816,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Override
     @Deprecated
-    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+    default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
         spigot().sendMessage(component);
     }
 
@@ -828,7 +828,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      */
     @Override
     @Deprecated
-    default void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().sendMessage(components);
     }
 
@@ -840,7 +840,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @param components the components to send
      */
     @Deprecated
-    default void sendMessage(net.md_5.bungee.api.ChatMessageType position, net.md_5.bungee.api.chat.BaseComponent... components) {
+    default void sendMessage(final net.md_5.bungee.api.ChatMessageType position, final net.md_5.bungee.api.chat.BaseComponent... components) {
         spigot().sendMessage(position, components);
     }
 
@@ -1055,7 +1055,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      *
      * @param amount Exp amount to give
      */
-    default void giveExp(int amount) {
+    default void giveExp(final int amount) {
         giveExp(amount, false);
     }
     /**
@@ -1378,7 +1378,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
      * @throws IllegalArgumentException Thrown if the hash is not 20 bytes
      *     long.
      */
-    void setResourcePack(@NotNull String url, @NotNull byte[] hash);
+    void setResourcePack(@NotNull String url, byte[] hash);
 
     /**
      * Gets the Scoreboard displayed to this player
@@ -1960,7 +1960,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated {@link LivingEntity#setCollidable(boolean)}
          */
         @Deprecated
-        public void setCollidesWithEntities(boolean collides) {
+        public void setCollidesWithEntities(final boolean collides) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -1983,13 +1983,13 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
 
         @Deprecated // Paper
         @Override
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
         @Deprecated // Paper
         @Override
-        public void sendMessage(@NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2002,7 +2002,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2015,7 +2015,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2028,7 +2028,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent component) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent component) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -2041,7 +2041,7 @@ public interface Player extends HumanEntity, Conversable, OfflinePlayer, PluginM
          * @deprecated use {@code sendMessage} methods that accept {@link net.kyori.adventure.text.Component}
          */
         @Deprecated // Paper
-        public void sendMessage(@NotNull net.md_5.bungee.api.ChatMessageType position, @Nullable UUID sender, @NotNull net.md_5.bungee.api.chat.BaseComponent... components) {
+        public void sendMessage(@NotNull final net.md_5.bungee.api.ChatMessageType position, @Nullable final UUID sender, @NotNull final net.md_5.bungee.api.chat.BaseComponent... components) {
             throw new UnsupportedOperationException("Not supported yet.");
 
         }
diff --git a/src/main/java/org/bukkit/entity/memory/MemoryKey.java b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
index 905d5f6d16a6e3f8eb9da91cbc3ba3286ad15e4b..11f8d32e12cc85d763df7fcd213cbaaac22904c4 100644
--- a/src/main/java/org/bukkit/entity/memory/MemoryKey.java
+++ b/src/main/java/org/bukkit/entity/memory/MemoryKey.java
@@ -22,7 +22,7 @@ public final class MemoryKey<T> implements Keyed {
     private final NamespacedKey namespacedKey;
     private final Class<T> tClass;
 
-    private MemoryKey(NamespacedKey namespacedKey, Class<T> tClass) {
+    private MemoryKey(final NamespacedKey namespacedKey, final Class<T> tClass) {
         this.namespacedKey = namespacedKey;
         this.tClass = tClass;
         MEMORY_KEYS.put(namespacedKey, this);
@@ -69,7 +69,7 @@ public final class MemoryKey<T> implements Keyed {
      * available under that key
      */
     @Nullable
-    public static MemoryKey getByKey(@NotNull NamespacedKey namespacedKey) {
+    public static MemoryKey getByKey(@NotNull final NamespacedKey namespacedKey) {
         return MEMORY_KEYS.get(namespacedKey);
     }
 
diff --git a/src/main/java/org/bukkit/event/Event.java b/src/main/java/org/bukkit/event/Event.java
index a71ff8fbe5dd3e30f349a160fb87becd148285f5..dbc08c956c21aa7cc514804f99b7a02a5717e501 100644
--- a/src/main/java/org/bukkit/event/Event.java
+++ b/src/main/java/org/bukkit/event/Event.java
@@ -31,7 +31,7 @@ public abstract class Event {
      * @param isAsync true indicates the event will fire asynchronously, false
      *     by default from default constructor
      */
-    public Event(boolean isAsync) {
+    public Event(final boolean isAsync) {
         this.async = isAsync;
     }
 
diff --git a/src/main/java/org/bukkit/event/EventException.java b/src/main/java/org/bukkit/event/EventException.java
index 84638e852501cc804c13c188c90c38b163657c36..fd7f0f5c2182c52e3ade9cb5b169b6f9cbfc8156 100644
--- a/src/main/java/org/bukkit/event/EventException.java
+++ b/src/main/java/org/bukkit/event/EventException.java
@@ -9,7 +9,7 @@ public class EventException extends Exception {
      *
      * @param throwable Exception that triggered this Exception
      */
-    public EventException(Throwable throwable) {
+    public EventException(final Throwable throwable) {
         cause = throwable;
     }
 
@@ -26,7 +26,7 @@ public class EventException extends Exception {
      * @param cause The exception that caused this
      * @param message The message
      */
-    public EventException(Throwable cause, String message) {
+    public EventException(final Throwable cause, final String message) {
         super(message);
         this.cause = cause;
     }
@@ -36,7 +36,7 @@ public class EventException extends Exception {
      *
      * @param message The message
      */
-    public EventException(String message) {
+    public EventException(final String message) {
         super(message);
         cause = null;
     }
diff --git a/src/main/java/org/bukkit/event/EventPriority.java b/src/main/java/org/bukkit/event/EventPriority.java
index 7bc7e0a422cfb93eeedcbad3e2c177313a773cc1..ddaf093b23c03b6489a231f0cb524b608a86d2af 100644
--- a/src/main/java/org/bukkit/event/EventPriority.java
+++ b/src/main/java/org/bukkit/event/EventPriority.java
@@ -37,7 +37,7 @@ public enum EventPriority {
 
     private final int slot;
 
-    EventPriority(int slot) {
+    EventPriority(final int slot) {
         this.slot = slot;
     }
 
diff --git a/src/main/java/org/bukkit/event/HandlerList.java b/src/main/java/org/bukkit/event/HandlerList.java
index 9ef6901e1f19f68d6c2459c2a876daa91c8fdbd7..2c2ad7622f5195c8eb639014bba36e329d2e6264 100644
--- a/src/main/java/org/bukkit/event/HandlerList.java
+++ b/src/main/java/org/bukkit/event/HandlerList.java
@@ -40,7 +40,7 @@ public class HandlerList {
      */
     public static void bakeAll() {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 h.bake();
             }
         }
@@ -51,9 +51,9 @@ public class HandlerList {
      */
     public static void unregisterAll() {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 synchronized (h) {
-                    for (List<RegisteredListener> list : h.handlerslots.values()) {
+                    for (final List<RegisteredListener> list : h.handlerslots.values()) {
                         list.clear();
                     }
                     h.handlers = null;
@@ -67,9 +67,9 @@ public class HandlerList {
      *
      * @param plugin plugin to unregister
      */
-    public static void unregisterAll(@NotNull Plugin plugin) {
+    public static void unregisterAll(@NotNull final Plugin plugin) {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 h.unregister(plugin);
             }
         }
@@ -80,9 +80,9 @@ public class HandlerList {
      *
      * @param listener listener to unregister
      */
-    public static void unregisterAll(@NotNull Listener listener) {
+    public static void unregisterAll(@NotNull final Listener listener) {
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 h.unregister(listener);
             }
         }
@@ -95,7 +95,7 @@ public class HandlerList {
      */
     public HandlerList() {
         handlerslots = new EnumMap<>(EventPriority.class);
-        for (EventPriority o : EventPriority.values()) {
+        for (final EventPriority o : EventPriority.values()) {
             handlerslots.put(o, new ArrayList<>());
         }
         synchronized (allLists) {
@@ -108,7 +108,7 @@ public class HandlerList {
      *
      * @param listener listener to register
      */
-    public synchronized void register(@NotNull RegisteredListener listener) {
+    public synchronized void register(@NotNull final RegisteredListener listener) {
         if (handlerslots.get(listener.getPriority()).contains(listener))
             throw new IllegalStateException("This listener is already registered to priority " + listener.getPriority().toString());
         handlers = null;
@@ -120,8 +120,8 @@ public class HandlerList {
      *
      * @param listeners listeners to register
      */
-    public void registerAll(@NotNull Collection<RegisteredListener> listeners) {
-        for (RegisteredListener listener : listeners) {
+    public void registerAll(@NotNull final Collection<RegisteredListener> listeners) {
+        for (final RegisteredListener listener : listeners) {
             register(listener);
         }
     }
@@ -131,7 +131,7 @@ public class HandlerList {
      *
      * @param listener listener to remove
      */
-    public synchronized void unregister(@NotNull RegisteredListener listener) {
+    public synchronized void unregister(@NotNull final RegisteredListener listener) {
         if (handlerslots.get(listener.getPriority()).remove(listener)) {
             handlers = null;
         }
@@ -142,10 +142,10 @@ public class HandlerList {
      *
      * @param plugin plugin to remove
      */
-    public synchronized void unregister(@NotNull Plugin plugin) {
+    public synchronized void unregister(@NotNull final Plugin plugin) {
         boolean changed = false;
-        for (List<RegisteredListener> list : handlerslots.values()) {
-            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
+        for (final List<RegisteredListener> list : handlerslots.values()) {
+            for (final ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
                 if (i.next().getPlugin().equals(plugin)) {
                     i.remove();
                     changed = true;
@@ -160,10 +160,10 @@ public class HandlerList {
      *
      * @param listener listener to remove
      */
-    public synchronized void unregister(@NotNull Listener listener) {
+    public synchronized void unregister(@NotNull final Listener listener) {
         boolean changed = false;
-        for (List<RegisteredListener> list : handlerslots.values()) {
-            for (ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
+        for (final List<RegisteredListener> list : handlerslots.values()) {
+            for (final ListIterator<RegisteredListener> i = list.listIterator(); i.hasNext();) {
                 if (i.next().getListener().equals(listener)) {
                     i.remove();
                     changed = true;
@@ -178,8 +178,8 @@ public class HandlerList {
      */
     public synchronized void bake() {
         if (handlers != null) return; // don't re-bake when still valid
-        List<RegisteredListener> entries = new ArrayList<>();
-        for (Entry<EventPriority, ArrayList<RegisteredListener>> entry : handlerslots.entrySet()) {
+        final List<RegisteredListener> entries = new ArrayList<>();
+        for (final Entry<EventPriority, ArrayList<RegisteredListener>> entry : handlerslots.entrySet()) {
             entries.addAll(entry.getValue());
         }
         handlers = entries.toArray(new RegisteredListener[0]);
@@ -205,13 +205,13 @@ public class HandlerList {
      * @return the list of registered listeners
      */
     @NotNull
-    public static ArrayList<RegisteredListener> getRegisteredListeners(@NotNull Plugin plugin) {
-        ArrayList<RegisteredListener> listeners = new ArrayList<>();
+    public static ArrayList<RegisteredListener> getRegisteredListeners(@NotNull final Plugin plugin) {
+        final ArrayList<RegisteredListener> listeners = new ArrayList<>();
         synchronized (allLists) {
-            for (HandlerList h : allLists) {
+            for (final HandlerList h : allLists) {
                 synchronized (h) {
-                    for (List<RegisteredListener> list : h.handlerslots.values()) {
-                        for (RegisteredListener listener : list) {
+                    for (final List<RegisteredListener> list : h.handlerslots.values()) {
+                        for (final RegisteredListener listener : list) {
                             if (listener.getPlugin().equals(plugin)) {
                                 listeners.add(listener);
                             }
diff --git a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
index c05cd9cadcff827a2eb236cf955bc898fa5e8b52..859e99fc5ec55a86fadc97ec4757602656ff3a01 100644
--- a/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBreakEvent.java
@@ -53,7 +53,7 @@ public class BlockBreakEvent extends BlockExpEvent implements Cancellable {
      *
      * @param dropItems Whether or not the block will drop items
      */
-    public void setDropItems(boolean dropItems) {
+    public void setDropItems(final boolean dropItems) {
         this.dropItems = dropItems;
     }
 
@@ -72,7 +72,7 @@ public class BlockBreakEvent extends BlockExpEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
index c0c38df368a760dc75aa52b2ebbe796d268cc19b..b3ba27f4515b99910f9e4d6a8c5f3cb8281bd643 100644
--- a/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockBurnEvent.java
@@ -44,7 +44,7 @@ public class BlockBurnEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
index f82e5694d7bc245f5a1375f1b68e441a052e7bfa..88c6f35cde32064e0654d0f5243548e4b8d28c80 100644
--- a/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCanBuildEvent.java
@@ -62,7 +62,7 @@ public class BlockCanBuildEvent extends BlockEvent {
      * @param cancel true if you want to allow the block to be built here
      *     despite Minecraft's default behaviour
      */
-    public void setBuildable(boolean cancel) {
+    public void setBuildable(final boolean cancel) {
         this.buildable = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockCookEvent.java b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
index a3f1c9cb36c9069ed622985a525bfc2a7a27ab91..b051db8a13f13596798d0b7bb61c9d6a94613ed9 100644
--- a/src/main/java/org/bukkit/event/block/BlockCookEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockCookEvent.java
@@ -22,7 +22,7 @@ public class BlockCookEvent extends BlockEvent implements Cancellable {
         this(block, source, result, null);
     }
 
-    public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable org.bukkit.inventory.CookingRecipe<?> recipe) {
+    public BlockCookEvent(@NotNull final Block block, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable final org.bukkit.inventory.CookingRecipe<?> recipe) {
         // Paper end
         super(block);
         this.source = source;
@@ -56,7 +56,7 @@ public class BlockCookEvent extends BlockEvent implements Cancellable {
      *
      * @param result new result ItemStack
      */
-    public void setResult(@NotNull ItemStack result) {
+    public void setResult(@NotNull final ItemStack result) {
         this.result = result;
     }
 
@@ -66,7 +66,7 @@ public class BlockCookEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
index f70871e1ae7b1a1d77405d942d82666f03bf0498..03e06fdc3fe2b3721e4618c6c53db887d13763bd 100644
--- a/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDamageEvent.java
@@ -53,7 +53,7 @@ public class BlockDamageEvent extends BlockEvent implements Cancellable {
      * @param bool true if you want the block to instantly break when damaged
      *     by the player
      */
-    public void setInstaBreak(boolean bool) {
+    public void setInstaBreak(final boolean bool) {
         this.instaBreak = bool;
     }
 
@@ -73,7 +73,7 @@ public class BlockDamageEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java b/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
index 57b831979c26d7b6a0325e009b3ba627b3b29a2a..313aa2b71973a63b583944496ff30e9d31d74ca4 100644
--- a/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDispenseArmorEvent.java
@@ -17,7 +17,7 @@ public class BlockDispenseArmorEvent extends BlockDispenseEvent {
 
     private final LivingEntity target;
 
-    public BlockDispenseArmorEvent(@NotNull Block block, @NotNull ItemStack dispensed, @NotNull LivingEntity target) {
+    public BlockDispenseArmorEvent(@NotNull final Block block, @NotNull final ItemStack dispensed, @NotNull final LivingEntity target) {
         super(block, dispensed, new Vector(0, 0, 0));
         this.target = target;
     }
diff --git a/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java b/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
index 6e8be28f6bbe80448cdf06cf335258604da00e75..cc7c9197beff52cacc99df72f4eb18db0c8f12a1 100644
--- a/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDispenseEvent.java
@@ -42,7 +42,7 @@ public class BlockDispenseEvent extends BlockEvent implements Cancellable {
      *
      * @param item the item being dispensed
      */
-    public void setItem(@NotNull ItemStack item) {
+    public void setItem(@NotNull final ItemStack item) {
         this.item = item;
     }
 
@@ -64,7 +64,7 @@ public class BlockDispenseEvent extends BlockEvent implements Cancellable {
      *
      * @param vel the velocity of the item being dispensed
      */
-    public void setVelocity(@NotNull Vector vel) {
+    public void setVelocity(@NotNull final Vector vel) {
         velocity = vel;
     }
 
@@ -74,7 +74,7 @@ public class BlockDispenseEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
index 3dd4bd38e72c04e74e5787fb38ca9abd10bad06b..f5bdae47170a40872628ed533267839c0a3da80f 100644
--- a/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockDropItemEvent.java
@@ -32,7 +32,7 @@ public class BlockDropItemEvent extends BlockEvent implements Cancellable {
     private final BlockState blockState;
     private final List<Item> items;
 
-    public BlockDropItemEvent(@NotNull Block block, @NotNull BlockState blockState, @NotNull Player player, @NotNull List<Item> items) {
+    public BlockDropItemEvent(@NotNull final Block block, @NotNull final BlockState blockState, @NotNull final Player player, @NotNull final List<Item> items) {
         super(block);
         this.blockState = blockState;
         this.player = player;
@@ -79,7 +79,7 @@ public class BlockDropItemEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockExpEvent.java b/src/main/java/org/bukkit/event/block/BlockExpEvent.java
index 21b9026552fd135ef2c49dd011b17f5679ac3fc1..1514ff8376f14605a8a21f63dc2972052abb8b0d 100644
--- a/src/main/java/org/bukkit/event/block/BlockExpEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExpEvent.java
@@ -11,7 +11,7 @@ public class BlockExpEvent extends BlockEvent {
     private static final HandlerList handlers = new HandlerList();
     private int exp;
 
-    public BlockExpEvent(@NotNull Block block, int exp) {
+    public BlockExpEvent(@NotNull final Block block, final int exp) {
         super(block);
 
         this.exp = exp;
@@ -32,7 +32,7 @@ public class BlockExpEvent extends BlockEvent {
      *
      * @param exp 1 or higher to drop experience, else nothing will drop
      */
-    public void setExpToDrop(int exp) {
+    public void setExpToDrop(final int exp) {
         this.exp = exp;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
index 44f7f6939a27b9a0a796d91eac4b7c97ec90a643..3076550014b322d707fa5a2c8f0c3a4b53faaac7 100644
--- a/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockExplodeEvent.java
@@ -28,7 +28,7 @@ public class BlockExplodeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -57,7 +57,7 @@ public class BlockExplodeEvent extends BlockEvent implements Cancellable {
      *
      * @param yield The new yield percentage
      */
-    public void setYield(float yield) {
+    public void setYield(final float yield) {
         this.yield = yield;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
index 362643de40ff283ad37ac63c1349f91ae2b9b326..0e6f3bed555cdfa82e114e596bf5e55212fcf634 100644
--- a/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFadeEvent.java
@@ -50,7 +50,7 @@ public class BlockFadeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
index 695309b4b7ef269ba2496408a5f874f61cd6c445..20ee91ed813460049c41997f6830eb486c50c757 100644
--- a/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFertilizeEvent.java
@@ -23,7 +23,7 @@ public class BlockFertilizeEvent extends BlockEvent implements Cancellable {
     private final Player player;
     private final List<BlockState> blocks;
 
-    public BlockFertilizeEvent(@NotNull Block theBlock, @Nullable Player player, @NotNull List<BlockState> blocks) {
+    public BlockFertilizeEvent(@NotNull final Block theBlock, @Nullable final Player player, @NotNull final List<BlockState> blocks) {
         super(theBlock);
         this.player = player;
         this.blocks = blocks;
@@ -55,7 +55,7 @@ public class BlockFertilizeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
index dce16072aee6e524b968b15760e0e05fbd6fde16..c2767e81f364f9df830ef10fec93bc7bb2e3342d 100644
--- a/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockFromToEvent.java
@@ -61,7 +61,7 @@ public class BlockFromToEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
index 73d5375d2f67ee00204d80308828cd9f2b2f17e8..e97738751b89a495da81841aeb8f8c81e2a118c5 100644
--- a/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockGrowEvent.java
@@ -47,7 +47,7 @@ public class BlockGrowEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
index 6dcd9f828c6c40e48593b0bad5a44a656eb01645..dacc35946af60e32c3a42bbebad57a03ea0a010d 100644
--- a/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockIgniteEvent.java
@@ -43,7 +43,7 @@ public class BlockIgniteEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
index 8460aa4f5e211fb0a6ab11f7487d38dba927e1da..4e445b6589042d988b9ddf2358f0a92bdba7882f 100644
--- a/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockMultiPlaceEvent.java
@@ -19,13 +19,13 @@ public class BlockMultiPlaceEvent extends BlockPlaceEvent {
     private final List<BlockState> states;
 
     @Deprecated // Paper
-    public BlockMultiPlaceEvent(@NotNull List<BlockState> states, @NotNull Block clicked, @NotNull ItemStack itemInHand, @NotNull Player thePlayer, boolean canBuild) {
+    public BlockMultiPlaceEvent(@NotNull final List<BlockState> states, @NotNull final Block clicked, @NotNull final ItemStack itemInHand, @NotNull final Player thePlayer, final boolean canBuild) {
         //Paper start - add hand to BlockMultiPlaceEvent
         this(states, clicked, itemInHand, thePlayer, canBuild, org.bukkit.inventory.EquipmentSlot.HAND);
     }
 
 
-    public BlockMultiPlaceEvent(@NotNull List<BlockState> states, @NotNull Block clicked, @NotNull ItemStack itemInHand, @NotNull Player thePlayer, boolean canBuild, @NotNull org.bukkit.inventory.EquipmentSlot hand) {
+    public BlockMultiPlaceEvent(@NotNull final List<BlockState> states, @NotNull final Block clicked, @NotNull final ItemStack itemInHand, @NotNull final Player thePlayer, final boolean canBuild, @NotNull final org.bukkit.inventory.EquipmentSlot hand) {
         super(states.get(0).getBlock(), states.get(0), clicked, itemInHand, thePlayer, canBuild, hand);
         this.states = ImmutableList.copyOf(states);
         //Paper end
diff --git a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
index c382f9fc2b8c5b959df7071007110dab737e400e..4718f4d9d9f80b452043f6b31424205d1004e5f4 100644
--- a/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPhysicsEvent.java
@@ -77,7 +77,7 @@ public class BlockPhysicsEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
index 2cdf2919e7ca895787fa037809d895ab10b0bf73..9f93d6c0a0f4ed3971d54c8271301a379e33074a 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonEvent.java
@@ -24,7 +24,7 @@ public abstract class BlockPistonEvent extends BlockEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
index a91499078550de4f4ae9b080547a58c23914ff45..bb8508172b63e434b5dd85998e7be1c6786df975 100644
--- a/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPistonExtendEvent.java
@@ -52,7 +52,7 @@ public class BlockPistonExtendEvent extends BlockPistonEvent {
     @NotNull
     public List<Block> getBlocks() {
         if (blocks == null) {
-            ArrayList<Block> tmp = new ArrayList<>();
+            final ArrayList<Block> tmp = new ArrayList<>();
             for (int i = 0; i < this.getLength(); i++) {
                 tmp.add(block.getRelative(getDirection(), i + 1));
             }
diff --git a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
index 82e383725788a2a7311d51208243b3713dcf8eea..71003fe13826e89b620a19fd044080f6e4d4cdee 100644
--- a/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockPlaceEvent.java
@@ -46,7 +46,7 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -131,7 +131,7 @@ public class BlockPlaceEvent extends BlockEvent implements Cancellable {
      *
      * @param canBuild true if you want the player to be able to build
      */
-    public void setBuild(boolean canBuild) {
+    public void setBuild(final boolean canBuild) {
         this.canBuild = canBuild;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java b/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
index e46419b8c7c691bdf7b512f479ae2b8a2b0f14bc..45a61ae34ef1847f80d0ef8f510834233dc382c3 100644
--- a/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockRedstoneEvent.java
@@ -41,7 +41,7 @@ public class BlockRedstoneEvent extends BlockEvent {
      *
      * @param newCurrent The new current to set
      */
-    public void setNewCurrent(int newCurrent) {
+    public void setNewCurrent(final int newCurrent) {
         this.newCurrent = newCurrent;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java b/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
index 71c0af9373069cfaa074e1fbad592eab81025b1c..91132ce0f816005df50c5dbd5580f48a329862c4 100644
--- a/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockShearEntityEvent.java
@@ -18,7 +18,7 @@ public class BlockShearEntityEvent extends BlockEvent implements Cancellable {
     private final ItemStack tool;
     private boolean cancelled;
 
-    public BlockShearEntityEvent(@NotNull Block dispenser, @NotNull Entity sheared, @NotNull ItemStack tool) {
+    public BlockShearEntityEvent(@NotNull final Block dispenser, @NotNull final Entity sheared, @NotNull final ItemStack tool) {
         super(dispenser);
         this.sheared = sheared;
         this.tool = tool;
@@ -50,7 +50,7 @@ public class BlockShearEntityEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
index 4aaa78afdda2d2351f8c4ed46a52e0cf77ec437c..72ab98adc71e3c72a2f8f92e304df62493bb553a 100644
--- a/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/CauldronLevelChangeEvent.java
@@ -18,7 +18,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
     private final int oldLevel;
     private int newLevel;
 
-    public CauldronLevelChangeEvent(@NotNull Block block, @Nullable Entity entity, @NotNull ChangeReason reason, int oldLevel, int newLevel) {
+    public CauldronLevelChangeEvent(@NotNull final Block block, @Nullable final Entity entity, @NotNull final ChangeReason reason, final int oldLevel, final int newLevel) {
         super(block);
         this.entity = entity;
         this.reason = reason;
@@ -49,7 +49,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
         return newLevel;
     }
 
-    public void setNewLevel(int newLevel) {
+    public void setNewLevel(final int newLevel) {
         Preconditions.checkArgument(0 <= newLevel && newLevel <= 3, "Cauldron level out of bounds 0 <= %s <= 3", newLevel);
         this.newLevel = newLevel;
     }
@@ -60,7 +60,7 @@ public class CauldronLevelChangeEvent extends BlockEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java b/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
index 8869850d867c4b7363d9bc792ff61852d183f851..df3ed1efb8bc854b0a37d2e2829960911fa3d7e9 100644
--- a/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/FluidLevelChangeEvent.java
@@ -18,7 +18,7 @@ public class FluidLevelChangeEvent extends BlockEvent implements Cancellable {
     //
     private BlockData newData;
 
-    public FluidLevelChangeEvent(@NotNull Block theBlock, @NotNull BlockData newData) {
+    public FluidLevelChangeEvent(@NotNull final Block theBlock, @NotNull final BlockData newData) {
         super(theBlock);
         this.newData = newData;
     }
@@ -39,9 +39,9 @@ public class FluidLevelChangeEvent extends BlockEvent implements Cancellable {
      *
      * @param newData the new data
      */
-    public void setNewData(@NotNull BlockData newData) {
+    public void setNewData(@NotNull final BlockData newData) {
         Preconditions.checkArgument(true, "newData null");
-        Preconditions.checkArgument(this.newData.getMaterial().equals(newData.getMaterial()), "Cannot change fluid type");
+        Preconditions.checkArgument(this.newData.getMaterial() == newData.getMaterial(), "Cannot change fluid type");
 
         this.newData = newData;
     }
@@ -52,7 +52,7 @@ public class FluidLevelChangeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java b/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
index c33f9cb80300a31abb52bc5798fb98f22550d352..223006c95b7da749ecda97318a7cf589f7a97203 100644
--- a/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
+++ b/src/main/java/org/bukkit/event/block/LeavesDecayEvent.java
@@ -24,7 +24,7 @@ public class LeavesDecayEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java b/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
index bf5de52e79fb152c7fc847383cb9c259535d88f3..88578efe9aa72b5bedd65a7fdbc7e33faaef61e0 100644
--- a/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/MoistureChangeEvent.java
@@ -37,7 +37,7 @@ public class MoistureChangeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/NotePlayEvent.java b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
index 9b1d408e76453fd96615d883ebc5427afec4c67f..201c724b3a02e7ecec1b3b3e0b79c7f3224bd002 100644
--- a/src/main/java/org/bukkit/event/block/NotePlayEvent.java
+++ b/src/main/java/org/bukkit/event/block/NotePlayEvent.java
@@ -18,7 +18,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
     private Note note;
     private boolean cancelled = false;
 
-    public NotePlayEvent(@NotNull Block block, @NotNull Instrument instrument, @NotNull Note note) {
+    public NotePlayEvent(@NotNull final Block block, @NotNull final Instrument instrument, @NotNull final Note note) {
         super(block);
         this.instrument = instrument;
         this.note = note;
@@ -30,7 +30,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
@@ -61,7 +61,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
      * @deprecated no effect on newer Minecraft versions
      */
     @Deprecated
-    public void setInstrument(@NotNull Instrument instrument) {
+    public void setInstrument(@NotNull final Instrument instrument) {
 	    this.instrument = instrument;
     }
 
@@ -72,7 +72,7 @@ public class NotePlayEvent extends BlockEvent implements Cancellable {
      * @deprecated no effect on newer Minecraft versions
      */
     @Deprecated
-    public void setNote(@NotNull Note note) {
+    public void setNote(@NotNull final Note note) {
 	    this.note = note;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/SignChangeEvent.java b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
index 1f79f704abf339150df08900b8ea7da4cefef258..e4fffbeaad58d6dc035622e8a8813a6e3ee02c34 100644
--- a/src/main/java/org/bukkit/event/block/SignChangeEvent.java
+++ b/src/main/java/org/bukkit/event/block/SignChangeEvent.java
@@ -31,7 +31,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
         this.player = thePlayer;
         // Paper start
         this.adventure$lines = new java.util.ArrayList<>();
-        for (String theLine : theLines) {
+        for (final String theLine : theLines) {
             this.adventure$lines.add(org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(theLine));
         }
         // Paper end
@@ -66,7 +66,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3
      *     or < 0}
      */
-    public @Nullable net.kyori.adventure.text.Component line(int index) throws IndexOutOfBoundsException {
+    public @Nullable net.kyori.adventure.text.Component line(final int index) throws IndexOutOfBoundsException {
         return this.adventure$lines.get(index);
     }
 
@@ -78,7 +78,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @throws IndexOutOfBoundsException thrown when the provided index is {@literal > 3
      *     or < 0}
      */
-    public void line(int index, @Nullable net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {
+    public void line(final int index, @Nullable final net.kyori.adventure.text.Component line) throws IndexOutOfBoundsException {
         this.adventure$lines.set(index, line);
     }
     // Paper end
@@ -107,7 +107,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      */
     @Nullable
     @Deprecated // Paper
-    public String getLine(int index) throws IndexOutOfBoundsException {
+    public String getLine(final int index) throws IndexOutOfBoundsException {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(this.adventure$lines.get(index)); // Paper
     }
 
@@ -121,7 +121,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
      * @deprecated in favour of {@link #line(int, net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setLine(int index, @Nullable String line) throws IndexOutOfBoundsException {
+    public void setLine(final int index, @Nullable final String line) throws IndexOutOfBoundsException {
         adventure$lines.set(index, line != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(line) : null); // Paper
     }
 
@@ -131,7 +131,7 @@ public class SignChangeEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
index 7029cfcd00ed5d9c7f06898ec2b81238ec775a70..e5a382669c13d2ebd8755b65fdd30d889b4c5da6 100644
--- a/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
+++ b/src/main/java/org/bukkit/event/block/SpongeAbsorbEvent.java
@@ -23,7 +23,7 @@ public class SpongeAbsorbEvent extends BlockEvent implements Cancellable {
     private boolean cancelled;
     private final List<BlockState> blocks;
 
-    public SpongeAbsorbEvent(@NotNull Block block, @NotNull List<BlockState> waterblocks) {
+    public SpongeAbsorbEvent(@NotNull final Block block, @NotNull final List<BlockState> waterblocks) {
         super(block);
         this.blocks = waterblocks;
     }
@@ -47,7 +47,7 @@ public class SpongeAbsorbEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
index 84172babb4435a5106b266c9c15f89c3c7922d1d..616f15477f9045e18fa47651891157f2aafc2e48 100644
--- a/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
+++ b/src/main/java/org/bukkit/event/command/UnknownCommandEvent.java
@@ -74,7 +74,7 @@ public class UnknownCommandEvent extends Event {
      * @deprecated use {@link #message(Component)}
      */
     @Deprecated
-    public void setMessage(@Nullable String message) {
+    public void setMessage(@Nullable final String message) {
         this.message(message == null ? null : Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message));
     }
 
@@ -96,7 +96,7 @@ public class UnknownCommandEvent extends Event {
      *
      * @param message the message to be returned, or null
      */
-    public void message(@Nullable Component message) {
+    public void message(@Nullable final Component message) {
         this.message = message;
     }
 
diff --git a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
index 58635b810c45c16e36611edc064641fc55fd9ad0..63fc8c9a58dd90db19df81c54d5f1d8dc1e838d6 100644
--- a/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/EnchantItemEvent.java
@@ -85,7 +85,7 @@ public class EnchantItemEvent extends InventoryEvent implements Cancellable {
      *
      * @param level - cost in levels
      */
-    public void setExpLevelCost(int level) {
+    public void setExpLevelCost(final int level) {
         Validate.isTrue(level > 0, "The cost must be greater than 0!");
 
         this.level = level;
@@ -118,7 +118,7 @@ public class EnchantItemEvent extends InventoryEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
index 2ff1b1308571d8f8056d3359e8a8ba4a589c3726..6d597c641d68277daabd3d556739c783540bf954 100644
--- a/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
+++ b/src/main/java/org/bukkit/event/enchantment/PrepareItemEnchantEvent.java
@@ -23,7 +23,7 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
     private boolean cancelled;
     private final Player enchanter;
 
-    public PrepareItemEnchantEvent(@NotNull final Player enchanter, @NotNull InventoryView view, @NotNull final Block table, @NotNull final ItemStack item, @NotNull final EnchantmentOffer[] offers, final int bonus) {
+    public PrepareItemEnchantEvent(@NotNull final Player enchanter, @NotNull final InventoryView view, @NotNull final Block table, @NotNull final ItemStack item, @NotNull final EnchantmentOffer[] offers, final int bonus) {
         super(view);
         this.enchanter = enchanter;
         this.table = table;
@@ -68,9 +68,8 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
      * @return experience level costs offered
      * @deprecated Use {@link #getOffers()} instead of this method
      */
-    @NotNull
     public int[] getExpLevelCostsOffered() {
-        int[] levelOffers = new int[offers.length];
+        final int[] levelOffers = new int[offers.length];
         for (int i = 0; i < offers.length; i++) {
             levelOffers[i] = offers[i] != null ? offers[i].getCost() : 0;
         }
@@ -105,7 +104,7 @@ public class PrepareItemEnchantEvent extends InventoryEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
index a37febd0d4dd5b733e9ee72628fdf9395fec4367..047438403b14e99b2e551dad366c90ed8f8c0a53 100644
--- a/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
+++ b/src/main/java/org/bukkit/event/entity/AreaEffectCloudApplyEvent.java
@@ -27,7 +27,7 @@ public class AreaEffectCloudApplyEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java b/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java
index caed284b31d20c80245f41a6976c7da3199e8b9c..36321bd71521c72b2f98d5055cda86a2cea87813 100644
--- a/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ArrowBodyCountChangeEvent.java
@@ -18,7 +18,7 @@ public class ArrowBodyCountChangeEvent extends EntityEvent implements Cancellabl
     private final int oldAmount;
     private int newAmount;
 
-    public ArrowBodyCountChangeEvent(@NotNull LivingEntity entity, int oldAmount, int newAmount, boolean isReset) {
+    public ArrowBodyCountChangeEvent(@NotNull final LivingEntity entity, final int oldAmount, final int newAmount, final boolean isReset) {
         super(entity);
 
         this.oldAmount = oldAmount;
@@ -58,7 +58,7 @@ public class ArrowBodyCountChangeEvent extends EntityEvent implements Cancellabl
      *
      * @param newAmount amount of arrows
      */
-    public void setNewAmount(int newAmount) {
+    public void setNewAmount(final int newAmount) {
         Preconditions.checkArgument(newAmount >= 0, "New arrow amount must be >= 0");
         this.newAmount = newAmount;
     }
@@ -75,7 +75,7 @@ public class ArrowBodyCountChangeEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java b/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java
index 5a5615d1720b83fb975ed4d00078fdd327098012..5da39570f757841b7d43edfcda1557a330ee485d 100644
--- a/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java
+++ b/src/main/java/org/bukkit/event/entity/BatToggleSleepEvent.java
@@ -18,7 +18,7 @@ public class BatToggleSleepEvent extends EntityEvent implements Cancellable {
     private boolean cancel = false;
     private final boolean awake;
 
-    public BatToggleSleepEvent(@NotNull Bat what, boolean awake) {
+    public BatToggleSleepEvent(@NotNull final Bat what, final boolean awake) {
         super(what);
         this.awake = awake;
     }
@@ -33,7 +33,7 @@ public class BatToggleSleepEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
index 4295baf51eb69a18e8e33de94fc55a3367b4b764..8221b756c6a3c91f6052fa9c0550caaa8f7ef552 100644
--- a/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/CreeperPowerEvent.java
@@ -34,7 +34,7 @@ public class CreeperPowerEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java b/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
index 631ca54dc97d380219b2a4d188720beeff609996..0bbd79db0855745f059b0be15d68420874cd2a06 100644
--- a/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EnderDragonChangePhaseEvent.java
@@ -17,7 +17,7 @@ public class EnderDragonChangePhaseEvent extends EntityEvent implements Cancella
     private final EnderDragon.Phase currentPhase;
     private EnderDragon.Phase newPhase;
 
-    public EnderDragonChangePhaseEvent(@NotNull EnderDragon enderDragon, @Nullable EnderDragon.Phase currentPhase, @NotNull EnderDragon.Phase newPhase) {
+    public EnderDragonChangePhaseEvent(@NotNull final EnderDragon enderDragon, @Nullable final EnderDragon.Phase currentPhase, @NotNull final EnderDragon.Phase newPhase) {
         super(enderDragon);
         this.currentPhase = currentPhase;
         this.setNewPhase(newPhase);
@@ -55,7 +55,7 @@ public class EnderDragonChangePhaseEvent extends EntityEvent implements Cancella
      *
      * @param newPhase the new dragon phase
      */
-    public void setNewPhase(@NotNull EnderDragon.Phase newPhase) {
+    public void setNewPhase(@NotNull final EnderDragon.Phase newPhase) {
         Validate.notNull(newPhase, "New dragon phase cannot be null");
         this.newPhase = newPhase;
     }
@@ -66,7 +66,7 @@ public class EnderDragonChangePhaseEvent extends EntityEvent implements Cancella
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java b/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java
index cd20a4aa4a04704d9aa70f0f4ef393f2b6f9ad23..e1b08d68b30ef30648b9986efcb4743b617b2d2e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityAirChangeEvent.java
@@ -16,7 +16,7 @@ public class EntityAirChangeEvent extends EntityEvent implements Cancellable {
     //
     private boolean cancelled;
 
-    public EntityAirChangeEvent(@NotNull Entity what, int amount) {
+    public EntityAirChangeEvent(@NotNull final Entity what, final int amount) {
         super(what);
         this.amount = amount;
     }
@@ -35,7 +35,7 @@ public class EntityAirChangeEvent extends EntityEvent implements Cancellable {
      *
      * @param amount amount of air remaining
      */
-    public void setAmount(int amount) {
+    public void setAmount(final int amount) {
         this.amount = amount;
     }
 
@@ -45,7 +45,7 @@ public class EntityAirChangeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
index ded0693f90ae4e42c12b77110e9daf8cf289f180..0b985fe7dafdffa094b19dc5e66a4870ee4c6b18 100644
--- a/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityBreedEvent.java
@@ -23,7 +23,7 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
     //
     private boolean cancel;
 
-    public EntityBreedEvent(@NotNull LivingEntity child, @NotNull LivingEntity mother, @NotNull LivingEntity father, @Nullable LivingEntity breeder, @Nullable ItemStack bredWith, int experience) {
+    public EntityBreedEvent(@NotNull final LivingEntity child, @NotNull final LivingEntity mother, @NotNull final LivingEntity father, @Nullable final LivingEntity breeder, @Nullable final ItemStack bredWith, final int experience) {
         super(child);
 
         Validate.notNull(child, "Cannot have null child");
@@ -100,7 +100,7 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
      *
      * @param experience experience amount
      */
-    public void setExperience(int experience) {
+    public void setExperience(final int experience) {
         Validate.isTrue(experience >= 0, "Experience cannot be negative");
         this.experience = experience;
     }
@@ -111,7 +111,7 @@ public class EntityBreedEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
index 1a9575ad4c81aefa5ef0b927f6ac8f7064b55c49..42babe8c6136339998c28319b490252d8d2e1e3f 100644
--- a/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityChangeBlockEvent.java
@@ -40,7 +40,7 @@ public class EntityChangeBlockEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java b/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
index eea9aa7bf1f770bbb47c11c74ab88152877faa84..1f5d3bf657e777dc08c6c5986f8b1eb84c2f22dc 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCombustEvent.java
@@ -27,7 +27,7 @@ public class EntityCombustEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -47,7 +47,7 @@ public class EntityCombustEvent extends EntityEvent implements Cancellable {
      *
      * @param duration the time in seconds to be alight for.
      */
-    public void setDuration(int duration) {
+    public void setDuration(final int duration) {
         this.duration = duration;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
index 397baaefd2fb45ae9d50b7b9bd5276e6ad980f20..c0b7721a7adbe949dbcc5678412a9abd7a312525 100644
--- a/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityCreatePortalEvent.java
@@ -50,7 +50,7 @@ public class EntityCreatePortalEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
index ef476eddc77e4341a5929bd916756d3e2102eb2f..4d196f36919d1a46ed98fa7cddc004d4bdfc57fd 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDamageEvent.java
@@ -50,7 +50,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
@@ -62,7 +62,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      * @return the original damage
      * @throws IllegalArgumentException if type is null
      */
-    public double getOriginalDamage(@NotNull DamageModifier type) throws IllegalArgumentException {
+    public double getOriginalDamage(@NotNull final DamageModifier type) throws IllegalArgumentException {
         final Double damage = originals.get(type);
         if (damage != null) {
             return damage;
@@ -81,7 +81,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      *     #isApplicable(DamageModifier)} returns false
      * @see #getFinalDamage()
      */
-    public void setDamage(@NotNull DamageModifier type, double damage) throws IllegalArgumentException, UnsupportedOperationException {
+    public void setDamage(@NotNull final DamageModifier type, final double damage) throws IllegalArgumentException, UnsupportedOperationException {
         if (!modifiers.containsKey(type)) {
             throw new UnsupportedOperationException(type + " is not applicable to " + getEntity());
         }
@@ -96,7 +96,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      * @throws IllegalArgumentException if type is null
      * @see DamageModifier#BASE
      */
-    public double getDamage(@NotNull DamageModifier type) throws IllegalArgumentException {
+    public double getDamage(@NotNull final DamageModifier type) throws IllegalArgumentException {
         Validate.notNull(type, "Cannot have null DamageModifier");
         final Double damage = modifiers.get(type);
         return damage == null ? 0 : damage;
@@ -113,7 +113,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      * @return true if the modifier is supported by the caller, false otherwise
      * @throws IllegalArgumentException if type is null
      */
-    public boolean isApplicable(@NotNull DamageModifier type) throws IllegalArgumentException {
+    public boolean isApplicable(@NotNull final DamageModifier type) throws IllegalArgumentException {
         Validate.notNull(type, "Cannot have null DamageModifier");
         return modifiers.containsKey(type);
     }
@@ -136,7 +136,7 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      */
     public final double getFinalDamage() {
         double damage = 0;
-        for (DamageModifier modifier : MODIFIERS) {
+        for (final DamageModifier modifier : MODIFIERS) {
             damage += getDamage(modifier);
         }
         return damage;
@@ -151,22 +151,22 @@ public class EntityDamageEvent extends EntityEvent implements Cancellable {
      *
      * @param damage The raw amount of damage caused by the event
      */
-    public void setDamage(double damage) {
+    public void setDamage(final double damage) {
         // These have to happen in the same order as the server calculates them, keep the enum sorted
         double remaining = damage;
         double oldRemaining = getDamage(DamageModifier.BASE);
-        for (DamageModifier modifier : MODIFIERS) {
+        for (final DamageModifier modifier : MODIFIERS) {
             if (!isApplicable(modifier)) {
                 continue;
             }
 
-            Function<? super Double, Double> modifierFunction = modifierFunctions.get(modifier);
-            double newVanilla = modifierFunction.apply(remaining);
-            double oldVanilla = modifierFunction.apply(oldRemaining);
-            double difference = oldVanilla - newVanilla;
+            final Function<? super Double, Double> modifierFunction = modifierFunctions.get(modifier);
+            final double newVanilla = modifierFunction.apply(remaining);
+            final double oldVanilla = modifierFunction.apply(oldRemaining);
+            final double difference = oldVanilla - newVanilla;
 
             // Don't allow value to cross zero, assume zero values should be negative
-            double old = getDamage(modifier);
+            final double old = getDamage(modifier);
             if (old > 0) {
                 setDamage(modifier, Math.max(0, old - difference));
             } else {
diff --git a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
index e19a3df9aa2204b44c0b029bda141ae6306f60a1..ab6753b7fa2dfc10f753e4b7c50988ab37dc42e0 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDeathEvent.java
@@ -60,7 +60,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param exp Amount of EXP to drop.
      */
-    public void setDroppedExp(int exp) {
+    public void setDroppedExp(final int exp) {
         this.dropExp = exp;
     }
 
@@ -92,7 +92,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
@@ -113,8 +113,8 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      * @param reviveHealth The amount of health
      * @throws IllegalArgumentException Thrown if the health is {@literal <= 0 or >} max health
      */
-    public void setReviveHealth(double reviveHealth) throws IllegalArgumentException {
-        double maxHealth = ((LivingEntity) entity).getAttribute(org.bukkit.attribute.Attribute.GENERIC_MAX_HEALTH).getValue();
+    public void setReviveHealth(final double reviveHealth) throws IllegalArgumentException {
+        final double maxHealth = ((LivingEntity) entity).getAttribute(org.bukkit.attribute.Attribute.GENERIC_MAX_HEALTH).getValue();
         if ((maxHealth != 0 && reviveHealth <= 0) || (reviveHealth > maxHealth)) {
             throw new IllegalArgumentException("Health must be between 0 (exclusive) and " + maxHealth + " (inclusive), but was " + reviveHealth);
         }
@@ -136,7 +136,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param playDeathSound Enable or disable the death sound
      */
-    public void setShouldPlayDeathSound(boolean playDeathSound) {
+    public void setShouldPlayDeathSound(final boolean playDeathSound) {
         this.shouldPlayDeathSound = playDeathSound;
     }
 
@@ -155,7 +155,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param sound The sound that the entity should make when dying
      */
-    public void setDeathSound(@Nullable org.bukkit.Sound sound) {
+    public void setDeathSound(@Nullable final org.bukkit.Sound sound) {
         deathSound = sound;
     }
 
@@ -174,7 +174,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param soundCategory The sound category
      */
-    public void setDeathSoundCategory(@Nullable org.bukkit.SoundCategory soundCategory) {
+    public void setDeathSoundCategory(@Nullable final org.bukkit.SoundCategory soundCategory) {
         this.deathSoundCategory = soundCategory;
     }
 
@@ -192,7 +192,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param volume The volume the death sound should play at
      */
-    public void setDeathSoundVolume(float volume) {
+    public void setDeathSoundVolume(final float volume) {
         this.deathSoundVolume = volume;
     }
 
@@ -210,7 +210,7 @@ public class EntityDeathEvent extends EntityEvent implements org.bukkit.event.Ca
      *
      * @param pitch The pitch the death sound should play with
      */
-    public void setDeathSoundPitch(float pitch) {
+    public void setDeathSoundPitch(final float pitch) {
         this.deathSoundPitch = pitch;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java b/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
index 3ccdcc755e76838046f169a6c2060adf825f2108..57cb53d996479da96298e90fd1e38b9faed94a66 100644
--- a/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityDropItemEvent.java
@@ -36,7 +36,7 @@ public class EntityDropItemEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java b/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
index d5bd804a58a07258c19e73700d2554b07a9a8cd7..0bf2adc08158fd8ef0aaed5e89ab823fc4794a59 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEnterBlockEvent.java
@@ -42,7 +42,7 @@ public class EntityEnterBlockEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java b/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
index 59aab10c2d27247eb77bd71d75b5f9126aa0fb12..08e384b350907d13a899e797248f3f211200af12 100644
--- a/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEnterLoveModeEvent.java
@@ -20,7 +20,7 @@ public class EntityEnterLoveModeEvent extends EntityEvent implements Cancellable
     private final HumanEntity humanEntity;
     private int ticksInLove;
 
-    public EntityEnterLoveModeEvent(@NotNull Animals animalInLove, @Nullable HumanEntity humanEntity, int ticksInLove) {
+    public EntityEnterLoveModeEvent(@NotNull final Animals animalInLove, @Nullable final HumanEntity humanEntity, final int ticksInLove) {
         super(animalInLove);
         this.humanEntity = humanEntity;
         this.ticksInLove = ticksInLove;
@@ -63,7 +63,7 @@ public class EntityEnterLoveModeEvent extends EntityEvent implements Cancellable
      * @param ticksInLove The amount of ticks that the animal will fall in love
      * for
      */
-    public void setTicksInLove(int ticksInLove) {
+    public void setTicksInLove(final int ticksInLove) {
         this.ticksInLove = ticksInLove;
     }
 
@@ -73,7 +73,7 @@ public class EntityEnterLoveModeEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java b/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
index 2ff372d73e666ea4a19869fef7f452cefaf40b62..d96872f8822627aa51fdf796a0a42a4acc189d7e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExhaustionEvent.java
@@ -17,7 +17,7 @@ public class EntityExhaustionEvent extends EntityEvent implements Cancellable {
     private float exhaustion;
     private boolean cancel;
 
-    public EntityExhaustionEvent(@NotNull HumanEntity who, @NotNull ExhaustionReason exhaustionReason, float exhaustion) {
+    public EntityExhaustionEvent(@NotNull final HumanEntity who, @NotNull final ExhaustionReason exhaustionReason, final float exhaustion) {
         super(who);
         this.exhaustionReason = exhaustionReason;
         this.exhaustion = exhaustion;
@@ -51,7 +51,7 @@ public class EntityExhaustionEvent extends EntityEvent implements Cancellable {
      *
      * @param exhaustion new exhaustion to add
      */
-    public void setExhaustion(float exhaustion) {
+    public void setExhaustion(final float exhaustion) {
         this.exhaustion = exhaustion;
     }
 
@@ -67,7 +67,7 @@ public class EntityExhaustionEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
index 10d0e18dfd423b108fe381e8142867eb10399359..54b062ea8cf3923bf77fa18208a42f98f2dd70d9 100644
--- a/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityExplodeEvent.java
@@ -32,7 +32,7 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -74,7 +74,7 @@ public class EntityExplodeEvent extends EntityEvent implements Cancellable {
      *
      * @param yield The new yield percentage
      */
-    public void setYield(float yield) {
+    public void setYield(final float yield) {
         this.yield = yield;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
index 23d5d9b4308e631751bc9db6c5507bac2b8dbf64..2feb8c6da36f6317b9f55149d13af3256ffe5426 100644
--- a/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityInteractEvent.java
@@ -25,7 +25,7 @@ public class EntityInteractEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java b/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
index c866df03d66dd8724e12c7353da4cf144c70b2c8..673eb248ae4375bf4b8cf5ad170a6f968038627d 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPickupItemEvent.java
@@ -52,7 +52,7 @@ public class EntityPickupItemEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java b/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
index 4d5a060473b04372e8c781a03d29f7833e0d8153..9513dffce03d76c5d1d2cac7ed61a3048cefb495 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPlaceEvent.java
@@ -72,7 +72,7 @@ public class EntityPlaceEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
index 67fb9d93e808e907fa980f3004d415ae5d0a53fc..6543d1495a0de51363fec5b88752e708cce75797 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalEvent.java
@@ -20,7 +20,7 @@ public class EntityPortalEvent extends EntityTeleportEvent {
         super(entity, from, to);
     }
 
-    public EntityPortalEvent(@NotNull Entity entity, @NotNull Location from, @Nullable Location to, int searchRadius) {
+    public EntityPortalEvent(@NotNull final Entity entity, @NotNull final Location from, @Nullable final Location to, final int searchRadius) {
         super(entity, from, to);
         this.searchRadius = searchRadius;
     }
@@ -31,7 +31,7 @@ public class EntityPortalEvent extends EntityTeleportEvent {
      * @param searchRadius the radius in which to search for a portal from the
      * location
      */
-    public void setSearchRadius(int searchRadius) {
+    public void setSearchRadius(final int searchRadius) {
         this.searchRadius = searchRadius;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
index 8884dd0eff2011ff1913c66f871994128b370c84..51aa3f19af5379ac945276704cec25e9bf24ce2b 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPortalExitEvent.java
@@ -50,7 +50,7 @@ public class EntityPortalExitEvent extends EntityTeleportEvent {
      *
      * @param after the velocity after exiting the portal
      */
-    public void setAfter(@NotNull Vector after) {
+    public void setAfter(@NotNull final Vector after) {
         this.after = after.clone();
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java b/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
index 6fb2b02ace143e8e9a12d5bef91c661939eaf950..571626b72d6ee09e355c64238edbe32007899af2 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPoseChangeEvent.java
@@ -16,7 +16,7 @@ public class EntityPoseChangeEvent extends EntityEvent {
     //
     private final Pose pose;
 
-    public EntityPoseChangeEvent(@NotNull Entity who, @NotNull Pose pose) {
+    public EntityPoseChangeEvent(@NotNull final Entity who, @NotNull final Pose pose) {
         super(who);
         this.pose = pose;
     }
diff --git a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
index 16b5fd279b0cb926900247618bcdb381a93f5a35..02c242987b5f1119b78f14aeb70cf0c594820ca3 100644
--- a/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityPotionEffectEvent.java
@@ -25,7 +25,7 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
     private boolean override;
 
     @Contract("_, null, null, _, _, _ -> fail")
-    public EntityPotionEffectEvent(@NotNull LivingEntity livingEntity, @Nullable PotionEffect oldEffect, @Nullable PotionEffect newEffect, @NotNull Cause cause, @NotNull Action action, boolean override) {
+    public EntityPotionEffectEvent(@NotNull final LivingEntity livingEntity, @Nullable final PotionEffect oldEffect, @Nullable final PotionEffect newEffect, @NotNull final Cause cause, @NotNull final Action action, final boolean override) {
         super(livingEntity);
         this.oldEffect = oldEffect;
         this.newEffect = newEffect;
@@ -102,7 +102,7 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
      *
      * @param override If the new effect will override the old one.
      */
-    public void setOverride(boolean override) {
+    public void setOverride(final boolean override) {
         this.override = override;
     }
 
@@ -112,7 +112,7 @@ public class EntityPotionEffectEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
index d51d2ec1d04d9ea8a25a70d0d856f2355ebfcb4a..f97fefea537865bd4234ce7d7eedc7648b7df768 100644
--- a/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityRegainHealthEvent.java
@@ -20,7 +20,7 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
         this(entity, amount, regainReason, false);
     }
 
-    public EntityRegainHealthEvent(@NotNull final Entity entity, final double amount, @NotNull final RegainReason regainReason, boolean isFastRegen) {
+    public EntityRegainHealthEvent(@NotNull final Entity entity, final double amount, @NotNull final RegainReason regainReason, final boolean isFastRegen) {
         // Paper end
         super(entity);
         this.amount = amount;
@@ -53,7 +53,7 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
      *
      * @param amount the amount of health the entity will regain
      */
-    public void setAmount(double amount) {
+    public void setAmount(final double amount) {
         this.amount = amount;
     }
 
@@ -63,7 +63,7 @@ public class EntityRegainHealthEvent extends EntityEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java b/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
index fa6b6c3b047edd1653f3c81027ec752821bcdb09..b22f3b12c94c6a5b770b51e969c998fe711fb508 100644
--- a/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityResurrectEvent.java
@@ -16,7 +16,7 @@ public class EntityResurrectEvent extends EntityEvent implements Cancellable {
     //
     private boolean cancelled;
 
-    public EntityResurrectEvent(@NotNull LivingEntity what) {
+    public EntityResurrectEvent(@NotNull final LivingEntity what) {
         super(what);
     }
 
@@ -32,7 +32,7 @@ public class EntityResurrectEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
index 719d0d878320c1903b44076053989ba99fa0e92a..e9de40a7137f1a8c19f7588dfcf27704feaf0efa 100644
--- a/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityShootBowEvent.java
@@ -24,7 +24,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     // Paper start
     @Deprecated
-    public void setConsumeArrow(boolean consumeArrow) {
+    public void setConsumeArrow(final boolean consumeArrow) {
         this.setConsumeItem(consumeArrow);
     }
 
@@ -44,7 +44,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     }
 
     @Deprecated
-    public EntityShootBowEvent(@NotNull final LivingEntity shooter, @Nullable final ItemStack bow, @NotNull ItemStack arrowItem, @NotNull final Entity projectile, final float force) {
+    public EntityShootBowEvent(@NotNull final LivingEntity shooter, @Nullable final ItemStack bow, @NotNull final ItemStack arrowItem, @NotNull final Entity projectile, final float force) {
         this(shooter, bow, arrowItem, projectile, EquipmentSlot.HAND, force, true);
     }
     // Paper end
@@ -102,7 +102,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
      *
      * @param projectile the new projectile
      */
-    public void setProjectile(@NotNull Entity projectile) {
+    public void setProjectile(@NotNull final Entity projectile) {
         this.projectile = projectile;
     }
 
@@ -138,7 +138,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
      *
      * @param consumeItem whether or not to consume the item
      */
-    public void setConsumeItem(boolean consumeItem) {
+    public void setConsumeItem(final boolean consumeItem) {
         this.consumeItem = consumeItem;
     }
 
@@ -157,7 +157,7 @@ public class EntityShootBowEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java b/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
index 961ee511342cd3a12ff2ff74d7b4683c6753123d..d52ff4818de3ff4df23719945759d3dae4b5b375 100644
--- a/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntitySpawnEvent.java
@@ -26,7 +26,7 @@ public class EntitySpawnEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java b/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
index 0252ca7aeda9d8adc7c211575b5de698f4d520a0..13a609bb57c5b2da2659ef4f6b98014d4db7b576 100644
--- a/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntitySpellCastEvent.java
@@ -15,7 +15,7 @@ public class EntitySpellCastEvent extends EntityEvent implements Cancellable {
     private boolean cancelled = false;
     private final Spellcaster.Spell spell;
 
-    public EntitySpellCastEvent(@NotNull Spellcaster what, @NotNull Spellcaster.Spell spell) {
+    public EntitySpellCastEvent(@NotNull final Spellcaster what, @NotNull final Spellcaster.Spell spell) {
         super(what);
         this.spell = spell;
     }
@@ -40,7 +40,7 @@ public class EntitySpellCastEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
index c410b48c2f9db17654e202b681a669d9aafba8c8..cc3d3696c811577dc50e94ee1edc813c4d7d7c9c 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTameEvent.java
@@ -31,7 +31,7 @@ public class EntityTameEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
index f70ad2b44707d167f7b70cb0c2436a732e3b93b1..3d3975c3f99ee10a0aa23965b97adf7bc73aea01 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetEvent.java
@@ -27,7 +27,7 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -66,7 +66,7 @@ public class EntityTargetEvent extends EntityEvent implements Cancellable {
      *
      * @param target The entity to target
      */
-    public void setTarget(@Nullable Entity target) {
+    public void setTarget(@Nullable final Entity target) {
         this.target = target;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
index 090ec6f96ca9b7f760389994da988c44c32b9976..e80f30ffebbfe146d32ac11887c3b3b2478ee23a 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTargetLivingEntityEvent.java
@@ -31,7 +31,7 @@ public class EntityTargetLivingEntityEvent extends EntityTargetEvent {
      * @param target The entity to target
      */
     @Override
-    public void setTarget(@Nullable Entity target) {
+    public void setTarget(@Nullable final Entity target) {
         if (target == null || target instanceof LivingEntity) {
             super.setTarget(target);
         }
diff --git a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
index a7918049ae599a583a9188d90eb86922fd948296..6e8b10f947dafc6018d9e0f8b04ae9d4e869178a 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTeleportEvent.java
@@ -19,7 +19,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
     private Location from;
     private Location to;
 
-    public EntityTeleportEvent(@NotNull Entity what, @NotNull Location from, @Nullable Location to) {
+    public EntityTeleportEvent(@NotNull final Entity what, @NotNull final Location from, @Nullable final Location to) {
         super(what);
         this.from = from;
         this.to = to;
@@ -32,7 +32,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -51,7 +51,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
      *
      * @param from New location this entity moved from
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         this.from = from;
     }
 
@@ -70,7 +70,7 @@ public class EntityTeleportEvent extends EntityEvent implements Cancellable {
      *
      * @param to New Location this entity moved to
      */
-    public void setTo(@Nullable Location to) {
+    public void setTo(@Nullable final Location to) {
         this.to = to;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java b/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java
index 1478cdbb42f9abb919848a9813529023055a0b2a..84221f45eb0c7ca4d7b2df3ba85348773516591e 100644
--- a/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityToggleGlideEvent.java
@@ -20,7 +20,7 @@ public class EntityToggleGlideEvent extends EntityEvent implements Cancellable {
     private boolean cancel = false;
     private final boolean isGliding;
 
-    public EntityToggleGlideEvent(@NotNull LivingEntity who, final boolean isGliding) {
+    public EntityToggleGlideEvent(@NotNull final LivingEntity who, final boolean isGliding) {
         super(who);
         this.isGliding = isGliding;
     }
@@ -31,7 +31,7 @@ public class EntityToggleGlideEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java b/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java
index 7b3fc4cadb4c2ea7894721ff8e308b15975237d1..afbf3533cf1d8d8e6f126dc6dcc7593cc347a2ed 100644
--- a/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityToggleSwimEvent.java
@@ -14,7 +14,7 @@ public class EntityToggleSwimEvent extends EntityEvent implements Cancellable {
     private boolean cancel = false;
     private final boolean isSwimming;
 
-    public EntityToggleSwimEvent(@NotNull LivingEntity who, final boolean isSwimming) {
+    public EntityToggleSwimEvent(@NotNull final LivingEntity who, final boolean isSwimming) {
         super(who);
         this.isSwimming = isSwimming;
     }
@@ -25,7 +25,7 @@ public class EntityToggleSwimEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
index 76ad715961c1b373ba276c61ced728affd4dbec1..018ca4de4c853b1ee11417af230ee6a47c360ba3 100644
--- a/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityTransformEvent.java
@@ -18,7 +18,7 @@ public class EntityTransformEvent extends EntityEvent implements Cancellable {
     private final List<Entity> convertedList;
     private final TransformReason transformReason;
 
-    public EntityTransformEvent(@NotNull Entity original, @NotNull List<Entity> convertedList, @NotNull TransformReason transformReason) {
+    public EntityTransformEvent(@NotNull final Entity original, @NotNull final List<Entity> convertedList, @NotNull final TransformReason transformReason) {
         super(original);
         this.convertedList = Collections.unmodifiableList(convertedList);
         this.converted = convertedList.get(0);
@@ -64,7 +64,7 @@ public class EntityTransformEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
index 72704d7e98be1269ac118b5f0a1a65b6d18c3a8b..dd6b4e6f455b2cb076e42795a74345356ef50d4c 100644
--- a/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityUnleashEvent.java
@@ -14,11 +14,11 @@ public class EntityUnleashEvent extends EntityEvent {
 
     // Paper start - drop leash variable
     @Deprecated
-    public EntityUnleashEvent(@NotNull Entity entity, @NotNull UnleashReason reason) {
+    public EntityUnleashEvent(@NotNull final Entity entity, @NotNull final UnleashReason reason) {
         this(entity, reason, false);
     }
 
-    public EntityUnleashEvent(@NotNull Entity entity, @NotNull UnleashReason reason, boolean dropLeash) {
+    public EntityUnleashEvent(@NotNull final Entity entity, @NotNull final UnleashReason reason, final boolean dropLeash) {
         super(entity);
         // Paper end
         this.reason = reason;
@@ -50,7 +50,7 @@ public class EntityUnleashEvent extends EntityEvent {
      *
      * @param dropLeash Whether the leash item should be dropped
      */
-    public void setDropLeash(boolean dropLeash) {
+    public void setDropLeash(final boolean dropLeash) {
         this.dropLeash = dropLeash;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java b/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
index 6db5dad719de5566f3b27666ff6006c1dbb189e9..db1ea3a25b5e54cb1cdf645148145c1debf7dabe 100644
--- a/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ExplosionPrimeEvent.java
@@ -32,7 +32,7 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -50,7 +50,7 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
      *
      * @param radius the radius of the explosion
      */
-    public void setRadius(float radius) {
+    public void setRadius(final float radius) {
         this.radius = radius;
     }
 
@@ -68,7 +68,7 @@ public class ExplosionPrimeEvent extends EntityEvent implements Cancellable {
      *
      * @param fire true if you want this explosion to create fire
      */
-    public void setFire(boolean fire) {
+    public void setFire(final boolean fire) {
         this.fire = fire;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java b/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java
index 51ad0e6bfc0336193b481406e3ae268793ebe700..d7d4956002973bdedd50fd849e72a60ab921c64e 100644
--- a/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/FireworkExplodeEvent.java
@@ -30,7 +30,7 @@ public class FireworkExplodeEvent extends EntityEvent implements Cancellable {
      * @param cancel whether to cancel or not.
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
index 7f4c5ea8607b08f8676528cc71b0b312575809ed..ecee7eca6e34760f34f81b32a75977533d7a2c7d 100644
--- a/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/FoodLevelChangeEvent.java
@@ -73,7 +73,7 @@ public class FoodLevelChangeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java b/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
index 65b1ddb2b2b7bb75a69ed807ca83e9acc4c674c2..82d39df2b43f364b977a98edca37d231b1e79727 100644
--- a/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
+++ b/src/main/java/org/bukkit/event/entity/HorseJumpEvent.java
@@ -28,7 +28,7 @@ public class HorseJumpEvent extends EntityEvent implements Cancellable {
      */
     @Override
     @Deprecated
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
@@ -73,7 +73,7 @@ public class HorseJumpEvent extends EntityEvent implements Cancellable {
      * @deprecated horse jumping was moved client side.
      */
     @Deprecated
-    public void setPower(float power) {
+    public void setPower(final float power) {
         this.power = power;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
index 6fc66197eb2c5d59c70d8d028b7963748371edbe..bcf33607d0596b034441b8e0c60609355f34d97d 100644
--- a/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemDespawnEvent.java
@@ -29,7 +29,7 @@ public class ItemDespawnEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
index e378cc29b47238fe12ae9aff5171edcff6b456f5..3a430ce7270a2ee90480b1babd07695e66c4734b 100644
--- a/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ItemMergeEvent.java
@@ -11,7 +11,7 @@ public class ItemMergeEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final Item target;
 
-    public ItemMergeEvent(@NotNull Item item, @NotNull Item target) {
+    public ItemMergeEvent(@NotNull final Item item, @NotNull final Item target) {
         super(item);
         this.target = target;
     }
@@ -22,7 +22,7 @@ public class ItemMergeEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
index a10dab1671b6e0c8c4dfa37b10cf928a4edfb8ce..58234a02e351dfe4b15806917a0ae94fe3b5aaa1 100644
--- a/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/LingeringPotionSplashEvent.java
@@ -41,7 +41,7 @@ public class LingeringPotionSplashEvent extends ProjectileHitEvent implements Ca
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PigZapEvent.java b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
index f7829a522e17228431022c2923bdd6c9f3ba2ed3..bff7f9943f6728ed23447166acb0f367794d1de3 100644
--- a/src/main/java/org/bukkit/event/entity/PigZapEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZapEvent.java
@@ -28,7 +28,7 @@ public class PigZapEvent extends EntityZapEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java b/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
index bb4f13bbb23893a6ac2d898394cc9d2d6af965c4..c5da392a22f429c07df1c6caffa081300d36b220 100644
--- a/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PigZombieAngerEvent.java
@@ -51,7 +51,7 @@ public class PigZombieAngerEvent extends EntityEvent implements Cancellable {
      * @param newAnger the new anger
      * @see PigZombie#setAnger(int)
      */
-    public void setNewAnger(int newAnger) {
+    public void setNewAnger(final int newAnger) {
         this.newAnger = newAnger;
     }
 
@@ -67,7 +67,7 @@ public class PigZombieAngerEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
index 8f993b3007cc71c40e395c42363d4089c1bb9ba1..aab5c2b2d81d5fd8b5962a21740076a8e8a0aa8c 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerDeathEvent.java
@@ -25,15 +25,15 @@ public class PlayerDeathEvent extends EntityDeathEvent {
         this(player, drops, droppedExp, 0, adventure$deathMessage, null);
     }
 
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable String deathMessage) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable final String deathMessage) {
         this(player, drops, droppedExp, newExp, 0, 0, adventure$deathMessage, deathMessage);
     }
 
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable String deathMessage) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable final String deathMessage) {
         this(player, drops, droppedExp, newExp, newTotalExp, newLevel, adventure$deathMessage, deathMessage, true);
     }
 
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable String deathMessage, boolean doExpDrop) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final net.kyori.adventure.text.Component adventure$deathMessage, @Nullable final String deathMessage, final boolean doExpDrop) {
         super(player, drops, droppedExp);
         this.newExp = newExp;
         this.newTotalExp = newTotalExp;
@@ -59,7 +59,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
     }
 
     @Deprecated // Paper
-    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage, boolean doExpDrop) {
+    public PlayerDeathEvent(@NotNull final Player player, @NotNull final List<ItemStack> drops, final int droppedExp, final int newExp, final int newTotalExp, final int newLevel, @Nullable final String deathMessage, final boolean doExpDrop) {
         super(player, drops, droppedExp);
         this.newExp = newExp;
         this.newTotalExp = newTotalExp;
@@ -112,7 +112,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
     /**
      * @param doExpDrop sets if experience should be dropped from this death
      */
-    public void setShouldDropExperience(boolean doExpDrop) {
+    public void setShouldDropExperience(final boolean doExpDrop) {
         this.doExpDrop = doExpDrop;
     }
     // Paper end
@@ -129,7 +129,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param deathMessage Message to appear to other players on the server.
      */
-    public void deathMessage(@Nullable net.kyori.adventure.text.Component deathMessage) {
+    public void deathMessage(@Nullable final net.kyori.adventure.text.Component deathMessage) {
         this.deathMessage = null;
         this.adventure$deathMessage = deathMessage;
     }
@@ -151,7 +151,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      * @deprecated in favour of {@link #deathMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setDeathMessage(@Nullable String deathMessage) {
+    public void setDeathMessage(@Nullable final String deathMessage) {
         this.deathMessage = deathMessage;
         this.adventure$deathMessage = deathMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(deathMessage) : net.kyori.adventure.text.Component.empty(); // Paper
     }
@@ -168,7 +168,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
         return this.deathMessage != null ? this.deathMessage : (this.adventure$deathMessage != null ? getDeathMessageString(this.adventure$deathMessage) : null); // Paper
     }
     // Paper start //TODO: add translation API to drop String deathMessage in favor of just Adventure
-    private static String getDeathMessageString(net.kyori.adventure.text.Component component) {
+    private static String getDeathMessageString(final net.kyori.adventure.text.Component component) {
         return org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().serialize(component);
     }
     // Paper end
@@ -192,7 +192,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param exp New EXP of the respawned player
      */
-    public void setNewExp(int exp) {
+    public void setNewExp(final int exp) {
         newExp = exp;
     }
 
@@ -210,7 +210,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param level New Level of the respawned player
      */
-    public void setNewLevel(int level) {
+    public void setNewLevel(final int level) {
         newLevel = level;
     }
 
@@ -228,7 +228,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param totalExp New Total EXP of the respawned player
      */
-    public void setNewTotalExp(int totalExp) {
+    public void setNewTotalExp(final int totalExp) {
         newTotalExp = totalExp;
     }
 
@@ -254,7 +254,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param keepLevel True to keep all current value levels
      */
-    public void setKeepLevel(boolean keepLevel) {
+    public void setKeepLevel(final boolean keepLevel) {
         this.keepLevel = keepLevel;
     }
 
@@ -267,7 +267,7 @@ public class PlayerDeathEvent extends EntityDeathEvent {
      *
      * @param keepInventory True to keep the inventory
      */
-    public void setKeepInventory(boolean keepInventory) {
+    public void setKeepInventory(final boolean keepInventory) {
         this.keepInventory = keepInventory;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
index 5eb3fb72a13881b8bf0e40037b0002cb0a6eb883..7237cd7f5667693799fd76d2e8756f0abb6c2775 100644
--- a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
@@ -17,7 +17,7 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable {
     private boolean cancelled = false;
     private final Player player;
 
-    public PlayerLeashEntityEvent(@NotNull Entity what, @NotNull Entity leashHolder, @NotNull Player leasher) {
+    public PlayerLeashEntityEvent(@NotNull final Entity what, @NotNull final Entity leashHolder, @NotNull final Player leasher) {
         this.leashHolder = leashHolder;
         this.entity = what;
         this.player = leasher;
@@ -70,7 +70,7 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
index ddfee62366a9abffbe99cef1bc5cb684fb2d2a79..b7384b3f08e68cef56b4eccb2874b79b17e3f34d 100644
--- a/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PotionSplashEvent.java
@@ -58,8 +58,8 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      * @return intensity relative to maximum effect; 0.0: not affected; 1.0:
      *     fully hit by potion effects
      */
-    public double getIntensity(@NotNull LivingEntity entity) {
-        Double intensity = affectedEntities.get(entity);
+    public double getIntensity(@NotNull final LivingEntity entity) {
+        final Double intensity = affectedEntities.get(entity);
         return intensity != null ? intensity : 0.0;
     }
 
@@ -69,7 +69,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
      * @param entity For which entity to define a new intensity
      * @param intensity relative to maximum effect
      */
-    public void setIntensity(@NotNull LivingEntity entity, double intensity) {
+    public void setIntensity(@NotNull final LivingEntity entity, final double intensity) {
         Validate.notNull(entity, "You must specify a valid entity.");
         if (intensity <= 0.0) {
             affectedEntities.remove(entity);
@@ -84,7 +84,7 @@ public class PotionSplashEvent extends ProjectileHitEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
index 000c9967e008d3340a08c4ee727a5d2de27dedcc..bccee51538b55c16aa2e03c98e8e85c965fb5a45 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileHitEvent.java
@@ -30,7 +30,7 @@ public class ProjectileHitEvent extends EntityEvent implements Cancellable { //
      * Whether or not to cancel any behavior that would occur from the arrow hitting the block
      * @param cancel true if you wish to cancel this event
      */
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
     // Paper end
@@ -39,19 +39,19 @@ public class ProjectileHitEvent extends EntityEvent implements Cancellable { //
         this(projectile, null, null);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Entity hitEntity) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Entity hitEntity) {
         this(projectile, hitEntity, null);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Block hitBlock) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Block hitBlock) {
         this(projectile, null, hitBlock);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Entity hitEntity, @Nullable Block hitBlock) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Entity hitEntity, @Nullable final Block hitBlock) {
         this(projectile, hitEntity, hitBlock, null);
     }
 
-    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable Entity hitEntity, @Nullable Block hitBlock, @Nullable BlockFace hitFace) {
+    public ProjectileHitEvent(@NotNull final Projectile projectile, @Nullable final Entity hitEntity, @Nullable final Block hitBlock, @Nullable final BlockFace hitFace) {
         super(projectile);
         this.hitEntity = hitEntity;
         this.hitBlock = hitBlock;
diff --git a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
index c5fc3c55843dc64fc706f69a90ca411ef781a3b6..986976e0e4ea96567a5b6c48c66d3a1976f1af89 100644
--- a/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
+++ b/src/main/java/org/bukkit/event/entity/ProjectileLaunchEvent.java
@@ -11,7 +11,7 @@ import org.jetbrains.annotations.NotNull;
 public class ProjectileLaunchEvent extends EntitySpawnEvent implements Cancellable {
     private boolean cancelled;
 
-    public ProjectileLaunchEvent(@NotNull Entity what) {
+    public ProjectileLaunchEvent(@NotNull final Entity what) {
         super(what);
     }
 
@@ -21,7 +21,7 @@ public class ProjectileLaunchEvent extends EntitySpawnEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java b/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
index 4db826e4dbd02c42c55516a68d29f2020fff9b15..16456da27ad1b6602c193c575f80eb8914a76d86 100644
--- a/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SheepDyeWoolEvent.java
@@ -26,7 +26,7 @@ public class SheepDyeWoolEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -51,7 +51,7 @@ public class SheepDyeWoolEvent extends EntityEvent implements Cancellable {
      *
      * @param color the DyeColor the sheep will be dyed
      */
-    public void setColor(@NotNull DyeColor color) {
+    public void setColor(@NotNull final DyeColor color) {
         this.color = color;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java b/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
index 05264b31ad574cef52ad7621ecddc723e65287b0..2569c55b9b1555b334865d8d7e9cf60228f62ebc 100644
--- a/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SheepRegrowWoolEvent.java
@@ -23,7 +23,7 @@ public class SheepRegrowWoolEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java b/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
index 02b659847c69ab99023aaa44c50a704ea18acedb..5146653684424d6d4032a3e8a6aa62aa8c5c2158 100644
--- a/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
+++ b/src/main/java/org/bukkit/event/entity/SlimeSplitEvent.java
@@ -24,7 +24,7 @@ public class SlimeSplitEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -48,7 +48,7 @@ public class SlimeSplitEvent extends EntityEvent implements Cancellable {
      *
      * @param count the amount of slimes to spawn
      */
-    public void setCount(int count) {
+    public void setCount(final int count) {
         this.count = count;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java b/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java
index 8715bfa3692fa55cde2a9291c990b14efb7e3f7d..bb45a0d8d52cc8d84da9d59c0a5e5259a4711806 100644
--- a/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/StriderTemperatureChangeEvent.java
@@ -13,7 +13,7 @@ public class StriderTemperatureChangeEvent extends EntityEvent {
     private static final HandlerList handlers = new HandlerList();
     private final boolean shivering;
 
-    public StriderTemperatureChangeEvent(@NotNull Strider what, boolean shivering) {
+    public StriderTemperatureChangeEvent(@NotNull final Strider what, final boolean shivering) {
         super(what);
         this.shivering = shivering;
     }
diff --git a/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java
index 58155105dc1c6ec15a58f80eaf5c0e6419c6ad32..7f5e7d829ac8cb1cce97fb72ff098a161c4270fe 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerAcquireTradeEvent.java
@@ -16,7 +16,7 @@ public class VillagerAcquireTradeEvent extends EntityEvent implements Cancellabl
     //
     private MerchantRecipe recipe;
 
-    public VillagerAcquireTradeEvent(@NotNull AbstractVillager what, @NotNull MerchantRecipe recipe) {
+    public VillagerAcquireTradeEvent(@NotNull final AbstractVillager what, @NotNull final MerchantRecipe recipe) {
         super(what);
         this.recipe = recipe;
     }
@@ -36,7 +36,7 @@ public class VillagerAcquireTradeEvent extends EntityEvent implements Cancellabl
      *
      * @param recipe the new recipe
      */
-    public void setRecipe(@NotNull MerchantRecipe recipe) {
+    public void setRecipe(@NotNull final MerchantRecipe recipe) {
         this.recipe = recipe;
     }
 
@@ -46,7 +46,7 @@ public class VillagerAcquireTradeEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
index 28cd77e74e2065ce0886df967050f1435ef8c3b3..19b509fd776c761a0f8234984c86b8cfc8ac2033 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerCareerChangeEvent.java
@@ -13,7 +13,7 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
     private Profession profession;
     private final ChangeReason reason;
 
-    public VillagerCareerChangeEvent(@NotNull Villager what, @NotNull Profession profession, @NotNull ChangeReason reason) {
+    public VillagerCareerChangeEvent(@NotNull final Villager what, @NotNull final Profession profession, @NotNull final ChangeReason reason) {
         super(what);
         this.profession = profession;
         this.reason = reason;
@@ -40,7 +40,7 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
      *
      * @param profession new profession
      */
-    public void setProfession(@NotNull Profession profession) {
+    public void setProfession(@NotNull final Profession profession) {
         this.profession = profession;
     }
 
@@ -60,7 +60,7 @@ public class VillagerCareerChangeEvent extends EntityEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(@NotNull boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java b/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java
index 36bfe05f2ae0316e883b982205327c9d04440f4a..0d13b079cca12a020f76b2ee7f80de77b8833db8 100644
--- a/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java
+++ b/src/main/java/org/bukkit/event/entity/VillagerReplenishTradeEvent.java
@@ -20,7 +20,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
     private MerchantRecipe recipe;
     private int bonus;
 
-    public VillagerReplenishTradeEvent(@NotNull AbstractVillager what, @NotNull MerchantRecipe recipe, int bonus) {
+    public VillagerReplenishTradeEvent(@NotNull final AbstractVillager what, @NotNull final MerchantRecipe recipe, final int bonus) {
         super(what);
         this.recipe = recipe;
         this.bonus = bonus;
@@ -41,7 +41,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
      *
      * @param recipe the replenished recipe
      */
-    public void setRecipe(@NotNull MerchantRecipe recipe) {
+    public void setRecipe(@NotNull final MerchantRecipe recipe) {
         this.recipe = recipe;
     }
 
@@ -61,7 +61,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
      * @param bonus the extra uses added
      * @see VillagerReplenishTradeEvent#getBonus()
      */
-    public void setBonus(int bonus) {
+    public void setBonus(final int bonus) {
         this.bonus = bonus;
     }
 
@@ -71,7 +71,7 @@ public class VillagerReplenishTradeEvent extends EntityEvent implements Cancella
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
index 16d8196e1fd0f82c48312cd2b38a891202a94417..380efec03cd10e6584935da2f34cce75fa2906f5 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingBreakEvent.java
@@ -34,7 +34,7 @@ public class HangingBreakEvent extends HangingEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
index 959b9f3fb41f8de6c8fb9a3b2df13212e29cf0e7..1af8fb4f2bbe1f3303a7ec375453403f63e7f30a 100644
--- a/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingPlaceEvent.java
@@ -62,7 +62,7 @@ public class HangingPlaceEvent extends HangingEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/BrewEvent.java b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
index e50aee8c03b1cb145f667e3259cbad6abff76d6e..6f05850cdf8eed8ffbdad4df5161ec348c975722 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewEvent.java
@@ -17,7 +17,7 @@ public class BrewEvent extends BlockEvent implements Cancellable {
     private final int fuelLevel;
     private boolean cancelled;
 
-    public BrewEvent(@NotNull Block brewer, @NotNull BrewerInventory contents, int fuelLevel) {
+    public BrewEvent(@NotNull final Block brewer, @NotNull final BrewerInventory contents, final int fuelLevel) {
         super(brewer);
         this.contents = contents;
         this.fuelLevel = fuelLevel;
@@ -48,7 +48,7 @@ public class BrewEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java b/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
index 633ec5187175ed59d41ee9ee52e7f5e277ea910d..6fb18d4108f2c7e99fed226e0cc0bc895734e9fa 100644
--- a/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/BrewingStandFuelEvent.java
@@ -19,7 +19,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
     private boolean cancelled;
     private boolean consuming = true;
 
-    public BrewingStandFuelEvent(@NotNull Block brewingStand, @NotNull ItemStack fuel, int fuelPower) {
+    public BrewingStandFuelEvent(@NotNull final Block brewingStand, @NotNull final ItemStack fuel, final int fuelPower) {
         super(brewingStand);
         this.fuel = fuel;
         this.fuelPower = fuelPower;
@@ -51,7 +51,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
      *
      * @param fuelPower the fuel power for this fuel
      */
-    public void setFuelPower(int fuelPower) {
+    public void setFuelPower(final int fuelPower) {
         this.fuelPower = fuelPower;
     }
 
@@ -69,7 +69,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
      *
      * @param consuming whether the fuel will be reduced or not
      */
-    public void setConsuming(boolean consuming) {
+    public void setConsuming(final boolean consuming) {
         this.consuming = consuming;
     }
 
@@ -79,7 +79,7 @@ public class BrewingStandFuelEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
index 395f8a6eb09c3904659c0eb366e817ae7028b49e..bae0272981ac1c5a5cff1b987ca995b5c95050b5 100644
--- a/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/CraftItemEvent.java
@@ -12,12 +12,12 @@ import org.jetbrains.annotations.NotNull;
 public class CraftItemEvent extends InventoryClickEvent {
     private final Recipe recipe;
 
-    public CraftItemEvent(@NotNull Recipe recipe, @NotNull InventoryView what, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action) {
+    public CraftItemEvent(@NotNull final Recipe recipe, @NotNull final InventoryView what, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action) {
         super(what, type, slot, click, action);
         this.recipe = recipe;
     }
 
-    public CraftItemEvent(@NotNull Recipe recipe, @NotNull InventoryView what, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action, int key) {
+    public CraftItemEvent(@NotNull final Recipe recipe, @NotNull final InventoryView what, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action, final int key) {
         super(what, type, slot, click, action, key);
         this.recipe = recipe;
     }
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
index bc71bc2d3ace0d19d730c09f05f9e0655bcee8f5..1de1d92b3d3dda346e7d3f4a54afd7dc74b8e184 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceBurnEvent.java
@@ -49,7 +49,7 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
      *
      * @param burnTime the burn time for this fuel
      */
-    public void setBurnTime(int burnTime) {
+    public void setBurnTime(final int burnTime) {
         this.burnTime = burnTime;
     }
 
@@ -67,7 +67,7 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
      *
      * @param burning true if the furnace's fuel is burning
      */
-    public void setBurning(boolean burning) {
+    public void setBurning(final boolean burning) {
         this.burning = burning;
     }
 
@@ -77,7 +77,7 @@ public class FurnaceBurnEvent extends BlockEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
index 020739697a0b535cad0b15b574f77cdabbdfa3eb..473c67c878460540a23603f4b4d0f5d10887f11b 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceExtractEvent.java
@@ -14,7 +14,7 @@ public class FurnaceExtractEvent extends BlockExpEvent {
     private final Material itemType;
     private final int itemAmount;
 
-    public FurnaceExtractEvent(@NotNull Player player, @NotNull Block block, @NotNull Material itemType, int itemAmount, int exp) {
+    public FurnaceExtractEvent(@NotNull final Player player, @NotNull final Block block, @NotNull final Material itemType, final int itemAmount, final int exp) {
         super(block, exp);
         this.player = player;
         this.itemType = itemType;
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
index 16b3ab8f525c4e863f804cc8460a330407d85478..abc6bfed0624257b651244cef1592b381167c09a 100644
--- a/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceSmeltEvent.java
@@ -15,7 +15,7 @@ public class FurnaceSmeltEvent extends BlockCookEvent {
         super(furnace, source, result);
     }
     // Paper start
-    public FurnaceSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable org.bukkit.inventory.CookingRecipe<?> recipe) {
+    public FurnaceSmeltEvent(@NotNull final Block furnace, @NotNull final ItemStack source, @NotNull final ItemStack result, @org.jetbrains.annotations.Nullable final org.bukkit.inventory.CookingRecipe<?> recipe) {
         super(furnace, source, result, recipe);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
index 32b8b248a918efc36cd84dde19f4b9804b3358b0..eb66ad3c8a94e111236fbbabd3fd184b5a7eb741 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryClickEvent.java
@@ -55,7 +55,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
     private ItemStack current = null;
     private int hotbarKey = -1;
 
-    public InventoryClickEvent(@NotNull InventoryView view, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action) {
+    public InventoryClickEvent(@NotNull final InventoryView view, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action) {
         super(view);
         this.slot_type = type;
         this.rawSlot = slot;
@@ -64,7 +64,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
         this.action = action;
     }
 
-    public InventoryClickEvent(@NotNull InventoryView view, @NotNull SlotType type, int slot, @NotNull ClickType click, @NotNull InventoryAction action, int key) {
+    public InventoryClickEvent(@NotNull final InventoryView view, @NotNull final SlotType type, final int slot, @NotNull final ClickType click, @NotNull final InventoryAction action, final int key) {
         this(view, type, slot, click, action);
         this.hotbarKey = key;
     }
@@ -145,7 +145,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
      *     make unexpected changes in the behavior of the clicked Inventory.
      */
     @Deprecated
-    public void setCursor(@Nullable ItemStack stack) {
+    public void setCursor(@Nullable final ItemStack stack) {
         getView().setCursor(stack);
     }
 
@@ -154,7 +154,7 @@ public class InventoryClickEvent extends InventoryInteractEvent {
      *
      * @param stack the item to be placed in the current slot
      */
-    public void setCurrentItem(@Nullable ItemStack stack) {
+    public void setCurrentItem(@Nullable final ItemStack stack) {
         if (slot_type == SlotType.OUTSIDE) {
             current = stack;
         } else {
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
index 21ad8888c0e403bfc63518502577d651c02dda05..fae4e0dc9b84acb8c2d84d3ff8828b942d23ee12 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCloseEvent.java
@@ -57,11 +57,11 @@ public class InventoryCloseEvent extends InventoryEvent {
         PLUGIN,
     }
 
-    public InventoryCloseEvent(@NotNull InventoryView transaction) {
+    public InventoryCloseEvent(@NotNull final InventoryView transaction) {
         this(transaction, Reason.UNKNOWN);
     }
 
-    public InventoryCloseEvent(@NotNull InventoryView transaction, @NotNull Reason reason) {
+    public InventoryCloseEvent(@NotNull final InventoryView transaction, @NotNull final Reason reason) {
         super(transaction);
         this.reason = reason;
         // Paper end
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
index 9c6db8be4642b9704213b392011f56dbfc95cfb2..3c289aefdc19ed7eb50770ead022d08f82aed29d 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryCreativeEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class InventoryCreativeEvent extends InventoryClickEvent {
     private ItemStack item;
 
-    public InventoryCreativeEvent(@NotNull InventoryView what, @NotNull SlotType type, int slot, @NotNull ItemStack newItem) {
+    public InventoryCreativeEvent(@NotNull final InventoryView what, @NotNull final SlotType type, final int slot, @NotNull final ItemStack newItem) {
         super(what, type, slot, ClickType.CREATIVE, InventoryAction.PLACE_ALL);
         this.item = newItem;
     }
@@ -25,7 +25,7 @@ public class InventoryCreativeEvent extends InventoryClickEvent {
     }
 
     @Override
-    public void setCursor(@NotNull ItemStack item) {
+    public void setCursor(@NotNull final ItemStack item) {
         this.item = item;
     }
 }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
index 856e945c516f2d379e3a88b3ca533fc5ad73bc33..cafa7d936a39079908ad9d87cd010857782765a1 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryDragEvent.java
@@ -62,7 +62,7 @@ public class InventoryDragEvent extends InventoryInteractEvent {
     private final ItemStack oldCursor;
     private ItemStack newCursor;
 
-    public InventoryDragEvent(@NotNull InventoryView what, @Nullable ItemStack newCursor, @NotNull ItemStack oldCursor, boolean right, @NotNull Map<Integer, ItemStack> slots) {
+    public InventoryDragEvent(@NotNull final InventoryView what, @Nullable final ItemStack newCursor, @NotNull final ItemStack oldCursor, final boolean right, @NotNull final Map<Integer, ItemStack> slots) {
         super(what);
 
         Validate.notNull(oldCursor);
@@ -72,8 +72,8 @@ public class InventoryDragEvent extends InventoryInteractEvent {
         this.newCursor = newCursor;
         this.oldCursor = oldCursor;
         this.addedItems = slots;
-        ImmutableSet.Builder<Integer> b = ImmutableSet.builder();
-        for (Integer slot : slots.keySet()) {
+        final ImmutableSet.Builder<Integer> b = ImmutableSet.builder();
+        for (final Integer slot : slots.keySet()) {
             b.add(what.convertSlot(slot));
         }
         this.containerSlots = b.build();
@@ -130,7 +130,7 @@ public class InventoryDragEvent extends InventoryInteractEvent {
      *
      * @param newCursor the new cursor ItemStack
      */
-    public void setCursor(@Nullable ItemStack newCursor) {
+    public void setCursor(@Nullable final ItemStack newCursor) {
         this.newCursor = newCursor;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
index 8c7012e8426962a7e986bc5af915df63fdefb07e..37e81bfaa9adb208825f83df9dde38577a429db5 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
@@ -16,7 +16,7 @@ public class InventoryEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
     protected final InventoryView transaction;
 
-    public InventoryEvent(@NotNull InventoryView transaction) {
+    public InventoryEvent(@NotNull final InventoryView transaction) {
         this.transaction = transaction;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
index 14f821ca1da3fb9ceb97a4624528371e1b401aea..0fe46e8ebab044151af529a51f62bdb62cb1909e 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryInteractEvent.java
@@ -12,7 +12,7 @@ import org.jetbrains.annotations.NotNull;
 public abstract class InventoryInteractEvent extends InventoryEvent implements Cancellable {
     private Result result = Result.DEFAULT;
 
-    public InventoryInteractEvent(@NotNull InventoryView transaction) {
+    public InventoryInteractEvent(@NotNull final InventoryView transaction) {
         super(transaction);
     }
 
@@ -33,7 +33,7 @@ public abstract class InventoryInteractEvent extends InventoryEvent implements C
      * @param newResult the new {@link org.bukkit.event.Event.Result} for this event
      * @see #isCancelled()
      */
-    public void setResult(@NotNull Result newResult) {
+    public void setResult(@NotNull final Result newResult) {
         result = newResult;
     }
 
@@ -74,7 +74,7 @@ public abstract class InventoryInteractEvent extends InventoryEvent implements C
      * @param toCancel result becomes DENY if true, ALLOW if false
      */
     @Override
-    public void setCancelled(boolean toCancel) {
+    public void setCancelled(final boolean toCancel) {
         setResult(toCancel ? Result.DENY : Result.ALLOW);
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
index 04d4a83bfc4f86341f9d72128458154d08c8ec43..e9d1edf20c72116c4d06f0b194d7e62afc9b57f3 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -71,7 +71,7 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
      *
      * @param itemStack The ItemStack
      */
-    public void setItem(@NotNull ItemStack itemStack) {
+    public void setItem(@NotNull final ItemStack itemStack) {
         Validate.notNull(itemStack, "ItemStack cannot be null.  Cancel the event if you want nothing to be transferred.");
         calledSetItem = true; // Paper - record this method was used for auto detection of mode
         this.itemStack = itemStack.clone();
@@ -104,7 +104,7 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
index 9013d043503d175004ad276799e5935b7fa59dc4..cac8ae52e1c0a732cf0c1ab3425ec2bc13ab2100 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryOpenEvent.java
@@ -13,7 +13,7 @@ public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
 
-    public InventoryOpenEvent(@NotNull InventoryView transaction) {
+    public InventoryOpenEvent(@NotNull final InventoryView transaction) {
         super(transaction);
         this.cancelled = false;
     }
@@ -52,7 +52,7 @@ public class InventoryOpenEvent extends InventoryEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
index 1ffac4d58e0943a56f993c2609fa7142ec116921..17dcea7f28a01eb3657923116462ae7ad2fb5086 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
@@ -48,7 +48,7 @@ public class InventoryPickupItemEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryType.java b/src/main/java/org/bukkit/event/inventory/InventoryType.java
index d59a69410872cdf8b6195e6bb49e30123259a00a..254b7cf2b00793368a14e4e38c630563eb7e37c7 100644
--- a/src/main/java/org/bukkit/event/inventory/InventoryType.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryType.java
@@ -148,11 +148,11 @@ public enum InventoryType {
         return defaultTitleComponent;
     }
     // Paper end
-    InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle) {
+    InventoryType(final int defaultSize, /*@NotNull*/ final String defaultTitle) {
         this(defaultSize, defaultTitle, true);
     }
 
-    InventoryType(int defaultSize, /*@NotNull*/ String defaultTitle, boolean isCreatable) {
+    InventoryType(final int defaultSize, /*@NotNull*/ final String defaultTitle, final boolean isCreatable) {
         size = defaultSize;
         title = defaultTitle;
         this.isCreatable = isCreatable;
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
index 04e9626ef920f90a8e287a36e003bc4c4a6c5ede..c8c604c84f9c7e571b701475da8eb088b7f4472b 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareAnvilEvent.java
@@ -16,7 +16,7 @@ public class PrepareAnvilEvent extends PrepareResultEvent {
     //private static final HandlerList handlers = new HandlerList();
     //private ItemStack result;
 
-    public PrepareAnvilEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareAnvilEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory, result);
         //this.result = result;
         // Paper end
@@ -38,7 +38,7 @@ public class PrepareAnvilEvent extends PrepareResultEvent {
         return super.getResult(); // Paper
     }
 
-    public void setResult(@Nullable ItemStack result) {
+    public void setResult(@Nullable final ItemStack result) {
         super.setResult(result); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
index 82a8dda53ff613b1fd171d91d693749bb88c8d09..d8a17c63cfd0a3abbe9f39e526b73ce237ed3ed7 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareItemCraftEvent.java
@@ -12,7 +12,7 @@ public class PrepareItemCraftEvent extends InventoryEvent {
     private final boolean repair;
     private final CraftingInventory matrix;
 
-    public PrepareItemCraftEvent(@NotNull CraftingInventory what, @NotNull InventoryView view, boolean isRepair) {
+    public PrepareItemCraftEvent(@NotNull final CraftingInventory what, @NotNull final InventoryView view, final boolean isRepair) {
         super(view);
         this.matrix = what;
         this.repair = isRepair;
diff --git a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
index 4c8659b479842853739b43d685f5bc82820639c7..9deb3981ebf9f58cc949bc477b317656dbb97de7 100644
--- a/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/PrepareSmithingEvent.java
@@ -16,7 +16,7 @@ public class PrepareSmithingEvent extends PrepareResultEvent {
     //private static final HandlerList handlers = new HandlerList();
     //private ItemStack result;
 
-    public PrepareSmithingEvent(@NotNull InventoryView inventory, @Nullable ItemStack result) {
+    public PrepareSmithingEvent(@NotNull final InventoryView inventory, @Nullable final ItemStack result) {
         super(inventory, result);
         //this.result = result;
         // Paper end
@@ -38,7 +38,7 @@ public class PrepareSmithingEvent extends PrepareResultEvent {
         return super.getResult(); // Paper
     }
 
-    public void setResult(@Nullable ItemStack result) {
+    public void setResult(@Nullable final ItemStack result) {
         super.setResult(result); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java b/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java
index 3bddf946d52f88f281fa5da4e2b6014e5201f212..9740a5be38254bdb8599cf376a5eb6db703d43a9 100644
--- a/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/TradeSelectEvent.java
@@ -19,7 +19,7 @@ public class TradeSelectEvent extends InventoryInteractEvent {
     //
     private final int index;
 
-    public TradeSelectEvent(@NotNull InventoryView transaction, int newIndex) {
+    public TradeSelectEvent(@NotNull final InventoryView transaction, final int newIndex) {
         super(transaction);
         this.index = newIndex;
     }
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
index 399afcd19fcb6acd24857ed6ab48cf0d105a01a3..1fd078526afb9aa4b0df848081d5f472671d5844 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerChatEvent.java
@@ -64,7 +64,7 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
      *
      * @param message New message that the player will send
      */
-    public void setMessage(@NotNull String message) {
+    public void setMessage(@NotNull final String message) {
         this.message = message;
     }
 
@@ -101,7 +101,7 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
         // Oh for a better way to do this!
         try {
             String.format(format, player, message);
-        } catch (RuntimeException ex) {
+        } catch (final RuntimeException ex) {
             ex.fillInStackTrace();
             throw ex;
         }
@@ -133,7 +133,7 @@ public class AsyncPlayerChatEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
index f1d8b3c39fd84dabb5499564d8ab73d34cbd267c..da54f57e91f5bc220d88e942fd5703db96adb97f 100644
--- a/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/AsyncPlayerPreLoginEvent.java
@@ -45,11 +45,11 @@ public class AsyncPlayerPreLoginEvent extends Event {
     /*    * Changes the PlayerProfile the player will login as
      * @param profile The profile to use
      */
-    public void setPlayerProfile(@NotNull PlayerProfile profile) {
+    public void setPlayerProfile(@NotNull final PlayerProfile profile) {
         this.profile = profile;
     }
 
-    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId, @NotNull PlayerProfile profile) {
+    public AsyncPlayerPreLoginEvent(@NotNull final String name, @NotNull final InetAddress ipAddress, @NotNull final UUID uniqueId, @NotNull final PlayerProfile profile) {
         super(true);
         this.profile = profile;
         // Paper end
diff --git a/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java b/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
index 21ff095afb434d15babcdbe85fa0b94cbb7e75a7..6449cf6303f34defbfe5a42ff543fa68b771c466 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAdvancementDoneEvent.java
@@ -14,7 +14,7 @@ public class PlayerAdvancementDoneEvent extends PlayerEvent {
     //
     private final Advancement advancement;
 
-    public PlayerAdvancementDoneEvent(@NotNull Player who, @NotNull Advancement advancement) {
+    public PlayerAdvancementDoneEvent(@NotNull final Player who, @NotNull final Advancement advancement) {
         super(who);
         this.advancement = advancement;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
index 6cd236cd1fa10ec37e6e0228c7bbd4415b39399d..ca735471fe3863f3c3a0bfcb61664d796f29f4ca 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAnimationEvent.java
@@ -41,7 +41,7 @@ public class PlayerAnimationEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java
index 0788153a9641e75da565d2e6eee37eeee1cbc61e..b01efc2eb4acbd4fbed653062fb59ee1c2847ba7 100644
--- a/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerAttemptPickupItemEvent.java
@@ -52,7 +52,7 @@ public class PlayerAttemptPickupItemEvent extends PlayerEvent implements Cancell
      *
      * @param flyAtPlayer True for item to fly at player
      */
-    public void setFlyAtPlayer(boolean flyAtPlayer) {
+    public void setFlyAtPlayer(final boolean flyAtPlayer) {
         this.flyAtPlayer = flyAtPlayer;
     }
 
@@ -72,7 +72,7 @@ public class PlayerAttemptPickupItemEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
         this.flyAtPlayer = !cancel;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
index fe2dfaf70160f04e446023481da4eb7b28ce0bba..97c50875f8cb70d147a0cc162b215b09f5ba3006 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedEnterEvent.java
@@ -58,14 +58,14 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
     private final BedEnterResult bedEnterResult;
     private Result useBed = Result.DEFAULT;
 
-    public PlayerBedEnterEvent(@NotNull Player who, @NotNull Block bed, @NotNull BedEnterResult bedEnterResult) {
+    public PlayerBedEnterEvent(@NotNull final Player who, @NotNull final Block bed, @NotNull final BedEnterResult bedEnterResult) {
         super(who);
         this.bed = bed;
         this.bedEnterResult = bedEnterResult;
     }
 
     @Deprecated
-    public PlayerBedEnterEvent(@NotNull Player who, @NotNull Block bed) {
+    public PlayerBedEnterEvent(@NotNull final Player who, @NotNull final Block bed) {
         this(who, bed, BedEnterResult.OK);
     }
 
@@ -108,7 +108,7 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
      * @param useBed the action to take with the interacted bed
      * @see #useBed()
      */
-    public void setUseBed(@NotNull Result useBed) {
+    public void setUseBed(@NotNull final Result useBed) {
         this.useBed = useBed;
     }
 
@@ -139,7 +139,7 @@ public class PlayerBedEnterEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         setUseBed(cancel ? Result.DENY : useBed() == Result.DENY ? Result.DEFAULT : useBed());
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
index 1cb70b5c8776863f44f1c4cdde152c35cb51edb5..e26ab0e586e9a7b5bdea4c59d5eabdea78842839 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBedLeaveEvent.java
@@ -16,7 +16,7 @@ public class PlayerBedLeaveEvent extends PlayerEvent implements Cancellable {
     private boolean setBedSpawn;
     private boolean cancelled;
 
-    public PlayerBedLeaveEvent(@NotNull final Player who, @NotNull final Block bed, boolean setBedSpawn) {
+    public PlayerBedLeaveEvent(@NotNull final Player who, @NotNull final Block bed, final boolean setBedSpawn) {
         super(who);
         this.bed = bed;
         this.setBedSpawn = setBedSpawn;
@@ -60,7 +60,7 @@ public class PlayerBedLeaveEvent extends PlayerEvent implements Cancellable {
      *
      * @param setBedSpawn true to change the new spawn location
      */
-    public void setSpawnLocation(boolean setBedSpawn) {
+    public void setSpawnLocation(final boolean setBedSpawn) {
         this.setBedSpawn = setBedSpawn;
     }
 
@@ -70,7 +70,7 @@ public class PlayerBedLeaveEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
index 1e0f7ee7d198c08ce421ce105be42c4d01dc924f..cb082aa0bea7c7367517f4ce8129ffa30c6e88bc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketEvent.java
@@ -73,7 +73,7 @@ public abstract class PlayerBucketEvent extends PlayerEvent implements Cancellab
      *
      * @param itemStack the new held ItemStack after the bucket event.
      */
-    public void setItemStack(@Nullable ItemStack itemStack) {
+    public void setItemStack(@Nullable final ItemStack itemStack) {
         this.itemStack = itemStack;
     }
 
@@ -125,7 +125,7 @@ public abstract class PlayerBucketEvent extends PlayerEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java b/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java
index 56f1cc2d773d2c58207ee291bac596692980a731..b02cd44f728b5b542d45b1463b3482e61efa81fc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerBucketFillEvent.java
@@ -31,7 +31,7 @@ public class PlayerBucketFillEvent extends PlayerBucketEvent {
     }
 
     // Paper start - add EquipmentSlot
-    public PlayerBucketFillEvent(@NotNull final Player who, @NotNull Block block, @NotNull final Block blockClicked, @NotNull final BlockFace blockFace, @NotNull final Material bucket, @NotNull final ItemStack itemInHand, @org.jetbrains.annotations.Nullable final EquipmentSlot hand) {
+    public PlayerBucketFillEvent(@NotNull final Player who, @NotNull final Block block, @NotNull final Block blockClicked, @NotNull final BlockFace blockFace, @NotNull final Material bucket, @NotNull final ItemStack itemInHand, @org.jetbrains.annotations.Nullable final EquipmentSlot hand) {
         super(who, block, blockClicked, blockFace, bucket, itemInHand, hand);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java b/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
index 6070b1323c244d129aa8a5496444c5f312db2870..23675a704025791464d58fe9b630fea596979de4 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChangedMainHandEvent.java
@@ -14,7 +14,7 @@ public class PlayerChangedMainHandEvent extends PlayerEvent {
     //
     private final MainHand mainHand;
 
-    public PlayerChangedMainHandEvent(@NotNull Player who, @NotNull MainHand mainHand) {
+    public PlayerChangedMainHandEvent(@NotNull final Player who, @NotNull final MainHand mainHand) {
         super(who);
         this.mainHand = mainHand;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
index 37532a7672f5785de557380a8af5b8ba28417425..1fbbeaba183da2bcabfeabf662cf48f872457bbf 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatEvent.java
@@ -49,7 +49,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -68,7 +68,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
      *
      * @param message New message that the player will send
      */
-    public void setMessage(@NotNull String message) {
+    public void setMessage(@NotNull final String message) {
         this.message = message;
     }
 
@@ -102,7 +102,7 @@ public class PlayerChatEvent extends PlayerEvent implements Cancellable {
         // Oh for a better way to do this!
         try {
             String.format(format, player, message);
-        } catch (RuntimeException ex) {
+        } catch (final RuntimeException ex) {
             ex.fillInStackTrace();
             throw ex;
         }
diff --git a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
index 0b99c7fb228660878b3f4b8c1beb58d82489701e..37f77a33c8a614e8aa486f9cf0ea8fdf6e1bd7ff 100644
--- a/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerChatTabCompleteEvent.java
@@ -25,7 +25,7 @@ public class PlayerChatTabCompleteEvent extends PlayerEvent {
         Validate.notNull(message, "Message cannot be null");
         Validate.notNull(completions, "Completions cannot be null");
         this.message = message;
-        int i = message.lastIndexOf(' ');
+        final int i = message.lastIndexOf(' ');
         if (i < 0) {
             this.lastToken = message;
         } else {
diff --git a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
index 7fc17fcccdf59d09194940daf9ca59fb3dfd9157..f37202b4d4cd0ca157f66d7ee125394161bddffe 100644
--- a/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerCommandPreprocessEvent.java
@@ -69,7 +69,7 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -95,7 +95,7 @@ public class PlayerCommandPreprocessEvent extends PlayerEvent implements Cancell
      * @param command New message that the player will send
      * @throws IllegalArgumentException if command is null or empty
      */
-    public void setMessage(@NotNull String command) throws IllegalArgumentException {
+    public void setMessage(@NotNull final String command) throws IllegalArgumentException {
         Validate.notNull(command, "Command cannot be null");
         Validate.notEmpty(command, "Command cannot be empty");
         this.message = command;
diff --git a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
index aca500f32e2ae69095a1abce9f14a164df442638..f1648f8e8167cebfa0648ea9e4da18df52be15a6 100644
--- a/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerDropItemEvent.java
@@ -35,7 +35,7 @@ public class PlayerDropItemEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
index c8fda418bd5e0e6c299900be469862dbc5d7a56f..411cab6f0cf98046c93e4bf1822f83b51c6d8ab6 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEditBookEvent.java
@@ -21,7 +21,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
     private boolean isSigning;
     private boolean cancel;
 
-    public PlayerEditBookEvent(@NotNull Player who, int slot, @NotNull BookMeta previousBookMeta, @NotNull BookMeta newBookMeta, boolean isSigning) {
+    public PlayerEditBookEvent(@NotNull final Player who, final int slot, @NotNull final BookMeta previousBookMeta, @NotNull final BookMeta newBookMeta, final boolean isSigning) {
         super(who);
 
         Validate.isTrue(slot >= -1 && slot <= 8, "Slot must be in range (-1)-8 inclusive");
@@ -85,7 +85,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
      * @param newBookMeta new book meta
      * @throws IllegalArgumentException if the new book meta is null
      */
-    public void setNewBookMeta(@NotNull BookMeta newBookMeta) throws IllegalArgumentException {
+    public void setNewBookMeta(@NotNull final BookMeta newBookMeta) throws IllegalArgumentException {
         Validate.notNull(newBookMeta, "New book meta must not be null");
         Bukkit.getItemFactory().equals(newBookMeta, null);
         this.newBookMeta = newBookMeta.clone();
@@ -107,7 +107,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
      *
      * @param signing whether or not the book is being signed.
      */
-    public void setSigning(boolean signing) {
+    public void setSigning(final boolean signing) {
         isSigning = signing;
     }
 
@@ -128,7 +128,7 @@ public class PlayerEditBookEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
index cfc124008a702a8c38cfd6d70863416b62d4ad0d..27ccf6baf1eb1ca175dc308b20ade1604ec9782b 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEggThrowEvent.java
@@ -50,7 +50,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      * @param hatching true if you want the egg to hatch, false if you want it
      *     not to
      */
-    public void setHatching(boolean hatching) {
+    public void setHatching(final boolean hatching) {
         this.hatching = hatching;
     }
 
@@ -69,7 +69,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      *
      * @param hatchType The type of the mob being hatched by the egg
      */
-    public void setHatchingType(@NotNull EntityType hatchType) {
+    public void setHatchingType(@NotNull final EntityType hatchType) {
         if (hatchType.isSpawnable()) throw new IllegalArgumentException("Can't spawn that entity type from an egg!");
         this.hatchType = hatchType;
     }
@@ -97,7 +97,7 @@ public class PlayerEggThrowEvent extends PlayerEvent {
      *
      * @param numHatches The number of mobs coming out of the egg
      */
-    public void setNumHatches(byte numHatches) {
+    public void setNumHatches(final byte numHatches) {
         this.numHatches = numHatches;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerEvent.java b/src/main/java/org/bukkit/event/player/PlayerEvent.java
index f6d3b817de3001f04ea4554c7c39a1290af3fd6d..61f09b76748060b439cfe91aca5da9fa3c784e33 100644
--- a/src/main/java/org/bukkit/event/player/PlayerEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEvent.java
@@ -14,7 +14,7 @@ public abstract class PlayerEvent extends Event {
         player = who;
     }
 
-    public PlayerEvent(@NotNull final Player who, boolean async) { // Paper - public
+    public PlayerEvent(@NotNull final Player who, final boolean async) { // Paper - public
         super(async);
         player = who;
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
index 7c340f539c31a431d7d9204a8135e0bfc31863a8..fbc65f0354e32d9d29ed48bcc2ff3b174659e708 100644
--- a/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerExpChangeEvent.java
@@ -52,7 +52,7 @@ public class PlayerExpChangeEvent extends PlayerEvent {
      *
      * @param amount The amount of experience to set
      */
-    public void setAmount(int amount) {
+    public void setAmount(final int amount) {
         exp = amount;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
index 4d3ff7b29339ab1f7e0c169ac3f187663a4977ab..97c0141cca0a82f572c4aef84ba1b9c3ce280677 100644
--- a/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerFishEvent.java
@@ -56,7 +56,7 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -80,7 +80,7 @@ public class PlayerFishEvent extends PlayerEvent implements Cancellable {
      *
      * @param amount the amount of experience to drop
      */
-    public void setExpToDrop(int amount) {
+    public void setExpToDrop(final int amount) {
         exp = amount;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
index 4b96e0573c7ce32ad8c41124ee9ecab8359318a5..0e430a25b91e6a5257d95fcdad4d7b187266ec5e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerGameModeChangeEvent.java
@@ -25,7 +25,7 @@ public class PlayerGameModeChangeEvent extends PlayerEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
index 0ee86dca0452483bbc08d7b253c952adea29742c..59328518e47485cdb3d7ab13b6aed2db0b144245 100644
--- a/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerHarvestBlockEvent.java
@@ -25,7 +25,7 @@ public class PlayerHarvestBlockEvent extends PlayerEvent implements Cancellable
     private final Block harvestedBlock;
     private final List<ItemStack> itemsHarvested;
 
-    public PlayerHarvestBlockEvent(@NotNull Player player, @NotNull Block harvestedBlock, @NotNull List<ItemStack> itemsHarvested) {
+    public PlayerHarvestBlockEvent(@NotNull final Player player, @NotNull final Block harvestedBlock, @NotNull final List<ItemStack> itemsHarvested) {
         super(player);
         this.harvestedBlock = harvestedBlock;
         this.itemsHarvested = itemsHarvested;
@@ -57,7 +57,7 @@ public class PlayerHarvestBlockEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
index 3f24d302e28170f7f6e5885b5b9abb22cbbb7d66..7177c905dc974d8a60e907857c2edd3690344610 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractAtEntityEvent.java
@@ -21,11 +21,11 @@ public class PlayerInteractAtEntityEvent extends PlayerInteractEntityEvent {
     private static final HandlerList handlers = new HandlerList();
     private final Vector position;
 
-    public PlayerInteractAtEntityEvent(@NotNull Player who, @NotNull Entity clickedEntity, @NotNull Vector position) {
+    public PlayerInteractAtEntityEvent(@NotNull final Player who, @NotNull final Entity clickedEntity, @NotNull final Vector position) {
         this(who, clickedEntity, position, EquipmentSlot.HAND);
     }
 
-    public PlayerInteractAtEntityEvent(@NotNull Player who, @NotNull Entity clickedEntity, @NotNull Vector position, @NotNull EquipmentSlot hand) {
+    public PlayerInteractAtEntityEvent(@NotNull final Player who, @NotNull final Entity clickedEntity, @NotNull final Vector position, @NotNull final EquipmentSlot hand) {
         super(who, clickedEntity, hand);
         this.position = position;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
index c7eb462d9dc97e94420d3d0ad94b17862984cc10..aa8ba40f5d64a7d6787268afc2be2d84ad048a23 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEntityEvent.java
@@ -32,7 +32,7 @@ public class PlayerInteractEntityEvent extends PlayerEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
index b80cc0e3ec77d3f90b2eed3ab7edb5518bf921ea..703927d85ba26b35ed8368e1c4b443ec3aa6e418 100644
--- a/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerInteractEvent.java
@@ -98,7 +98,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         setUseInteractedBlock(cancel ? Result.DENY : useInteractedBlock() == Result.DENY ? Result.DEFAULT : useInteractedBlock());
         setUseItemInHand(cancel ? Result.DENY : useItemInHand() == Result.DENY ? Result.DEFAULT : useItemInHand());
     }
@@ -195,7 +195,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
     /**
      * @param useInteractedBlock the action to take with the interacted block
      */
-    public void setUseInteractedBlock(@NotNull Result useInteractedBlock) {
+    public void setUseInteractedBlock(@NotNull final Result useInteractedBlock) {
         this.useClickedBlock = useInteractedBlock;
     }
 
@@ -215,7 +215,7 @@ public class PlayerInteractEvent extends PlayerEvent implements Cancellable {
     /**
      * @param useItemInHand the action to take with the item in hand
      */
-    public void setUseItemInHand(@NotNull Result useItemInHand) {
+    public void setUseItemInHand(@NotNull final Result useItemInHand) {
         this.useItemInHand = useItemInHand;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
index 44efdf074c951a1772712b553e00017fe7ddaf89..a63305219c0422db5db8f69d834ac18fc7d9ceff 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
@@ -54,7 +54,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
      *
      * @param item the item being consumed
      */
-    public void setItem(@Nullable ItemStack item) {
+    public void setItem(@Nullable final ItemStack item) {
 	    this.item = Objects.requireNonNullElseGet(item, () -> new ItemStack(Material.AIR));
     }
 
@@ -76,7 +76,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
      *
      * @param replacement Replacement item to set, null to clear any custom stack and use default
      */
-    public void setReplacement(@Nullable ItemStack replacement) {
+    public void setReplacement(@Nullable final ItemStack replacement) {
         this.replacement = replacement;
     }
     // Paper end
@@ -87,7 +87,7 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
index 2d049633998b3965ce0f4a6a4cea3169da0d5658..09cddf7e295fd2f25d72c70e1b55e7bee12a7d00 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemDamageEvent.java
@@ -17,7 +17,7 @@ public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
     private int damage;
     private boolean cancelled = false;
 
-    public PlayerItemDamageEvent(@NotNull Player player, @NotNull ItemStack what, int damage) {
+    public PlayerItemDamageEvent(@NotNull final Player player, @NotNull final ItemStack what, final int damage) {
         super(player);
         this.item = what;
         this.damage = damage;
@@ -42,7 +42,7 @@ public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
         return damage;
     }
 
-    public void setDamage(int damage) {
+    public void setDamage(final int damage) {
         this.damage = damage;
     }
 
@@ -52,7 +52,7 @@ public class PlayerItemDamageEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
index 39048573a532e09faa28e223000fd2fec4d41138..496ca948d5f390e017a61f31d93de6bc1d5d365e 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemHeldEvent.java
@@ -44,7 +44,7 @@ public class PlayerItemHeldEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
index 2f0cbf9287c954e37cc76b88477b7e8ba7a759e3..39b95aaa1344a356caf8ca887c4ace0c7d5d53ce 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemMendEvent.java
@@ -22,7 +22,7 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
     private int repairAmount;
     private boolean cancelled;
 
-    public PlayerItemMendEvent(@NotNull Player who, @NotNull ItemStack item, @NotNull ExperienceOrb experienceOrb, int repairAmount) {
+    public PlayerItemMendEvent(@NotNull final Player who, @NotNull final ItemStack item, @NotNull final ExperienceOrb experienceOrb, final int repairAmount) {
         super(who);
         this.item = item;
         this.experienceOrb = experienceOrb;
@@ -70,7 +70,7 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
      *
      * @param amount how much damage will be repaired on the item
      */
-    public void setRepairAmount(int amount) {
+    public void setRepairAmount(final int amount) {
         this.repairAmount = amount;
     }
 
@@ -80,7 +80,7 @@ public class PlayerItemMendEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
index 851a189d42e271679abc78f95049d8badf7a2b64..fedf240ffa0b4959f623ab6e2c4d6fb48d1d182d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerJoinEvent.java
@@ -38,7 +38,7 @@ public class PlayerJoinEvent extends PlayerEvent {
      *
      * @param joinMessage join message. If null, no message will be sent
      */
-    public void joinMessage(@Nullable net.kyori.adventure.text.Component joinMessage) {
+    public void joinMessage(@Nullable final net.kyori.adventure.text.Component joinMessage) {
         this.joinMessage = joinMessage;
     }
     // Paper end
@@ -62,7 +62,7 @@ public class PlayerJoinEvent extends PlayerEvent {
      * @deprecated in favour of {@link #joinMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setJoinMessage(@Nullable String joinMessage) {
+    public void setJoinMessage(@Nullable final String joinMessage) {
         this.joinMessage = joinMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(joinMessage) : null; // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
index 5c0efe74237dbe6803ce023fde99682ff70d1a92..71a24099edf55fb60e747f4a4bea9f0dda879398 100644
--- a/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerKickEvent.java
@@ -43,7 +43,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      *
      * @param leaveMessage leave message
      */
-    public void leaveMessage(@NotNull net.kyori.adventure.text.Component leaveMessage) {
+    public void leaveMessage(@NotNull final net.kyori.adventure.text.Component leaveMessage) {
         this.leaveMessage = leaveMessage;
     }
 
@@ -61,7 +61,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      *
      * @param kickReason kick reason
      */
-    public void reason(@NotNull net.kyori.adventure.text.Component kickReason) {
+    public void reason(@NotNull final net.kyori.adventure.text.Component kickReason) {
         this.kickReason = kickReason;
     }
     // Paper end
@@ -96,7 +96,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -107,7 +107,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @deprecated in favour of {@link #reason(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setReason(@NotNull String kickReason) {
+    public void setReason(@NotNull final String kickReason) {
         this.kickReason = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(kickReason); // Paper
     }
 
@@ -118,7 +118,7 @@ public class PlayerKickEvent extends PlayerEvent implements Cancellable {
      * @deprecated in favour of {@link #leaveMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setLeaveMessage(@NotNull String leaveMessage) {
+    public void setLeaveMessage(@NotNull final String leaveMessage) {
         this.leaveMessage = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(leaveMessage); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
index 84521186404b8e43c81a2f9513dce2be40d27840..d2d209fea2fdc49e53693d96fd497c72869da391 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLocaleChangeEvent.java
@@ -24,7 +24,7 @@ public class PlayerLocaleChangeEvent extends PlayerEvent {
     }
     // Paper end
 
-    public PlayerLocaleChangeEvent(@NotNull Player who, @NotNull String locale) {
+    public PlayerLocaleChangeEvent(@NotNull final Player who, @NotNull final String locale) {
         super(who);
         this.locale = locale;
         this.adventure$locale = net.kyori.adventure.translation.Translator.parseLocale(locale); // Paper
diff --git a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
index 75cc54739ef841cd90568d74927d6002d4cfa7e0..fb08f8b86a40ce932b9da0983dac7e19a887651f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerLoginEvent.java
@@ -56,7 +56,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @deprecated in favour of {@link #PlayerLoginEvent(Player, String, InetAddress, Result, net.kyori.adventure.text.Component, InetAddress)}
      */
     @Deprecated // Paper
-    public PlayerLoginEvent(@NotNull final Player player, @NotNull String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final String message, @NotNull final InetAddress realAddress) { // Spigot
+    public PlayerLoginEvent(@NotNull final Player player, @NotNull final String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final String message, @NotNull final InetAddress realAddress) { // Spigot
         this(player, hostname, address, realAddress); // Spigot
         this.result = result;
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
@@ -74,7 +74,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      * @param message The message to be displayed if result denies login
      * @param realAddress the actual, unspoofed connecting address
      */
-    public PlayerLoginEvent(@NotNull final Player player, @NotNull String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message, @NotNull final InetAddress realAddress) { // Spigot
+    public PlayerLoginEvent(@NotNull final Player player, @NotNull final String hostname, @NotNull final InetAddress address, @NotNull final Result result, @NotNull final net.kyori.adventure.text.Component message, @NotNull final InetAddress realAddress) { // Spigot
         this(player, hostname, address, realAddress); // Spigot
         this.result = result;
         this.message = message;
@@ -95,7 +95,7 @@ public class PlayerLoginEvent extends PlayerEvent {
      *
      * @param message New kick message
      */
-    public void kickMessage(@NotNull net.kyori.adventure.text.Component message) {
+    public void kickMessage(@NotNull final net.kyori.adventure.text.Component message) {
         this.message = message;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
index 59f86861920e57e3ef7977c263596cfc514ce418..d665a636ced740a7515620b18e7e8b92653f812b 100644
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -49,7 +49,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
      * @param cancel true if you wish to cancel this event
      */
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -68,7 +68,7 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
      *
      * @param from New location to mark as the players previous location
      */
-    public void setFrom(@NotNull Location from) {
+    public void setFrom(@NotNull final Location from) {
         validateLocation(from);
         this.from = from;
     }
@@ -88,12 +88,12 @@ public class PlayerMoveEvent extends PlayerEvent implements Cancellable {
      *
      * @param to New Location this player will move to
      */
-    public void setTo(@NotNull Location to) {
+    public void setTo(@NotNull final Location to) {
         validateLocation(to);
         this.to = to;
     }
 
-    private void validateLocation(@NotNull Location loc) {
+    private void validateLocation(@NotNull final Location loc) {
         Preconditions.checkArgument(true, "Cannot use null location!");
         Preconditions.checkArgument(loc.getWorld() != null, "Cannot use null location with null world!");
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
index 18d82c111f30e0279c10a174a51bac018185cd38..38b2b6b8183e1929dc7468a5aba4513351a0bf0f 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPickupItemEvent.java
@@ -53,7 +53,7 @@ public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
      *
      * @param flyAtPlayer True for item to fly at player
      */
-    public void setFlyAtPlayer(boolean flyAtPlayer) {
+    public void setFlyAtPlayer(final boolean flyAtPlayer) {
         this.flyAtPlayer = flyAtPlayer;
     }
 
@@ -73,7 +73,7 @@ public class PlayerPickupItemEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
         this.flyAtPlayer = !cancel; // Paper
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
index a6f91166a3f37fd3eafc30d091ee45434c067cef..82577a29c3656b22447ec925182b7128f72c60dc 100644
--- a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
@@ -22,11 +22,11 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
         super(player, from, to);
     }
 
-    public PlayerPortalEvent(@NotNull Player player, @NotNull Location from, @Nullable Location to, @NotNull TeleportCause cause) {
+    public PlayerPortalEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to, @NotNull final TeleportCause cause) {
         super(player, from, to, cause);
     }
 
-    public PlayerPortalEvent(@NotNull Player player, @NotNull Location from, @Nullable Location to, @NotNull TeleportCause cause, int getSearchRadius, boolean canCreatePortal, int creationRadius) {
+    public PlayerPortalEvent(@NotNull final Player player, @NotNull final Location from, @Nullable final Location to, @NotNull final TeleportCause cause, final int getSearchRadius, final boolean canCreatePortal, final int creationRadius) {
         super(player, from, to, cause);
         this.getSearchRadius = getSearchRadius;
         this.canCreatePortal = canCreatePortal;
@@ -39,7 +39,7 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
      * @param searchRadius the radius in which to search for a portal from the
      * location
      */
-    public void setSearchRadius(int searchRadius) {
+    public void setSearchRadius(final int searchRadius) {
         this.getSearchRadius = searchRadius;
     }
 
@@ -69,7 +69,7 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
      * @param canCreatePortal Sets whether there should be a destination portal
      * created
      */
-    public void setCanCreatePortal(boolean canCreatePortal) {
+    public void setCanCreatePortal(final boolean canCreatePortal) {
         this.canCreatePortal = canCreatePortal;
     }
 
@@ -86,7 +86,7 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
      * @param creationRadius the radius in which to create a portal from the
      * location
      */
-    public void setCreationRadius(int creationRadius) {
+    public void setCreationRadius(final int creationRadius) {
         this.creationRadius = creationRadius;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
index b6016aa1e91863efc252eecab69ade6f54c89f27..ed68b1897d8fca697add77845b86120444e86e7d 100644
--- a/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerQuitEvent.java
@@ -19,7 +19,7 @@ public class PlayerQuitEvent extends PlayerEvent {
         this(who, quitMessage, null);
     }
     @Deprecated // Paper
-    public PlayerQuitEvent(@NotNull final Player who, @Nullable final String quitMessage, @Nullable QuitReason quitReason) {
+    public PlayerQuitEvent(@NotNull final Player who, @Nullable final String quitMessage, @Nullable final QuitReason quitReason) {
         super(who);
         this.quitMessage = quitMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(quitMessage) : null; // Paper
         this.reason = quitReason == null ? QuitReason.DISCONNECTED : quitReason;
@@ -29,7 +29,7 @@ public class PlayerQuitEvent extends PlayerEvent {
     public PlayerQuitEvent(@NotNull final Player who, @Nullable final net.kyori.adventure.text.Component quitMessage) {
         this(who, quitMessage, null);
     }
-    public PlayerQuitEvent(@NotNull final Player who, @Nullable final net.kyori.adventure.text.Component quitMessage, @Nullable QuitReason quitReason) {
+    public PlayerQuitEvent(@NotNull final Player who, @Nullable final net.kyori.adventure.text.Component quitMessage, @Nullable final QuitReason quitReason) {
         super(who);
         this.quitMessage = quitMessage;
         this.reason = quitReason == null ? QuitReason.DISCONNECTED : quitReason;
@@ -49,7 +49,7 @@ public class PlayerQuitEvent extends PlayerEvent {
      *
      * @param quitMessage quit message
      */
-    public void quitMessage(@Nullable net.kyori.adventure.text.Component quitMessage) {
+    public void quitMessage(@Nullable final net.kyori.adventure.text.Component quitMessage) {
         this.quitMessage = quitMessage;
     }
     // Paper end
@@ -73,7 +73,7 @@ public class PlayerQuitEvent extends PlayerEvent {
      * @deprecated in favour of {@link #quitMessage(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setQuitMessage(@Nullable String quitMessage) {
+    public void setQuitMessage(@Nullable final String quitMessage) {
         this.quitMessage = quitMessage != null ? org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(quitMessage) : null; // Paper
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java b/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
index f41c29e98a0af0e33ce4f7827bc062de2bb0d233..ea6cb6dd13e73765cf6a6195743b1eebf8a64570 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRecipeDiscoverEvent.java
@@ -16,7 +16,7 @@ public class PlayerRecipeDiscoverEvent extends PlayerEvent implements Cancellabl
     private boolean cancel = false;
     private final NamespacedKey recipe;
 
-    public PlayerRecipeDiscoverEvent(@NotNull Player who, @NotNull NamespacedKey recipe) {
+    public PlayerRecipeDiscoverEvent(@NotNull final Player who, @NotNull final NamespacedKey recipe) {
         super(who);
         this.recipe = recipe;
     }
@@ -37,7 +37,7 @@ public class PlayerRecipeDiscoverEvent extends PlayerEvent implements Cancellabl
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
index dc5755670dacd27ab859e39ac1db91875a3d4698..128dc2b890051dd6bfcb52f3c38d5d1929bca69c 100644
--- a/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerResourcePackStatusEvent.java
@@ -15,14 +15,14 @@ public class PlayerResourcePackStatusEvent extends PlayerEvent {
     private final String hash; // Paper
     private final Status status;
 
-    public PlayerResourcePackStatusEvent(@NotNull final Player who, @NotNull Status resourcePackStatus) {
+    public PlayerResourcePackStatusEvent(@NotNull final Player who, @NotNull final Status resourcePackStatus) {
         super(who);
         this.hash = null; // Paper
         this.status = resourcePackStatus;
     }
 
     @Deprecated // Paper
-    public PlayerResourcePackStatusEvent(final Player who, Status resourcePackStatus, String hash) {
+    public PlayerResourcePackStatusEvent(final Player who, final Status resourcePackStatus, final String hash) {
         super(who);
         this.hash = hash; // Paper
         this.status = resourcePackStatus;
diff --git a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
index d2be2ad2e3665728e614a89dd62ef9237f1d3ce6..8345bc77f23524c9c08bf450a7dbda72043424b6 100644
--- a/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerRespawnEvent.java
@@ -42,7 +42,7 @@ public class PlayerRespawnEvent extends PlayerEvent {
      *
      * @param respawnLocation new location for the respawn
      */
-    public void setRespawnLocation(@NotNull Location respawnLocation) {
+    public void setRespawnLocation(@NotNull final Location respawnLocation) {
         Validate.notNull(respawnLocation, "Respawn location can not be null");
         Validate.notNull(respawnLocation.getWorld(), "Respawn world can not be null");
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
index 04b3dce008edefb045162d0f69f87462ea1f3534..0c0eec5c5944b78afeb11052ddf2cbd53c0b40ea 100644
--- a/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerShearEntityEvent.java
@@ -19,7 +19,7 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
     private final ItemStack item;
     private final EquipmentSlot hand;
 
-    public PlayerShearEntityEvent(@NotNull Player who, @NotNull Entity what, @NotNull ItemStack item, @NotNull EquipmentSlot hand) {
+    public PlayerShearEntityEvent(@NotNull final Player who, @NotNull final Entity what, @NotNull final ItemStack item, @NotNull final EquipmentSlot hand) {
         super(who);
         this.what = what;
         this.item = item;
@@ -37,7 +37,7 @@ public class PlayerShearEntityEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
index f971844bf490c7a7bfbe305d33df739ed2197a37..cb6ffd0f882f3c6695d7fc25ad4c6ca00a49d0c9 100644
--- a/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerStatisticIncrementEvent.java
@@ -25,7 +25,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
     private final EntityType entityType;
     private final Material material;
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue) {
+    public PlayerStatisticIncrementEvent(@NotNull final Player player, @NotNull final Statistic statistic, final int initialValue, final int newValue) {
         super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
@@ -34,7 +34,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
         this.material = null;
     }
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull EntityType entityType) {
+    public PlayerStatisticIncrementEvent(@NotNull final Player player, @NotNull final Statistic statistic, final int initialValue, final int newValue, @NotNull final EntityType entityType) {
         super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
@@ -43,7 +43,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
         this.material = null;
     }
 
-    public PlayerStatisticIncrementEvent(@NotNull Player player, @NotNull Statistic statistic, int initialValue, int newValue, @NotNull Material material) {
+    public PlayerStatisticIncrementEvent(@NotNull final Player player, @NotNull final Statistic statistic, final int initialValue, final int newValue, @NotNull final Material material) {
         super(player);
         this.statistic = statistic;
         this.initialValue = initialValue;
@@ -108,7 +108,7 @@ public class PlayerStatisticIncrementEvent extends PlayerEvent implements Cancel
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java b/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
index 9f592317c920589c22a5fb8e916c6ca58ebe5c59..aad2aeed174869a6062dbd2ca14cf254eaea0fb2 100644
--- a/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerSwapHandItemsEvent.java
@@ -19,7 +19,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
     private ItemStack offHandItem;
     private boolean cancelled;
 
-    public PlayerSwapHandItemsEvent(@NotNull Player player, @NotNull ItemStack mainHandItem, @NotNull ItemStack offHandItem) {
+    public PlayerSwapHandItemsEvent(@NotNull final Player player, @NotNull final ItemStack mainHandItem, @NotNull final ItemStack offHandItem) {
         super(player);
 
         this.mainHandItem = mainHandItem;
@@ -41,7 +41,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
      *
      * @param mainHandItem new item in the main hand
      */
-    public void setMainHandItem(@Nullable ItemStack mainHandItem) {
+    public void setMainHandItem(@Nullable final ItemStack mainHandItem) {
         this.mainHandItem = mainHandItem;
     }
 
@@ -60,7 +60,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
      *
      * @param offHandItem new item in the off hand
      */
-    public void setOffHandItem(@Nullable ItemStack offHandItem) {
+    public void setOffHandItem(@Nullable final ItemStack offHandItem) {
         this.offHandItem = offHandItem;
     }
 
@@ -70,7 +70,7 @@ public class PlayerSwapHandItemsEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java b/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
index 5ef664a6556ff8931b60cad818780e12831d84f9..075512255e7695ba71d7c3e8c2e1622da1798317 100644
--- a/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerTakeLecternBookEvent.java
@@ -19,7 +19,7 @@ public class PlayerTakeLecternBookEvent extends PlayerEvent implements Cancellab
     private boolean cancelled;
     private final Lectern lectern;
 
-    public PlayerTakeLecternBookEvent(@NotNull Player who, @NotNull Lectern lectern) {
+    public PlayerTakeLecternBookEvent(@NotNull final Player who, @NotNull final Lectern lectern) {
         super(who);
         this.lectern = lectern;
     }
@@ -50,7 +50,7 @@ public class PlayerTakeLecternBookEvent extends PlayerEvent implements Cancellab
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
index 9c200f8aca7b45536247a0899a1631542038fccc..1e8b1c80711fa93a3237e5476fcdb6b99a0be632 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleFlightEvent.java
@@ -33,7 +33,7 @@ public class PlayerToggleFlightEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
index 348e5b5e50dcd5595d54543ca6380bf6316a1679..f702456a2a29b28054b90474aed95853aa604b13 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleSneakEvent.java
@@ -33,7 +33,7 @@ public class PlayerToggleSneakEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java b/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
index dc8cf2197ca62dd1970ccb56c1800e07966b1a1d..3fe8a357d4d974281d1b45224cfad3a312c86a10 100644
--- a/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerToggleSprintEvent.java
@@ -33,7 +33,7 @@ public class PlayerToggleSprintEvent extends PlayerEvent implements Cancellable
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
index 68eab1563caba1ee4f52b308f390e4e172667fc5..2d5a29ae418661daa3197df3b6e37ebd7955592b 100644
--- a/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerUnleashEntityEvent.java
@@ -15,11 +15,11 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
 
     // Paper start - drop leash variable
     @Deprecated
-    public PlayerUnleashEntityEvent(@NotNull Entity entity, @NotNull Player player) {
+    public PlayerUnleashEntityEvent(@NotNull final Entity entity, @NotNull final Player player) {
         this(entity, player, false);
     }
 
-    public PlayerUnleashEntityEvent(@NotNull Entity entity, @NotNull Player player, boolean dropLeash) {
+    public PlayerUnleashEntityEvent(@NotNull final Entity entity, @NotNull final Player player, final boolean dropLeash) {
         super(entity, UnleashReason.PLAYER_UNLEASH, dropLeash);
         // Paper end
         this.player = player;
@@ -41,7 +41,7 @@ public class PlayerUnleashEntityEvent extends EntityUnleashEvent implements Canc
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
index dee4a8e6feffada53cc635ef1c86f9339646c1c3..70b4cf625bd320dc1d3a2c99c9299ad32347b7da 100644
--- a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
@@ -25,7 +25,7 @@ public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
@@ -44,7 +44,7 @@ public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
      *
      * @param velocity The velocity vector that will be sent to the player
      */
-    public void setVelocity(@NotNull Vector velocity) {
+    public void setVelocity(@NotNull final Vector velocity) {
         this.velocity = velocity;
     }
 
diff --git a/src/main/java/org/bukkit/event/raid/RaidEvent.java b/src/main/java/org/bukkit/event/raid/RaidEvent.java
index b2ff4bc331f8af77e8fd0f263f25222606af90e7..a1a3425ba737d83122c1111651973e241666ab2b 100644
--- a/src/main/java/org/bukkit/event/raid/RaidEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidEvent.java
@@ -12,7 +12,7 @@ public abstract class RaidEvent extends WorldEvent {
 
     private final Raid raid;
 
-    protected RaidEvent(@NotNull Raid raid, @NotNull World world) {
+    protected RaidEvent(@NotNull final Raid raid, @NotNull final World world) {
         super(world);
         this.raid = raid;
     }
diff --git a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
index f0d280b8c1c1db802c420fe77a77f4b9871f281e..ae515f54e9888788ff1148065f1b81945885a19f 100644
--- a/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidFinishEvent.java
@@ -17,7 +17,7 @@ public class RaidFinishEvent extends RaidEvent {
     //
     private final List<Player> winners;
 
-    public RaidFinishEvent(@NotNull Raid raid, @NotNull World world, @NotNull List<Player> winners) {
+    public RaidFinishEvent(@NotNull final Raid raid, @NotNull final World world, @NotNull final List<Player> winners) {
         super(raid, world);
         this.winners = winners;
     }
diff --git a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
index cd58dd7de781823804701fc023706e805c0142a8..f4981661d5db1537d89effc22526e5f8a1200dd7 100644
--- a/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidSpawnWaveEvent.java
@@ -19,7 +19,7 @@ public class RaidSpawnWaveEvent extends RaidEvent {
     private final List<Raider> raiders;
     private final Raider leader;
 
-    public RaidSpawnWaveEvent(@NotNull Raid raid, @NotNull World world, @Nullable Raider leader, @NotNull List<Raider> raiders) {
+    public RaidSpawnWaveEvent(@NotNull final Raid raid, @NotNull final World world, @Nullable final Raider leader, @NotNull final List<Raider> raiders) {
         super(raid, world);
         this.raiders = raiders;
         this.leader = leader;
diff --git a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
index 9e852ac973d7a38c075249360be483ed0e5f5ac6..c810fb98f1952b9643ea0982e346fd6c2c57c189 100644
--- a/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidStopEvent.java
@@ -14,7 +14,7 @@ public class RaidStopEvent extends RaidEvent {
     //
     private final Reason reason;
 
-    public RaidStopEvent(@NotNull Raid raid, @NotNull World world, @NotNull Reason reason) {
+    public RaidStopEvent(@NotNull final Raid raid, @NotNull final World world, @NotNull final Reason reason) {
         super(raid, world);
         this.reason = reason;
     }
diff --git a/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java b/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
index 128e43cf12205f82f2b119a773208502cdccfdd4..aac9a67d1639e414d697dcf10e4b15e038185253 100644
--- a/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
+++ b/src/main/java/org/bukkit/event/raid/RaidTriggerEvent.java
@@ -18,7 +18,7 @@ public class RaidTriggerEvent extends RaidEvent implements Cancellable {
     private final Player player;
     private boolean cancel;
 
-    public RaidTriggerEvent(@NotNull Raid raid, @NotNull World world, @NotNull Player player) {
+    public RaidTriggerEvent(@NotNull final Raid raid, @NotNull final World world, @NotNull final Player player) {
         super(raid, world);
         this.player = player;
     }
@@ -39,7 +39,7 @@ public class RaidTriggerEvent extends RaidEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
index 4f8c85222c7bd33217c7db0ff5f47bf397f8f3e5..a7f57f4a9fdc5d871e146b7e60bfed78c509f027 100644
--- a/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
+++ b/src/main/java/org/bukkit/event/server/BroadcastMessageEvent.java
@@ -23,12 +23,12 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
     private boolean cancelled = false;
 
     @Deprecated
-    public BroadcastMessageEvent(@NotNull String message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(@NotNull final String message, @NotNull final Set<CommandSender> recipients) {
         this(false, message, recipients);
     }
 
     @Deprecated // Paper
-    public BroadcastMessageEvent(boolean isAsync, @NotNull String message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(final boolean isAsync, @NotNull final String message, @NotNull final Set<CommandSender> recipients) {
         // Paper start
         super(isAsync);
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message);
@@ -36,11 +36,11 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
     }
 
     @Deprecated
-    public BroadcastMessageEvent(@NotNull net.kyori.adventure.text.Component message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(@NotNull final net.kyori.adventure.text.Component message, @NotNull final Set<CommandSender> recipients) {
         this(false, message, recipients);
     }
 
-    public BroadcastMessageEvent(boolean isAsync, @NotNull net.kyori.adventure.text.Component message, @NotNull Set<CommandSender> recipients) {
+    public BroadcastMessageEvent(final boolean isAsync, @NotNull final net.kyori.adventure.text.Component message, @NotNull final Set<CommandSender> recipients) {
         // Paper end
         super(isAsync);
         this.message = message;
@@ -61,7 +61,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
      *
      * @param message New message to broadcast
      */
-    public void message(@NotNull net.kyori.adventure.text.Component message) {
+    public void message(@NotNull final net.kyori.adventure.text.Component message) {
         this.message = message;
     }
     // Paper end
@@ -85,7 +85,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
      * @deprecated in favour of {@link #message(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setMessage(@NotNull String message) {
+    public void setMessage(@NotNull final String message) {
         this.message = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(message); // Paper
     }
 
@@ -113,7 +113,7 @@ public class BroadcastMessageEvent extends ServerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
index 617459afaea20213e948b1010278ab0131e08338..058312ba59274d03ba6a333aed8119957d95db56 100644
--- a/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerCommandEvent.java
@@ -66,7 +66,7 @@ public class ServerCommandEvent extends ServerEvent implements Cancellable {
      *
      * @param message New message that the server will execute
      */
-    public void setCommand(@NotNull String message) {
+    public void setCommand(@NotNull final String message) {
         this.command = message;
     }
 
@@ -97,7 +97,7 @@ public class ServerCommandEvent extends ServerEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 }
diff --git a/src/main/java/org/bukkit/event/server/ServerEvent.java b/src/main/java/org/bukkit/event/server/ServerEvent.java
index 05167fb34e4c42edc67af6e6700a2a3cc0f92769..6b9903e2072c676e3a1767a1a2d3d0c469a89c29 100644
--- a/src/main/java/org/bukkit/event/server/ServerEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerEvent.java
@@ -12,7 +12,7 @@ public abstract class ServerEvent extends Event {
         super(!Bukkit.isPrimaryThread()); // Paper
     }
 
-    public ServerEvent(boolean isAsync) {
+    public ServerEvent(final boolean isAsync) {
         super(isAsync);
     }
 }
diff --git a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
index ede5a41bc071a9c9cea369b227b37a50222f295d..4e6dff2b7a98043d672e3b2ce04ba23a3eaa9cf7 100644
--- a/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerListPingEvent.java
@@ -87,7 +87,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      *
      * @param motd the message of the day
      */
-    public void motd(@NotNull net.kyori.adventure.text.Component motd) {
+    public void motd(@NotNull final net.kyori.adventure.text.Component motd) {
         this.motd = motd;
     }
     // Paper end
@@ -121,7 +121,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @deprecated in favour of {@link #motd(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setMotd(@NotNull String motd) {
+    public void setMotd(@NotNull final String motd) {
         this.motd = org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(motd); // Paper
     }
 
@@ -155,7 +155,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      *
      * @param maxPlayers the maximum number of player
      */
-    public void setMaxPlayers(int maxPlayers) {
+    public void setMaxPlayers(final int maxPlayers) {
         this.maxPlayers = maxPlayers;
     }
 
@@ -169,7 +169,7 @@ public class ServerListPingEvent extends ServerEvent implements Iterable<Player>
      * @throws UnsupportedOperationException if the caller of this event does
      *     not support setting the server icon
      */
-    public void setServerIcon(@UndefinedNullability("implementation dependent") CachedServerIcon icon) throws IllegalArgumentException, UnsupportedOperationException {
+    public void setServerIcon(@UndefinedNullability("implementation dependent") final CachedServerIcon icon) throws IllegalArgumentException, UnsupportedOperationException {
         throw new UnsupportedOperationException();
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
index 3fbcd49bee41bbc4f4e390d1bf1b06ff32123fd4..99b192cd62181a0bec136173e94572e3144f6a51 100644
--- a/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServerLoadEvent.java
@@ -23,7 +23,7 @@ public class ServerLoadEvent extends ServerEvent {
      *
      * @param type the context in which the server was loaded
      */
-    public ServerLoadEvent(@NotNull LoadType type) {
+    public ServerLoadEvent(@NotNull final LoadType type) {
         this.type = type;
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java b/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
index d7f9227ef50ebc97710a532c5370eb8e6ffa3857..e85b965d65c9d12a3cfec8c7f3b15a13c078ae70 100644
--- a/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceRegisterEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class ServiceRegisterEvent extends ServiceEvent {
     private static final HandlerList handlers = new HandlerList();
 
-    public ServiceRegisterEvent(@NotNull RegisteredServiceProvider<?> registeredProvider) {
+    public ServiceRegisterEvent(@NotNull final RegisteredServiceProvider<?> registeredProvider) {
         super(registeredProvider);
     }
 
diff --git a/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java b/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
index f286799eeb28c64e9e07800316a95ebddce44615..966e8a7976e5251731e88179f12779754c958d2d 100644
--- a/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
+++ b/src/main/java/org/bukkit/event/server/ServiceUnregisterEvent.java
@@ -13,7 +13,7 @@ import org.jetbrains.annotations.NotNull;
 public class ServiceUnregisterEvent extends ServiceEvent {
     private static final HandlerList handlers = new HandlerList();
 
-    public ServiceUnregisterEvent(@NotNull RegisteredServiceProvider<?> serviceProvider) {
+    public ServiceUnregisterEvent(@NotNull final RegisteredServiceProvider<?> serviceProvider) {
         super(serviceProvider);
     }
 
diff --git a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
index f96c4ba53ab41ea66d4f9a4d54eeabb63f992b58..c6e9e424bdae00793756799285f39849b7746a7b 100644
--- a/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
+++ b/src/main/java/org/bukkit/event/server/TabCompleteEvent.java
@@ -30,11 +30,11 @@ public class TabCompleteEvent extends Event implements Cancellable {
     private List<String> completions;
     private boolean cancelled;
 
-    public TabCompleteEvent(@NotNull CommandSender sender, @NotNull String buffer, @NotNull List<String> completions) {
+    public TabCompleteEvent(@NotNull final CommandSender sender, @NotNull final String buffer, @NotNull final List<String> completions) {
         // Paper start
         this(sender, buffer, completions, sender instanceof org.bukkit.command.ConsoleCommandSender || buffer.startsWith("/"), null);
     }
-    public TabCompleteEvent(@NotNull CommandSender sender, @NotNull String buffer, @NotNull List<String> completions, boolean isCommand, @Nullable org.bukkit.Location location) {
+    public TabCompleteEvent(@NotNull final CommandSender sender, @NotNull final String buffer, @NotNull final List<String> completions, final boolean isCommand, @Nullable final org.bukkit.Location location) {
         this.isCommand = isCommand;
         this.loc = location;
         // Paper end
@@ -104,7 +104,7 @@ public class TabCompleteEvent extends Event implements Cancellable {
      *
      * @param completions the new completions
      */
-    public void setCompletions(@NotNull List<String> completions) {
+    public void setCompletions(@NotNull final List<String> completions) {
         Validate.notNull(completions);
         this.completions = new ArrayList<>(completions); // Paper
     }
@@ -115,7 +115,7 @@ public class TabCompleteEvent extends Event implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
index c1f107db9eda33dcb311d041562bd5f7b2b6ba0c..de52ed3ffae2065a990cb080a6e09713138ddfe6 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleCreateEvent.java
@@ -22,7 +22,7 @@ public class VehicleCreateEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancelled) {
+    public void setCancelled(final boolean cancelled) {
         this.cancelled = cancelled;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
index 45da51d5946781169f0c1a4d2493040faa2bc22e..de9ac4cf57d20bdb06ecc331aba60f23b85caa30 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDamageEvent.java
@@ -46,7 +46,7 @@ public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
      *
      * @param damage The damage
      */
-    public void setDamage(double damage) {
+    public void setDamage(final double damage) {
         this.damage = damage;
     }
 
@@ -56,7 +56,7 @@ public class VehicleDamageEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
index 26bc6898fce8ae938c3e2bf7818596fe90e6f525..95c3fc5b952a697b8933cd23de3d40978c89439a 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleDestroyEvent.java
@@ -38,7 +38,7 @@ public class VehicleDestroyEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
index 64f21f684912ed158d03040f442c32983ab49ea7..6a09df189067e064cd0f41a8c40f1ecde6af8b18 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEnterEvent.java
@@ -35,7 +35,7 @@ public class VehicleEnterEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
index 6bafc62e2235a6b783cbf96f4dabeeaf02bd5178..33fd0e99b7dc9650dc74e575bdee0f935036ad89 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEntityCollisionEvent.java
@@ -32,7 +32,7 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
@@ -40,7 +40,7 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
         return cancelledPickup;
     }
 
-    public void setPickupCancelled(boolean cancel) {
+    public void setPickupCancelled(final boolean cancel) {
         cancelledPickup = cancel;
     }
 
@@ -48,7 +48,7 @@ public class VehicleEntityCollisionEvent extends VehicleCollisionEvent implement
         return cancelledCollision;
     }
 
-    public void setCollisionCancelled(boolean cancel) {
+    public void setCollisionCancelled(final boolean cancel) {
         cancelledCollision = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
index a976c32de6ad5e90b0a96a0f387136ab0f5eb52e..a93bc05d5d1f6a22f179208573d53cc03eae5f52 100644
--- a/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleExitEvent.java
@@ -15,7 +15,7 @@ public class VehicleExitEvent extends VehicleEvent implements Cancellable {
     private final LivingEntity exited;
     private final boolean isCancellable; // Paper
 
-    public VehicleExitEvent(@NotNull final Vehicle vehicle, @NotNull final LivingEntity exited, boolean isCancellable) { // Paper
+    public VehicleExitEvent(@NotNull final Vehicle vehicle, @NotNull final LivingEntity exited, final boolean isCancellable) { // Paper
         super(vehicle);
         this.exited = exited;
         // Paper start
@@ -43,7 +43,7 @@ public class VehicleExitEvent extends VehicleEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         // Paper start
         if (cancel && !isCancellable) {
             return;
diff --git a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
index 76e7571e2ffa83c63a98c8bbd0b417811ad315f5..210edbab2c6b683a29ccae5e854eab35ce76ad86 100644
--- a/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/LightningStrikeEvent.java
@@ -32,7 +32,7 @@ public class LightningStrikeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
index 6cdf83476b4e366bed79960e3706bea5ebe56788..a972ce4d67fcf8aa8afcaf2196d08c26ebecd15e 100644
--- a/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/ThunderChangeEvent.java
@@ -24,7 +24,7 @@ public class ThunderChangeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
index d562d87e7418641e52f4dae44f573eaa31add44a..51bc9254935e62c86e42b8a739ea8a15ae50b8fb 100644
--- a/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
+++ b/src/main/java/org/bukkit/event/weather/WeatherChangeEvent.java
@@ -24,7 +24,7 @@ public class WeatherChangeEvent extends WeatherEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         canceled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java b/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
index 5d8271626f2c5f649ee1b2ef1dbbde38c76cc340..804946e822b6ee592be9e1c3e08ae5eb311992a6 100644
--- a/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/ChunkUnloadEvent.java
@@ -15,7 +15,7 @@ public class ChunkUnloadEvent extends ChunkEvent {
         this(chunk, true);
     }
 
-    public ChunkUnloadEvent(@NotNull Chunk chunk, boolean save) {
+    public ChunkUnloadEvent(@NotNull final Chunk chunk, final boolean save) {
         super(chunk);
         this.saveChunk = save;
     }
@@ -34,7 +34,7 @@ public class ChunkUnloadEvent extends ChunkEvent {
      *
      * @param saveChunk chunk save status
      */
-    public void setSaveChunk(boolean saveChunk) {
+    public void setSaveChunk(final boolean saveChunk) {
         this.saveChunk = saveChunk;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
index e051dc8b94893a0aa729996695aae91de57f3acd..6cd5617b72d298630cca3d35f0b24b8d1f19adf7 100644
--- a/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
+++ b/src/main/java/org/bukkit/event/world/LootGenerateEvent.java
@@ -34,7 +34,7 @@ public class LootGenerateEvent extends WorldEvent implements Cancellable {
     private final List<ItemStack> loot;
     private final boolean plugin;
 
-    public LootGenerateEvent(@NotNull World world, @Nullable Entity entity, @Nullable InventoryHolder inventoryHolder, @NotNull LootTable lootTable, @NotNull LootContext lootContext, @NotNull List<ItemStack> items, boolean plugin) {
+    public LootGenerateEvent(@NotNull final World world, @Nullable final Entity entity, @Nullable final InventoryHolder inventoryHolder, @NotNull final LootTable lootTable, @NotNull final LootContext lootContext, @NotNull final List<ItemStack> items, final boolean plugin) {
         super(world);
         this.entity = entity;
         this.inventoryHolder = inventoryHolder;
@@ -102,7 +102,7 @@ public class LootGenerateEvent extends WorldEvent implements Cancellable {
      *
      * @param loot the loot to generate, null to clear all loot
      */
-    public void setLoot(@Nullable Collection<ItemStack> loot) {
+    public void setLoot(@Nullable final Collection<ItemStack> loot) {
         this.loot.clear();
         if (loot != null) {
             this.loot.addAll(loot);
@@ -134,7 +134,7 @@ public class LootGenerateEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
index 579f017474ff22f0991ca884c35cdde7e14a94dc..371a2de01ec29a942e96ea347302d60337c1829a 100644
--- a/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
+++ b/src/main/java/org/bukkit/event/world/PortalCreateEvent.java
@@ -20,11 +20,11 @@ public class PortalCreateEvent extends WorldEvent implements Cancellable {
     private final CreateReason reason;
 
     @Deprecated
-    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @NotNull CreateReason reason) {
+    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @NotNull final CreateReason reason) {
         this(blocks, world, null, reason);
     }
 
-    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @Nullable Entity entity, @NotNull CreateReason reason) {
+    public PortalCreateEvent(@NotNull final List<BlockState> blocks, @NotNull final World world, @Nullable final Entity entity, @NotNull final CreateReason reason) {
         super(world);
 
         this.blocks = blocks;
@@ -58,7 +58,7 @@ public class PortalCreateEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancel = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
index 7af8d6e51c824cf0592b722b834f1d4986e3cc08..facddb6f46a69dc3f7eb5a1075391b541001647a 100644
--- a/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
+++ b/src/main/java/org/bukkit/event/world/StructureGrowEvent.java
@@ -89,7 +89,7 @@ public class StructureGrowEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/TimeSkipEvent.java b/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
index e18dbc305cc6a8fea5b67a0132e9c20e45834ca6..b697c874facfc2f110e9f47b3871bd3dee5c7a63 100644
--- a/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
+++ b/src/main/java/org/bukkit/event/world/TimeSkipEvent.java
@@ -18,7 +18,7 @@ public class TimeSkipEvent extends WorldEvent implements Cancellable {
     private final SkipReason skipReason;
     private long skipAmount;
 
-    public TimeSkipEvent(@NotNull World world, @NotNull SkipReason skipReason, @NotNull long skipAmount) {
+    public TimeSkipEvent(@NotNull final World world, @NotNull final SkipReason skipReason, final long skipAmount) {
         super(world);
         this.skipReason = skipReason;
         this.skipAmount = skipAmount;
@@ -48,7 +48,7 @@ public class TimeSkipEvent extends WorldEvent implements Cancellable {
      *
      * @param skipAmount Amount of time to skip
      */
-    public void setSkipAmount(long skipAmount) {
+    public void setSkipAmount(final long skipAmount) {
         this.skipAmount = skipAmount;
     }
 
@@ -58,7 +58,7 @@ public class TimeSkipEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java b/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
index 8eeeada8709b4c9c4ae10ea65b90b82f69aaaeaa..096b239f44b3946120a84eb8aed99a5b4242f366 100644
--- a/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldUnloadEvent.java
@@ -22,7 +22,7 @@ public class WorldUnloadEvent extends WorldEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.isCancelled = cancel;
     }
 
diff --git a/src/main/java/org/bukkit/generator/ChunkGenerator.java b/src/main/java/org/bukkit/generator/ChunkGenerator.java
index 83b0e8c89b2d6b9726c34d51c421d8ca428f7087..d314354c00d2f984d1a1b2618c843841169dc5b7 100644
--- a/src/main/java/org/bukkit/generator/ChunkGenerator.java
+++ b/src/main/java/org/bukkit/generator/ChunkGenerator.java
@@ -114,7 +114,7 @@ public abstract class ChunkGenerator {
      *     generator
      */
     @NotNull
-    public ChunkData generateChunkData(@NotNull World world, @NotNull Random random, int x, int z, @NotNull BiomeGrid biome) {
+    public ChunkData generateChunkData(@NotNull final World world, @NotNull final Random random, final int x, final int z, @NotNull final BiomeGrid biome) {
         throw new UnsupportedOperationException("Custom generator " + getClass().getName() + " is missing required method generateChunkData");
     }
 
@@ -124,7 +124,7 @@ public abstract class ChunkGenerator {
      * @return a new ChunkData for world
      */
     @NotNull
-    protected final ChunkData createChunkData(@NotNull World world) {
+    protected final ChunkData createChunkData(@NotNull final World world) {
         return Bukkit.getServer().createChunkData(world);
     }
 
@@ -136,8 +136,8 @@ public abstract class ChunkGenerator {
      * @param z Z-coordinate of the block to test
      * @return true if the location is valid, otherwise false
      */
-    public boolean canSpawn(@NotNull World world, int x, int z) {
-        Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
+    public boolean canSpawn(@NotNull final World world, final int x, final int z) {
+        final Block highest = world.getBlockAt(x, world.getHighestBlockYAt(x, z), z);
 
         return switch (world.getEnvironment()) {
             case NETHER -> true;
@@ -154,7 +154,7 @@ public abstract class ChunkGenerator {
      * @return List containing any amount of BlockPopulators
      */
     @NotNull
-    public List<BlockPopulator> getDefaultPopulators(@NotNull World world) {
+    public List<BlockPopulator> getDefaultPopulators(@NotNull final World world) {
         return new ArrayList<>();
     }
 
@@ -169,7 +169,7 @@ public abstract class ChunkGenerator {
      * @return Location containing a new spawn point, otherwise null
      */
     @Nullable
-    public Location getFixedSpawnLocation(@NotNull World world, @NotNull Random random) {
+    public Location getFixedSpawnLocation(@NotNull final World world, @NotNull final Random random) {
         return null;
     }
 
@@ -235,7 +235,7 @@ public abstract class ChunkGenerator {
      *
      */
     @NotNull
-    public ChunkData createVanillaChunkData(@NotNull World world, int x, int z) {
+    public ChunkData createVanillaChunkData(@NotNull final World world, final int x, final int z) {
         return Bukkit.getServer().createVanillaChunkData(world, x, z);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
index 37b8e1d610aa3c41b37a67e0144e2e2d248a2a68..9957a26153ba228d31056647fd113351aebde45e 100644
--- a/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
+++ b/src/main/java/org/bukkit/help/GenericCommandHelpTopic.java
@@ -17,7 +17,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
 
     protected final Command command;
 
-    public GenericCommandHelpTopic(@NotNull Command command) {
+    public GenericCommandHelpTopic(@NotNull final Command command) {
         this.command = command;
 
         if (command.getLabel().startsWith("/")) {
@@ -27,7 +27,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
         }
 
         // The short text is the first line of the description
-        int i = command.getDescription().indexOf('\n');
+        final int i = command.getDescription().indexOf('\n');
         if (i > 1) {
             shortText = command.getDescription().substring(0, i - 1);
         } else {
@@ -35,7 +35,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
         }
 
         // Build full text
-        StringBuilder sb = new StringBuilder();
+        final StringBuilder sb = new StringBuilder();
 
         sb.append(ChatColor.GOLD);
         sb.append("Description: ");
@@ -49,7 +49,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
         sb.append(ChatColor.WHITE);
         sb.append(command.getUsage().replace("<command>", name.substring(1)));
 
-        if (command.getAliases().size() > 0) {
+        if (!command.getAliases().isEmpty()) {
             sb.append("\n");
             sb.append(ChatColor.GOLD);
             sb.append("Aliases: ");
@@ -60,7 +60,7 @@ public class GenericCommandHelpTopic extends HelpTopic {
     }
 
     @Override
-    public boolean canSee(@NotNull CommandSender sender) {
+    public boolean canSee(@NotNull final CommandSender sender) {
         if (command.isRegistered()) {
             // Unregistered commands should not show up in the help
             return false;
diff --git a/src/main/java/org/bukkit/help/HelpTopic.java b/src/main/java/org/bukkit/help/HelpTopic.java
index 2e2e1af50d4716df0450558d97a0a9baf73679d9..0df6a9cdede736560b057fd5100d4b2b3c2d58a4 100644
--- a/src/main/java/org/bukkit/help/HelpTopic.java
+++ b/src/main/java/org/bukkit/help/HelpTopic.java
@@ -45,7 +45,7 @@ public abstract class HelpTopic {
      * @param amendedPermission The permission node the server administrator
      *     wishes to apply to this topic.
      */
-    public void amendCanSee(@Nullable String amendedPermission) {
+    public void amendCanSee(@Nullable final String amendedPermission) {
         this.amendedPermission = amendedPermission;
     }
 
@@ -82,7 +82,7 @@ public abstract class HelpTopic {
      * @return A full topic description.
      */
     @NotNull
-    public String getFullText(@NotNull CommandSender forWho) {
+    public String getFullText(@NotNull final CommandSender forWho) {
         return fullText;
     }
 
@@ -100,7 +100,7 @@ public abstract class HelpTopic {
      * @param amendedFullText The new topic full text to use, or null to leave
      *     alone.
      */
-    public void amendTopic(@Nullable String amendedShortText, @Nullable String amendedFullText) {
+    public void amendTopic(@Nullable final String amendedShortText, @Nullable final String amendedFullText) {
         shortText = applyAmendment(shortText, amendedShortText);
         fullText = applyAmendment(fullText, amendedFullText);
     }
@@ -117,11 +117,11 @@ public abstract class HelpTopic {
      *     according to the expected rules of amendTopic().
      */
     @NotNull
-    protected String applyAmendment(@NotNull String baseText, @Nullable String amendment) {
+    protected String applyAmendment(@NotNull final String baseText, @Nullable final String amendment) {
         if (amendment == null) {
             return baseText;
         } else {
-            return amendment.replaceAll("<text>", baseText);
+            return amendment.replace("<text>", baseText);
         }
     }
 }
diff --git a/src/main/java/org/bukkit/help/HelpTopicComparator.java b/src/main/java/org/bukkit/help/HelpTopicComparator.java
index 75bb69283f509e8f4fec772714a509a51be9de19..b9affd5737db50772350415ae6b5af6d4fa4a9e6 100644
--- a/src/main/java/org/bukkit/help/HelpTopicComparator.java
+++ b/src/main/java/org/bukkit/help/HelpTopicComparator.java
@@ -27,7 +27,7 @@ public final class HelpTopicComparator implements Comparator<HelpTopic> {
     private HelpTopicComparator() {}
 
     @Override
-    public int compare(@NotNull HelpTopic lhs, @NotNull HelpTopic rhs) {
+    public int compare(@NotNull final HelpTopic lhs, @NotNull final HelpTopic rhs) {
         return tnc.compare(lhs.getName(), rhs.getName());
     }
 
@@ -35,9 +35,9 @@ public final class HelpTopicComparator implements Comparator<HelpTopic> {
         private TopicNameComparator(){}
 
         @Override
-        public int compare(@NotNull String lhs, @NotNull String rhs) {
-            boolean lhsStartSlash = lhs.startsWith("/");
-            boolean rhsStartSlash = rhs.startsWith("/");
+        public int compare(@NotNull final String lhs, @NotNull final String rhs) {
+            final boolean lhsStartSlash = lhs.startsWith("/");
+            final boolean rhsStartSlash = rhs.startsWith("/");
 
             if (lhsStartSlash && !rhsStartSlash) {
                 return 1;
diff --git a/src/main/java/org/bukkit/help/IndexHelpTopic.java b/src/main/java/org/bukkit/help/IndexHelpTopic.java
index 9e2b39898c0406ee3ac2392933d7b1b897b5eb03..adc68b09fa0b4589e561a1827a6ed6ed9504fca1 100644
--- a/src/main/java/org/bukkit/help/IndexHelpTopic.java
+++ b/src/main/java/org/bukkit/help/IndexHelpTopic.java
@@ -23,11 +23,11 @@ public class IndexHelpTopic extends HelpTopic {
     protected final String preamble;
     protected Collection<HelpTopic> allTopics;
 
-    public IndexHelpTopic(@NotNull String name, @Nullable String shortText, @Nullable String permission, @NotNull Collection<HelpTopic> topics) {
+    public IndexHelpTopic(@NotNull final String name, @Nullable final String shortText, @Nullable final String permission, @NotNull final Collection<HelpTopic> topics) {
         this(name, shortText, permission, topics, null);
     }
 
-    public IndexHelpTopic(@NotNull String name, @Nullable String shortText, @Nullable String permission, @NotNull Collection<HelpTopic> topics, @Nullable String preamble) {
+    public IndexHelpTopic(@NotNull final String name, @Nullable final String shortText, @Nullable final String permission, @NotNull final Collection<HelpTopic> topics, @Nullable final String preamble) {
         this.name = name;
         this.shortText = (shortText == null) ? "" : shortText;
         this.permission = permission;
@@ -40,12 +40,12 @@ public class IndexHelpTopic extends HelpTopic {
      *
      * @param topics The topics to set.
      */
-    protected void setTopicsCollection(@NotNull Collection<HelpTopic> topics) {
+    protected void setTopicsCollection(@NotNull final Collection<HelpTopic> topics) {
         this.allTopics = topics;
     }
 
     @Override
-    public boolean canSee(@NotNull CommandSender sender) {
+    public boolean canSee(@NotNull final CommandSender sender) {
         if (sender instanceof ConsoleCommandSender) {
             return true;
         }
@@ -56,23 +56,23 @@ public class IndexHelpTopic extends HelpTopic {
     }
 
     @Override
-    public void amendCanSee(@Nullable String amendedPermission) {
+    public void amendCanSee(@Nullable final String amendedPermission) {
         permission = amendedPermission;
     }
 
     @Override
     @NotNull
-    public String getFullText(@NotNull CommandSender sender) {
-        StringBuilder sb = new StringBuilder();
+    public String getFullText(@NotNull final CommandSender sender) {
+        final StringBuilder sb = new StringBuilder();
 
         if (preamble != null) {
             sb.append(buildPreamble(sender));
             sb.append("\n");
         }
 
-        for (HelpTopic topic : allTopics) {
+        for (final HelpTopic topic : allTopics) {
             if (topic.canSee(sender)) {
-                String lineStr = buildIndexLine(sender, topic).replace("\n", ". ");
+                final String lineStr = buildIndexLine(sender, topic).replace("\n", ". ");
                 if (sender instanceof Player && lineStr.length() > ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH) {
                     sb.append(lineStr, 0, ChatPaginator.GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH - 3);
                     sb.append("...");
@@ -93,7 +93,7 @@ public class IndexHelpTopic extends HelpTopic {
      * @return The topic preamble.
      */
     @NotNull
-    protected String buildPreamble(@NotNull CommandSender sender) {
+    protected String buildPreamble(@NotNull final CommandSender sender) {
         return ChatColor.GRAY + preamble;
     }
 
@@ -106,8 +106,8 @@ public class IndexHelpTopic extends HelpTopic {
      * @return The rendered index line.
      */
     @NotNull
-    protected String buildIndexLine(@NotNull CommandSender sender, @NotNull HelpTopic topic) {
-	    String line = ChatColor.GOLD +
+    protected String buildIndexLine(@NotNull final CommandSender sender, @NotNull final HelpTopic topic) {
+	    final String line = ChatColor.GOLD +
 		    topic.getName() +
 		    ": " +
 		    ChatColor.WHITE +
diff --git a/src/main/java/org/bukkit/inventory/AnvilInventory.java b/src/main/java/org/bukkit/inventory/AnvilInventory.java
index b95e563b5454306a9188ae3295309ee86a756477..f53ee91e9bc6c4bbff2e2d0d960cf37cc48affda 100644
--- a/src/main/java/org/bukkit/inventory/AnvilInventory.java
+++ b/src/main/java/org/bukkit/inventory/AnvilInventory.java
@@ -66,7 +66,7 @@ public interface AnvilInventory extends Inventory {
      *
      * @param firstItem item to set
      */
-    default void setFirstItem(@Nullable ItemStack firstItem) {
+    default void setFirstItem(@Nullable final ItemStack firstItem) {
         setItem(0, firstItem);
     }
 
@@ -85,7 +85,7 @@ public interface AnvilInventory extends Inventory {
      *
      * @param secondItem item to set
      */
-    default void setSecondItem(@Nullable ItemStack secondItem) {
+    default void setSecondItem(@Nullable final ItemStack secondItem) {
         setItem(1, secondItem);
     }
 
@@ -105,7 +105,7 @@ public interface AnvilInventory extends Inventory {
      *
      * @param result item to set
      */
-    default void setResult(@Nullable ItemStack result) {
+    default void setResult(@Nullable final ItemStack result) {
         setItem(2, result);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/BlastingRecipe.java b/src/main/java/org/bukkit/inventory/BlastingRecipe.java
index 74a025a90c9f4cd4bb3c42a53f54fe53a39e656a..1eddd95ce08eca605d92054c66c8786cabdb1aad 100644
--- a/src/main/java/org/bukkit/inventory/BlastingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/BlastingRecipe.java
@@ -9,11 +9,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class BlastingRecipe extends CookingRecipe<BlastingRecipe> {
 
-    public BlastingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public BlastingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public BlastingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public BlastingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/CampfireRecipe.java b/src/main/java/org/bukkit/inventory/CampfireRecipe.java
index a1bd3a68d004c19b162dd1ce6b951eaa533f295e..313ddb57d9928a6e09ea2616334f260e9e47d31e 100644
--- a/src/main/java/org/bukkit/inventory/CampfireRecipe.java
+++ b/src/main/java/org/bukkit/inventory/CampfireRecipe.java
@@ -9,11 +9,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class CampfireRecipe extends CookingRecipe<CampfireRecipe> {
 
-    public CampfireRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public CampfireRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public CampfireRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public CampfireRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/CookingRecipe.java b/src/main/java/org/bukkit/inventory/CookingRecipe.java
index b8762a5ac952c97cb98898d485f320906dff048c..fc197a7e546f560d70272ff777c127b708f5891c 100644
--- a/src/main/java/org/bukkit/inventory/CookingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/CookingRecipe.java
@@ -29,7 +29,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public CookingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         this(key, result, new RecipeChoice.MaterialChoice(Collections.singletonList(source)), experience, cookingTime);
     }
 
@@ -42,7 +42,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public CookingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public CookingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
@@ -58,7 +58,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public CookingRecipe setInput(@NotNull Material input) {
+    public CookingRecipe setInput(@NotNull final Material input) {
         this.ingredient = new RecipeChoice.MaterialChoice(Collections.singletonList(input));
         return this;
     }
@@ -80,7 +80,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public T setInputChoice(@NotNull RecipeChoice input) {
+    public T setInputChoice(@NotNull final RecipeChoice input) {
         this.ingredient = input;
         return (T) this;
     }
@@ -111,7 +111,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      *
      * @param experience the experience level
      */
-    public void setExperience(float experience) {
+    public void setExperience(final float experience) {
         this.experience = experience;
     }
 
@@ -129,7 +129,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      *
      * @param cookingTime new cooking time
      */
-    public void setCookingTime(int cookingTime) {
+    public void setCookingTime(final int cookingTime) {
         Preconditions.checkArgument(cookingTime >= 0, "cookingTime must be >= 0");
         this.cookingTime = cookingTime;
     }
@@ -167,7 +167,7 @@ public abstract class CookingRecipe<T extends CookingRecipe> implements Recipe,
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(true, "group");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
index 4d93cd705c79e3c5fb4ccd57384ce4ab54f4b705..2c764e699c8bebbac7ecf578272e4c777fb6e59b 100644
--- a/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
+++ b/src/main/java/org/bukkit/inventory/FurnaceRecipe.java
@@ -12,22 +12,22 @@ import org.jetbrains.annotations.NotNull;
 public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull Material source) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final Material source) {
         this(NamespacedKey.randomKey(), result, source, 0, 0, 200);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull MaterialData source) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final MaterialData source) {
         this(NamespacedKey.randomKey(), result, source.getItemType(), source.getData(), 0, 200);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull MaterialData source, float experience) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final MaterialData source, final float experience) {
         this(NamespacedKey.randomKey(), result, source.getItemType(), source.getData(), experience, 200);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull ItemStack result, @NotNull Material source, int data) {
+    public FurnaceRecipe(@NotNull final ItemStack result, @NotNull final Material source, final int data) {
         this(NamespacedKey.randomKey(), result, source, data, 0, 200);
     }
 
@@ -40,12 +40,12 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public FurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public FurnaceRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         this(key, result, source, 0, experience, cookingTime);
     }
 
     @Deprecated
-    public FurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, int data, float experience, int cookingTime) {
+    public FurnaceRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final int data, final float experience, final int cookingTime) {
         this(key, result, new RecipeChoice.MaterialChoice(Collections.singletonList(source)), experience, cookingTime);
     }
 
@@ -58,7 +58,7 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @param experience The experience given by this recipe
      * @param cookingTime The cooking time (in ticks)
      */
-    public FurnaceRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public FurnaceRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 
@@ -69,13 +69,13 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public FurnaceRecipe setInput(@NotNull MaterialData input) {
+    public FurnaceRecipe setInput(@NotNull final MaterialData input) {
         return setInput(input.getItemType(), input.getData());
     }
 
     @NotNull
     @Override
-    public FurnaceRecipe setInput(@NotNull Material input) {
+    public FurnaceRecipe setInput(@NotNull final Material input) {
         return (FurnaceRecipe) super.setInput(input);
     }
 
@@ -89,13 +89,13 @@ public class FurnaceRecipe extends CookingRecipe<FurnaceRecipe> {
      * @deprecated Magic value
      */
     @Deprecated
-    public FurnaceRecipe setInput(@NotNull Material input, int data) {
+    public FurnaceRecipe setInput(@NotNull final Material input, final int data) {
         return setInputChoice(new RecipeChoice.MaterialChoice(Collections.singletonList(input)));
     }
 
     @NotNull
     @Override
-    public FurnaceRecipe setInputChoice(@NotNull RecipeChoice input) {
+    public FurnaceRecipe setInputChoice(@NotNull final RecipeChoice input) {
         return super.setInputChoice(input);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/GrindstoneInventory.java b/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
index 1c750108f55a0a31ad23433b333e0ea486a63ff2..4e2851676fb10c1a11cb0cd692c25655ffbd866a 100644
--- a/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
+++ b/src/main/java/org/bukkit/inventory/GrindstoneInventory.java
@@ -23,7 +23,7 @@ public interface GrindstoneInventory extends Inventory {
      *
      * @param upperItem item to set
      */
-    default void setUpperItem(@Nullable ItemStack upperItem) {
+    default void setUpperItem(@Nullable final ItemStack upperItem) {
         setItem(0, upperItem);
     }
 
@@ -42,7 +42,7 @@ public interface GrindstoneInventory extends Inventory {
      *
      * @param lowerItem item to set
      */
-    default void setLowerItem(@Nullable ItemStack lowerItem) {
+    default void setLowerItem(@Nullable final ItemStack lowerItem) {
         setItem(1, lowerItem);
     }
 
@@ -61,7 +61,7 @@ public interface GrindstoneInventory extends Inventory {
      *
      * @param result item to set
      */
-    default void setResult(@Nullable ItemStack result) {
+    default void setResult(@Nullable final ItemStack result) {
         setItem(2, result);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/InventoryView.java b/src/main/java/org/bukkit/inventory/InventoryView.java
index be39e5a1a341e3ed60cbe1ae667db69fc8588f19..c80de7add3031187f47a834c4432026abed75305 100644
--- a/src/main/java/org/bukkit/inventory/InventoryView.java
+++ b/src/main/java/org/bukkit/inventory/InventoryView.java
@@ -112,7 +112,7 @@ public abstract class InventoryView {
         BOOK_PAGE(0, InventoryType.LECTERN);
         final int id;
         final InventoryType style;
-        Property(int id, /*@NotNull*/ InventoryType appliesTo) {
+        Property(final int id, /*@NotNull*/ final InventoryType appliesTo) {
             this.id = id;
             style = appliesTo;
         }
@@ -176,8 +176,8 @@ public abstract class InventoryView {
      * @param slot The ID as returned by InventoryClickEvent.getRawSlot()
      * @param item The new item to put in the slot, or null to clear it.
      */
-    public void setItem(int slot, @Nullable ItemStack item) {
-        Inventory inventory = getInventory(slot);
+    public void setItem(final int slot, @Nullable final ItemStack item) {
+        final Inventory inventory = getInventory(slot);
         if (inventory != null) {
             inventory.setItem(convertSlot(slot), item);
         } else if (item != null) {
@@ -192,8 +192,8 @@ public abstract class InventoryView {
      * @return The item currently in the slot.
      */
     @Nullable
-    public ItemStack getItem(int slot) {
-        Inventory inventory = getInventory(slot);
+    public ItemStack getItem(final int slot) {
+        final Inventory inventory = getInventory(slot);
         return (inventory == null) ? null : inventory.getItem(convertSlot(slot));
     }
 
@@ -203,7 +203,7 @@ public abstract class InventoryView {
      * @param item The item to put on the cursor, or null to remove the item
      *     on their cursor.
      */
-    public final void setCursor(@Nullable ItemStack item) {
+    public final void setCursor(@Nullable final ItemStack item) {
         getPlayer().setItemOnCursor(item);
     }
 
@@ -231,7 +231,7 @@ public abstract class InventoryView {
      * @return corresponding inventory, or null
      */
     @Nullable
-    public final Inventory getInventory(int rawSlot) {
+    public final Inventory getInventory(final int rawSlot) {
         // Slot may be -1 if not properly detected due to client bug
         // e.g. dropping an item into part of the enchantment list section of an enchanting table
         if (rawSlot == OUTSIDE || rawSlot == -1) {
@@ -259,8 +259,8 @@ public abstract class InventoryView {
      * @param rawSlot The raw slot ID.
      * @return The converted slot ID.
      */
-    public final int convertSlot(int rawSlot) {
-        int numInTop = getTopInventory().getSize();
+    public final int convertSlot(final int rawSlot) {
+        final int numInTop = getTopInventory().getSize();
         // Index from the top inventory as having slots from [0,size]
         if (rawSlot < numInTop) {
             return rawSlot;
@@ -333,7 +333,7 @@ public abstract class InventoryView {
      * @return the slot type
      */
     @NotNull
-    public final InventoryType.SlotType getSlotType(int slot) {
+    public final InventoryType.SlotType getSlotType(final int slot) {
         InventoryType.SlotType type = InventoryType.SlotType.CONTAINER;
         if (slot >= 0 && slot < this.getTopInventory().getSize()) {
             switch (this.getType()) {
@@ -440,7 +440,7 @@ public abstract class InventoryView {
      * @return true if the property was updated successfully, false if the
      *     property is not supported by that inventory
      */
-    public final boolean setProperty(@NotNull Property prop, int value) {
+    public final boolean setProperty(@NotNull final Property prop, final int value) {
         return getPlayer().setWindowProperty(prop, value);
     }
 
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
index 711fee5278d56b6cf8564c3b06b03ed1ec5b5970..08ba5fcbcebf6905da31514a1e16c51bd02ed182 100644
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -135,7 +135,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param type New type to set the items in this stack to
      */
     @Utility
-    public void setType(@NotNull Material type) {
+    public void setType(@NotNull final Material type) {
         Validate.notNull(type, "Material cannot be null");
         this.type = type;
         if (this.meta != null) {
@@ -162,7 +162,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param amount New amount of items in this stack
      */
-    public void setAmount(int amount) {
+    public void setAmount(final int amount) {
         this.amount = amount;
     }
 
@@ -173,7 +173,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @Nullable
     public MaterialData getData() {
-        Material mat = Bukkit.getUnsafe().toLegacy(getType());
+        final Material mat = Bukkit.getUnsafe().toLegacy(getType());
         if (data == null && mat != null) {
 	        mat.getData();
 	        data = mat.getNewData((byte) this.getDurability());
@@ -187,11 +187,11 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param data New MaterialData for this item
      */
-    public void setData(@Nullable MaterialData data) {
+    public void setData(@Nullable final MaterialData data) {
         if (data == null) {
             this.data = data;
         } else {
-            Material mat = Bukkit.getUnsafe().toLegacy(getType());
+            final Material mat = Bukkit.getUnsafe().toLegacy(getType());
 
             if ((data.getClass() == mat.getData()) || (data.getClass() == MaterialData.class)) {
                 this.data = data;
@@ -213,7 +213,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @Deprecated
     public void setDurability(final short durability) {
-        ItemMeta meta = getItemMeta();
+        final ItemMeta meta = getItemMeta();
         if (meta != null) {
             ((Damageable) meta).setDamage(durability);
             setItemMeta(meta);
@@ -228,7 +228,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @Deprecated
     public short getDurability() {
-        ItemMeta meta = getItemMeta();
+        final ItemMeta meta = getItemMeta();
         return (meta == null) ? 0 : (short) ((Damageable) meta).getDamage();
     }
 
@@ -240,7 +240,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @Utility
     public int getMaxStackSize() {
-        Material material = getType();
+        final Material material = getType();
 	    return material.getMaxStackSize();
     }
 
@@ -251,7 +251,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @Override
     @Utility
     public String toString() {
-        StringBuilder toString = new StringBuilder("ItemStack{").append(getType().name()).append(" x ").append(getAmount());
+        final StringBuilder toString = new StringBuilder("ItemStack{").append(getType().name()).append(" x ").append(getAmount());
         if (hasItemMeta()) {
             toString.append(", ").append(getItemMeta());
         }
@@ -260,7 +260,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
 
     @Override
     @Utility
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
@@ -268,7 +268,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             return false;
         }
 
-        ItemStack stack = (ItemStack) obj;
+        final ItemStack stack = (ItemStack) obj;
         return getAmount() == stack.getAmount() && isSimilar(stack);
     }
 
@@ -280,14 +280,14 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return true if the two stacks are equal, ignoring the amount
      */
     @Utility
-    public boolean isSimilar(@Nullable ItemStack stack) {
+    public boolean isSimilar(@Nullable final ItemStack stack) {
         if (stack == null) {
             return false;
         }
         if (stack == this) {
             return true;
         }
-        Material comparisonType = (this.type.isLegacy()) ? Bukkit.getUnsafe().fromLegacy(this.getData(), true) : this.type; // This may be called from legacy item stacks, try to get the right material
+        final Material comparisonType = (this.type.isLegacy()) ? Bukkit.getUnsafe().fromLegacy(this.getData(), true) : this.type; // This may be called from legacy item stacks, try to get the right material
         return comparisonType == stack.getType() && getDurability() == stack.getDurability() && hasItemMeta() == stack.hasItemMeta() && (!hasItemMeta() || Bukkit.getItemFactory().equals(getItemMeta(), stack.getItemMeta()));
     }
 
@@ -295,7 +295,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @Override
     public ItemStack clone() {
         try {
-            ItemStack itemStack = (ItemStack) super.clone();
+            final ItemStack itemStack = (ItemStack) super.clone();
 
             if (this.meta != null) {
                 itemStack.meta = this.meta.clone();
@@ -306,7 +306,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             }
 
             return itemStack;
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -330,7 +330,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to test
      * @return True if this has the given enchantment
      */
-    public boolean containsEnchantment(@NotNull Enchantment ench) {
+    public boolean containsEnchantment(@NotNull final Enchantment ench) {
         return meta != null && meta.hasEnchant(ench);
     }
 
@@ -340,7 +340,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to check
      * @return Level of the enchantment, or 0
      */
-    public int getEnchantmentLevel(@NotNull Enchantment ench) {
+    public int getEnchantmentLevel(@NotNull final Enchantment ench) {
         return meta == null ? 0 : meta.getEnchantLevel(ench);
     }
 
@@ -368,9 +368,9 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *     exception is thrown.
      */
     @Utility
-    public void addEnchantments(@NotNull Map<Enchantment, Integer> enchantments) {
+    public void addEnchantments(@NotNull final Map<Enchantment, Integer> enchantments) {
         Validate.notNull(enchantments, "Enchantments cannot be null");
-        for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
+        for (final Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
             addEnchantment(entry.getKey(), entry.getValue());
         }
     }
@@ -387,7 +387,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *     not applicable
      */
     @Utility
-    public void addEnchantment(@NotNull Enchantment ench, int level) {
+    public void addEnchantment(@NotNull final Enchantment ench, final int level) {
         Validate.notNull(ench, "Enchantment cannot be null");
         if ((level < ench.getStartLevel()) || (level > ench.getMaxLevel())) {
             throw new IllegalArgumentException("Enchantment level is either too low or too high (given " + level + ", bounds are " + ench.getStartLevel() + " to " + ench.getMaxLevel() + ")");
@@ -408,8 +408,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param enchantments Enchantments to add
      */
     @Utility
-    public void addUnsafeEnchantments(@NotNull Map<Enchantment, Integer> enchantments) {
-        for (Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
+    public void addUnsafeEnchantments(@NotNull final Map<Enchantment, Integer> enchantments) {
+        for (final Map.Entry<Enchantment, Integer> entry : enchantments.entrySet()) {
             addUnsafeEnchantment(entry.getKey(), entry.getValue());
         }
     }
@@ -426,8 +426,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to add
      * @param level Level of the enchantment
      */
-    public void addUnsafeEnchantment(@NotNull Enchantment ench, int level) {
-        ItemMeta itemMeta = (meta == null ? meta = Bukkit.getItemFactory().getItemMeta(type) : meta);
+    public void addUnsafeEnchantment(@NotNull final Enchantment ench, final int level) {
+        final ItemMeta itemMeta = (meta == null ? meta = Bukkit.getItemFactory().getItemMeta(type) : meta);
         if (itemMeta != null) {
             itemMeta.addEnchant(ench, level, true);
         }
@@ -440,8 +440,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param ench Enchantment to remove
      * @return Previous level, or 0
      */
-    public int removeEnchantment(@NotNull Enchantment ench) {
-        int level = getEnchantmentLevel(ench);
+    public int removeEnchantment(@NotNull final Enchantment ench) {
+        final int level = getEnchantmentLevel(ench);
         if (level == 0 || meta == null) {
             return level;
         }
@@ -453,7 +453,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
     @NotNull
     @Utility
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<>();
+        final Map<String, Object> result = new LinkedHashMap<>();
 
         result.put("v", Bukkit.getUnsafe().getDataVersion()); // Include version to indicate we are using modern material names (or LEGACY prefix)
         result.put("type", getType().name());
@@ -462,7 +462,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             result.put("amount", getAmount());
         }
 
-        ItemMeta meta = getItemMeta();
+        final ItemMeta meta = getItemMeta();
         if (!Bukkit.getItemFactory().equals(meta, null)) {
             result.put("meta", meta);
         }
@@ -478,8 +478,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @see ConfigurationSerializable
      */
     @NotNull
-    public static ItemStack deserialize(@NotNull Map<String, Object> args) {
-        int version = (args.containsKey("v")) ? ((Number) args.get("v")).intValue() : -1;
+    public static ItemStack deserialize(@NotNull final Map<String, Object> args) {
+        final int version = (args.containsKey("v")) ? ((Number) args.get("v")).intValue() : -1;
         short damage = 0;
         int amount = 1;
 
@@ -491,7 +491,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         if (version < 0) {
             type = Material.getMaterial(Material.LEGACY_PREFIX + args.get("type"));
 
-            byte dataVal = (type != null && type.getMaxDurability() == 0) ? (byte) damage : 0; // Actually durable items get a 0 passed into conversion
+            final byte dataVal = (type != null && type.getMaxDurability() == 0) ? (byte) damage : 0; // Actually durable items get a 0 passed into conversion
             type = Bukkit.getUnsafe().fromLegacy(new MaterialData(type, dataVal), true);
 
             // We've converted now so the data val isn't a thing and can be reset
@@ -506,16 +506,16 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
             amount = ((Number) args.get("amount")).intValue();
         }
 
-        ItemStack result = new ItemStack(type, amount, damage);
+        final ItemStack result = new ItemStack(type, amount, damage);
 
         if (args.containsKey("enchantments")) { // Backward compatiblity, @deprecated
-            Object raw = args.get("enchantments");
+            final Object raw = args.get("enchantments");
 
             if (raw instanceof Map) {
-                Map<?, ?> map = (Map<?, ?>) raw;
+                final Map<?, ?> map = (Map<?, ?>) raw;
 
-                for (Map.Entry<?, ?> entry : map.entrySet()) {
-                    Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
+                for (final Map.Entry<?, ?> entry : map.entrySet()) {
+                    final Enchantment enchantment = Enchantment.getByName(entry.getKey().toString());
 
                     if ((enchantment != null) && (entry.getValue() instanceof Integer)) {
                         result.addUnsafeEnchantment(enchantment, (Integer) entry.getValue());
@@ -523,7 +523,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
                 }
             }
         } else if (args.containsKey("meta")) { // We cannot and will not have meta when enchantments (pre-ItemMeta) exist
-            Object raw = args.get("meta");
+            final Object raw = args.get("meta");
             if (raw instanceof ItemMeta) {
                 ((ItemMeta) raw).setVersion(version);
                 result.setItemMeta((ItemMeta) raw);
@@ -568,14 +568,14 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @throws IllegalArgumentException if the item meta was not created by
      *     the {@link ItemFactory}
      */
-    public boolean setItemMeta(@Nullable ItemMeta itemMeta) {
+    public boolean setItemMeta(@Nullable final ItemMeta itemMeta) {
         return setItemMeta0(itemMeta, type);
     }
 
     /*
      * Cannot be overridden, so it's safe for constructor call
      */
-    private boolean setItemMeta0(@Nullable ItemMeta itemMeta, @NotNull Material material) {
+    private boolean setItemMeta0(@Nullable final ItemMeta itemMeta, @NotNull final Material material) {
         if (itemMeta == null) {
             this.meta = null;
             return true;
@@ -585,7 +585,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         }
         this.meta = Bukkit.getItemFactory().asMetaFor(itemMeta, material);
 
-        Material newType = Bukkit.getItemFactory().updateMaterial(meta, material);
+        final Material newType = Bukkit.getItemFactory().updateMaterial(meta, material);
         if (this.type != newType) {
             this.type = newType;
         }
@@ -627,7 +627,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return ItemStack migrated to this version of Minecraft if needed.
      */
     @NotNull
-    public static ItemStack deserializeBytes(@NotNull byte[] bytes) {
+    public static ItemStack deserializeBytes(final byte[] bytes) {
         return org.bukkit.Bukkit.getUnsafe().deserializeItem(bytes);
     }
 
@@ -636,7 +636,6 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * use the built in data converter instead of bukkits dangerous serialization system.
      * @return bytes representing this item in NBT.
      */
-    @NotNull
     public byte[] serializeAsBytes() {
         return org.bukkit.Bukkit.getUnsafe().serializeItem(this);
     }
@@ -676,8 +675,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return The new itemstack with specified quantity
      */
     @NotNull
-    public ItemStack asQuantity(int qty) {
-        ItemStack clone = clone();
+    public ItemStack asQuantity(final int qty) {
+        final ItemStack clone = clone();
         clone.setAmount(qty);
         return clone;
     }
@@ -698,7 +697,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return The same item (not a clone)
      */
     @NotNull
-    public ItemStack add(int qty) {
+    public ItemStack add(final int qty) {
         setAmount(Math.min(getMaxStackSize(), getAmount() + qty));
         return this;
     }
@@ -719,7 +718,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @return The same item (not a clone)
      */
     @NotNull
-    public ItemStack subtract(int qty) {
+    public ItemStack subtract(final int qty) {
         setAmount(Math.max(0, getAmount() - qty));
         return this;
     }
@@ -734,7 +733,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
         if (!hasItemMeta()) {
             return null;
         }
-        ItemMeta itemMeta = getItemMeta();
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta.hasLore()) {
             return null;
         }
@@ -764,8 +763,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @deprecated in favour of {@link #lore(List)}
      */
     @Deprecated
-    public void setLore(@Nullable List<String> lore) {
-        ItemMeta itemMeta = getItemMeta();
+    public void setLore(@Nullable final List<String> lore) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot set lore on " + getType());
         }
@@ -779,8 +778,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param lore the lore that will be set
      */
-    public void lore(@Nullable List<net.kyori.adventure.text.Component> lore) {
-        ItemMeta itemMeta = getItemMeta();
+    public void lore(@Nullable final List<net.kyori.adventure.text.Component> lore) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot set lore on " + getType());
         }
@@ -793,8 +792,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param itemFlags The hideflags which shouldn't be rendered
      */
-    public void addItemFlags(@NotNull ItemFlag... itemFlags) {
-        ItemMeta itemMeta = getItemMeta();
+    public void addItemFlags(@NotNull final ItemFlag... itemFlags) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot add flags on " + getType());
         }
@@ -807,8 +806,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      *
      * @param itemFlags Hideflags which should be removed
      */
-    public void removeItemFlags(@NotNull ItemFlag... itemFlags) {
-        ItemMeta itemMeta = getItemMeta();
+    public void removeItemFlags(@NotNull final ItemFlag... itemFlags) {
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             throw new IllegalStateException("Cannot remove flags on " + getType());
         }
@@ -823,7 +822,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      */
     @NotNull
     public Set<ItemFlag> getItemFlags() {
-        ItemMeta itemMeta = getItemMeta();
+        final ItemMeta itemMeta = getItemMeta();
         if (itemMeta == null) {
             return java.util.Collections.emptySet();
         }
@@ -836,8 +835,8 @@ public class ItemStack implements Cloneable, ConfigurationSerializable, net.kyor
      * @param flag the flag to check
      * @return if it is present
      */
-    public boolean hasItemFlag(@NotNull ItemFlag flag) {
-        ItemMeta itemMeta = getItemMeta();
+    public boolean hasItemFlag(@NotNull final ItemFlag flag) {
+        final ItemMeta itemMeta = getItemMeta();
         return itemMeta != null && itemMeta.hasItemFlag(flag);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/LecternInventory.java b/src/main/java/org/bukkit/inventory/LecternInventory.java
index e84cceca6836c5f5699d187d543d1f4802528848..de2324459a3e980afa342e4a1399f9ce85bdcd6b 100644
--- a/src/main/java/org/bukkit/inventory/LecternInventory.java
+++ b/src/main/java/org/bukkit/inventory/LecternInventory.java
@@ -28,7 +28,7 @@ public interface LecternInventory extends Inventory {
      *
      * @param book the new book
      */
-    default void setBook(@Nullable ItemStack book) {
+    default void setBook(@Nullable final ItemStack book) {
         setItem(0, book);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/MerchantRecipe.java b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
index 76a507d2a22a30079616e6324ab6d261f320a5a6..7df8f6194c97bde4b2e5e0266deed32e901739ff 100644
--- a/src/main/java/org/bukkit/inventory/MerchantRecipe.java
+++ b/src/main/java/org/bukkit/inventory/MerchantRecipe.java
@@ -30,19 +30,19 @@ public class MerchantRecipe implements Recipe {
     private float priceMultiplier;
     private boolean ignoreDiscounts; // Paper
 
-    public MerchantRecipe(@NotNull ItemStack result, int maxUses) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int maxUses) {
         this(result, 0, maxUses, false);
     }
 
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward) {
         this(result, uses, maxUses, experienceReward, 0, 0.0F);
     }
 
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward, final int villagerExperience, final float priceMultiplier) {
         // Paper start - add ignoreDiscounts param
         this(result, uses, maxUses, experienceReward, villagerExperience, priceMultiplier, false);
     }
-    public MerchantRecipe(@NotNull ItemStack result, int uses, int maxUses, boolean experienceReward, int villagerExperience, float priceMultiplier, boolean ignoreDiscounts) {
+    public MerchantRecipe(@NotNull final ItemStack result, final int uses, final int maxUses, final boolean experienceReward, final int villagerExperience, final float priceMultiplier, final boolean ignoreDiscounts) {
         this.ignoreDiscounts = ignoreDiscounts;
         // Paper end
         this.result = result;
@@ -59,27 +59,27 @@ public class MerchantRecipe implements Recipe {
         return result;
     }
 
-    public void addIngredient(@NotNull ItemStack item) {
+    public void addIngredient(@NotNull final ItemStack item) {
         Preconditions.checkState(ingredients.size() < 2, "MerchantRecipe can only have maximum 2 ingredients");
         ingredients.add(item.clone());
     }
 
-    public void removeIngredient(int index) {
+    public void removeIngredient(final int index) {
         ingredients.remove(index);
     }
 
-    public void setIngredients(@NotNull List<ItemStack> ingredients) {
+    public void setIngredients(@NotNull final List<ItemStack> ingredients) {
         Preconditions.checkState(ingredients.size() <= 2, "MerchantRecipe can only have maximum 2 ingredients");
         this.ingredients = new ArrayList<>();
-        for (ItemStack item : ingredients) {
+        for (final ItemStack item : ingredients) {
             this.ingredients.add(item.clone());
         }
     }
 
     @NotNull
     public List<ItemStack> getIngredients() {
-        List<ItemStack> copy = new ArrayList<>();
-        for (ItemStack item : ingredients) {
+        final List<ItemStack> copy = new ArrayList<>();
+        for (final ItemStack item : ingredients) {
             copy.add(item.clone());
         }
         return copy;
@@ -99,7 +99,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param uses the number of uses
      */
-    public void setUses(int uses) {
+    public void setUses(final int uses) {
         this.uses = uses;
     }
 
@@ -120,7 +120,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param maxUses the maximum number of time this trade can be used
      */
-    public void setMaxUses(int maxUses) {
+    public void setMaxUses(final int maxUses) {
         this.maxUses = maxUses;
     }
 
@@ -140,7 +140,7 @@ public class MerchantRecipe implements Recipe {
      * @param flag whether to reward experience to the player for completing
      * this trade
      */
-    public void setExperienceReward(boolean flag) {
+    public void setExperienceReward(final boolean flag) {
         this.experienceReward = flag;
     }
 
@@ -158,7 +158,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param villagerExperience new experience amount
      */
-    public void setVillagerExperience(int villagerExperience) {
+    public void setVillagerExperience(final int villagerExperience) {
         this.villagerExperience = villagerExperience;
     }
 
@@ -176,7 +176,7 @@ public class MerchantRecipe implements Recipe {
      *
      * @param priceMultiplier new price multiplier
      */
-    public void setPriceMultiplier(float priceMultiplier) {
+    public void setPriceMultiplier(final float priceMultiplier) {
         this.priceMultiplier = priceMultiplier;
     }
 
@@ -191,7 +191,7 @@ public class MerchantRecipe implements Recipe {
     /**
      * @param ignoreDiscounts Whether all discounts on this trade should be ignored.
      */
-    public void setIgnoreDiscounts(boolean ignoreDiscounts) {
+    public void setIgnoreDiscounts(final boolean ignoreDiscounts) {
         this.ignoreDiscounts = ignoreDiscounts;
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/RecipeChoice.java b/src/main/java/org/bukkit/inventory/RecipeChoice.java
index 18d4fa5ac5beb6a09f4aa97df97046c710317c10..4fe6972edc7d8201a78aa1ed911cdc30e773362b 100644
--- a/src/main/java/org/bukkit/inventory/RecipeChoice.java
+++ b/src/main/java/org/bukkit/inventory/RecipeChoice.java
@@ -42,11 +42,11 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
 
         private List<Material> choices;
 
-        public MaterialChoice(@NotNull Material choice) {
+        public MaterialChoice(@NotNull final Material choice) {
             this(Collections.singletonList(choice));
         }
 
-        public MaterialChoice(@NotNull Material... choices) {
+        public MaterialChoice(@NotNull final Material... choices) {
             this(Arrays.asList(choices));
         }
 
@@ -56,15 +56,15 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
          *
          * @param choices the tag
          */
-        public MaterialChoice(@NotNull Tag<Material> choices) {
+        public MaterialChoice(@NotNull final Tag<Material> choices) {
             Preconditions.checkArgument(true, "choices");
             this.choices = new ArrayList<>(choices.getValues());
         }
 
-        public MaterialChoice(@NotNull List<Material> choices) {
+        public MaterialChoice(@NotNull final List<Material> choices) {
             Preconditions.checkArgument(true, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
-            for (Material choice : choices) {
+            for (final Material choice : choices) {
                 Preconditions.checkArgument(choice != null, "Cannot have null choice");
             }
 
@@ -72,8 +72,8 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean test(@NotNull ItemStack t) {
-            for (Material match : choices) {
+        public boolean test(@NotNull final ItemStack t) {
+            for (final Material match : choices) {
                 if (t.getType() == match) {
                     return true;
                 }
@@ -85,7 +85,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @NotNull
         @Override
         public ItemStack getItemStack() {
-            ItemStack stack = new ItemStack(choices.get(0));
+            final ItemStack stack = new ItemStack(choices.get(0));
 
             // For compat
             if (choices.size() > 1) {
@@ -104,10 +104,10 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @Override
         public MaterialChoice clone() {
             try {
-                MaterialChoice clone = (MaterialChoice) super.clone();
+                final MaterialChoice clone = (MaterialChoice) super.clone();
                 clone.choices = new ArrayList<>(choices);
                 return clone;
-            } catch (CloneNotSupportedException ex) {
+            } catch (final CloneNotSupportedException ex) {
                 throw new AssertionError(ex);
             }
         }
@@ -120,7 +120,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean equals(Object obj) {
+        public boolean equals(final Object obj) {
             if (this == obj) {
                 return true;
             }
@@ -153,18 +153,18 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
 
         private List<ItemStack> choices;
 
-        public ExactChoice(@NotNull ItemStack stack) {
+        public ExactChoice(@NotNull final ItemStack stack) {
             this(Collections.singletonList(stack));
         }
 
-        public ExactChoice(@NotNull ItemStack... stacks) {
+        public ExactChoice(@NotNull final ItemStack... stacks) {
             this(Arrays.asList(stacks));
         }
 
-        public ExactChoice(@NotNull List<ItemStack> choices) {
+        public ExactChoice(@NotNull final List<ItemStack> choices) {
             Preconditions.checkArgument(true, "choices");
             Preconditions.checkArgument(!choices.isEmpty(), "Must have at least one choice");
-            for (ItemStack choice : choices) {
+            for (final ItemStack choice : choices) {
                 Preconditions.checkArgument(choice != null, "Cannot have null choice");
             }
 
@@ -186,17 +186,17 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         @Override
         public ExactChoice clone() {
             try {
-                ExactChoice clone = (ExactChoice) super.clone();
+                final ExactChoice clone = (ExactChoice) super.clone();
                 clone.choices = new ArrayList<>(choices);
                 return clone;
-            } catch (CloneNotSupportedException ex) {
+            } catch (final CloneNotSupportedException ex) {
                 throw new AssertionError(ex);
             }
         }
 
         @Override
-        public boolean test(@NotNull ItemStack t) {
-            for (ItemStack match : choices) {
+        public boolean test(@NotNull final ItemStack t) {
+            for (final ItemStack match : choices) {
                 if (t.isSimilar(match)) {
                     return true;
                 }
@@ -213,7 +213,7 @@ public interface RecipeChoice extends Predicate<ItemStack>, Cloneable {
         }
 
         @Override
-        public boolean equals(Object obj) {
+        public boolean equals(final Object obj) {
             if (this == obj) {
                 return true;
             }
diff --git a/src/main/java/org/bukkit/inventory/ShapedRecipe.java b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
index 40c01b5d453e6d242991835d9ae5acec2520f69e..3b4e124338229ea4757826a70f7eb02f22635303 100644
--- a/src/main/java/org/bukkit/inventory/ShapedRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapedRecipe.java
@@ -22,7 +22,7 @@ public class ShapedRecipe implements Recipe, Keyed {
     private String group = "";
 
     @Deprecated
-    public ShapedRecipe(@NotNull ItemStack result) {
+    public ShapedRecipe(@NotNull final ItemStack result) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = NamespacedKey.randomKey();
         new Throwable("Warning: A plugin is creating a recipe using a Deprecated method. This will cause you to receive warnings stating 'Tried to load unrecognized recipe: bukkit:<ID>'. Please ask the author to give their recipe a static key using NamespacedKey.").printStackTrace();
@@ -41,7 +41,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @see ShapedRecipe#setIngredient(char, Material, int)
      * @see ShapedRecipe#setIngredient(char, MaterialData)
      */
-    public ShapedRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
+    public ShapedRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result) {
         Preconditions.checkArgument(true, "key");
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
 
@@ -66,9 +66,9 @@ public class ShapedRecipe implements Recipe, Keyed {
         Validate.isTrue(shape.length > 0 && shape.length < 4, "Crafting recipes should be 1, 2 or 3 rows, not ", shape.length);
 
         int lastLen = -1;
-        for (String row : shape) {
+        for (final String row : shape) {
             Validate.notNull(row, "Shape cannot have null rows");
-            Validate.isTrue(row.length() > 0 && row.length() < 4, "Crafting rows should be 1, 2, or 3 characters, not ", row.length());
+            Validate.isTrue(!row.isEmpty() && row.length() < 4, "Crafting rows should be 1, 2, or 3 characters, not ", row.length());
 
             Validate.isTrue(lastLen == -1 || lastLen == row.length(), "Crafting recipes must be rectangular");
             lastLen = row.length();
@@ -77,9 +77,9 @@ public class ShapedRecipe implements Recipe, Keyed {
         System.arraycopy(shape, 0, this.rows, 0, shape.length);
 
         // Remove character mappings for characters that no longer exist in the shape
-        HashMap<Character, RecipeChoice> newIngredients = new HashMap<>();
-        for (String row : shape) {
-            for (Character c : row.toCharArray()) {
+        final HashMap<Character, RecipeChoice> newIngredients = new HashMap<>();
+        for (final String row : shape) {
+            for (final Character c : row.toCharArray()) {
                 newIngredients.put(c, ingredients.get(c));
             }
         }
@@ -96,7 +96,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull MaterialData ingredient) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final MaterialData ingredient) {
         return setIngredient(key, ingredient.getItemType(), ingredient.getData());
     }
 
@@ -108,7 +108,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull Material ingredient) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final Material ingredient) {
         return setIngredient(key, ingredient, 0);
     }
 
@@ -123,7 +123,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull Material ingredient, int raw) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final Material ingredient, int raw) {
         Validate.isTrue(ingredients.containsKey(key), "Symbol does not appear in the shape:", key);
 
         // -1 is the old wildcard, map to Short.MAX_VALUE as the new one
@@ -136,7 +136,7 @@ public class ShapedRecipe implements Recipe, Keyed {
     }
 
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull RecipeChoice ingredient) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final RecipeChoice ingredient) {
         Validate.isTrue(ingredients.containsKey(key), "Symbol does not appear in the shape:", key);
 
         ingredients.put(key, ingredient);
@@ -145,7 +145,7 @@ public class ShapedRecipe implements Recipe, Keyed {
 
     // Paper start
     @NotNull
-    public ShapedRecipe setIngredient(char key, @NotNull ItemStack item) {
+    public ShapedRecipe setIngredient(final char key, @NotNull final ItemStack item) {
         return setIngredient(key, new RecipeChoice.ExactChoice(item));
     }
     // Paper end
@@ -157,8 +157,8 @@ public class ShapedRecipe implements Recipe, Keyed {
      */
     @NotNull
     public Map<Character, ItemStack> getIngredientMap() {
-        HashMap<Character, ItemStack> result = new HashMap<>();
-        for (Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
+        final HashMap<Character, ItemStack> result = new HashMap<>();
+        for (final Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
             if (ingredient.getValue() == null) {
                 result.put(ingredient.getKey(), null);
             } else {
@@ -170,8 +170,8 @@ public class ShapedRecipe implements Recipe, Keyed {
 
     @NotNull
     public Map<Character, RecipeChoice> getChoiceMap() {
-        Map<Character, RecipeChoice> result = new HashMap<>();
-        for (Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
+        final Map<Character, RecipeChoice> result = new HashMap<>();
+        for (final Map.Entry<Character, RecipeChoice> ingredient : ingredients.entrySet()) {
             if (ingredient.getValue() == null) {
                 result.put(ingredient.getKey(), null);
             } else {
@@ -227,7 +227,7 @@ public class ShapedRecipe implements Recipe, Keyed {
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(true, "group");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
index d9f5e81981f7b36403cc62b4369d778e0123f1ff..7d222e5e78111a408ebf42924e49fabae16b4686 100644
--- a/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
+++ b/src/main/java/org/bukkit/inventory/ShapelessRecipe.java
@@ -23,7 +23,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
     private String group = "";
 
     @Deprecated
-    public ShapelessRecipe(@NotNull ItemStack result) {
+    public ShapelessRecipe(@NotNull final ItemStack result) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = NamespacedKey.randomKey();
         new Throwable("Warning: A plugin is creating a recipe using a Deprecated method. This will cause you to receive warnings stating 'Tried to load unrecognized recipe: bukkit:<ID>'. Please ask the author to give their recipe a static key using NamespacedKey.").printStackTrace();
@@ -44,7 +44,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @see ShapelessRecipe#addIngredient(int,MaterialData)
      * @see ShapelessRecipe#addIngredient(int,Material,int)
      */
-    public ShapelessRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result) {
+    public ShapelessRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
@@ -57,7 +57,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull MaterialData ingredient) {
+    public ShapelessRecipe addIngredient(@NotNull final MaterialData ingredient) {
         return addIngredient(1, ingredient);
     }
 
@@ -68,7 +68,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull Material ingredient) {
+    public ShapelessRecipe addIngredient(@NotNull final Material ingredient) {
         return addIngredient(1, ingredient, 0);
     }
 
@@ -82,7 +82,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull Material ingredient, int rawdata) {
+    public ShapelessRecipe addIngredient(@NotNull final Material ingredient, final int rawdata) {
         return addIngredient(1, ingredient, rawdata);
     }
 
@@ -94,7 +94,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapelessRecipe addIngredient(int count, @NotNull MaterialData ingredient) {
+    public ShapelessRecipe addIngredient(final int count, @NotNull final MaterialData ingredient) {
         return addIngredient(count, ingredient.getItemType(), ingredient.getData());
     }
 
@@ -106,7 +106,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public ShapelessRecipe addIngredient(int count, @NotNull Material ingredient) {
+    public ShapelessRecipe addIngredient(final int count, @NotNull final Material ingredient) {
         return addIngredient(count, ingredient, 0);
     }
 
@@ -121,7 +121,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe addIngredient(int count, @NotNull Material ingredient, int rawdata) {
+    public ShapelessRecipe addIngredient(int count, @NotNull final Material ingredient, int rawdata) {
         Validate.isTrue(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
 
         // -1 is the old wildcard, map to Short.MAX_VALUE as the new one
@@ -136,7 +136,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
     }
 
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull RecipeChoice ingredient) {
+    public ShapelessRecipe addIngredient(@NotNull final RecipeChoice ingredient) {
         Validate.isTrue(ingredients.size() + 1 <= 9, "Shapeless recipes cannot have more than 9 ingredients");
 
         ingredients.add(ingredient);
@@ -145,12 +145,12 @@ public class ShapelessRecipe implements Recipe, Keyed {
 
     // Paper start
     @NotNull
-    public ShapelessRecipe addIngredient(@NotNull ItemStack item) {
+    public ShapelessRecipe addIngredient(@NotNull final ItemStack item) {
         return addIngredient(item.getAmount(), item);
     }
 
     @NotNull
-    public ShapelessRecipe addIngredient(int count, @NotNull ItemStack item) {
+    public ShapelessRecipe addIngredient(int count, @NotNull final ItemStack item) {
         Validate.isTrue(ingredients.size() + count <= 9, "Shapeless recipes cannot have more than 9 ingredients");
         while (count-- > 0) {
             ingredients.add(new RecipeChoice.ExactChoice(item));
@@ -159,15 +159,15 @@ public class ShapelessRecipe implements Recipe, Keyed {
     }
 
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull ItemStack item) {
+    public ShapelessRecipe removeIngredient(@NotNull final ItemStack item) {
         return removeIngredient(1, item);
     }
 
     @NotNull
-    public ShapelessRecipe removeIngredient(int count, @NotNull ItemStack item) {
-        Iterator<RecipeChoice> iterator = ingredients.iterator();
+    public ShapelessRecipe removeIngredient(int count, @NotNull final ItemStack item) {
+        final Iterator<RecipeChoice> iterator = ingredients.iterator();
         while (count > 0 && iterator.hasNext()) {
-            ItemStack stack = iterator.next().getItemStack();
+            final ItemStack stack = iterator.next().getItemStack();
             if (stack.equals(item)) {
                 iterator.remove();
                 count--;
@@ -184,7 +184,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull RecipeChoice ingredient) {
+    public ShapelessRecipe removeIngredient(@NotNull final RecipeChoice ingredient) {
         ingredients.remove(ingredient);
 
         return this;
@@ -199,7 +199,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull Material ingredient) {
+    public ShapelessRecipe removeIngredient(@NotNull final Material ingredient) {
         return removeIngredient(ingredient, 0);
     }
 
@@ -212,7 +212,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull MaterialData ingredient) {
+    public ShapelessRecipe removeIngredient(@NotNull final MaterialData ingredient) {
         return removeIngredient(ingredient.getItemType(), ingredient.getData());
     }
 
@@ -226,7 +226,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(int count, @NotNull Material ingredient) {
+    public ShapelessRecipe removeIngredient(final int count, @NotNull final Material ingredient) {
         return removeIngredient(count, ingredient, 0);
     }
 
@@ -240,7 +240,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @return The changed recipe.
      */
     @NotNull
-    public ShapelessRecipe removeIngredient(int count, @NotNull MaterialData ingredient) {
+    public ShapelessRecipe removeIngredient(final int count, @NotNull final MaterialData ingredient) {
         return removeIngredient(count, ingredient.getItemType(), ingredient.getData());
     }
 
@@ -256,7 +256,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe removeIngredient(@NotNull Material ingredient, int rawdata) {
+    public ShapelessRecipe removeIngredient(@NotNull final Material ingredient, final int rawdata) {
         return removeIngredient(1, ingredient, rawdata);
     }
 
@@ -273,10 +273,10 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @Deprecated
     @NotNull
-    public ShapelessRecipe removeIngredient(int count, @NotNull Material ingredient, int rawdata) {
-        Iterator<RecipeChoice> iterator = ingredients.iterator();
+    public ShapelessRecipe removeIngredient(int count, @NotNull final Material ingredient, final int rawdata) {
+        final Iterator<RecipeChoice> iterator = ingredients.iterator();
         while (count > 0 && iterator.hasNext()) {
-            ItemStack stack = iterator.next().getItemStack();
+            final ItemStack stack = iterator.next().getItemStack();
             if (stack.getType() == ingredient && stack.getDurability() == rawdata) {
                 iterator.remove();
                 count--;
@@ -303,8 +303,8 @@ public class ShapelessRecipe implements Recipe, Keyed {
      */
     @NotNull
     public List<ItemStack> getIngredientList() {
-        ArrayList<ItemStack> result = new ArrayList<>(ingredients.size());
-        for (RecipeChoice ingredient : ingredients) {
+        final ArrayList<ItemStack> result = new ArrayList<>(ingredients.size());
+        for (final RecipeChoice ingredient : ingredients) {
             result.add(ingredient.getItemStack().clone());
         }
         return result;
@@ -312,8 +312,8 @@ public class ShapelessRecipe implements Recipe, Keyed {
 
     @NotNull
     public List<RecipeChoice> getChoiceList() {
-        List<RecipeChoice> result = new ArrayList<>(ingredients.size());
-        for (RecipeChoice ingredient : ingredients) {
+        final List<RecipeChoice> result = new ArrayList<>(ingredients.size());
+        for (final RecipeChoice ingredient : ingredients) {
             result.add(ingredient.clone());
         }
         return result;
@@ -343,7 +343,7 @@ public class ShapelessRecipe implements Recipe, Keyed {
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(true, "group");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/SmithingInventory.java b/src/main/java/org/bukkit/inventory/SmithingInventory.java
index 2b8f21cfce99b6caaedb48df4aa1e989644b88ff..9573912bb882fba9136ece74367eae1077a5a3d3 100644
--- a/src/main/java/org/bukkit/inventory/SmithingInventory.java
+++ b/src/main/java/org/bukkit/inventory/SmithingInventory.java
@@ -23,7 +23,7 @@ public interface SmithingInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setInputEquipment(@Nullable ItemStack itemStack) {
+    default void setInputEquipment(@Nullable final ItemStack itemStack) {
         setItem(0, itemStack);
     }
 
@@ -42,7 +42,7 @@ public interface SmithingInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setInputMineral(@Nullable ItemStack itemStack) {
+    default void setInputMineral(@Nullable final ItemStack itemStack) {
         setItem(1, itemStack);
     }
 
@@ -61,7 +61,7 @@ public interface SmithingInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setResult(@Nullable ItemStack itemStack) {
+    default void setResult(@Nullable final ItemStack itemStack) {
         setItem(2, itemStack);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/SmithingRecipe.java b/src/main/java/org/bukkit/inventory/SmithingRecipe.java
index af04071d37e70b8cc9837d57477c8493be8afb9f..2d9e31fa41c196039d44b2238f32ec35f4182c6b 100644
--- a/src/main/java/org/bukkit/inventory/SmithingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmithingRecipe.java
@@ -22,7 +22,7 @@ public class SmithingRecipe implements Recipe, Keyed {
      * @param base The base ingredient
      * @param addition The addition ingredient
      */
-    public SmithingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice base, @NotNull RecipeChoice addition) {
+    public SmithingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice base, @NotNull final RecipeChoice addition) {
         this.key = key;
         this.result = result;
         this.base = base;
diff --git a/src/main/java/org/bukkit/inventory/SmokingRecipe.java b/src/main/java/org/bukkit/inventory/SmokingRecipe.java
index 1073d9aec335c6484471027d217c9cefb1ff8c0b..ad32c45ae376499b45ed7345f1a9e663b6ae6a57 100644
--- a/src/main/java/org/bukkit/inventory/SmokingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/SmokingRecipe.java
@@ -9,11 +9,11 @@ import org.jetbrains.annotations.NotNull;
  */
 public class SmokingRecipe extends CookingRecipe<SmokingRecipe> {
 
-    public SmokingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source, float experience, int cookingTime) {
+    public SmokingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source, final float experience, final int cookingTime) {
         super(key, result, source, experience, cookingTime);
     }
 
-    public SmokingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input, float experience, int cookingTime) {
+    public SmokingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input, final float experience, final int cookingTime) {
         super(key, result, input, experience, cookingTime);
     }
 }
diff --git a/src/main/java/org/bukkit/inventory/StonecutterInventory.java b/src/main/java/org/bukkit/inventory/StonecutterInventory.java
index e7a8e7188bf8b9840de56dc80c2b79d64a9389cb..a9a121c986b083b8de02caaaf7f8d6913b2fc026 100644
--- a/src/main/java/org/bukkit/inventory/StonecutterInventory.java
+++ b/src/main/java/org/bukkit/inventory/StonecutterInventory.java
@@ -23,7 +23,7 @@ public interface StonecutterInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setInputItem(@Nullable ItemStack itemStack) {
+    default void setInputItem(@Nullable final ItemStack itemStack) {
         setItem(0, itemStack);
     }
 
@@ -42,7 +42,7 @@ public interface StonecutterInventory extends Inventory {
      *
      * @param itemStack item to set
      */
-    default void setResult(@Nullable ItemStack itemStack) {
+    default void setResult(@Nullable final ItemStack itemStack) {
         setItem(1, itemStack);
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
index 88c36e8dbefeae4c9f7fafc3341355aa036ae7d7..e73735243d3edabf97e4b591908e075542396d88 100644
--- a/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
+++ b/src/main/java/org/bukkit/inventory/StonecuttingRecipe.java
@@ -23,7 +23,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @param result The item you want the recipe to create.
      * @param source The input material.
      */
-    public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull Material source) {
+    public StonecuttingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final Material source) {
         this(key, result, new RecipeChoice.MaterialChoice(Collections.singletonList(source)));
     }
 
@@ -34,7 +34,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @param result The item you want the recipe to create.
      * @param input The input choices.
      */
-    public StonecuttingRecipe(@NotNull NamespacedKey key, @NotNull ItemStack result, @NotNull RecipeChoice input) {
+    public StonecuttingRecipe(@NotNull final NamespacedKey key, @NotNull final ItemStack result, @NotNull final RecipeChoice input) {
         Preconditions.checkArgument(result.getType() != Material.AIR, "Recipe must have non-AIR result.");
         this.key = key;
         this.output = new ItemStack(result);
@@ -48,7 +48,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public StonecuttingRecipe setInput(@NotNull Material input) {
+    public StonecuttingRecipe setInput(@NotNull final Material input) {
         this.ingredient = new RecipeChoice.MaterialChoice(Collections.singletonList(input));
         return this;
     }
@@ -70,7 +70,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @return The changed recipe, so you can chain calls.
      */
     @NotNull
-    public StonecuttingRecipe setInputChoice(@NotNull RecipeChoice input) {
+    public StonecuttingRecipe setInputChoice(@NotNull final RecipeChoice input) {
         this.ingredient = input;
         return this;
     }
@@ -120,7 +120,7 @@ public class StonecuttingRecipe implements Recipe, Keyed {
      * @param group recipe group. An empty string denotes no group. May not be
      * null.
      */
-    public void setGroup(@NotNull String group) {
+    public void setGroup(@NotNull final String group) {
         Preconditions.checkArgument(true, "group");
         this.group = group;
     }
diff --git a/src/main/java/org/bukkit/inventory/meta/BookMeta.java b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
index 3bedde79dc5b16caa90981a21cd0b22bbda2f25d..76be3c7215947d57ce00e2458adaee1fec9d3298 100644
--- a/src/main/java/org/bukkit/inventory/meta/BookMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/BookMeta.java
@@ -213,7 +213,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
 
         @NotNull
         @Override
-        BookMetaBuilder pages(@NotNull net.kyori.adventure.text.Component... pages);
+        BookMetaBuilder pages(@NotNull net.kyori.adventure.text.Component @NotNull ... pages);
 
         @NotNull
         @Override
@@ -317,7 +317,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          */
         @NotNull
         @Deprecated // Paper
-        public BaseComponent[] getPage(int page) {
+        public BaseComponent[] getPage(final int page) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -333,7 +333,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #page(int, net.kyori.adventure.text.Component)}
          */
         @Deprecated // Paper
-        public void setPage(int page, @Nullable BaseComponent... data) {
+        public void setPage(final int page, @Nullable final BaseComponent... data) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -357,7 +357,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #pages(java.util.List)}
          */
         @Deprecated // Paper
-        public void setPages(@NotNull List<BaseComponent[]> pages) {
+        public void setPages(@NotNull final List<BaseComponent[]> pages) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -369,7 +369,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #pages(net.kyori.adventure.text.Component...)}
          */
         @Deprecated // Paper
-        public void setPages(@NotNull BaseComponent[]... pages) {
+        public void setPages(@NotNull final BaseComponent[]... pages) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
 
@@ -381,7 +381,7 @@ public interface BookMeta extends ItemMeta, net.kyori.adventure.inventory.Book {
          * @deprecated in favour of {@link #addPages(net.kyori.adventure.text.Component...)}
          */
         @Deprecated // Paper
-        public void addPage(@NotNull BaseComponent[]... pages) {
+        public void addPage(@NotNull final BaseComponent[]... pages) {
             throw new UnsupportedOperationException("Not supported yet.");
         }
     }
diff --git a/src/main/java/org/bukkit/inventory/meta/CompassMeta.java b/src/main/java/org/bukkit/inventory/meta/CompassMeta.java
index 5040ab6190b41442986d2a734a8e782df0eab2f6..708437a61424a307487db21884ef99543fcccec1 100644
--- a/src/main/java/org/bukkit/inventory/meta/CompassMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/CompassMeta.java
@@ -1,6 +1,7 @@
 package org.bukkit.inventory.meta;
 
 import org.bukkit.Location;
+import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
 /**
@@ -53,5 +54,6 @@ public interface CompassMeta extends ItemMeta {
     void setLodestoneTracked(boolean tracked);
 
     @Override
+    @NotNull
     CompassMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
index 8a201026bb0120e2f26bf8bbdbff78a42df8d037..d1a0764554ba1533b69b83a637b85f727b660922 100644
--- a/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/ItemMeta.java
@@ -545,7 +545,6 @@ public interface ItemMeta extends Cloneable, ConfigurationSerializable, Persiste
      *
      * @param canPlaceOn Collection of {@link com.destroystokyo.paper.Namespaced}
      */
-    @NotNull
     void setPlaceableKeys(@NotNull Collection<com.destroystokyo.paper.Namespaced> canPlaceOn);
 
     /**
diff --git a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
index 8e2f474a44a9b6355c4582d4f51c1fd83a51584a..4a9b1bb75bfb3a495b2c45d476eafc3d7e5a0d8c 100644
--- a/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/PotionMeta.java
@@ -120,5 +120,6 @@ public interface PotionMeta extends ItemMeta {
     void setColor(@Nullable Color color);
 
     @Override
+    @NotNull
     PotionMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
index c2f4282c188e7d8041459cb3acaad674443ba147..13ff726232914d22f1ec8b82d8fbb5337ff75367 100644
--- a/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
+++ b/src/main/java/org/bukkit/inventory/meta/SuspiciousStewMeta.java
@@ -63,5 +63,6 @@ public interface SuspiciousStewMeta extends ItemMeta {
     boolean clearCustomEffects();
 
     @Override
+    @NotNull
     SuspiciousStewMeta clone();
 }
diff --git a/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java b/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
index 09082d4813ec7915dcf2a8722019a3e31672970b..65251a8ab0f1a41b986cb21ac2d69c44c6b3b8b5 100644
--- a/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
+++ b/src/main/java/org/bukkit/inventory/meta/tags/ItemTagType.java
@@ -126,7 +126,7 @@ public interface ItemTagType<T, Z> {
 
         private final Class<T> primitiveType;
 
-        PrimitiveTagType(@NotNull Class<T> primitiveType) {
+        PrimitiveTagType(@NotNull final Class<T> primitiveType) {
             this.primitiveType = primitiveType;
         }
 
@@ -144,13 +144,13 @@ public interface ItemTagType<T, Z> {
 
         @NotNull
         @Override
-        public T toPrimitive(@NotNull T complex, @NotNull ItemTagAdapterContext context) {
+        public T toPrimitive(@NotNull final T complex, @NotNull final ItemTagAdapterContext context) {
             return complex;
         }
 
         @NotNull
         @Override
-        public T fromPrimitive(@NotNull T primitive, @NotNull ItemTagAdapterContext context) {
+        public T fromPrimitive(@NotNull final T primitive, @NotNull final ItemTagAdapterContext context) {
             return primitive;
         }
     }
diff --git a/src/main/java/org/bukkit/loot/LootContext.java b/src/main/java/org/bukkit/loot/LootContext.java
index e307f9fc45a4e5d742b78c4cda9a41d7f259a515..332cf84cd84e41b6196ac3e7625a31a8e20701f7 100644
--- a/src/main/java/org/bukkit/loot/LootContext.java
+++ b/src/main/java/org/bukkit/loot/LootContext.java
@@ -21,7 +21,7 @@ public final class LootContext {
     private final Entity lootedEntity;
     private final HumanEntity killer;
 
-    private LootContext(@NotNull Location location, float luck, int lootingModifier, @Nullable Entity lootedEntity, @Nullable HumanEntity killer) {
+    private LootContext(@NotNull final Location location, final float luck, final int lootingModifier, @Nullable final Entity lootedEntity, @Nullable final HumanEntity killer) {
         Validate.notNull(location, "LootContext location cannot be null");
         Validate.notNull(location.getWorld(), "LootContext World cannot be null");
         this.location = location;
@@ -107,7 +107,7 @@ public final class LootContext {
          *
          * @param location the location the LootContext should use
          */
-        public Builder(@NotNull Location location) {
+        public Builder(@NotNull final Location location) {
             this.location = location;
         }
 
@@ -118,7 +118,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder luck(float luck) {
+        public Builder luck(final float luck) {
             this.luck = luck;
             return this;
         }
@@ -133,7 +133,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder lootingModifier(int modifier) {
+        public Builder lootingModifier(final int modifier) {
             this.lootingModifier = modifier;
             return this;
         }
@@ -145,7 +145,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder lootedEntity(@Nullable Entity lootedEntity) {
+        public Builder lootedEntity(@Nullable final Entity lootedEntity) {
             this.lootedEntity = lootedEntity;
             return this;
         }
@@ -159,7 +159,7 @@ public final class LootContext {
          * @return the Builder
          */
         @NotNull
-        public Builder killer(@Nullable HumanEntity killer) {
+        public Builder killer(@Nullable final HumanEntity killer) {
             this.killer = killer;
             return this;
         }
diff --git a/src/main/java/org/bukkit/loot/LootTables.java b/src/main/java/org/bukkit/loot/LootTables.java
index b65fef6ee108aa0002825f07f0b11e85c8a59a89..253bea3b00d30abdb6cd5d593c762b5dfbae4d85 100644
--- a/src/main/java/org/bukkit/loot/LootTables.java
+++ b/src/main/java/org/bukkit/loot/LootTables.java
@@ -166,7 +166,7 @@ public enum LootTables implements Keyed {
 
     private final String location;
 
-    LootTables(/*@NotNull*/ String location) {
+    LootTables(/*@NotNull*/ final String location) {
         this.location = location;
     }
 
diff --git a/src/main/java/org/bukkit/loot/Lootable.java b/src/main/java/org/bukkit/loot/Lootable.java
index 901db852498e0658c79a57582508dab29bf0a798..126a8552b54ee11bd367bc09304b00ef24a3cf25 100644
--- a/src/main/java/org/bukkit/loot/Lootable.java
+++ b/src/main/java/org/bukkit/loot/Lootable.java
@@ -43,7 +43,7 @@ public interface Lootable {
      * @param table the Loot Table this {@link org.bukkit.block.Container} or {@link org.bukkit.entity.Mob} will have.
      * @param seed the seed to used to generate loot. Default is 0.
      */
-    default void setLootTable(@Nullable LootTable table, long seed) {
+    default void setLootTable(@Nullable final LootTable table, final long seed) {
         setLootTable(table);
         setSeed(seed);
     }
diff --git a/src/main/java/org/bukkit/map/MapCursor.java b/src/main/java/org/bukkit/map/MapCursor.java
index 6346487563731650ad1fee313cd3e683a7ed312d..b53693d0cb229d3158021c2d6374a7f794604328 100644
--- a/src/main/java/org/bukkit/map/MapCursor.java
+++ b/src/main/java/org/bukkit/map/MapCursor.java
@@ -23,7 +23,7 @@ public final class MapCursor {
      * @deprecated Magic value
      */
     @Deprecated
-    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible) {
+    public MapCursor(final byte x, final byte y, final byte direction, final byte type, final boolean visible) {
         this(x, y, direction, type, visible, (String) null); // Paper
     }
 
@@ -36,7 +36,7 @@ public final class MapCursor {
      * @param type The type (color/style) of the map cursor.
      * @param visible Whether the cursor is visible by default.
      */
-    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible) {
+    public MapCursor(final byte x, final byte y, final byte direction, @NotNull final Type type, final boolean visible) {
         this(x, y, direction, type, visible, (String) null); // Paper
     }
 
@@ -52,7 +52,7 @@ public final class MapCursor {
      * @deprecated Magic value. Use {@link #MapCursor(byte, byte, byte, byte, boolean, net.kyori.adventure.text.Component)}
      */
     @Deprecated
-    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable String caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, final byte type, final boolean visible, @Nullable final String caption) {
         this.x = x;
         this.y = y;
         setDirection(direction);
@@ -73,7 +73,7 @@ public final class MapCursor {
      * @deprecated Magic value
      */
     @Deprecated
-    public MapCursor(byte x, byte y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, final byte type, final boolean visible, @Nullable final net.kyori.adventure.text.Component caption) {
         this.x = x; this.y = y; this.visible = visible; this.caption = caption;
         setDirection(direction);
         setRawType(type);
@@ -88,7 +88,7 @@ public final class MapCursor {
      * @param visible Whether the cursor is visible by default.
      * @param caption cursor caption
      */
-    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, @NotNull final Type type, final boolean visible, @Nullable final net.kyori.adventure.text.Component caption) {
         this.x = x; this.y = y; this.visible = visible; this.caption = caption;
         setDirection(direction);
         setType(type);
@@ -105,7 +105,7 @@ public final class MapCursor {
      * @param visible Whether the cursor is visible by default.
      * @param caption cursor caption
      */
-    public MapCursor(byte x, byte y, byte direction, @NotNull Type type, boolean visible, @Nullable String caption) {
+    public MapCursor(final byte x, final byte y, final byte direction, @NotNull final Type type, final boolean visible, @Nullable final String caption) {
         this.x = x;
         this.y = y;
         setDirection(direction);
@@ -177,7 +177,7 @@ public final class MapCursor {
      *
      * @param x The X coordinate.
      */
-    public void setX(byte x) {
+    public void setX(final byte x) {
         this.x = x;
     }
 
@@ -186,7 +186,7 @@ public final class MapCursor {
      *
      * @param y The Y coordinate.
      */
-    public void setY(byte y) {
+    public void setY(final byte y) {
         this.y = y;
     }
 
@@ -195,7 +195,7 @@ public final class MapCursor {
      *
      * @param direction The facing of the cursor, from 0 to 15.
      */
-    public void setDirection(byte direction) {
+    public void setDirection(final byte direction) {
         if (direction < 0 || direction > 15) {
             throw new IllegalArgumentException("Direction must be in the range 0-15");
         }
@@ -207,7 +207,7 @@ public final class MapCursor {
      *
      * @param type The type (color/style) of the map cursor.
      */
-    public void setType(@NotNull Type type) {
+    public void setType(@NotNull final Type type) {
         setRawType(type.value);
     }
 
@@ -218,7 +218,7 @@ public final class MapCursor {
      * @deprecated Magic value
      */
     @Deprecated
-    public void setRawType(byte type) {
+    public void setRawType(final byte type) {
         if (type < 0 || type > 26) {
             throw new IllegalArgumentException("Type must be in the range 0-26");
         }
@@ -230,7 +230,7 @@ public final class MapCursor {
      *
      * @param visible True if visible.
      */
-    public void setVisible(boolean visible) {
+    public void setVisible(final boolean visible) {
         this.visible = visible;
     }
 
@@ -248,7 +248,7 @@ public final class MapCursor {
      *
      * @param caption new caption
      */
-    public void caption(@Nullable net.kyori.adventure.text.Component caption) {
+    public void caption(@Nullable final net.kyori.adventure.text.Component caption) {
         this.caption = caption;
     }
     // Paper end
@@ -271,7 +271,7 @@ public final class MapCursor {
      * @deprecated in favour of {@link #caption(net.kyori.adventure.text.Component)}
      */
     @Deprecated // Paper
-    public void setCaption(@Nullable String caption) {
+    public void setCaption(@Nullable final String caption) {
         this.caption = caption == null ? null : org.bukkit.Bukkit.getUnsafe().legacyComponentSerializer().deserialize(caption); // Paper
     }
 
@@ -312,7 +312,7 @@ public final class MapCursor {
 
         private final byte value;
 
-        Type(int value) {
+        Type(final int value) {
             this.value = (byte) value;
         }
 
@@ -336,8 +336,8 @@ public final class MapCursor {
          */
         @Deprecated
         @Nullable
-        public static Type byValue(byte value) {
-            for (Type t : values()) {
+        public static Type byValue(final byte value) {
+            for (final Type t : values()) {
                 if (t.value == value) return t;
             }
             return null;
diff --git a/src/main/java/org/bukkit/map/MapCursorCollection.java b/src/main/java/org/bukkit/map/MapCursorCollection.java
index d461f45395843aead36f0205d3dc0085b202bfad..eae8ef0d42b787471dc0b44e9e30b62882f01493 100644
--- a/src/main/java/org/bukkit/map/MapCursorCollection.java
+++ b/src/main/java/org/bukkit/map/MapCursorCollection.java
@@ -28,7 +28,7 @@ public final class MapCursorCollection {
      * @return The MapCursor.
      */
     @NotNull
-    public MapCursor getCursor(int index) {
+    public MapCursor getCursor(final int index) {
         return cursors.get(index);
     }
 
@@ -38,7 +38,7 @@ public final class MapCursorCollection {
      * @param cursor The MapCursor to remove.
      * @return Whether the cursor was removed successfully.
      */
-    public boolean removeCursor(@NotNull MapCursor cursor) {
+    public boolean removeCursor(@NotNull final MapCursor cursor) {
         return cursors.remove(cursor);
     }
 
@@ -49,7 +49,7 @@ public final class MapCursorCollection {
      * @return The MapCursor that was passed.
      */
     @NotNull
-    public MapCursor addCursor(@NotNull MapCursor cursor) {
+    public MapCursor addCursor(@NotNull final MapCursor cursor) {
         cursors.add(cursor);
         return cursor;
     }
@@ -63,7 +63,7 @@ public final class MapCursorCollection {
      * @return The newly added MapCursor.
      */
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction) {
+    public MapCursor addCursor(final int x, final int y, final byte direction) {
         return addCursor(x, y, direction, (byte) 0, true);
     }
 
@@ -79,7 +79,7 @@ public final class MapCursorCollection {
      */
     @Deprecated
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction, byte type) {
+    public MapCursor addCursor(final int x, final int y, final byte direction, final byte type) {
         return addCursor(x, y, direction, type, true);
     }
 
@@ -96,7 +96,7 @@ public final class MapCursorCollection {
      */
     @Deprecated
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible) {
+    public MapCursor addCursor(final int x, final int y, final byte direction, final byte type, final boolean visible) {
         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible));
     }
 
@@ -114,7 +114,7 @@ public final class MapCursorCollection {
      */
     @Deprecated
     @NotNull
-    public MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable String caption) {
+    public MapCursor addCursor(final int x, final int y, final byte direction, final byte type, final boolean visible, @Nullable final String caption) {
         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));
     }
     // Paper start
@@ -131,7 +131,7 @@ public final class MapCursorCollection {
      * @deprecated Magic value
      */
     @Deprecated
-    public @NotNull MapCursor addCursor(int x, int y, byte direction, byte type, boolean visible, @Nullable net.kyori.adventure.text.Component caption) {
+    public @NotNull MapCursor addCursor(final int x, final int y, final byte direction, final byte type, final boolean visible, @Nullable final net.kyori.adventure.text.Component caption) {
         return addCursor(new MapCursor((byte) x, (byte) y, direction, type, visible, caption));
     }
     // Paper end
diff --git a/src/main/java/org/bukkit/map/MapFont.java b/src/main/java/org/bukkit/map/MapFont.java
index 10cfa40babc3ec3c9e954133527ff7190d494c6d..aff49f0d775f889c486161975be772deb15b4df1 100644
--- a/src/main/java/org/bukkit/map/MapFont.java
+++ b/src/main/java/org/bukkit/map/MapFont.java
@@ -21,7 +21,7 @@ public class MapFont {
      * @param sprite The CharacterSprite to set.
      * @throws IllegalStateException if this font is static.
      */
-    public void setChar(char ch, @NotNull CharacterSprite sprite) {
+    public void setChar(final char ch, @NotNull final CharacterSprite sprite) {
         if (!malleable) {
             throw new IllegalStateException("this font is not malleable");
         }
@@ -40,7 +40,7 @@ public class MapFont {
      *     there is none.
      */
     @Nullable
-    public CharacterSprite getChar(char ch) {
+    public CharacterSprite getChar(final char ch) {
         return chars.get(ch);
     }
 
@@ -51,18 +51,18 @@ public class MapFont {
      * @param text The text.
      * @return The width in pixels.
      */
-    public int getWidth(@NotNull String text) {
+    public int getWidth(@NotNull final String text) {
         if (isValid(text)) {
             throw new IllegalArgumentException("text contains invalid characters");
         }
 
-        if (text.length() == 0) {
+        if (text.isEmpty()) {
             return 0;
         }
 
         int result = 0;
         for (int i = 0; i < text.length(); ++i) {
-            char ch = text.charAt(i);
+            final char ch = text.charAt(i);
             if (ch == ChatColor.COLOR_CHAR) continue;
             result += chars.get(ch).getWidth();
         }
@@ -87,9 +87,9 @@ public class MapFont {
      * @return True if the string contains only defined characters, false
      *     otherwise.
      */
-    public boolean isValid(@NotNull String text) {
+    public boolean isValid(@NotNull final String text) {
         for (int i = 0; i < text.length(); ++i) {
-            char ch = text.charAt(i);
+            final char ch = text.charAt(i);
             if (ch == ChatColor.COLOR_CHAR || ch == '\n') continue;
             if (chars.get(ch) == null) return true;
         }
@@ -105,7 +105,7 @@ public class MapFont {
         private final int height;
         private final boolean[] data;
 
-        public CharacterSprite(int width, int height, @NotNull boolean[] data) {
+        public CharacterSprite(final int width, final int height, final boolean[] data) {
             this.width = width;
             this.height = height;
             this.data = data;
@@ -122,7 +122,7 @@ public class MapFont {
          * @param col The column, in the range [0,8).
          * @return True if the pixel is solid, false if transparent.
          */
-        public boolean get(int row, int col) {
+        public boolean get(final int row, final int col) {
             if (row < 0 || col < 0 || row >= height || col >= width) return false;
             return data[row * width + col];
         }
diff --git a/src/main/java/org/bukkit/map/MapPalette.java b/src/main/java/org/bukkit/map/MapPalette.java
index 1f61e54fc8ce40c7c2f27a8c59994091c43675bd..8ae5eac37cf5565296d9627760e46db09f4865aa 100644
--- a/src/main/java/org/bukkit/map/MapPalette.java
+++ b/src/main/java/org/bukkit/map/MapPalette.java
@@ -18,18 +18,18 @@ public final class MapPalette {
     private MapPalette() {}
 
     @NotNull
-    private static Color c(int r, int g, int b) {
+    private static Color c(final int r, final int g, final int b) {
         return new Color(r, g, b);
     }
 
-    private static double getDistance(@NotNull Color c1, @NotNull Color c2) {
-        double rmean = (c1.getRed() + c2.getRed()) / 2.0;
-        double r = c1.getRed() - c2.getRed();
-        double g = c1.getGreen() - c2.getGreen();
-        int b = c1.getBlue() - c2.getBlue();
-        double weightR = 2 + rmean / 256.0;
-        double weightG = 4.0;
-        double weightB = 2 + (255 - rmean) / 256.0;
+    private static double getDistance(@NotNull final Color c1, @NotNull final Color c2) {
+        final double rmean = (c1.getRed() + c2.getRed()) / 2.0;
+        final double r = c1.getRed() - c2.getRed();
+        final double g = c1.getGreen() - c2.getGreen();
+        final int b = c1.getBlue() - c2.getBlue();
+        final double weightR = 2 + rmean / 256.0;
+        final double weightG = 4.0;
+        final double weightB = 2 + (255 - rmean) / 256.0;
         return weightR * r * r + weightG * g * g + weightB * b * b;
     }
 
@@ -175,9 +175,9 @@ public final class MapPalette {
      * @return The resized image.
      */
     @NotNull
-    public static BufferedImage resizeImage(@Nullable Image image) {
-        BufferedImage result = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);
-        Graphics2D graphics = result.createGraphics();
+    public static BufferedImage resizeImage(@Nullable final Image image) {
+        final BufferedImage result = new BufferedImage(128, 128, BufferedImage.TYPE_INT_ARGB);
+        final Graphics2D graphics = result.createGraphics();
         graphics.drawImage(image, 0, 0, 128, 128, null);
         graphics.dispose();
         return result;
@@ -191,17 +191,16 @@ public final class MapPalette {
      * @deprecated Magic value
      */
     @Deprecated
-    @NotNull
-    public static byte[] imageToBytes(@NotNull Image image) {
-        BufferedImage temp = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
-        Graphics2D graphics = temp.createGraphics();
+    public static byte[] imageToBytes(@NotNull final Image image) {
+        final BufferedImage temp = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
+        final Graphics2D graphics = temp.createGraphics();
         graphics.drawImage(image, 0, 0, null);
         graphics.dispose();
 
-        int[] pixels = new int[temp.getWidth() * temp.getHeight()];
+        final int[] pixels = new int[temp.getWidth() * temp.getHeight()];
         temp.getRGB(0, 0, temp.getWidth(), temp.getHeight(), pixels, 0, temp.getWidth());
 
-        byte[] result = new byte[temp.getWidth() * temp.getHeight()];
+        final byte[] result = new byte[temp.getWidth() * temp.getHeight()];
         for (int i = 0; i < pixels.length; i++) {
             result[i] = matchColor(new Color(pixels[i], true));
         }
@@ -219,7 +218,7 @@ public final class MapPalette {
      * @deprecated Magic value
      */
     @Deprecated
-    public static byte matchColor(int r, int g, int b) {
+    public static byte matchColor(final int r, final int g, final int b) {
         return matchColor(new Color(r, g, b));
     }
 
@@ -232,14 +231,14 @@ public final class MapPalette {
      * @deprecated Magic value
      */
     @Deprecated
-    public static byte matchColor(@NotNull Color color) {
+    public static byte matchColor(@NotNull final Color color) {
         if (color.getAlpha() < 128) return 0;
 
         int index = 0;
         double best = -1;
 
         for (int i = 4; i < colors.length; i++) {
-            double distance = getDistance(color, colors[i]);
+            final double distance = getDistance(color, colors[i]);
             if (distance < best || best == -1) {
                 best = distance;
                 index = i;
@@ -259,7 +258,7 @@ public final class MapPalette {
      */
     @Deprecated
     @NotNull
-    public static Color getColor(byte index) {
+    public static Color getColor(final byte index) {
         if (index > -21 && index < 0) {
             throw new IndexOutOfBoundsException();
         } else {
diff --git a/src/main/java/org/bukkit/map/MapRenderer.java b/src/main/java/org/bukkit/map/MapRenderer.java
index 9273d5766281e411098db84cc05676054fadd0a4..96b8fec3f11b4bbce362506ac48724ce74e176f6 100644
--- a/src/main/java/org/bukkit/map/MapRenderer.java
+++ b/src/main/java/org/bukkit/map/MapRenderer.java
@@ -24,7 +24,7 @@ public abstract class MapRenderer {
      * @param contextual Whether the renderer is contextual. See {@link
      *     #isContextual()}.
      */
-    public MapRenderer(boolean contextual) {
+    public MapRenderer(final boolean contextual) {
         this.contextual = contextual;
     }
 
@@ -43,7 +43,7 @@ public abstract class MapRenderer {
      *
      * @param map The MapView being initialized.
      */
-    public void initialize(@NotNull MapView map) {}
+    public void initialize(@NotNull final MapView map) {}
 
     /**
      * Render to the given map.
diff --git a/src/main/java/org/bukkit/map/MapView.java b/src/main/java/org/bukkit/map/MapView.java
index 410d84aacfad477b178c66525f457cbd41178e39..132145b573ae6494b08849d3a0c5e57880efcd6e 100644
--- a/src/main/java/org/bukkit/map/MapView.java
+++ b/src/main/java/org/bukkit/map/MapView.java
@@ -23,7 +23,7 @@ public interface MapView {
 
         private final byte value;
 
-        Scale(int value) {
+        Scale(final int value) {
             this.value = (byte) value;
         }
 
@@ -36,7 +36,7 @@ public interface MapView {
          */
         @Deprecated
         @Nullable
-        public static Scale valueOf(byte value) {
+        public static Scale valueOf(final byte value) {
             return switch (value) {
                 case 0 -> CLOSEST;
                 case 1 -> CLOSE;
diff --git a/src/main/java/org/bukkit/map/MinecraftFont.java b/src/main/java/org/bukkit/map/MinecraftFont.java
index 1c81e287e6249a56c0cfd2a78c6246662cd3d99e..ac1e09809461c49998b736147657ba9330accac3 100644
--- a/src/main/java/org/bukkit/map/MinecraftFont.java
+++ b/src/main/java/org/bukkit/map/MinecraftFont.java
@@ -294,7 +294,7 @@ public class MinecraftFont extends MapFont {
         this(true);
     }
 
-    private MinecraftFont(boolean malleable) {
+    private MinecraftFont(final boolean malleable) {
         for (int i = 1; i < fontData.length; ++i) {
             char ch = (char) i;
             if (i >= 32 && i < 32 + fontChars.length()) {
@@ -306,7 +306,7 @@ public class MinecraftFont extends MapFont {
                 continue;
             }
 
-            int[] rows = fontData[i];
+            final int[] rows = fontData[i];
             int width = 0;
             for (int r = 0; r < 8; ++r) {
                 for (int c = 0; c < 8; ++c) {
@@ -317,7 +317,7 @@ public class MinecraftFont extends MapFont {
             }
             ++width;
 
-            boolean[] data = new boolean[width * 8];
+            final boolean[] data = new boolean[width * 8];
             for (int r = 0; r < 8; ++r) {
                 for (int c = 0; c < width; ++c) {
                     data[r * width + c] = (rows[r] & (1 << c)) != 0;
diff --git a/src/main/java/org/bukkit/material/Banner.java b/src/main/java/org/bukkit/material/Banner.java
index 40f69d2d5a0c6daeaf4e4f1a62eaf8d24c30c66a..a817b3f2ae9291e52bc76e11b8fd42a14be9843b 100644
--- a/src/main/java/org/bukkit/material/Banner.java
+++ b/src/main/java/org/bukkit/material/Banner.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * @deprecated all usage of MaterialData is deprecated and subject to removal.
@@ -14,7 +16,7 @@ public class Banner extends MaterialData implements Attachable {
         super(Material.LEGACY_BANNER);
     }
 
-    public Banner(Material type) {
+    public Banner(final Material type) {
         super(type);
     }
 
@@ -24,7 +26,7 @@ public class Banner extends MaterialData implements Attachable {
      * @deprecated Magic value
      */
     @Deprecated
-    public Banner(Material type, byte data) {
+    public Banner(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -33,9 +35,9 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         if (isWallBanner()) {
-            byte data = getData();
+            final byte data = getData();
 
 	        return switch (data) {
 		        case 0x2 -> BlockFace.SOUTH;
@@ -51,8 +53,8 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public BlockFace getFacing() {
-        byte data = getData();
+    public @NotNull BlockFace getFacing() {
+        final byte data = getData();
 
         if (!isWallBanner()) {
 	        return switch (data) {
@@ -81,8 +83,8 @@ public class Banner extends MaterialData implements Attachable {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data;
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data;
 
         if (isWallBanner()) {
 	        data = (byte) switch (face) {
diff --git a/src/main/java/org/bukkit/material/Bed.java b/src/main/java/org/bukkit/material/Bed.java
index 30e419042c027b8b554134e82e4857ea3d5b4ea6..2c75aca5b6ab1d578ebd648ac5ad1969d297d51c 100644
--- a/src/main/java/org/bukkit/material/Bed.java
+++ b/src/main/java/org/bukkit/material/Bed.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a bed.
@@ -24,7 +26,7 @@ public class Bed extends MaterialData implements Directional {
      *
      * @param direction the direction the bed's head is facing
      */
-    public Bed(BlockFace direction) {
+    public Bed(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -57,7 +59,7 @@ public class Bed extends MaterialData implements Directional {
      *
      * @param isHeadOfBed True to make it the head.
      */
-    public void setHeadOfBed(boolean isHeadOfBed) {
+    public void setHeadOfBed(final boolean isHeadOfBed) {
         setData((byte) (isHeadOfBed ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -66,7 +68,7 @@ public class Bed extends MaterialData implements Directional {
      * only affect one of the two blocks the bed is made of.
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = switch (face) {
 	        case SOUTH -> 0x0;
 	        case WEST -> 0x1;
@@ -87,8 +89,8 @@ public class Bed extends MaterialData implements Directional {
      * @return the direction the head of the bed is facing
      */
     @Override
-    public BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x7);
+    public @NotNull BlockFace getFacing() {
+        final byte data = (byte) (getData() & 0x7);
 
 	    return switch (data) {
 		    case 0x0 -> BlockFace.SOUTH;
diff --git a/src/main/java/org/bukkit/material/Button.java b/src/main/java/org/bukkit/material/Button.java
index e52e055215016c6bf4f8c98b5be1c46fcee2b2c6..20ab4f85faefdf0777b683fc512abdf6713cf9bb 100644
--- a/src/main/java/org/bukkit/material/Button.java
+++ b/src/main/java/org/bukkit/material/Button.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a button
@@ -46,7 +48,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      * @param bool
      *            whether or not the button is powered
      */
-    public void setPowered(boolean bool) {
+    public void setPowered(final boolean bool) {
         setData((byte) (bool ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -56,8 +58,8 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
-        byte data = (byte) (getData() & 0x7);
+    public @NotNull BlockFace getAttachedFace() {
+        final byte data = (byte) (getData() & 0x7);
 
 	    return switch (data) {
 		    case 0x0 -> BlockFace.UP;
@@ -75,7 +77,7 @@ public class Button extends SimpleAttachableMaterialData implements Redstone {
      * Sets the direction this button is pointing toward
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
diff --git a/src/main/java/org/bukkit/material/Cake.java b/src/main/java/org/bukkit/material/Cake.java
index d39dd491626cd84f83169cf5c2135d05516d77f2..80647233f75e7b85a7662794a851bec5b236e15f 100644
--- a/src/main/java/org/bukkit/material/Cake.java
+++ b/src/main/java/org/bukkit/material/Cake.java
@@ -12,7 +12,7 @@ public class Cake extends MaterialData {
         super(Material.LEGACY_CAKE_BLOCK);
     }
 
-    public Cake(Material type) {
+    public Cake(final Material type) {
         super(type);
     }
 
@@ -22,7 +22,7 @@ public class Cake extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Cake(Material type, byte data) {
+    public Cake(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -49,7 +49,7 @@ public class Cake extends MaterialData {
      *
      * @param n The number of slices eaten
      */
-    public void setSlicesEaten(int n) {
+    public void setSlicesEaten(final int n) {
         if (n < 6) {
             setData((byte) n);
         } // TODO: else destroy the block? Probably not possible though
diff --git a/src/main/java/org/bukkit/material/Cauldron.java b/src/main/java/org/bukkit/material/Cauldron.java
index b331b4c27e58d766dd1759062c9c198c348a58bb..dbf979d68a931f3397f3cd37150936127f61a197 100644
--- a/src/main/java/org/bukkit/material/Cauldron.java
+++ b/src/main/java/org/bukkit/material/Cauldron.java
@@ -32,7 +32,7 @@ public class Cauldron extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Cauldron(byte data) {
+    public Cauldron(final byte data) {
         super(Material.LEGACY_CAULDRON, data);
     }
 
diff --git a/src/main/java/org/bukkit/material/Chest.java b/src/main/java/org/bukkit/material/Chest.java
index 4d120d3c33566606ff7d8b03c32341bf2ac147c4..cfef65a072cb2e9f46860fe2cf0f6993c8af926a 100644
--- a/src/main/java/org/bukkit/material/Chest.java
+++ b/src/main/java/org/bukkit/material/Chest.java
@@ -21,7 +21,7 @@ public class Chest extends DirectionalContainer {
      *
      * @param direction the direction the chest's lit opens towards
      */
-    public Chest(BlockFace direction) {
+    public Chest(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/Coal.java b/src/main/java/org/bukkit/material/Coal.java
index fb842cfa7bf29ca6c670fc98e7deecaab31c71f2..a7830772cc4bb101f0ce4326ca1489c7bdf55307 100644
--- a/src/main/java/org/bukkit/material/Coal.java
+++ b/src/main/java/org/bukkit/material/Coal.java
@@ -15,7 +15,7 @@ public class Coal extends MaterialData {
         super(Material.LEGACY_COAL);
     }
 
-    public Coal(CoalType type) {
+    public Coal(final CoalType type) {
         this();
         setType(type);
     }
@@ -48,7 +48,7 @@ public class Coal extends MaterialData {
      *
      * @param type New type of this coal
      */
-    public void setType(CoalType type) {
+    public void setType(final CoalType type) {
         setData(type.getData());
     }
 
diff --git a/src/main/java/org/bukkit/material/CocoaPlant.java b/src/main/java/org/bukkit/material/CocoaPlant.java
index 1d7390a3c1d3935612459a3e1c275e89e98546c1..13adf58eefd6d442817099f9c4270cfe866c9bc0 100644
--- a/src/main/java/org/bukkit/material/CocoaPlant.java
+++ b/src/main/java/org/bukkit/material/CocoaPlant.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the cocoa plant
@@ -32,12 +34,12 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
         super(type, data);
     }
 
-    public CocoaPlant(CocoaPlantSize sz) {
+    public CocoaPlant(final CocoaPlantSize sz) {
         this();
         setSize(sz);
     }
 
-    public CocoaPlant(CocoaPlantSize sz, BlockFace dir) {
+    public CocoaPlant(final CocoaPlantSize sz, final BlockFace dir) {
         this();
         setSize(sz);
         setFacingDirection(dir);
@@ -61,7 +63,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
      *
      * @param sz - size of plant
      */
-    public void setSize(CocoaPlantSize sz) {
+    public void setSize(final CocoaPlantSize sz) {
         int dat = getData() & 0x3;
         switch (sz) {
             case SMALL:
@@ -77,12 +79,12 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         return getFacing().getOppositeFace();
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         int dat = getData() & 0xC;
         switch (face) {
             default:
@@ -102,7 +104,7 @@ public class CocoaPlant extends MaterialData implements Directional, Attachable
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
 	    return switch (getData() & 0x3) {
 		    case 0 -> BlockFace.SOUTH;
 		    case 1 -> BlockFace.WEST;
diff --git a/src/main/java/org/bukkit/material/Command.java b/src/main/java/org/bukkit/material/Command.java
index bcac1b08294569b218722278568b7106e1ce48f3..edf8ee3eda95ffba74467475b2d280dc5f88f3a8 100644
--- a/src/main/java/org/bukkit/material/Command.java
+++ b/src/main/java/org/bukkit/material/Command.java
@@ -45,7 +45,7 @@ public class Command extends MaterialData implements Redstone {
      * @param bool
      *            whether or not the command block is powered
      */
-    public void setPowered(boolean bool) {
+    public void setPowered(final boolean bool) {
         setData((byte) (bool ? (getData() | 1) : (getData() & -2)));
     }
 
diff --git a/src/main/java/org/bukkit/material/Comparator.java b/src/main/java/org/bukkit/material/Comparator.java
index d2c92c6e6c721e506da6c41cdfbec3d77e4bce42..e1020e7b2823f8d934178c6351cf0305e2695a45 100644
--- a/src/main/java/org/bukkit/material/Comparator.java
+++ b/src/main/java/org/bukkit/material/Comparator.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a comparator in the on or off state, in normal or subtraction mode and facing in a specific direction.
@@ -32,7 +34,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(BlockFace facingDirection) {
+    public Comparator(final BlockFace facingDirection) {
         this(facingDirection, DEFAULT_SUBTRACTION_MODE, DEFAULT_STATE);
     }
 
@@ -44,7 +46,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(BlockFace facingDirection, boolean isSubtraction) {
+    public Comparator(final BlockFace facingDirection, final boolean isSubtraction) {
         this(facingDirection, isSubtraction, DEFAULT_STATE);
     }
 
@@ -57,13 +59,13 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Comparator(BlockFace facingDirection, boolean isSubtraction, boolean state) {
+    public Comparator(final BlockFace facingDirection, final boolean isSubtraction, final boolean state) {
         super(state ? Material.LEGACY_REDSTONE_COMPARATOR_ON : Material.LEGACY_REDSTONE_COMPARATOR_OFF);
         setFacingDirection(facingDirection);
         setSubtractionMode(isSubtraction);
     }
 
-    public Comparator(Material type) {
+    public Comparator(final Material type) {
         super(type);
     }
 
@@ -73,7 +75,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      * @deprecated Magic value
      */
     @Deprecated
-    public Comparator(Material type, byte data) {
+    public Comparator(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -82,7 +84,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      *
      * @param isSubtraction True if the comparator is in subtraction mode, false for normal comparator operation
      */
-    public void setSubtractionMode(boolean isSubtraction) {
+    public void setSubtractionMode(final boolean isSubtraction) {
         setData((byte) (getData() & 0xB | (isSubtraction ? 0x4 : 0x0)));
     }
 
@@ -103,7 +105,7 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         int data = getData() & 0xC;
 
         switch (face) {
@@ -124,8 +126,8 @@ public class Comparator extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x3);
+    public @NotNull BlockFace getFacing() {
+        final byte data = (byte) (getData() & 0x3);
 
 	    return switch (data) {
 		    default -> BlockFace.NORTH;
diff --git a/src/main/java/org/bukkit/material/Crops.java b/src/main/java/org/bukkit/material/Crops.java
index c6f3ca4246a723033cf913474d33832e903470b1..d410122f5b06753ced16f3b81358f0ad6a159399 100644
--- a/src/main/java/org/bukkit/material/Crops.java
+++ b/src/main/java/org/bukkit/material/Crops.java
@@ -32,7 +32,7 @@ public class Crops extends MaterialData {
      *
      * @param state The growth state of the crops
      */
-    public Crops(CropState state) {
+    public Crops(final CropState state) {
         this(DEFAULT_TYPE, state);
         setState(state);
     }
@@ -100,7 +100,7 @@ public class Crops extends MaterialData {
      *
      * @param state New growth state of this crop
      */
-    public void setState(CropState state) {
+    public void setState(final CropState state) {
         // Preserve the top bit in case it is set
         // Preserve the top bits in case they are set
         switch (getItemType()) {
diff --git a/src/main/java/org/bukkit/material/DetectorRail.java b/src/main/java/org/bukkit/material/DetectorRail.java
index e8ab2904214f160c56aa01bc106d96f59042e706..0bb0306f4f52b70d5df93b96fd06fcbc3e3a3e61 100644
--- a/src/main/java/org/bukkit/material/DetectorRail.java
+++ b/src/main/java/org/bukkit/material/DetectorRail.java
@@ -33,7 +33,7 @@ public class DetectorRail extends ExtendedRails implements PressureSensor {
         return (getData() & 0x8) == 0x8;
     }
 
-    public void setPressed(boolean isPressed) {
+    public void setPressed(final boolean isPressed) {
         setData((byte) (isPressed ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
diff --git a/src/main/java/org/bukkit/material/Diode.java b/src/main/java/org/bukkit/material/Diode.java
index 71761d43958baa7a8bdbb33795b4138d8ce448b2..092e6ad63902f5392ec3e7a9aa8103e73b042d02 100644
--- a/src/main/java/org/bukkit/material/Diode.java
+++ b/src/main/java/org/bukkit/material/Diode.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a diode/repeater in the on or off state, with a delay and facing
@@ -39,7 +41,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(BlockFace facingDirection) {
+    public Diode(final BlockFace facingDirection) {
         this(facingDirection, DEFAULT_DELAY, DEFAULT_STATE);
     }
 
@@ -53,7 +55,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(BlockFace facingDirection, int delay) {
+    public Diode(final BlockFace facingDirection, final int delay) {
         this(facingDirection, delay, DEFAULT_STATE);
     }
 
@@ -68,13 +70,13 @@ public class Diode extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Diode(BlockFace facingDirection, int delay, boolean state) {
+    public Diode(final BlockFace facingDirection, final int delay, final boolean state) {
         super(state ? Material.LEGACY_DIODE_BLOCK_ON : Material.LEGACY_DIODE_BLOCK_OFF);
         setFacingDirection(facingDirection);
         setDelay(delay);
     }
 
-    public Diode(Material type) {
+    public Diode(final Material type) {
         super(type);
     }
 
@@ -84,7 +86,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
      * @deprecated Magic value
      */
     @Deprecated
-    public Diode(Material type, byte data) {
+    public Diode(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -100,7 +102,7 @@ public class Diode extends MaterialData implements Directional, Redstone {
         if (delay < 1) {
             delay = 1;
         }
-        byte newData = (byte) (getData() & 0x3);
+        final byte newData = (byte) (getData() & 0x3);
 
         setData((byte) (newData | ((delay - 1) << 2)));
     }
@@ -122,9 +124,9 @@ public class Diode extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
-        int delay = getDelay();
-        byte data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final int delay = getDelay();
+        final byte data = switch (face) {
 	        case EAST -> 0x1;
 	        case SOUTH -> 0x2;
 	        case WEST -> 0x3;
@@ -143,8 +145,8 @@ public class Diode extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x3);
+    public @NotNull BlockFace getFacing() {
+        final byte data = (byte) (getData() & 0x3);
 
 	    return switch (data) {
 		    default -> BlockFace.NORTH;
diff --git a/src/main/java/org/bukkit/material/DirectionalContainer.java b/src/main/java/org/bukkit/material/DirectionalContainer.java
index 53923269331d6cd4179cd6a5bbcc225d10738d3a..2b64dffb793c8c9c3731ed067e079662540a0abf 100644
--- a/src/main/java/org/bukkit/material/DirectionalContainer.java
+++ b/src/main/java/org/bukkit/material/DirectionalContainer.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a furnace or a dispenser.
@@ -27,8 +29,8 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data = switch (face) {
 	        case NORTH -> 0x2;
 	        case SOUTH -> 0x3;
 	        case WEST -> 0x4;
@@ -39,8 +41,8 @@ public class DirectionalContainer extends MaterialData implements Directional {
     }
 
     @Override
-    public BlockFace getFacing() {
-        byte data = getData();
+    public @NotNull BlockFace getFacing() {
+        final byte data = getData();
 
 	    return switch (data) {
 		    case 0x2 -> BlockFace.NORTH;
diff --git a/src/main/java/org/bukkit/material/Dispenser.java b/src/main/java/org/bukkit/material/Dispenser.java
index ca761d66ecf9699be505c63b9071380dd18eac66..d61b1fc5be2c3a930fa075c6481f905db1d084b7 100644
--- a/src/main/java/org/bukkit/material/Dispenser.java
+++ b/src/main/java/org/bukkit/material/Dispenser.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a dispenser.
@@ -16,7 +18,7 @@ public class Dispenser extends FurnaceAndDispenser {
         super(Material.LEGACY_DISPENSER);
     }
 
-    public Dispenser(BlockFace direction) {
+    public Dispenser(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -36,8 +38,8 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data = switch (face) {
 	        case DOWN -> 0x0;
 	        case UP -> 0x1;
 	        case NORTH -> 0x2;
@@ -50,8 +52,8 @@ public class Dispenser extends FurnaceAndDispenser {
     }
 
     @Override
-    public BlockFace getFacing() {
-        int data = getData() & 0x7;
+    public @NotNull BlockFace getFacing() {
+        final int data = getData() & 0x7;
 
 	    return switch (data) {
 		    case 0x0 -> BlockFace.DOWN;
diff --git a/src/main/java/org/bukkit/material/Door.java b/src/main/java/org/bukkit/material/Door.java
index f19ae5b2c1aa3c440f5b152280fad92e76f5d768..c1aeaec3e95118992fd5af7e7dd78743af404456 100644
--- a/src/main/java/org/bukkit/material/Door.java
+++ b/src/main/java/org/bukkit/material/Door.java
@@ -3,6 +3,8 @@ package org.bukkit.material;
 import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a door.
@@ -59,7 +61,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final Material type, BlockFace face) {
+    public Door(final Material type, final BlockFace face) {
         this(type, face, false);
     }
 
@@ -84,7 +86,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final Material type, BlockFace face, boolean isOpen) {
+    public Door(final Material type, final BlockFace face, final boolean isOpen) {
         super(type);
         setTopHalf(false);
         setFacingDirection(face);
@@ -105,7 +107,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see Material#LEGACY_ACACIA_DOOR
      * @see Material#LEGACY_DARK_OAK_DOOR
      */
-    public Door(final Material type, boolean isHingeRight) {
+    public Door(final Material type, final boolean isHingeRight) {
         super(type);
         setTopHalf(true);
         setHinge(isHingeRight);
@@ -125,7 +127,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final TreeSpecies species, BlockFace face) {
+    public Door(final TreeSpecies species, final BlockFace face) {
         this(getWoodDoorOfSpecies(species), face, false);
     }
 
@@ -144,7 +146,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see BlockFace#EAST
      * @see BlockFace#SOUTH
      */
-    public Door(final TreeSpecies species, BlockFace face, boolean isOpen) {
+    public Door(final TreeSpecies species, final BlockFace face, final boolean isOpen) {
         this(getWoodDoorOfSpecies(species), face, isOpen);
     }
 
@@ -156,7 +158,7 @@ public class Door extends MaterialData implements Directional, Openable {
      *
      * @see TreeSpecies
      */
-    public Door(final TreeSpecies species, boolean isHingeRight) {
+    public Door(final TreeSpecies species, final boolean isHingeRight) {
         this(getWoodDoorOfSpecies(species), isHingeRight);
     }
 
@@ -183,7 +185,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @see Material#LEGACY_ACACIA_DOOR
      * @see Material#LEGACY_DARK_OAK_DOOR
      */
-    public static Material getWoodDoorOfSpecies(TreeSpecies species) {
+    public static Material getWoodDoorOfSpecies(final TreeSpecies species) {
 	    return switch (species) {
 		    case GENERIC -> Material.LEGACY_WOODEN_DOOR;
 		    case BIRCH -> Material.LEGACY_BIRCH_DOOR;
@@ -206,7 +208,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * Set whether the door is open. Undefined if <code>isTopHalf()</code> is true.
      */
     @Override
-    public void setOpen(boolean isOpen) {
+    public void setOpen(final boolean isOpen) {
         setData((byte) (isOpen ? (getData() | 0x4) : (getData() & ~0x4)));
     }
 
@@ -222,7 +224,7 @@ public class Door extends MaterialData implements Directional, Openable {
      *
      * @param isTopHalf True to make it the top half.
      */
-    public void setTopHalf(boolean isTopHalf) {
+    public void setTopHalf(final boolean isTopHalf) {
         setData((byte) (isTopHalf ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -248,7 +250,7 @@ public class Door extends MaterialData implements Directional, Openable {
      * @param face the direction
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & 0xC);
         switch (face) {
             case WEST -> data |= 0x0;
@@ -267,8 +269,8 @@ public class Door extends MaterialData implements Directional, Openable {
      * @return the direction
      */
     @Override
-    public BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x3);
+    public @NotNull BlockFace getFacing() {
+        final byte data = (byte) (getData() & 0x3);
 	    return switch (data) {
 		    case 0 -> BlockFace.WEST;
 		    case 1 -> BlockFace.NORTH;
@@ -296,7 +298,7 @@ public class Door extends MaterialData implements Directional, Openable {
      *
      * @param isHingeRight True if the hinge is on the right hand side, false if the hinge is on the left hand side.
      */
-    public void setHinge(boolean isHingeRight) {
+    public void setHinge(final boolean isHingeRight) {
         setData((byte) (isHingeRight ? (getData() | 0x1) : (getData() & ~0x1)));
     }
 
diff --git a/src/main/java/org/bukkit/material/Dye.java b/src/main/java/org/bukkit/material/Dye.java
index f34f23da74013006ec453b539bb10751dcb3ecee..31b2b51bbc7bd48d36c8c61d6b6e3642a951dfee 100644
--- a/src/main/java/org/bukkit/material/Dye.java
+++ b/src/main/java/org/bukkit/material/Dye.java
@@ -52,7 +52,7 @@ public class Dye extends MaterialData implements Colorable {
      * @param color New color of this dye
      */
     @Override
-    public void setColor(DyeColor color) {
+    public void setColor(final DyeColor color) {
         setData(color.getDyeData());
     }
 
diff --git a/src/main/java/org/bukkit/material/EnderChest.java b/src/main/java/org/bukkit/material/EnderChest.java
index ad232cacd94230fbcabb894cf35d540aff1d8662..ec00e8196c2ab54198ed5c33503128d386727a68 100644
--- a/src/main/java/org/bukkit/material/EnderChest.java
+++ b/src/main/java/org/bukkit/material/EnderChest.java
@@ -21,7 +21,7 @@ public class EnderChest extends DirectionalContainer {
      *
      * @param direction the direction the ender chest's lid opens towards
      */
-    public EnderChest(BlockFace direction) {
+    public EnderChest(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/ExtendedRails.java b/src/main/java/org/bukkit/material/ExtendedRails.java
index 9b2577f7b5bab678d9e491323772ce616181ade3..6d52bb8662fa06e7e8e24ab7ba429038e051c64c 100644
--- a/src/main/java/org/bukkit/material/ExtendedRails.java
+++ b/src/main/java/org/bukkit/material/ExtendedRails.java
@@ -44,8 +44,8 @@ public class ExtendedRails extends Rails {
     }
 
     @Override
-    public void setDirection(BlockFace face, boolean isOnSlope) {
-        boolean extraBitSet = (getData() & 0x8) == 0x8;
+    public void setDirection(final BlockFace face, final boolean isOnSlope) {
+        final boolean extraBitSet = (getData() & 0x8) == 0x8;
 
         if (face != BlockFace.WEST && face != BlockFace.EAST && face != BlockFace.NORTH && face != BlockFace.SOUTH) {
             throw new IllegalArgumentException("Detector rails and powered rails cannot be set on a curve!");
diff --git a/src/main/java/org/bukkit/material/FlowerPot.java b/src/main/java/org/bukkit/material/FlowerPot.java
index 7c6471dfec9251c14f25fe9798d91a700384cbff..18c9aa6ab088277b8defb97ec63cb7f2c5cdde28 100644
--- a/src/main/java/org/bukkit/material/FlowerPot.java
+++ b/src/main/java/org/bukkit/material/FlowerPot.java
@@ -62,8 +62,8 @@ public class FlowerPot extends MaterialData {
      *
      * @param materialData MaterialData of the block to put in the flower pot.
      */
-    public void setContents(MaterialData materialData) {
-        Material mat = materialData.getItemType();
+    public void setContents(final MaterialData materialData) {
+        final Material mat = materialData.getItemType();
 
         if (mat == Material.LEGACY_RED_ROSE) {
             setData((byte) 1);
@@ -78,7 +78,7 @@ public class FlowerPot extends MaterialData {
         } else if (mat == Material.LEGACY_DEAD_BUSH) {
             setData((byte) 10);
         } else if (mat == Material.LEGACY_SAPLING) {
-            TreeSpecies species = ((Tree) materialData).getSpecies();
+            final TreeSpecies species = ((Tree) materialData).getSpecies();
 
             if (species == TreeSpecies.GENERIC) {
                 setData((byte) 3);
@@ -90,7 +90,7 @@ public class FlowerPot extends MaterialData {
                 setData((byte) 6);
             }
         } else if (mat == Material.LEGACY_LONG_GRASS) {
-            GrassSpecies species = ((LongGrass) materialData).getSpecies();
+            final GrassSpecies species = ((LongGrass) materialData).getSpecies();
 
             if (species == GrassSpecies.FERN_LIKE) {
                 setData((byte) 11);
diff --git a/src/main/java/org/bukkit/material/Furnace.java b/src/main/java/org/bukkit/material/Furnace.java
index 380f7f4b1f3adaa59c3202db02221abec2678fd7..a1541c1d10a85f87989b1cbb7145c1263a230034 100644
--- a/src/main/java/org/bukkit/material/Furnace.java
+++ b/src/main/java/org/bukkit/material/Furnace.java
@@ -21,7 +21,7 @@ public class Furnace extends FurnaceAndDispenser {
      *
      * @param direction the direction the furnace's "opening" is facing
      */
-    public Furnace(BlockFace direction) {
+    public Furnace(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
diff --git a/src/main/java/org/bukkit/material/Gate.java b/src/main/java/org/bukkit/material/Gate.java
index 772f66142d56fdadf6d6cbe34717029ada1216a4..d2805048b5cac01974758d9ec513a6736d3441eb 100644
--- a/src/main/java/org/bukkit/material/Gate.java
+++ b/src/main/java/org/bukkit/material/Gate.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a fence gate
@@ -32,12 +34,12 @@ public class Gate extends MaterialData implements Directional, Openable {
         super(type, data);
     }
 
-    public Gate(byte data) {
+    public Gate(final byte data) {
         super(Material.LEGACY_FENCE_GATE, data);
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & ~DIR_BIT);
 
         switch (face) {
@@ -51,7 +53,7 @@ public class Gate extends MaterialData implements Directional, Openable {
     }
 
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
 	    return switch (getData() & DIR_BIT) {
 		    case GATE_WEST -> BlockFace.SOUTH;
 		    case GATE_NORTH -> BlockFace.WEST;
@@ -67,7 +69,7 @@ public class Gate extends MaterialData implements Directional, Openable {
     }
 
     @Override
-    public void setOpen(boolean isOpen) {
+    public void setOpen(final boolean isOpen) {
         byte data = getData();
 
         if (isOpen) {
diff --git a/src/main/java/org/bukkit/material/Hopper.java b/src/main/java/org/bukkit/material/Hopper.java
index a1272c32a2c0e943d94c1a0b55d9a2dcb1274bf3..a7c2d7c692e1b7c2182ad8779713d62b26dd8b1d 100644
--- a/src/main/java/org/bukkit/material/Hopper.java
+++ b/src/main/java/org/bukkit/material/Hopper.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a hopper in an active or deactivated state and facing in a
@@ -33,7 +35,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Hopper(BlockFace facingDirection) {
+    public Hopper(final BlockFace facingDirection) {
         this(facingDirection, DEFAULT_ACTIVE);
     }
 
@@ -47,13 +49,13 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      *
      * @see BlockFace
      */
-    public Hopper(BlockFace facingDirection, boolean isActive) {
+    public Hopper(final BlockFace facingDirection, final boolean isActive) {
         super(Material.LEGACY_HOPPER);
         setFacingDirection(facingDirection);
         setActive(isActive);
     }
 
-    public Hopper(Material type) {
+    public Hopper(final Material type) {
         super(type);
     }
 
@@ -63,7 +65,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @deprecated Magic value
      */
     @Deprecated
-    public Hopper(Material type, byte data) {
+    public Hopper(final Material type, final byte data) {
         super(type, data);
     }
 
@@ -73,7 +75,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @param isActive True if the hopper is active, false if deactivated as if
      * powered by redstone
      */
-    public void setActive(boolean isActive) {
+    public void setActive(final boolean isActive) {
         setData((byte) (getData() & 0x7 | (isActive ? 0x0 : 0x8)));
     }
 
@@ -94,7 +96,7 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         int data = getData() & 0x8;
 
         switch (face) {
@@ -116,8 +118,8 @@ public class Hopper extends MaterialData implements Directional, Redstone {
      * @see BlockFace
      */
     @Override
-    public BlockFace getFacing() {
-        byte data = (byte) (getData() & 0x7);
+    public @NotNull BlockFace getFacing() {
+        final byte data = (byte) (getData() & 0x7);
 
 	    return switch (data) {
 		    case 0x0 -> BlockFace.DOWN;
diff --git a/src/main/java/org/bukkit/material/Ladder.java b/src/main/java/org/bukkit/material/Ladder.java
index 2f9ed44f2af5672256a356d1b2f675078960a47b..c0b49f87bb9d07e8e825a0a8cb6e8bd5cda76c29 100644
--- a/src/main/java/org/bukkit/material/Ladder.java
+++ b/src/main/java/org/bukkit/material/Ladder.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents Ladder data
@@ -35,8 +37,8 @@ public class Ladder extends SimpleAttachableMaterialData {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
-        byte data = getData();
+    public @NotNull BlockFace getAttachedFace() {
+        final byte data = getData();
 
 	    return switch (data) {
 		    case 0x2 -> BlockFace.SOUTH;
@@ -52,8 +54,8 @@ public class Ladder extends SimpleAttachableMaterialData {
      * Sets the direction this ladder is facing
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data = switch (face) {
 	        case SOUTH -> 0x2;
 	        case NORTH -> 0x3;
 	        case EAST -> 0x4;
diff --git a/src/main/java/org/bukkit/material/Leaves.java b/src/main/java/org/bukkit/material/Leaves.java
index 923a794ac1d2f43b680165dfddb4119faf5ecdd1..2345c291125dedfa5ec5719264e06c26917fe5a6 100644
--- a/src/main/java/org/bukkit/material/Leaves.java
+++ b/src/main/java/org/bukkit/material/Leaves.java
@@ -30,7 +30,7 @@ public class Leaves extends Wood {
      *
      * @param species the species of the wood block
      */
-    public Leaves(TreeSpecies species) {
+    public Leaves(final TreeSpecies species) {
         this(DEFAULT_TYPE, species, DEFAULT_DECAYABLE);
     }
 
@@ -41,7 +41,7 @@ public class Leaves extends Wood {
      * @param species the species of the wood block
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public Leaves(TreeSpecies species, boolean isDecayable) {
+    public Leaves(final TreeSpecies species, final boolean isDecayable) {
         this(DEFAULT_TYPE, species, isDecayable);
     }
 
@@ -60,7 +60,7 @@ public class Leaves extends Wood {
      * @param type the type of leaf block
      * @param species the species of the wood block
      */
-    public Leaves(final Material type, TreeSpecies species) {
+    public Leaves(final Material type, final TreeSpecies species) {
         this(type, species, DEFAULT_DECAYABLE);
     }
 
@@ -72,7 +72,7 @@ public class Leaves extends Wood {
      * @param species the species of the wood block
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public Leaves(final Material type, TreeSpecies species, boolean isDecayable) {
+    public Leaves(final Material type, final TreeSpecies species, final boolean isDecayable) {
         super(type, species);
         setDecayable(isDecayable);
     }
@@ -101,7 +101,7 @@ public class Leaves extends Wood {
      *
      * @param isDecaying whether the block is decaying or not
      */
-    public void setDecaying(boolean isDecaying) {
+    public void setDecaying(final boolean isDecaying) {
         setData((byte) ((getData() & 0x3) | (isDecaying
                 ? 0x8 // Clear the permanent flag to make this a decayable flag and set the decaying flag
                 : (getData() & 0x4)))); // Only persist the decayable flag if this is not a decaying block
@@ -123,7 +123,7 @@ public class Leaves extends Wood {
      *
      * @param isDecayable whether the block is permanent or can disappear
      */
-    public void setDecayable(boolean isDecayable) {
+    public void setDecayable(final boolean isDecayable) {
         setData((byte) ((getData() & 0x3) | (isDecayable
                 ? (getData() & 0x8) // Only persist the decaying flag if this is a decayable block
                 : 0x4)));
diff --git a/src/main/java/org/bukkit/material/Lever.java b/src/main/java/org/bukkit/material/Lever.java
index 258dcf1fab7af62ce9682ad0690272d8226721ce..ef288dba372be7f7e6465f2c1dc09fc0f66b36b4 100644
--- a/src/main/java/org/bukkit/material/Lever.java
+++ b/src/main/java/org/bukkit/material/Lever.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a lever
@@ -45,7 +47,7 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      *
      * @param isPowered whether the lever should be powered or not
      */
-    public void setPowered(boolean isPowered) {
+    public void setPowered(final boolean isPowered) {
         setData((byte) (isPowered ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
@@ -55,8 +57,8 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
-        byte data = (byte) (getData() & 0x7);
+    public @NotNull BlockFace getAttachedFace() {
+        final byte data = (byte) (getData() & 0x7);
 
 	    return switch (data) {
 		    case 0x1 -> BlockFace.WEST;
@@ -74,9 +76,9 @@ public class Lever extends SimpleAttachableMaterialData implements Redstone {
      * Sets the direction this lever is pointing in
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
-        BlockFace attach = getAttachedFace();
+        final BlockFace attach = getAttachedFace();
 
         if (attach == BlockFace.DOWN) {
             switch (face) {
diff --git a/src/main/java/org/bukkit/material/LongGrass.java b/src/main/java/org/bukkit/material/LongGrass.java
index 497857ec37482ff477eab77d680b2a1bec52ea14..c24a585fdb20f37fe2bb3a92138204e666357f44 100644
--- a/src/main/java/org/bukkit/material/LongGrass.java
+++ b/src/main/java/org/bukkit/material/LongGrass.java
@@ -15,7 +15,7 @@ public class LongGrass extends MaterialData {
         super(Material.LEGACY_LONG_GRASS);
     }
 
-    public LongGrass(GrassSpecies species) {
+    public LongGrass(final GrassSpecies species) {
         this();
         setSpecies(species);
     }
@@ -48,7 +48,7 @@ public class LongGrass extends MaterialData {
      *
      * @param species New species of this grass
      */
-    public void setSpecies(GrassSpecies species) {
+    public void setSpecies(final GrassSpecies species) {
         setData(species.getData());
     }
 
diff --git a/src/main/java/org/bukkit/material/MaterialData.java b/src/main/java/org/bukkit/material/MaterialData.java
index c1e1f6751d35dd7a5bb40c9cf3e2405620949ba6..f8a135763b077b6e2ed389e1eadeb61ca066250e 100644
--- a/src/main/java/org/bukkit/material/MaterialData.java
+++ b/src/main/java/org/bukkit/material/MaterialData.java
@@ -47,7 +47,7 @@ public class MaterialData implements Cloneable {
      * @deprecated Magic value
      */
     @Deprecated
-    public void setData(byte data) {
+    public void setData(final byte data) {
         this.data = data;
     }
 
@@ -78,7 +78,7 @@ public class MaterialData implements Cloneable {
      * @param amount The stack size of the new stack
      * @return New ItemStack containing a copy of this MaterialData
      */
-    public ItemStack toItemStack(int amount) {
+    public ItemStack toItemStack(final int amount) {
         return new ItemStack(type, amount, data);
     }
 
@@ -93,9 +93,9 @@ public class MaterialData implements Cloneable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj instanceof MaterialData) {
-            MaterialData md = (MaterialData) obj;
+            final MaterialData md = (MaterialData) obj;
 
             return (md.getItemType() == getItemType() && md.getData() == getData());
         } else {
@@ -107,7 +107,7 @@ public class MaterialData implements Cloneable {
     public MaterialData clone() {
         try {
             return (MaterialData) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
diff --git a/src/main/java/org/bukkit/material/Mushroom.java b/src/main/java/org/bukkit/material/Mushroom.java
index 1774aea90b19a77a8619592ac9d102c45b2c4909..980fdfb71d220e68e9026d18a9c604ae2d2d8909 100644
--- a/src/main/java/org/bukkit/material/Mushroom.java
+++ b/src/main/java/org/bukkit/material/Mushroom.java
@@ -35,7 +35,7 @@ public class Mushroom extends MaterialData {
      * @see Material#LEGACY_HUGE_MUSHROOM_1
      * @see Material#LEGACY_HUGE_MUSHROOM_2
      */
-    public Mushroom(Material shroom) {
+    public Mushroom(final Material shroom) {
         super(shroom);
         Validate.isTrue(shroom == Material.LEGACY_HUGE_MUSHROOM_1 || shroom == Material.LEGACY_HUGE_MUSHROOM_2, "Not a mushroom!");
     }
@@ -57,7 +57,7 @@ public class Mushroom extends MaterialData {
      * @see Material#LEGACY_HUGE_MUSHROOM_2
      * @see BlockFace
      */
-    public Mushroom(Material shroom, BlockFace capFace) {
+    public Mushroom(final Material shroom, final BlockFace capFace) {
         this(shroom, MushroomBlockTexture.getCapByFace(capFace));
     }
 
@@ -70,7 +70,7 @@ public class Mushroom extends MaterialData {
      * @see Material#LEGACY_HUGE_MUSHROOM_1
      * @see Material#LEGACY_HUGE_MUSHROOM_2
      */
-    public Mushroom(Material shroom, MushroomBlockTexture texture) {
+    public Mushroom(final Material shroom, final MushroomBlockTexture texture) {
         this(shroom, texture.getData());
     }
 
@@ -80,7 +80,7 @@ public class Mushroom extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Mushroom(Material shroom, byte data) {
+    public Mushroom(final Material shroom, final byte data) {
         super(shroom, data);
         Validate.isTrue(shroom == Material.LEGACY_HUGE_MUSHROOM_1 || shroom == Material.LEGACY_HUGE_MUSHROOM_2, "Not a mushroom!");
     }
@@ -122,7 +122,7 @@ public class Mushroom extends MaterialData {
      *
      * @param texture The mushroom texture to set
      */
-    public void setBlockTexture(MushroomBlockTexture texture) {
+    public void setBlockTexture(final MushroomBlockTexture texture) {
         setData(texture.getData());
     }
 
@@ -132,8 +132,8 @@ public class Mushroom extends MaterialData {
      * @param face The face to check.
      * @return True if it is painted.
      */
-    public boolean isFacePainted(BlockFace face) {
-        byte data = getData();
+    public boolean isFacePainted(final BlockFace face) {
+        final byte data = getData();
 
         if (data == MushroomBlockTexture.ALL_PORES.getData() || data == MushroomBlockTexture.STEM_SIDES.getData()
                 || data == MushroomBlockTexture.ALL_STEM.getData()) {
@@ -237,7 +237,7 @@ public class Mushroom extends MaterialData {
      *     it is a stem)
      */
     public Set<BlockFace> getPaintedFaces() {
-        EnumSet<BlockFace> faces = EnumSet.noneOf(BlockFace.class);
+        final EnumSet<BlockFace> faces = EnumSet.noneOf(BlockFace.class);
 
         if (isFacePainted(BlockFace.WEST)) {
             faces.add(BlockFace.WEST);
diff --git a/src/main/java/org/bukkit/material/NetherWarts.java b/src/main/java/org/bukkit/material/NetherWarts.java
index f1d4a47a78ca8bcbc2056675a8a67aa0a800d589..7bd44bc8bb3e28f655f34b1c4bb0004c4fe59f61 100644
--- a/src/main/java/org/bukkit/material/NetherWarts.java
+++ b/src/main/java/org/bukkit/material/NetherWarts.java
@@ -15,7 +15,7 @@ public class NetherWarts extends MaterialData {
         super(Material.LEGACY_NETHER_WARTS);
     }
 
-    public NetherWarts(NetherWartsState state) {
+    public NetherWarts(final NetherWartsState state) {
         this();
         setState(state);
     }
@@ -53,7 +53,7 @@ public class NetherWarts extends MaterialData {
      *
      * @param state New growth state of this nether wart
      */
-    public void setState(NetherWartsState state) {
+    public void setState(final NetherWartsState state) {
         switch (state) {
             case SEEDED -> setData((byte) 0x0);
             case STAGE_ONE -> setData((byte) 0x1);
diff --git a/src/main/java/org/bukkit/material/Observer.java b/src/main/java/org/bukkit/material/Observer.java
index 213f9162c9915d6ca6e911a10f2e00bd5e6a392e..a47ecf14fe73d44ccdcc828502dfedec3c303a51 100644
--- a/src/main/java/org/bukkit/material/Observer.java
+++ b/src/main/java/org/bukkit/material/Observer.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents an observer.
@@ -16,7 +18,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
         super(Material.LEGACY_OBSERVER);
     }
 
-    public Observer(BlockFace direction) {
+    public Observer(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -41,7 +43,7 @@ public class Observer extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -57,8 +59,8 @@ public class Observer extends MaterialData implements Directional, Redstone {
     }
 
     @Override
-    public BlockFace getFacing() {
-        int data = getData() & 0x7;
+    public @NotNull BlockFace getFacing() {
+        final int data = getData() & 0x7;
 
 	    return switch (data) {
 		    case 0x0 -> BlockFace.DOWN;
diff --git a/src/main/java/org/bukkit/material/PistonBaseMaterial.java b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
index 7c7ef3e29d276f3e19edad561f596b3ea3f70767..4131e6f8e6723ccdc97a30c1e2d95dfd954a9854 100644
--- a/src/main/java/org/bukkit/material/PistonBaseMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonBaseMaterial.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Material data for the piston base block
@@ -29,7 +31,7 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -43,8 +45,8 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
     }
 
     @Override
-    public BlockFace getFacing() {
-        byte dir = (byte) (getData() & 7);
+    public @NotNull BlockFace getFacing() {
+        final byte dir = (byte) (getData() & 7);
 
 	    return switch (dir) {
 		    case 0 -> BlockFace.DOWN;
@@ -67,7 +69,7 @@ public class PistonBaseMaterial extends MaterialData implements Directional, Red
      *
      * @param powered true if the piston is extended {@literal &} powered, or false
      */
-    public void setPowered(boolean powered) {
+    public void setPowered(final boolean powered) {
         setData((byte) (powered ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
diff --git a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
index 3a61d509f0072c6eb1b66d16e884e002d9d90606..8e0612e491571819289c173508f86d5850855609 100644
--- a/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
+++ b/src/main/java/org/bukkit/material/PistonExtensionMaterial.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Material data for the piston extension block
@@ -27,7 +29,7 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & 0x8);
 
         switch (face) {
@@ -41,8 +43,8 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
     }
 
     @Override
-    public BlockFace getFacing() {
-        byte dir = (byte) (getData() & 7);
+    public @NotNull BlockFace getFacing() {
+        final byte dir = (byte) (getData() & 7);
 
 	    return switch (dir) {
 		    case 0 -> BlockFace.DOWN;
@@ -69,12 +71,12 @@ public class PistonExtensionMaterial extends MaterialData implements Attachable
      *
      * @param sticky true if sticky, otherwise false
      */
-    public void setSticky(boolean sticky) {
+    public void setSticky(final boolean sticky) {
         setData((byte) (sticky ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         return getFacing().getOppositeFace();
     }
 
diff --git a/src/main/java/org/bukkit/material/PoweredRail.java b/src/main/java/org/bukkit/material/PoweredRail.java
index feebc5c7359098d41abcccb1f1d8afe2a54a9130..5fefa3ceb72e25c0cd76edbe5232e441c315e9da 100644
--- a/src/main/java/org/bukkit/material/PoweredRail.java
+++ b/src/main/java/org/bukkit/material/PoweredRail.java
@@ -38,7 +38,7 @@ public class PoweredRail extends ExtendedRails implements Redstone {
      *
      * @param isPowered whether or not the rail is powered
      */
-    public void setPowered(boolean isPowered) {
+    public void setPowered(final boolean isPowered) {
         setData((byte) (isPowered ? (getData() | 0x8) : (getData() & ~0x8)));
     }
 
diff --git a/src/main/java/org/bukkit/material/PressurePlate.java b/src/main/java/org/bukkit/material/PressurePlate.java
index ffababbc1b1ef1f19e941beb6412457b839e92eb..c5cda3d030d5015ddc0d7aff0021611b8234151f 100644
--- a/src/main/java/org/bukkit/material/PressurePlate.java
+++ b/src/main/java/org/bukkit/material/PressurePlate.java
@@ -14,7 +14,7 @@ public class PressurePlate extends MaterialData implements PressureSensor {
         super(Material.LEGACY_WOOD_PLATE);
     }
 
-    public PressurePlate(Material type) {
+    public PressurePlate(final Material type) {
         super(type);
     }
 
@@ -24,7 +24,7 @@ public class PressurePlate extends MaterialData implements PressureSensor {
      * @deprecated Magic value
      */
     @Deprecated
-    public PressurePlate(Material type, byte data) {
+    public PressurePlate(final Material type, final byte data) {
         super(type, data);
     }
 
diff --git a/src/main/java/org/bukkit/material/Pumpkin.java b/src/main/java/org/bukkit/material/Pumpkin.java
index cbca0c93411d6943a2ccb9ea90ed53ebd08eeb9e..2f913ae5d8706290cd070b3806332e0a5a39ff29 100644
--- a/src/main/java/org/bukkit/material/Pumpkin.java
+++ b/src/main/java/org/bukkit/material/Pumpkin.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a pumpkin.
@@ -21,7 +23,7 @@ public class Pumpkin extends MaterialData implements Directional {
      *
      * @param direction the direction the pumkin's face is facing
      */
-    public Pumpkin(BlockFace direction) {
+    public Pumpkin(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -45,8 +47,8 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data = switch (face) {
 	        case NORTH -> 0x0;
 	        case EAST -> 0x1;
 	        case SOUTH -> 0x2;
@@ -57,8 +59,8 @@ public class Pumpkin extends MaterialData implements Directional {
     }
 
     @Override
-    public BlockFace getFacing() {
-        byte data = getData();
+    public @NotNull BlockFace getFacing() {
+        final byte data = getData();
 
 	    return switch (data) {
 		    case 0x0 -> BlockFace.NORTH;
diff --git a/src/main/java/org/bukkit/material/Rails.java b/src/main/java/org/bukkit/material/Rails.java
index ddb5d210fffda04aaea69596b76ffdc7906a1ca3..535f252b3d9078028490009d4500023d3dbff0f6 100644
--- a/src/main/java/org/bukkit/material/Rails.java
+++ b/src/main/java/org/bukkit/material/Rails.java
@@ -34,7 +34,7 @@ public class Rails extends MaterialData {
      * @return the whether this track is set on a slope
      */
     public boolean isOnSlope() {
-        byte d = getConvertedData();
+        final byte d = getConvertedData();
 
         return (d == 0x2 || d == 0x3 || d == 0x4 || d == 0x5);
     }
@@ -43,7 +43,7 @@ public class Rails extends MaterialData {
      * @return the whether this track is set as a curve
      */
     public boolean isCurve() {
-        byte d = getConvertedData();
+        final byte d = getConvertedData();
 
         return (d == 0x6 || d == 0x7 || d == 0x8 || d == 0x9);
     }
@@ -56,7 +56,7 @@ public class Rails extends MaterialData {
      *     set as a curve, the corner of the track is returned.
      */
     public BlockFace getDirection() {
-        byte d = getConvertedData();
+        final byte d = getConvertedData();
 
 	    return switch (d) {
 		    default -> BlockFace.SOUTH;
@@ -98,7 +98,7 @@ public class Rails extends MaterialData {
      * @param face the direction the track should be facing
      * @param isOnSlope whether or not the track should be on a slope
      */
-    public void setDirection(BlockFace face, boolean isOnSlope) {
+    public void setDirection(final BlockFace face, final boolean isOnSlope) {
         switch (face) {
             case EAST -> setData((byte) (isOnSlope ? 0x2 : 0x1));
             case WEST -> setData((byte) (isOnSlope ? 0x3 : 0x1));
diff --git a/src/main/java/org/bukkit/material/Sandstone.java b/src/main/java/org/bukkit/material/Sandstone.java
index 8d8673edcd19d03077e7d53388c3ba2e9d80a618..2b7ff10798c1a40bedefeb6174a86d3c40a42fc9 100644
--- a/src/main/java/org/bukkit/material/Sandstone.java
+++ b/src/main/java/org/bukkit/material/Sandstone.java
@@ -15,7 +15,7 @@ public class Sandstone extends MaterialData {
         super(Material.LEGACY_SANDSTONE);
     }
 
-    public Sandstone(SandstoneType type) {
+    public Sandstone(final SandstoneType type) {
         this();
         setType(type);
     }
@@ -48,7 +48,7 @@ public class Sandstone extends MaterialData {
      *
      * @param type New type of this sandstone
      */
-    public void setType(SandstoneType type) {
+    public void setType(final SandstoneType type) {
         setData(type.getData());
     }
 
diff --git a/src/main/java/org/bukkit/material/Sapling.java b/src/main/java/org/bukkit/material/Sapling.java
index c615a0022256887022ba7f347c19005478c35691..94aa4f550fdec3a677de7d23492bd95e99d2b3f5 100644
--- a/src/main/java/org/bukkit/material/Sapling.java
+++ b/src/main/java/org/bukkit/material/Sapling.java
@@ -26,7 +26,7 @@ public class Sapling extends Wood {
      *
      * @param species the species of the sapling
      */
-    public Sapling(TreeSpecies species) {
+    public Sapling(final TreeSpecies species) {
         this(species, false);
     }
 
@@ -37,7 +37,7 @@ public class Sapling extends Wood {
      * @param species the species of the tree block
      * @param isInstantGrowable true if the Sapling should grow when next ticked with bonemeal
      */
-    public Sapling(TreeSpecies species, boolean isInstantGrowable) {
+    public Sapling(final TreeSpecies species, final boolean isInstantGrowable) {
         this(Material.LEGACY_SAPLING, species, isInstantGrowable);
     }
 
@@ -56,7 +56,7 @@ public class Sapling extends Wood {
      * @param type the type of sapling
      * @param species the species of the sapling
      */
-    public Sapling(final Material type, TreeSpecies species) {
+    public Sapling(final Material type, final TreeSpecies species) {
         this(type, species, false);
     }
 
@@ -69,7 +69,7 @@ public class Sapling extends Wood {
      * @param isInstantGrowable true if the Sapling should grow when next ticked
      * with bonemeal
      */
-    public Sapling(final Material type, TreeSpecies species, boolean isInstantGrowable) {
+    public Sapling(final Material type, final TreeSpecies species, final boolean isInstantGrowable) {
         super(type, species);
         setIsInstantGrowable(isInstantGrowable);
     }
@@ -99,7 +99,7 @@ public class Sapling extends Wood {
      * @param isInstantGrowable true if the Sapling should grow when next ticked
      * with bonemeal
      */
-    public void setIsInstantGrowable(boolean isInstantGrowable) {
+    public void setIsInstantGrowable(final boolean isInstantGrowable) {
         setData(isInstantGrowable ? (byte) ((getData() & 0x7) | 0x8) : (byte) (getData() & 0x7));
     }
 
diff --git a/src/main/java/org/bukkit/material/Sign.java b/src/main/java/org/bukkit/material/Sign.java
index bb23eaa38d42eae88800d9bd3aaa57d7f97fdd87..da20a7806e120b209e869bc0ce104392ec4b586b 100644
--- a/src/main/java/org/bukkit/material/Sign.java
+++ b/src/main/java/org/bukkit/material/Sign.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * MaterialData for signs
@@ -45,9 +47,9 @@ public class Sign extends MaterialData implements Attachable {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
         if (isWallSign()) {
-            byte data = getData();
+            final byte data = getData();
 
 	        return switch (data) {
 		        case 0x2 -> BlockFace.SOUTH;
@@ -68,8 +70,8 @@ public class Sign extends MaterialData implements Attachable {
      * @return BlockFace indicating where this sign is facing
      */
     @Override
-    public BlockFace getFacing() {
-        byte data = getData();
+    public @NotNull BlockFace getFacing() {
+        final byte data = getData();
 
         if (!isWallSign()) {
 	        return switch (data) {
@@ -98,8 +100,8 @@ public class Sign extends MaterialData implements Attachable {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data;
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data;
 
         if (isWallSign()) {
 	        data = switch (face) {
diff --git a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
index 62f1e8f959a4c3c4d6fd39f101e44938cafab1fe..fad20608a0f10087c882ed7ea463b9df93c80e96 100644
--- a/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
+++ b/src/main/java/org/bukkit/material/SimpleAttachableMaterialData.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Simple utility class for attachable MaterialData subclasses
@@ -12,12 +14,12 @@ import org.bukkit.block.BlockFace;
 @Deprecated
 public abstract class SimpleAttachableMaterialData extends MaterialData implements Attachable {
 
-    public SimpleAttachableMaterialData(Material type, BlockFace direction) {
+    public SimpleAttachableMaterialData(final Material type, final BlockFace direction) {
         this(type);
         setFacingDirection(direction);
     }
 
-    public SimpleAttachableMaterialData(Material type) {
+    public SimpleAttachableMaterialData(final Material type) {
         super(type);
     }
 
@@ -27,13 +29,13 @@ public abstract class SimpleAttachableMaterialData extends MaterialData implemen
      * @deprecated Magic value
      */
     @Deprecated
-    public SimpleAttachableMaterialData(Material type, byte data) {
+    public SimpleAttachableMaterialData(final Material type, final byte data) {
         super(type, data);
     }
 
     @Override
-    public BlockFace getFacing() {
-        BlockFace attachedFace = getAttachedFace();
+    public @NotNull BlockFace getFacing() {
+        final BlockFace attachedFace = getAttachedFace();
         return attachedFace.getOppositeFace();
     }
 
diff --git a/src/main/java/org/bukkit/material/Skull.java b/src/main/java/org/bukkit/material/Skull.java
index 372fde6584e08f56e379d73a467341c8afe4ab69..805fc3184af9eb4dd6f2d6e4f12d2d7271ea8949 100644
--- a/src/main/java/org/bukkit/material/Skull.java
+++ b/src/main/java/org/bukkit/material/Skull.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a skull.
@@ -20,7 +22,7 @@ public class Skull extends MaterialData implements Directional {
      *
      * @param direction the direction the skull's face is facing
      */
-    public Skull(BlockFace direction) {
+    public Skull(final BlockFace direction) {
         this();
         setFacingDirection(direction);
     }
@@ -40,8 +42,8 @@ public class Skull extends MaterialData implements Directional {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
-        int data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final int data = switch (face) {
 	        default -> 0x1;
 	        case NORTH -> 0x2;
 	        case WEST -> 0x4;
@@ -53,8 +55,8 @@ public class Skull extends MaterialData implements Directional {
     }
 
     @Override
-    public BlockFace getFacing() {
-        int data = getData();
+    public @NotNull BlockFace getFacing() {
+        final int data = getData();
 
 	    return switch (data) {
 		    default -> BlockFace.SELF;
diff --git a/src/main/java/org/bukkit/material/SpawnEgg.java b/src/main/java/org/bukkit/material/SpawnEgg.java
index a177021d259110ebf0c26e5a19cea5d9f6f3a8a8..12f04a7628445d710597699d4e903e94262bb8da 100644
--- a/src/main/java/org/bukkit/material/SpawnEgg.java
+++ b/src/main/java/org/bukkit/material/SpawnEgg.java
@@ -30,11 +30,11 @@ public class SpawnEgg extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public SpawnEgg(byte data) {
+    public SpawnEgg(final byte data) {
         super(Material.LEGACY_MONSTER_EGG, data);
     }
 
-    public SpawnEgg(EntityType type) {
+    public SpawnEgg(final EntityType type) {
         this();
         setSpawnedType(type);
     }
@@ -57,7 +57,7 @@ public class SpawnEgg extends MaterialData {
      * @deprecated This is now stored in {@link SpawnEggMeta}.
      */
     @Deprecated
-    public void setSpawnedType(EntityType type) {
+    public void setSpawnedType(final EntityType type) {
         setData((byte) type.getTypeId());
     }
 
diff --git a/src/main/java/org/bukkit/material/Stairs.java b/src/main/java/org/bukkit/material/Stairs.java
index 7d93e3abe341c5bbef10cef9002acbe78f8f45d0..efede029dfce152b842fd7283259033189d20000 100644
--- a/src/main/java/org/bukkit/material/Stairs.java
+++ b/src/main/java/org/bukkit/material/Stairs.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents stairs.
@@ -30,7 +32,7 @@ public class Stairs extends MaterialData implements Directional {
      * @return the direction the stairs ascend towards
      */
     public BlockFace getAscendingDirection() {
-        byte data = getData();
+        final byte data = getData();
 
 	    return switch (data & 0x3) {
 		    default -> BlockFace.EAST;
@@ -51,8 +53,8 @@ public class Stairs extends MaterialData implements Directional {
      * Set the direction the stair part of the block is facing
      */
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data = switch (face) {
 	        case NORTH -> 0x3;
 	        case SOUTH -> 0x2;
 	        default -> 0x0;
@@ -66,7 +68,7 @@ public class Stairs extends MaterialData implements Directional {
      * @return the direction the stair part of the block is facing
      */
     @Override
-    public BlockFace getFacing() {
+    public @NotNull BlockFace getFacing() {
         return getDescendingDirection();
     }
 
@@ -85,7 +87,7 @@ public class Stairs extends MaterialData implements Directional {
      * @param inv - true if step is inverted (top half), false if step is
      *     normal (bottom half)
      */
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x3;
         if (inv) {
             dat |= 0x4;
diff --git a/src/main/java/org/bukkit/material/Step.java b/src/main/java/org/bukkit/material/Step.java
index f792ad1bce8412feb1d8f242c53b5ffc9509634e..19403e52f637335a4af387b4c9a66501e7f1d747 100644
--- a/src/main/java/org/bukkit/material/Step.java
+++ b/src/main/java/org/bukkit/material/Step.java
@@ -65,7 +65,7 @@ public class Step extends TexturedMaterial {
      * @param inv - true if step is inverted (top half), false if step is
      *     normal (bottom half)
      */
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
@@ -90,7 +90,7 @@ public class Step extends TexturedMaterial {
      */
     @Deprecated
     @Override
-    protected void setTextureIndex(int idx) {
+    protected void setTextureIndex(final int idx) {
         setData((byte) ((getData() & 0x8) | idx));
     }
 
diff --git a/src/main/java/org/bukkit/material/TexturedMaterial.java b/src/main/java/org/bukkit/material/TexturedMaterial.java
index 6e0a834794453eff7b3efc93e90c9bf49ef7c688..7eac04de22845f599ec5bc0e0bf692062f9a4a11 100644
--- a/src/main/java/org/bukkit/material/TexturedMaterial.java
+++ b/src/main/java/org/bukkit/material/TexturedMaterial.java
@@ -12,7 +12,7 @@ import org.bukkit.Material;
 @Deprecated
 public abstract class TexturedMaterial extends MaterialData {
 
-    public TexturedMaterial(Material m) {
+    public TexturedMaterial(final Material m) {
         super(m);
     }
 
@@ -54,7 +54,7 @@ public abstract class TexturedMaterial extends MaterialData {
      * @param material
      *            New material of this block
      */
-    public void setMaterial(Material material) {
+    public void setMaterial(final Material material) {
         if (getTextures().contains(material)) {
             setTextureIndex(getTextures().indexOf(material));
         } else {
@@ -80,7 +80,7 @@ public abstract class TexturedMaterial extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    protected void setTextureIndex(int idx) {
+    protected void setTextureIndex(final int idx) {
         setData((byte) idx); // Default to using all bits - override for other mappings
     }
 
diff --git a/src/main/java/org/bukkit/material/Torch.java b/src/main/java/org/bukkit/material/Torch.java
index c01d29dc572e18662d2668f92d223d9d9faa5e41..9783dd0c902cb6df106ed1bec37201488a16dfe3 100644
--- a/src/main/java/org/bukkit/material/Torch.java
+++ b/src/main/java/org/bukkit/material/Torch.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * MaterialData for torches
@@ -35,8 +37,8 @@ public class Torch extends SimpleAttachableMaterialData {
      * @return BlockFace attached to
      */
     @Override
-    public BlockFace getAttachedFace() {
-        byte data = getData();
+    public @NotNull BlockFace getAttachedFace() {
+        final byte data = getData();
 
 	    return switch (data) {
 		    case 0x1 -> BlockFace.WEST;
@@ -48,8 +50,8 @@ public class Torch extends SimpleAttachableMaterialData {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
-        byte data = switch (face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
+        final byte data = switch (face) {
 	        case EAST -> 0x1;
 	        case WEST -> 0x2;
 	        case SOUTH -> 0x3;
diff --git a/src/main/java/org/bukkit/material/TrapDoor.java b/src/main/java/org/bukkit/material/TrapDoor.java
index 6df5ce17a7ba875498e1b8709be50886b2b2753c..188e271a3b7cbef6691d7d6829931f97552633e2 100644
--- a/src/main/java/org/bukkit/material/TrapDoor.java
+++ b/src/main/java/org/bukkit/material/TrapDoor.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents a trap door
@@ -35,7 +37,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public void setOpen(boolean isOpen) {
+    public void setOpen(final boolean isOpen) {
         byte data = getData();
 
         if (isOpen) {
@@ -61,7 +63,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
      *
      * @param inv - true if inverted (top half), false if normal (bottom half)
      */
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
@@ -70,8 +72,8 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public BlockFace getAttachedFace() {
-        byte data = (byte) (getData() & 0x3);
+    public @NotNull BlockFace getAttachedFace() {
+        final byte data = (byte) (getData() & 0x3);
 
 	    return switch (data) {
 		    case 0x0 -> BlockFace.SOUTH;
@@ -84,7 +86,7 @@ public class TrapDoor extends SimpleAttachableMaterialData implements Openable {
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         byte data = (byte) (getData() & 0xC);
 
         switch (face) {
diff --git a/src/main/java/org/bukkit/material/Tree.java b/src/main/java/org/bukkit/material/Tree.java
index 55f71ff290114f1a20ee20c3544d45be7a905297..29a833578b4e4340d94d734cab9e1dc5a10a6f97 100644
--- a/src/main/java/org/bukkit/material/Tree.java
+++ b/src/main/java/org/bukkit/material/Tree.java
@@ -30,7 +30,7 @@ public class Tree extends Wood {
      *
      * @param species the species of the tree block
      */
-    public Tree(TreeSpecies species) {
+    public Tree(final TreeSpecies species) {
         this(DEFAULT_TYPE, species, DEFAULT_DIRECTION);
     }
 
@@ -41,7 +41,7 @@ public class Tree extends Wood {
      * @param species the species of the tree block
      * @param dir the direction the tree block is facing
      */
-    public Tree(TreeSpecies species, BlockFace dir) {
+    public Tree(final TreeSpecies species, final BlockFace dir) {
         this(DEFAULT_TYPE, species, dir);
     }
 
@@ -60,7 +60,7 @@ public class Tree extends Wood {
      * @param type the type of tree block
      * @param species the species of the tree block
      */
-    public Tree(final Material type, TreeSpecies species) {
+    public Tree(final Material type, final TreeSpecies species) {
         this(type, species, DEFAULT_DIRECTION);
     }
 
@@ -72,7 +72,7 @@ public class Tree extends Wood {
      * @param species the species of the tree block
      * @param dir the direction the tree block is facing
      */
-    public Tree(final Material type, TreeSpecies species, BlockFace dir) {
+    public Tree(final Material type, final TreeSpecies species, final BlockFace dir) {
         super(type, species);
         setDirection(dir);
     }
@@ -116,8 +116,8 @@ public class Tree extends Wood {
      *
      * @param dir - direction of end of log (BlockFace.SELF for no direction)
      */
-    public void setDirection(BlockFace dir) {
-        int dat = switch (dir) {
+    public void setDirection(final BlockFace dir) {
+        final int dat = switch (dir) {
             default -> 0;
 // 1<<2
             case WEST, EAST -> 4;
diff --git a/src/main/java/org/bukkit/material/Tripwire.java b/src/main/java/org/bukkit/material/Tripwire.java
index e5ffa4db87b435df8c04f1b43521fda6493fd43d..4a6b617278024399a30c63c9640e8afe1bf0332a 100644
--- a/src/main/java/org/bukkit/material/Tripwire.java
+++ b/src/main/java/org/bukkit/material/Tripwire.java
@@ -39,7 +39,7 @@ public class Tripwire extends MaterialData {
      *
      * @param act - true if activated, false if not
      */
-    public void setActivated(boolean act) {
+    public void setActivated(final boolean act) {
         int dat = getData() & (0x8 | 0x3);
         if (act) {
             dat |= 0x4;
@@ -61,7 +61,7 @@ public class Tripwire extends MaterialData {
      *
      * @param trig - true if object activating tripwire, false if not
      */
-    public void setObjectTriggering(boolean trig) {
+    public void setObjectTriggering(final boolean trig) {
         int dat = getData() & 0xE;
         if (trig) {
             dat |= 0x1;
diff --git a/src/main/java/org/bukkit/material/TripwireHook.java b/src/main/java/org/bukkit/material/TripwireHook.java
index 3b883c3b392e9b91bf3a4227edd2d2aba33eea0d..4a301a179b04279cfea5dc74c551a301618164a9 100644
--- a/src/main/java/org/bukkit/material/TripwireHook.java
+++ b/src/main/java/org/bukkit/material/TripwireHook.java
@@ -2,6 +2,8 @@ package org.bukkit.material;
 
 import org.bukkit.Material;
 import org.bukkit.block.BlockFace;
+import org.jetbrains.annotations.NotNull;
+
 
 /**
  * Represents the tripwire hook
@@ -26,7 +28,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
         super(type, data);
     }
 
-    public TripwireHook(BlockFace dir) {
+    public TripwireHook(final BlockFace dir) {
         this();
         setFacingDirection(dir);
     }
@@ -45,7 +47,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
      *
      * @param connected - true if connected, false if not
      */
-    public void setConnected(boolean connected) {
+    public void setConnected(final boolean connected) {
         int dat = getData() & (0x8 | 0x3);
         if (connected) {
             dat |= 0x4;
@@ -67,7 +69,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
      *
      * @param act - true if activated, false if not
      */
-    public void setActivated(boolean act) {
+    public void setActivated(final boolean act) {
         int dat = getData() & (0x4 | 0x3);
         if (act) {
             dat |= 0x8;
@@ -76,7 +78,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     @Override
-    public void setFacingDirection(BlockFace face) {
+    public void setFacingDirection(final @NotNull BlockFace face) {
         int dat = getData() & 0xC;
         switch (face) {
         case WEST:
@@ -96,7 +98,7 @@ public class TripwireHook extends SimpleAttachableMaterialData implements Redsto
     }
 
     @Override
-    public BlockFace getAttachedFace() {
+    public @NotNull BlockFace getAttachedFace() {
 	    return switch (getData() & 0x3) {
 		    case 0 -> BlockFace.NORTH;
 		    case 1 -> BlockFace.EAST;
diff --git a/src/main/java/org/bukkit/material/Vine.java b/src/main/java/org/bukkit/material/Vine.java
index 688669be8fbc65ce27dbfc2ac3a89c03d95567b0..fae5c9ffd3f48ebffa41e9ac102479ab67829afe 100644
--- a/src/main/java/org/bukkit/material/Vine.java
+++ b/src/main/java/org/bukkit/material/Vine.java
@@ -38,15 +38,15 @@ public class Vine extends MaterialData {
      * @deprecated Magic value
      */
     @Deprecated
-    public Vine(byte data) {
+    public Vine(final byte data) {
         super(Material.LEGACY_VINE, data);
     }
 
-    public Vine(BlockFace... faces) {
+    public Vine(final BlockFace... faces) {
         this(EnumSet.copyOf(Arrays.asList(faces)));
     }
 
-    public Vine(EnumSet<BlockFace> faces) {
+    public Vine(final EnumSet<BlockFace> faces) {
         this((byte) 0);
         faces.retainAll(possibleFaces);
 
@@ -79,7 +79,7 @@ public class Vine extends MaterialData {
      * @param face The face to check.
      * @return Whether it is attached to that face.
      */
-    public boolean isOnFace(BlockFace face) {
+    public boolean isOnFace(final BlockFace face) {
 	    return switch (face) {
 		    case WEST -> (getData() & VINE_WEST) == VINE_WEST;
 		    case NORTH -> (getData() & VINE_NORTH) == VINE_NORTH;
@@ -100,7 +100,7 @@ public class Vine extends MaterialData {
      *
      * @param face The face to attach.
      */
-    public void putOnFace(BlockFace face) {
+    public void putOnFace(final BlockFace face) {
         switch (face) {
             case WEST:
                 setData((byte) (getData() | VINE_WEST));
@@ -142,7 +142,7 @@ public class Vine extends MaterialData {
      *
      * @param face The face to detach.
      */
-    public void removeFromFace(BlockFace face) {
+    public void removeFromFace(final BlockFace face) {
         switch (face) {
             case WEST:
                 setData((byte) (getData() & ~VINE_WEST));
diff --git a/src/main/java/org/bukkit/material/Wood.java b/src/main/java/org/bukkit/material/Wood.java
index 35eeee0bba600b4ddf38730484eb562c8e09564f..b8bc01b29317b6047f4e13543371fe771587503b 100644
--- a/src/main/java/org/bukkit/material/Wood.java
+++ b/src/main/java/org/bukkit/material/Wood.java
@@ -30,7 +30,7 @@ public class Wood extends MaterialData {
      *
      * @param species the species of the wood block
      */
-    public Wood(TreeSpecies species) {
+    public Wood(final TreeSpecies species) {
         this(DEFAULT_TYPE, species);
     }
 
@@ -87,7 +87,7 @@ public class Wood extends MaterialData {
      * @param species The required species
      * @return The actual type for this species given the desired type
      */
-    private static Material getSpeciesType(Material type, TreeSpecies species) {
+    private static Material getSpeciesType(final Material type, final TreeSpecies species) {
         switch (species) {
             case GENERIC:
             case REDWOOD:
diff --git a/src/main/java/org/bukkit/material/WoodenStep.java b/src/main/java/org/bukkit/material/WoodenStep.java
index e9b97d6a134732dc470431deb3f15490a0812746..e2c87e1baaa187c4df3c26ce6dbd0d05c5436d21 100644
--- a/src/main/java/org/bukkit/material/WoodenStep.java
+++ b/src/main/java/org/bukkit/material/WoodenStep.java
@@ -28,7 +28,7 @@ public class WoodenStep extends Wood {
      *
      * @param species the species of the wooden step
      */
-    public WoodenStep(TreeSpecies species) {
+    public WoodenStep(final TreeSpecies species) {
         this(species, DEFAULT_INVERTED);
     }
 
@@ -39,7 +39,7 @@ public class WoodenStep extends Wood {
      * @param species the species of the wooden step
      * @param inv true the step is at the top of the block
      */
-    public WoodenStep(final TreeSpecies species, boolean inv) {
+    public WoodenStep(final TreeSpecies species, final boolean inv) {
         super(DEFAULT_TYPE, species);
         setInverted(inv);
     }
@@ -69,7 +69,7 @@ public class WoodenStep extends Wood {
      * @param inv - true if step is inverted (top half), false if step is normal
      * (bottom half)
      */
-    public void setInverted(boolean inv) {
+    public void setInverted(final boolean inv) {
         int dat = getData() & 0x7;
         if (inv) {
             dat |= 0x8;
diff --git a/src/main/java/org/bukkit/material/Wool.java b/src/main/java/org/bukkit/material/Wool.java
index 3b17409a98b53538989a8d2d5ad1b80643befeab..5a80b40514d2a7c8722a1269a86b5c2a7ae9c562 100644
--- a/src/main/java/org/bukkit/material/Wool.java
+++ b/src/main/java/org/bukkit/material/Wool.java
@@ -14,7 +14,7 @@ public class Wool extends MaterialData implements Colorable {
         super(Material.LEGACY_WOOL);
     }
 
-    public Wool(DyeColor color) {
+    public Wool(final DyeColor color) {
         this();
         setColor(color);
     }
@@ -49,7 +49,7 @@ public class Wool extends MaterialData implements Colorable {
      * @param color New color of this dye
      */
     @Override
-    public void setColor(DyeColor color) {
+    public void setColor(final DyeColor color) {
         setData(color.getWoolData());
     }
 
diff --git a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
index f8326183a1f1828bc08b005d798542f14896505b..9c4018f7824fbf1a27f78926e24b8ce870b67ba9 100644
--- a/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
+++ b/src/main/java/org/bukkit/material/types/MushroomBlockTexture.java
@@ -124,7 +124,7 @@ public enum MushroomBlockTexture {
     }
 
     static {
-        for (MushroomBlockTexture type : values()) {
+        for (final MushroomBlockTexture type : values()) {
             BY_DATA.put(type.data, type);
             BY_BLOCKFACE.put(type.capFace, type);
         }
diff --git a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
index 4ded655310e93fadf5847846625d46a2cdecb538..9b858677243d16dd8984b4e4b31ce51ad6bbf97a 100644
--- a/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/FixedMetadataValue.java
@@ -26,7 +26,7 @@ public class FixedMetadataValue extends LazyMetadataValue {
      * @param owningPlugin the {@link Plugin} that created this metadata value
      * @param value the value assigned to this metadata value
      */
-    public FixedMetadataValue(@NotNull Plugin owningPlugin, @Nullable final Object value) {
+    public FixedMetadataValue(@NotNull final Plugin owningPlugin, @Nullable final Object value) {
         super(owningPlugin);
         this.internalValue = value;
     }
diff --git a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
index ea90f2ef5b2e1af8c9c7869df6554b86c5a14faf..eb46c926d0ec858cd8d9df705f8f9c43390205ff 100644
--- a/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
+++ b/src/main/java/org/bukkit/metadata/LazyMetadataValue.java
@@ -32,7 +32,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
      *     value.
      * @param lazyValue the lazy value assigned to this metadata value.
      */
-    public LazyMetadataValue(@NotNull Plugin owningPlugin, @NotNull Callable<Object> lazyValue) {
+    public LazyMetadataValue(@NotNull final Plugin owningPlugin, @NotNull final Callable<Object> lazyValue) {
         this(owningPlugin, CacheStrategy.CACHE_AFTER_FIRST_EVAL, lazyValue);
     }
 
@@ -45,7 +45,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
      *     value.
      * @param lazyValue the lazy value assigned to this metadata value.
      */
-    public LazyMetadataValue(@NotNull Plugin owningPlugin, @NotNull CacheStrategy cacheStrategy, @NotNull Callable<Object> lazyValue) {
+    public LazyMetadataValue(@NotNull final Plugin owningPlugin, @NotNull final CacheStrategy cacheStrategy, @NotNull final Callable<Object> lazyValue) {
         super(owningPlugin);
         Validate.notNull(cacheStrategy, "cacheStrategy cannot be null");
         Validate.notNull(lazyValue, "lazyValue cannot be null");
@@ -60,7 +60,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
      *
      * @param owningPlugin the owning plugin
      */
-    protected LazyMetadataValue(@NotNull Plugin owningPlugin) {
+    protected LazyMetadataValue(@NotNull final Plugin owningPlugin) {
         super(owningPlugin);
     }
 
@@ -68,7 +68,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
     @Nullable
     public Object value() {
         eval();
-        Object value = internalValue.get();
+        final Object value = internalValue.get();
         if (value == ACTUALLY_NULL) {
             return null;
         }
@@ -89,7 +89,7 @@ public class LazyMetadataValue extends MetadataValueAdapter {
                     value = ACTUALLY_NULL;
                 }
                 internalValue = new SoftReference<>(value);
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 throw new MetadataEvaluationException(e);
             }
         }
diff --git a/src/main/java/org/bukkit/metadata/MetadataConversionException.java b/src/main/java/org/bukkit/metadata/MetadataConversionException.java
index a3def46a473e56a84ce648c1d21f5487eb721547..88260fde92719dc0f0389150c6b6a94bf0ac11c6 100644
--- a/src/main/java/org/bukkit/metadata/MetadataConversionException.java
+++ b/src/main/java/org/bukkit/metadata/MetadataConversionException.java
@@ -7,7 +7,7 @@ package org.bukkit.metadata;
  */
 @SuppressWarnings("serial")
 public class MetadataConversionException extends RuntimeException {
-    MetadataConversionException(String message) {
+    MetadataConversionException(final String message) {
         super(message);
     }
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java b/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
index 918e7c83933edd1ba4182286618f39883e00de56..7f208e074fadba587d9289e0256c2818589b7110 100644
--- a/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
+++ b/src/main/java/org/bukkit/metadata/MetadataEvaluationException.java
@@ -7,7 +7,7 @@ package org.bukkit.metadata;
  */
 @SuppressWarnings("serial")
 public class MetadataEvaluationException extends RuntimeException {
-    MetadataEvaluationException(Throwable cause) {
+    MetadataEvaluationException(final Throwable cause) {
         super(cause);
     }
 }
diff --git a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
index 292f5782c6f13d69d6af7418f65ac8cb0188e07f..96f3627ed1af431967654cf7cccf6346f297e6ff 100644
--- a/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
+++ b/src/main/java/org/bukkit/metadata/MetadataStoreBase.java
@@ -35,12 +35,12 @@ public abstract class MetadataStoreBase<T> {
      *     is null
      * @see MetadataStore#setMetadata(Object, String, MetadataValue)
      */
-    public synchronized void setMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull MetadataValue newMetadataValue) {
+    public synchronized void setMetadata(@NotNull final T subject, @NotNull final String metadataKey, @NotNull final MetadataValue newMetadataValue) {
         Validate.notNull(newMetadataValue, "Value cannot be null");
-        Plugin owningPlugin = newMetadataValue.getOwningPlugin();
+        final Plugin owningPlugin = newMetadataValue.getOwningPlugin();
         Validate.notNull(owningPlugin, "Plugin cannot be null");
-        String key = disambiguate(subject, metadataKey);
-        Map<Plugin, MetadataValue> entry = metadataMap.computeIfAbsent(key, k -> new WeakHashMap<>(1));
+        final String key = disambiguate(subject, metadataKey);
+        final Map<Plugin, MetadataValue> entry = metadataMap.computeIfAbsent(key, k -> new WeakHashMap<>(1));
         synchronized (entry) {
             entry.put(owningPlugin, newMetadataValue);
         }
@@ -57,11 +57,11 @@ public abstract class MetadataStoreBase<T> {
      * @see MetadataStore#getMetadata(Object, String)
      */
     @NotNull
-    public List<MetadataValue> getMetadata(@NotNull T subject, @NotNull String metadataKey) { // Paper
-        String key = disambiguate(subject, metadataKey);
-        Map<Plugin, MetadataValue> entry = metadataMap.get(key);
+    public List<MetadataValue> getMetadata(@NotNull final T subject, @NotNull final String metadataKey) { // Paper
+        final String key = disambiguate(subject, metadataKey);
+        final Map<Plugin, MetadataValue> entry = metadataMap.get(key);
         if (entry != null) {
-            Collection<MetadataValue> values = entry.values();
+            final Collection<MetadataValue> values = entry.values();
             return List.copyOf(values);
         } else {
             return Collections.emptyList();
@@ -76,8 +76,8 @@ public abstract class MetadataStoreBase<T> {
      * @param metadataKey the unique metadata key being queried.
      * @return the existence of the metadataKey within subject.
      */
-    public boolean hasMetadata(@NotNull T subject, @NotNull String metadataKey) { // Paper
-        String key = disambiguate(subject, metadataKey);
+    public boolean hasMetadata(@NotNull final T subject, @NotNull final String metadataKey) { // Paper
+        final String key = disambiguate(subject, metadataKey);
         return metadataMap.containsKey(key);
     }
 
@@ -92,10 +92,10 @@ public abstract class MetadataStoreBase<T> {
      * @see MetadataStore#removeMetadata(Object, String,
      *     org.bukkit.plugin.Plugin)
      */
-    public void removeMetadata(@NotNull T subject, @NotNull String metadataKey, @NotNull Plugin owningPlugin) { // Paper
+    public void removeMetadata(@NotNull final T subject, @NotNull final String metadataKey, @NotNull final Plugin owningPlugin) { // Paper
         Validate.notNull(owningPlugin, "Plugin cannot be null");
-        String key = disambiguate(subject, metadataKey);
-        Map<Plugin, MetadataValue> entry = metadataMap.get(key);
+        final String key = disambiguate(subject, metadataKey);
+        final Map<Plugin, MetadataValue> entry = metadataMap.get(key);
         if (entry == null) {
             return;
         }
@@ -116,9 +116,9 @@ public abstract class MetadataStoreBase<T> {
      * @throws IllegalArgumentException If plugin is null
      * @see MetadataStore#invalidateAll(org.bukkit.plugin.Plugin)
      */
-    public void invalidateAll(@NotNull Plugin owningPlugin) { // Paper
+    public void invalidateAll(@NotNull final Plugin owningPlugin) { // Paper
         Validate.notNull(owningPlugin, "Plugin cannot be null");
-        for (Map<Plugin, MetadataValue> values : metadataMap.values()) {
+        for (final Map<Plugin, MetadataValue> values : metadataMap.values()) {
             if (values.containsKey(owningPlugin)) {
                 values.get(owningPlugin).invalidate();
             }
@@ -132,10 +132,10 @@ public abstract class MetadataStoreBase<T> {
      * @param owningPlugin the plugin requesting the invalidation.
      * @throws IllegalArgumentException If plugin is null
      */
-    public void removeAll(@NotNull Plugin owningPlugin) {
+    public void removeAll(@NotNull final Plugin owningPlugin) {
         Validate.notNull(owningPlugin, "Plugin cannot be null");
-        for (Iterator<Map<Plugin, MetadataValue>> iterator = metadataMap.values().iterator(); iterator.hasNext(); ) {
-            Map<Plugin, MetadataValue> values = iterator.next();
+        for (final Iterator<Map<Plugin, MetadataValue>> iterator = metadataMap.values().iterator(); iterator.hasNext(); ) {
+            final Map<Plugin, MetadataValue> values = iterator.next();
             values.remove(owningPlugin);
             if (values.isEmpty()) {
                 iterator.remove();
diff --git a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
index bd9318d9310cb6825ffa9d98f4f743175caeec15..ab51f335e6b4ac114a853b5a74ab2d733b805596 100644
--- a/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
+++ b/src/main/java/org/bukkit/metadata/MetadataValueAdapter.java
@@ -17,7 +17,7 @@ import org.jetbrains.annotations.Nullable;
 public abstract class MetadataValueAdapter implements MetadataValue {
     protected final WeakReference<Plugin> owningPlugin;
 
-    protected MetadataValueAdapter(@NotNull Plugin owningPlugin) {
+    protected MetadataValueAdapter(@NotNull final Plugin owningPlugin) {
         Validate.notNull(owningPlugin, "owningPlugin cannot be null");
         this.owningPlugin = new WeakReference<>(owningPlugin);
     }
@@ -60,7 +60,7 @@ public abstract class MetadataValueAdapter implements MetadataValue {
 
     @Override
     public boolean asBoolean() {
-        Object value = value();
+        final Object value = value();
         if (value instanceof Boolean) {
             return (Boolean) value;
         }
@@ -79,7 +79,7 @@ public abstract class MetadataValueAdapter implements MetadataValue {
     @Override
     @NotNull
     public String asString() {
-        Object value = value();
+        final Object value = value();
 
         if (value == null) {
             return "";
diff --git a/src/main/java/org/bukkit/permissions/PermissibleBase.java b/src/main/java/org/bukkit/permissions/PermissibleBase.java
index d668a5c37ba4c39cf3f20b08c4e2ac546d6e662c..fbf1b3a450c29bd0314d4230527b083434616760 100644
--- a/src/main/java/org/bukkit/permissions/PermissibleBase.java
+++ b/src/main/java/org/bukkit/permissions/PermissibleBase.java
@@ -21,7 +21,7 @@ public class PermissibleBase implements Permissible {
     private final List<PermissionAttachment> attachments = new LinkedList<>();
     private final Map<String, PermissionAttachmentInfo> permissions = new HashMap<>();
 
-    public PermissibleBase(@Nullable ServerOperator opable) {
+    public PermissibleBase(@Nullable final ServerOperator opable) {
         this.opable = opable;
 
         if (opable instanceof Permissible) {
@@ -41,7 +41,7 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public void setOp(boolean value) {
+    public void setOp(final boolean value) {
         if (opable == null) {
             throw new UnsupportedOperationException("Cannot change op value as no ServerOperator is set");
         } else {
@@ -50,29 +50,29 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public boolean isPermissionSet(@NotNull String name) {
+    public boolean isPermissionSet(@NotNull final String name) {
 
 	    return permissions.containsKey(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
-    public boolean isPermissionSet(@NotNull Permission perm) {
+    public boolean isPermissionSet(@NotNull final Permission perm) {
 
 	    return isPermissionSet(perm.getName());
     }
 
     @Override
-    public boolean hasPermission(@NotNull String inName) {
+    public boolean hasPermission(@NotNull final String inName) {
 
-	    String name = inName.toLowerCase(java.util.Locale.ENGLISH);
+	    final String name = inName.toLowerCase(java.util.Locale.ENGLISH);
 
         // Paper start
-        PermissionAttachmentInfo info = permissions.get(name);
+        final PermissionAttachmentInfo info = permissions.get(name);
         if (info != null) {
             return info.getValue();
             // Paper end
         } else {
-            Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
+            final Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
 
             if (perm != null) {
                 return perm.getDefault().getValue(isOp());
@@ -83,12 +83,12 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public boolean hasPermission(@NotNull Permission perm) {
+    public boolean hasPermission(@NotNull final Permission perm) {
 
-	    String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+	    final String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
 
         // Paper start
-        PermissionAttachmentInfo info = permissions.get(name);
+        final PermissionAttachmentInfo info = permissions.get(name);
         if (info != null) {
             return info.getValue();
         }
@@ -98,12 +98,12 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @NotNull
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) { // Paper - synchronized
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value) { // Paper - synchronized
 	    if (!plugin.isEnabled()) {
 	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
 	    }
 
-        PermissionAttachment result = addAttachment(plugin);
+        final PermissionAttachment result = addAttachment(plugin);
         result.setPermission(name, value);
 
         recalculatePermissions();
@@ -113,12 +113,12 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @NotNull
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin) { // Paper - synchronized
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin) { // Paper - synchronized
 	    if (!plugin.isEnabled()) {
 	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
 	    }
 
-        PermissionAttachment result = new PermissionAttachment(plugin, parent);
+        final PermissionAttachment result = new PermissionAttachment(plugin, parent);
 
         attachments.add(result);
         recalculatePermissions();
@@ -127,11 +127,11 @@ public class PermissibleBase implements Permissible {
     }
 
     @Override
-    public synchronized void removeAttachment(@NotNull PermissionAttachment attachment) { // Paper - synchronized
+    public synchronized void removeAttachment(@NotNull final PermissionAttachment attachment) { // Paper - synchronized
 
 	    if (attachments.contains(attachment)) {
             attachments.remove(attachment);
-            PermissionRemovedExecutor ex = attachment.getRemovalCallback();
+            final PermissionRemovedExecutor ex = attachment.getRemovalCallback();
 
             if (ex != null) {
                 ex.attachmentRemoved(attachment);
@@ -146,25 +146,25 @@ public class PermissibleBase implements Permissible {
     @Override
     public synchronized void recalculatePermissions() { // Paper - synchronized
         clearPermissions();
-        Set<Permission> defaults = Bukkit.getServer().getPluginManager().getDefaultPermissions(isOp());
+        final Set<Permission> defaults = Bukkit.getServer().getPluginManager().getDefaultPermissions(isOp());
         Bukkit.getServer().getPluginManager().subscribeToDefaultPerms(isOp(), parent);
 
-        for (Permission perm : defaults) {
-            String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+        for (final Permission perm : defaults) {
+            final String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
             permissions.put(name, new PermissionAttachmentInfo(parent, name, null, true));
             Bukkit.getServer().getPluginManager().subscribeToPermission(name, parent);
             calculateChildPermissions(perm.getChildren(), false, null);
         }
 
-        for (PermissionAttachment attachment : attachments) {
+        for (final PermissionAttachment attachment : attachments) {
             calculateChildPermissions(attachment.getPermissions(), false, attachment);
         }
     }
 
     public synchronized void clearPermissions() {
-        Set<String> perms = permissions.keySet();
+        final Set<String> perms = permissions.keySet();
 
-        for (String name : perms) {
+        for (final String name : perms) {
             Bukkit.getServer().getPluginManager().unsubscribeFromPermission(name, parent);
         }
 
@@ -174,13 +174,13 @@ public class PermissibleBase implements Permissible {
         permissions.clear();
     }
 
-    private void calculateChildPermissions(@NotNull Map<String, Boolean> children, boolean invert, @Nullable PermissionAttachment attachment) {
-        for (Map.Entry<String, Boolean> entry : children.entrySet()) {
-            String name = entry.getKey();
+    private void calculateChildPermissions(@NotNull final Map<String, Boolean> children, final boolean invert, @Nullable final PermissionAttachment attachment) {
+        for (final Map.Entry<String, Boolean> entry : children.entrySet()) {
+            final String name = entry.getKey();
 
-            Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
-            boolean value = entry.getValue() ^ invert;
-            String lname = name.toLowerCase(java.util.Locale.ENGLISH);
+            final Permission perm = Bukkit.getServer().getPluginManager().getPermission(name);
+            final boolean value = entry.getValue() ^ invert;
+            final String lname = name.toLowerCase(java.util.Locale.ENGLISH);
 
             permissions.put(lname, new PermissionAttachmentInfo(parent, lname, attachment, value));
             Bukkit.getServer().getPluginManager().subscribeToPermission(name, parent);
@@ -193,12 +193,12 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @Nullable
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) { // Paper
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin, @NotNull final String name, final boolean value, final int ticks) { // Paper
 	    if (!plugin.isEnabled()) {
 	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
 	    }
 
-        PermissionAttachment result = addAttachment(plugin, ticks);
+        final PermissionAttachment result = addAttachment(plugin, ticks);
 
         if (result != null) {
             result.setPermission(name, value);
@@ -209,12 +209,12 @@ public class PermissibleBase implements Permissible {
 
     @Override
     @Nullable
-    public synchronized PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) { // Paper - synchronized
+    public synchronized PermissionAttachment addAttachment(@NotNull final Plugin plugin, final int ticks) { // Paper - synchronized
 	    if (!plugin.isEnabled()) {
 	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
 	    }
 
-        PermissionAttachment result = addAttachment(plugin);
+        final PermissionAttachment result = addAttachment(plugin);
 
         if (Bukkit.getServer().getScheduler().scheduleSyncDelayedTask(plugin, new RemoveAttachmentRunnable(result), ticks) == -1) {
             Bukkit.getServer().getLogger().log(Level.WARNING, "Could not add PermissionAttachment to " + parent + " for plugin " + plugin.getDescription().getFullName() + ": Scheduler returned -1");
@@ -234,7 +234,7 @@ public class PermissibleBase implements Permissible {
     private static class RemoveAttachmentRunnable implements Runnable {
         private final PermissionAttachment attachment;
 
-        public RemoveAttachmentRunnable(@NotNull PermissionAttachment attachment) {
+        public RemoveAttachmentRunnable(@NotNull final PermissionAttachment attachment) {
             this.attachment = attachment;
         }
 
diff --git a/src/main/java/org/bukkit/permissions/Permission.java b/src/main/java/org/bukkit/permissions/Permission.java
index 367ffcb728afc10ccdb20c900d93a273b6c7474c..e2bc9e39a25a9ce73f20a2b04cc61fb9b5b6d43d 100644
--- a/src/main/java/org/bukkit/permissions/Permission.java
+++ b/src/main/java/org/bukkit/permissions/Permission.java
@@ -20,35 +20,35 @@ public class Permission {
     private PermissionDefault defaultValue = DEFAULT_PERMISSION;
     private String description;
 
-    public Permission(@NotNull String name) {
+    public Permission(@NotNull final String name) {
         this(name, null, null, null);
     }
 
-    public Permission(@NotNull String name, @Nullable String description) {
+    public Permission(@NotNull final String name, @Nullable final String description) {
         this(name, description, null, null);
     }
 
-    public Permission(@NotNull String name, @Nullable PermissionDefault defaultValue) {
+    public Permission(@NotNull final String name, @Nullable final PermissionDefault defaultValue) {
         this(name, null, defaultValue, null);
     }
 
-    public Permission(@NotNull String name, @Nullable String description, @Nullable PermissionDefault defaultValue) {
+    public Permission(@NotNull final String name, @Nullable final String description, @Nullable final PermissionDefault defaultValue) {
         this(name, description, defaultValue, null);
     }
 
-    public Permission(@NotNull String name, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final Map<String, Boolean> children) {
         this(name, null, null, children);
     }
 
-    public Permission(@NotNull String name, @Nullable String description, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final String description, @Nullable final Map<String, Boolean> children) {
         this(name, description, null, children);
     }
 
-    public Permission(@NotNull String name, @Nullable PermissionDefault defaultValue, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final PermissionDefault defaultValue, @Nullable final Map<String, Boolean> children) {
         this(name, null, defaultValue, children);
     }
 
-    public Permission(@NotNull String name, @Nullable String description, @Nullable PermissionDefault defaultValue, @Nullable Map<String, Boolean> children) {
+    public Permission(@NotNull final String name, @Nullable final String description, @Nullable final PermissionDefault defaultValue, @Nullable final Map<String, Boolean> children) {
         Validate.notNull(name, "Name cannot be null");
         this.name = name;
         this.description = (description == null) ? "" : description;
@@ -107,7 +107,7 @@ public class Permission {
      *
      * @param value The new default to set
      */
-    public void setDefault(@NotNull PermissionDefault value) {
+    public void setDefault(@NotNull final PermissionDefault value) {
         if (defaultValue == null) {
             throw new IllegalArgumentException("Default value cannot be null");
         }
@@ -134,7 +134,7 @@ public class Permission {
      *
      * @param value The new description to set
      */
-    public void setDescription(@Nullable String value) {
+    public void setDescription(@Nullable final String value) {
         description = Objects.requireNonNullElse(value, "");
     }
 
@@ -158,11 +158,11 @@ public class Permission {
      * automatically called after modifying the default value
      */
     public void recalculatePermissibles() {
-        Set<Permissible> perms = getPermissibles();
+        final Set<Permissible> perms = getPermissibles();
 
         Bukkit.getServer().getPluginManager().recalculatePermissionDefaults(this);
 
-        for (Permissible p : perms) {
+        for (final Permissible p : perms) {
             p.recalculatePermissions();
         }
     }
@@ -178,9 +178,9 @@ public class Permission {
      * @return Parent permission it created or loaded
      */
     @NotNull
-    public Permission addParent(@NotNull String name, boolean value) {
-        PluginManager pm = Bukkit.getServer().getPluginManager();
-        String lname = name.toLowerCase(java.util.Locale.ENGLISH);
+    public Permission addParent(@NotNull final String name, final boolean value) {
+        final PluginManager pm = Bukkit.getServer().getPluginManager();
+        final String lname = name.toLowerCase(java.util.Locale.ENGLISH);
 
         Permission perm = pm.getPermission(lname);
 
@@ -200,7 +200,7 @@ public class Permission {
      * @param perm Parent permission to register with
      * @param value The value to set this permission to
      */
-    public void addParent(@NotNull Permission perm, boolean value) {
+    public void addParent(@NotNull final Permission perm, final boolean value) {
         perm.getChildren().put(getName(), value);
         perm.recalculatePermissibles();
     }
@@ -225,13 +225,13 @@ public class Permission {
      * @return Permission object
      */
     @NotNull
-    public static List<Permission> loadPermissions(@NotNull Map<?, ?> data, @NotNull String error, @Nullable PermissionDefault def) {
-        List<Permission> result = new ArrayList<>();
+    public static List<Permission> loadPermissions(@NotNull final Map<?, ?> data, @NotNull final String error, @Nullable final PermissionDefault def) {
+        final List<Permission> result = new ArrayList<>();
 
-        for (Map.Entry<?, ?> entry : data.entrySet()) {
+        for (final Map.Entry<?, ?> entry : data.entrySet()) {
             try {
                 result.add(Permission.loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, result));
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 Bukkit.getServer().getLogger().log(Level.SEVERE, String.format(error, entry.getKey()), ex);
             }
         }
@@ -257,7 +257,7 @@ public class Permission {
      * @return Permission object
      */
     @NotNull
-    public static Permission loadPermission(@NotNull String name, @NotNull Map<String, Object> data) {
+    public static Permission loadPermission(@NotNull final String name, @NotNull final Map<String, Object> data) {
         return loadPermission(name, data, DEFAULT_PERMISSION, null);
     }
 
@@ -281,7 +281,7 @@ public class Permission {
      * @return Permission object
      */
     @NotNull
-    public static Permission loadPermission(@NotNull String name, @NotNull Map<?, ?> data, @Nullable PermissionDefault def, @Nullable List<Permission> output) {
+    public static Permission loadPermission(@NotNull final String name, @NotNull final Map<?, ?> data, @Nullable PermissionDefault def, @Nullable final List<Permission> output) {
         Validate.notNull(name, "Name cannot be null");
         Validate.notNull(data, "Data cannot be null");
 
@@ -289,7 +289,7 @@ public class Permission {
         Map<String, Boolean> children = null;
 
         if (data.get("default") != null) {
-            PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
+            final PermissionDefault value = PermissionDefault.getByName(data.get("default").toString());
             if (value != null) {
                 def = value;
             } else {
@@ -298,10 +298,10 @@ public class Permission {
         }
 
         if (data.get("children") != null) {
-            Object childrenNode = data.get("children");
+            final Object childrenNode = data.get("children");
             if (childrenNode instanceof Iterable) {
                 children = new LinkedHashMap<>();
-                for (Object child : (Iterable<?>) childrenNode) {
+                for (final Object child : (Iterable<?>) childrenNode) {
                     if (child != null) {
                         children.put(child.toString(), Boolean.TRUE);
                     }
@@ -321,21 +321,21 @@ public class Permission {
     }
 
     @NotNull
-    private static Map<String, Boolean> extractChildren(@NotNull Map<?, ?> input, @NotNull String name, @Nullable PermissionDefault def, @Nullable List<Permission> output) {
-        Map<String, Boolean> children = new LinkedHashMap<>();
+    private static Map<String, Boolean> extractChildren(@NotNull final Map<?, ?> input, @NotNull final String name, @Nullable final PermissionDefault def, @Nullable final List<Permission> output) {
+        final Map<String, Boolean> children = new LinkedHashMap<>();
 
-        for (Map.Entry<?, ?> entry : input.entrySet()) {
+        for (final Map.Entry<?, ?> entry : input.entrySet()) {
             if ((entry.getValue() instanceof Boolean)) {
                 children.put(entry.getKey().toString(), (Boolean) entry.getValue());
             } else if ((entry.getValue() instanceof Map)) {
                 try {
-                    Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
+                    final Permission perm = loadPermission(entry.getKey().toString(), (Map<?, ?>) entry.getValue(), def, output);
                     children.put(perm.getName(), Boolean.TRUE);
 
                     if (output != null) {
                         output.add(perm);
                     }
-                } catch (Throwable ex) {
+                } catch (final Throwable ex) {
                     throw new IllegalArgumentException("Permission node '" + entry.getKey().toString() + "' in child of " + name + " is invalid", ex);
                 }
             } else {
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachment.java b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
index 688334e5e04e3d091fd00562dc5afab89d5089ad..c3e5ae4a3ba44fd382e59d897b6fb4355d52035d 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachment.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachment.java
@@ -16,7 +16,7 @@ public class PermissionAttachment {
     private final Permissible permissible;
     private final Plugin plugin;
 
-    public PermissionAttachment(@NotNull Plugin plugin, @NotNull Permissible permissible) {
+    public PermissionAttachment(@NotNull final Plugin plugin, @NotNull final Permissible permissible) {
 	    if (!plugin.isEnabled()) {
 	        throw new IllegalArgumentException("Plugin " + plugin.getDescription().getFullName() + " is disabled");
 	    }
@@ -41,7 +41,7 @@ public class PermissionAttachment {
      *
      * @param ex Object to be called when this is removed
      */
-    public void setRemovalCallback(@Nullable PermissionRemovedExecutor ex) {
+    public void setRemovalCallback(@Nullable final PermissionRemovedExecutor ex) {
         removed = ex;
     }
 
@@ -86,7 +86,7 @@ public class PermissionAttachment {
      * @param name Name of the permission
      * @param value New value of the permission
      */
-    public void setPermission(@NotNull String name, boolean value) {
+    public void setPermission(@NotNull final String name, final boolean value) {
         permissions.put(name.toLowerCase(java.util.Locale.ENGLISH), value);
         permissible.recalculatePermissions();
     }
@@ -97,7 +97,7 @@ public class PermissionAttachment {
      * @param perm Permission to set
      * @param value New value of the permission
      */
-    public void setPermission(@NotNull Permission perm, boolean value) {
+    public void setPermission(@NotNull final Permission perm, final boolean value) {
         setPermission(perm.getName(), value);
     }
 
@@ -109,7 +109,7 @@ public class PermissionAttachment {
      *
      * @param name Name of the permission to remove
      */
-    public void unsetPermission(@NotNull String name) {
+    public void unsetPermission(@NotNull final String name) {
         permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));
         permissible.recalculatePermissions();
     }
@@ -122,7 +122,7 @@ public class PermissionAttachment {
      *
      * @param perm Permission to remove
      */
-    public void unsetPermission(@NotNull Permission perm) {
+    public void unsetPermission(@NotNull final Permission perm) {
         unsetPermission(perm.getName());
     }
 
@@ -136,7 +136,7 @@ public class PermissionAttachment {
         try {
             permissible.removeAttachment(this);
             return true;
-        } catch (IllegalArgumentException ex) {
+        } catch (final IllegalArgumentException ex) {
             return false;
         }
     }
diff --git a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
index 7c034af37709b037b350e43acb86be0b0f954b3f..07a9bf4a7082244e323e51a7a0bbd85ff4a5346d 100644
--- a/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
+++ b/src/main/java/org/bukkit/permissions/PermissionAttachmentInfo.java
@@ -13,7 +13,7 @@ public class PermissionAttachmentInfo {
     private final PermissionAttachment attachment;
     private final boolean value;
 
-    public PermissionAttachmentInfo(@NotNull Permissible permissible, @NotNull String permission, @Nullable PermissionAttachment attachment, boolean value) {
+    public PermissionAttachmentInfo(@NotNull final Permissible permissible, @NotNull final String permission, @Nullable final PermissionAttachment attachment, final boolean value) {
 
 	    this.permissible = permissible;
         this.permission = permission;
diff --git a/src/main/java/org/bukkit/permissions/PermissionDefault.java b/src/main/java/org/bukkit/permissions/PermissionDefault.java
index d4b3d9818c7158ad63b384af94f920956f7f8f72..4da899e9c939368c6a5fa45566ab8ace9611c5db 100644
--- a/src/main/java/org/bukkit/permissions/PermissionDefault.java
+++ b/src/main/java/org/bukkit/permissions/PermissionDefault.java
@@ -1,7 +1,10 @@
 package org.bukkit.permissions;
 
 import java.util.HashMap;
+import java.util.Locale;
 import java.util.Map;
+import java.util.regex.Pattern;
+
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -14,10 +17,11 @@ public enum PermissionDefault {
     OP("op", "isop", "operator", "isoperator", "admin", "isadmin"),
     NOT_OP("!op", "notop", "!operator", "notoperator", "!admin", "notadmin");
 
+    private static final Pattern NOT_ALPHABET_NOR_EXCLAMATION_REGEX = Pattern.compile("[^a-z!]");
     private final String[] names;
     private static final Map<String, PermissionDefault> lookup = new HashMap<>();
 
-    PermissionDefault(/*@NotNull*/ String... names) {
+    PermissionDefault(/*@NotNull*/ final String... names) {
         this.names = names;
     }
 
@@ -28,7 +32,7 @@ public enum PermissionDefault {
      * @param op If the target is op
      * @return True if the default should be true, or false
      */
-    public boolean getValue(boolean op) {
+    public boolean getValue(final boolean op) {
         return switch (this) {
             case TRUE -> true;
             case FALSE -> false;
@@ -44,8 +48,8 @@ public enum PermissionDefault {
      * @return Specified value, or null if not found
      */
     @Nullable
-    public static PermissionDefault getByName(@NotNull String name) {
-        return lookup.get(name.toLowerCase(java.util.Locale.ENGLISH).replaceAll("[^a-z!]", ""));
+    public static PermissionDefault getByName(@NotNull final String name) {
+        return lookup.get(NOT_ALPHABET_NOR_EXCLAMATION_REGEX.matcher(name.toLowerCase(Locale.ENGLISH)).replaceAll(""));
     }
 
     @Override
@@ -54,8 +58,8 @@ public enum PermissionDefault {
     }
 
     static {
-        for (PermissionDefault value : values()) {
-            for (String name : value.names) {
+        for (final PermissionDefault value : values()) {
+            for (final String name : value.names) {
                 lookup.put(name, value);
             }
         }
diff --git a/src/main/java/org/bukkit/persistence/PersistentDataType.java b/src/main/java/org/bukkit/persistence/PersistentDataType.java
index 0af00a2485cbb3fccd689dea56f0a705d0034782..0caaadabb831caeadba0388ae88815d02dddf80b 100644
--- a/src/main/java/org/bukkit/persistence/PersistentDataType.java
+++ b/src/main/java/org/bukkit/persistence/PersistentDataType.java
@@ -127,7 +127,7 @@ public interface PersistentDataType<T, Z> {
 
         private final Class<T> primitiveType;
 
-        PrimitivePersistentDataType(@NotNull Class<T> primitiveType) {
+        PrimitivePersistentDataType(@NotNull final Class<T> primitiveType) {
             this.primitiveType = primitiveType;
         }
 
@@ -145,13 +145,13 @@ public interface PersistentDataType<T, Z> {
 
         @NotNull
         @Override
-        public T toPrimitive(@NotNull T complex, @NotNull PersistentDataAdapterContext context) {
+        public T toPrimitive(@NotNull final T complex, @NotNull final PersistentDataAdapterContext context) {
             return complex;
         }
 
         @NotNull
         @Override
-        public T fromPrimitive(@NotNull T primitive, @NotNull PersistentDataAdapterContext context) {
+        public T fromPrimitive(@NotNull final T primitive, @NotNull final PersistentDataAdapterContext context) {
             return primitive;
         }
     }
diff --git a/src/main/java/org/bukkit/plugin/EventExecutor.java b/src/main/java/org/bukkit/plugin/EventExecutor.java
index d9e1201734e423734b9989c4afcc59d8b878d55c..e38f3815f7b42c46b02743da418c6c8845bf70ee 100644
--- a/src/main/java/org/bukkit/plugin/EventExecutor.java
+++ b/src/main/java/org/bukkit/plugin/EventExecutor.java
@@ -29,7 +29,7 @@ public interface EventExecutor {
     ConcurrentMap<Method, Class<? extends EventExecutor>> eventExecutorMap = new ConcurrentHashMap<>() {
 	    @NotNull
 	    @Override
-	    public Class<? extends EventExecutor> computeIfAbsent(@NotNull Method key, @NotNull Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
+	    public Class<? extends EventExecutor> computeIfAbsent(@NotNull final Method key, @NotNull final Function<? super Method, ? extends Class<? extends EventExecutor>> mappingFunction) {
 		    Class<? extends EventExecutor> executorClass = get(key);
 		    if (executorClass != null)
 			    return executorClass;
@@ -46,29 +46,29 @@ public interface EventExecutor {
     };
 
     @NotNull
-    static EventExecutor create(@NotNull Method m, @NotNull Class<? extends Event> eventClass) {
+    static EventExecutor create(@NotNull final Method m, @NotNull final Class<? extends Event> eventClass) {
         Preconditions.checkNotNull(m, "Null method");
         Preconditions.checkArgument(m.getParameterCount() != 0, "Incorrect number of arguments %s", m.getParameterCount());
         Preconditions.checkArgument(m.getParameterTypes()[0] == eventClass, "First parameter %s doesn't match event class %s", m.getParameterTypes()[0], eventClass);
-        ClassDefiner definer = ClassDefiner.getInstance();
+        final ClassDefiner definer = ClassDefiner.getInstance();
         if (Modifier.isStatic(m.getModifiers())) {
             return new StaticMethodHandleEventExecutor(eventClass, m);
         } else if (definer.isBypassAccessChecks() || Modifier.isPublic(m.getDeclaringClass().getModifiers()) && Modifier.isPublic(m.getModifiers())) {
             // get the existing generated EventExecutor class for the Method or generate one
-            Class<? extends EventExecutor> executorClass = eventExecutorMap.computeIfAbsent(m, (__) -> {
-                String name = ASMEventExecutorGenerator.generateName();
-                byte[] classData = ASMEventExecutorGenerator.generateEventExecutor(m, name);
+            final Class<? extends EventExecutor> executorClass = eventExecutorMap.computeIfAbsent(m, (__) -> {
+                final String name = ASMEventExecutorGenerator.generateName();
+                final byte[] classData = ASMEventExecutorGenerator.generateEventExecutor(m, name);
                 return definer.defineClass(m.getDeclaringClass().getClassLoader(), name, classData).asSubclass(EventExecutor.class);
             });
 
             try {
-                EventExecutor asmExecutor = executorClass.newInstance();
+                final EventExecutor asmExecutor = executorClass.newInstance();
                 // Define a wrapper to conform to bukkit stupidity (passing in events that don't match and wrapper exception)
                 return (listener, event) -> {
                     if (!eventClass.isInstance(event)) return;
                     asmExecutor.execute(listener, event);
                 };
-            } catch (InstantiationException | IllegalAccessException e) {
+            } catch (final InstantiationException | IllegalAccessException e) {
                 throw new AssertionError("Unable to initialize generated event executor", e);
             }
         } else {
diff --git a/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java b/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
index b25447dcfdb0edbcd63799658df221b3a8529238..7a3d25274e98645fc24e2ce8496dd61ba3f51a38 100644
--- a/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
+++ b/src/main/java/org/bukkit/plugin/IllegalPluginAccessException.java
@@ -19,7 +19,7 @@ public class IllegalPluginAccessException extends RuntimeException {
      *
      * @param msg the detail message.
      */
-    public IllegalPluginAccessException(String msg) {
+    public IllegalPluginAccessException(final String msg) {
         super(msg);
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/PluginBase.java b/src/main/java/org/bukkit/plugin/PluginBase.java
index 94f8ceb965cecb5669a84a0ec61c0f706c2a2673..d79ace7331d78d1c0ae11de27e7346d27ae4ef47 100644
--- a/src/main/java/org/bukkit/plugin/PluginBase.java
+++ b/src/main/java/org/bukkit/plugin/PluginBase.java
@@ -15,7 +15,7 @@ public abstract class PluginBase implements Plugin {
     }
 
     @Override
-    public final boolean equals(Object obj) {
+    public final boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
index d0c9858a8697bf7a0a47aa5272e379ec7225a69b..1378f10d2bcf51f98d15353c87dc7361a660d0e7 100644
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -6,11 +6,7 @@ import com.google.common.collect.ImmutableSet;
 import java.io.InputStream;
 import java.io.Reader;
 import java.io.Writer;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 import java.util.regex.Pattern;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandExecutor;
@@ -220,6 +216,7 @@ public final class PluginDescriptionFile {
             }
         }
     }));
+    private static final Pattern NOT_WORD_REGEX = Pattern.compile("\\W");
     String rawName = null;
     private String name = null;
     private List<String> provides = ImmutableList.of();
@@ -966,11 +963,11 @@ public final class PluginDescriptionFile {
      *
      * @param writer Writer to output this file to
      */
-    public void save(@NotNull Writer writer) {
+    public void save(@NotNull final Writer writer) {
         YAML.get().dump(saveMap(), writer);
     }
 
-    private void loadMap(@NotNull Map<?, ?> map) throws InvalidDescriptionException {
+    private void loadMap(@NotNull final Map<?, ?> map) throws InvalidDescriptionException {
         try {
             name = rawName = map.get("name").toString();
 
@@ -978,9 +975,9 @@ public final class PluginDescriptionFile {
                 throw new InvalidDescriptionException("name '" + name + "' contains invalid characters.");
             }
             name = name.replace(' ', '_');
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "name is not defined");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "name is of wrong type");
         }
 
@@ -988,9 +985,9 @@ public final class PluginDescriptionFile {
 
         try {
             version = map.get("version").toString();
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "version is not defined");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "version is of wrong type");
         }
 
@@ -999,23 +996,23 @@ public final class PluginDescriptionFile {
             if (main.startsWith("org.bukkit.")) {
                 throw new InvalidDescriptionException("main may not be within the org.bukkit namespace");
             }
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "main is not defined");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "main is of wrong type");
         }
 
         if (map.get("commands") != null) {
-            ImmutableMap.Builder<String, Map<String, Object>> commandsBuilder = ImmutableMap.builder();
+            final ImmutableMap.Builder<String, Map<String, Object>> commandsBuilder = ImmutableMap.builder();
             try {
-                for (Map.Entry<?, ?> command : ((Map<?, ?>) map.get("commands")).entrySet()) {
-                    ImmutableMap.Builder<String, Object> commandBuilder = ImmutableMap.builder();
+                for (final Map.Entry<?, ?> command : ((Map<?, ?>) map.get("commands")).entrySet()) {
+                    final ImmutableMap.Builder<String, Object> commandBuilder = ImmutableMap.builder();
                     if (command.getValue() != null) {
-                        for (Map.Entry<?, ?> commandEntry : ((Map<?, ?>) command.getValue()).entrySet()) {
+                        for (final Map.Entry<?, ?> commandEntry : ((Map<?, ?>) command.getValue()).entrySet()) {
                             if (commandEntry.getValue() instanceof Iterable) {
                                 // This prevents internal alias list changes
-                                ImmutableList.Builder<Object> commandSubList = ImmutableList.builder();
-                                for (Object commandSubListItem : (Iterable<?>) commandEntry.getValue()) {
+                                final ImmutableList.Builder<Object> commandSubList = ImmutableList.builder();
+                                for (final Object commandSubListItem : (Iterable<?>) commandEntry.getValue()) {
                                     if (commandSubListItem != null) {
                                         commandSubList.add(commandSubListItem);
                                     }
@@ -1028,7 +1025,7 @@ public final class PluginDescriptionFile {
                     }
                     commandsBuilder.put(command.getKey().toString(), commandBuilder.build());
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "commands are of wrong type");
             }
             commands = commandsBuilder.build();
@@ -1052,26 +1049,26 @@ public final class PluginDescriptionFile {
 
         if (map.get("load") != null) {
             try {
-                order = PluginLoadOrder.valueOf(((String) map.get("load")).toUpperCase(java.util.Locale.ENGLISH).replaceAll("\\W", ""));
-            } catch (ClassCastException ex) {
+                order = PluginLoadOrder.valueOf(NOT_WORD_REGEX.matcher(((String) map.get("load")).toUpperCase(Locale.ENGLISH)).replaceAll(""));
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "load is of wrong type");
-            } catch (IllegalArgumentException ex) {
+            } catch (final IllegalArgumentException ex) {
                 throw new InvalidDescriptionException(ex, "load is not a valid choice");
             }
         }
 
         if (map.get("authors") != null) {
-            ImmutableList.Builder<String> authorsBuilder = ImmutableList.builder();
+            final ImmutableList.Builder<String> authorsBuilder = ImmutableList.builder();
             if (map.get("author") != null) {
                 authorsBuilder.add(map.get("author").toString());
             }
             try {
-                for (Object o : (Iterable<?>) map.get("authors")) {
+                for (final Object o : (Iterable<?>) map.get("authors")) {
                     authorsBuilder.add(o.toString());
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "authors are of wrong type");
-            } catch (NullPointerException ex) {
+            } catch (final NullPointerException ex) {
                 throw new InvalidDescriptionException(ex, "authors are improperly defined");
             }
             authors = authorsBuilder.build();
@@ -1082,12 +1079,12 @@ public final class PluginDescriptionFile {
         }
 
         if (map.get("contributors") != null) {
-            ImmutableList.Builder<String> contributorsBuilder = ImmutableList.builder();
+            final ImmutableList.Builder<String> contributorsBuilder = ImmutableList.builder();
             try {
-                for (Object o : (Iterable<?>) map.get("contributors")) {
+                for (final Object o : (Iterable<?>) map.get("contributors")) {
                     contributorsBuilder.add(o.toString());
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "contributors are of wrong type");
             }
             contributors = contributorsBuilder.build();
@@ -1098,20 +1095,20 @@ public final class PluginDescriptionFile {
         if (map.get("default-permission") != null) {
             try {
                 defaultPerm = PermissionDefault.getByName(map.get("default-permission").toString());
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "default-permission is of wrong type");
-            } catch (IllegalArgumentException ex) {
+            } catch (final IllegalArgumentException ex) {
                 throw new InvalidDescriptionException(ex, "default-permission is not a valid choice");
             }
         }
 
         if (map.get("awareness") instanceof Iterable) {
-            Set<PluginAwareness> awareness = new HashSet<>();
+            final Set<PluginAwareness> awareness = new HashSet<>();
             try {
-                for (Object o : (Iterable<?>) map.get("awareness")) {
+                for (final Object o : (Iterable<?>) map.get("awareness")) {
                     awareness.add((PluginAwareness) o);
                 }
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidDescriptionException(ex, "awareness has wrong type");
             }
             this.awareness = ImmutableSet.copyOf(awareness);
@@ -1123,7 +1120,7 @@ public final class PluginDescriptionFile {
 
         try {
             lazyPermissions = (Map<?, ?>) map.get("permissions");
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, "permissions are of the wrong type");
         }
 
@@ -1144,9 +1141,9 @@ public final class PluginDescriptionFile {
             for (final Object entry : (Iterable<?>) value) {
                 builder.add(entry.toString().replace(' ', '_'));
             }
-        } catch (ClassCastException ex) {
+        } catch (final ClassCastException ex) {
             throw new InvalidDescriptionException(ex, key + " is of wrong type");
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             throw new InvalidDescriptionException(ex, "invalid " + key + " format");
         }
         return builder.build();
@@ -1154,7 +1151,7 @@ public final class PluginDescriptionFile {
 
     @NotNull
     private Map<String, Object> saveMap() {
-        Map<String, Object> map = new HashMap<>();
+        final Map<String, Object> map = new HashMap<>();
 
         map.put("name", name);
         if (provides != null) {
@@ -1207,7 +1204,7 @@ public final class PluginDescriptionFile {
     }
 
     @NotNull
-    private Map<?, ?> asMap(@NotNull Object object) throws InvalidDescriptionException {
+    private Map<?, ?> asMap(@NotNull final Object object) throws InvalidDescriptionException {
         if (object instanceof Map) {
             return (Map<?, ?>) object;
         }
diff --git a/src/main/java/org/bukkit/plugin/PluginLoader.java b/src/main/java/org/bukkit/plugin/PluginLoader.java
index 5744a75d33ae6057a16fe37062ffdae6716bb144..c3e75a95d2707654bec3ff8d63438f1c7e773afb 100644
--- a/src/main/java/org/bukkit/plugin/PluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/PluginLoader.java
@@ -83,7 +83,7 @@ public interface PluginLoader {
      * @param closeClassloader if the classloader for the Plugin should be closed
      */
     // provide default to allow other PluginLoader implementations to work
-    default void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader) {
+    default void disablePlugin(@NotNull final Plugin plugin, final boolean closeClassloader) {
         disablePlugin(plugin);
     }
     // Paper end - close Classloader on disable
diff --git a/src/main/java/org/bukkit/plugin/PluginLogger.java b/src/main/java/org/bukkit/plugin/PluginLogger.java
index 1e0eed8dcb9cce410aad02472e5f1adfa70f6586..07c7955736c6ca50ed291d197049eaa4680ebd9c 100644
--- a/src/main/java/org/bukkit/plugin/PluginLogger.java
+++ b/src/main/java/org/bukkit/plugin/PluginLogger.java
@@ -20,16 +20,16 @@ public class PluginLogger extends Logger {
      *
      * @param context A reference to the plugin
      */
-    public PluginLogger(@NotNull Plugin context) {
+    public PluginLogger(@NotNull final Plugin context) {
         super(context.getClass().getCanonicalName(), null);
-        String prefix = context.getDescription().getPrefix();
+        final String prefix = context.getDescription().getPrefix();
         pluginName = prefix != null ? "[" + prefix + "] " : "[" + context.getDescription().getName() + "] ";
         setParent(context.getServer().getLogger());
         setLevel(Level.ALL);
     }
 
     @Override
-    public void log(@NotNull LogRecord logRecord) {
+    public void log(@NotNull final LogRecord logRecord) {
         logRecord.setMessage(pluginName + logRecord.getMessage());
         super.log(logRecord);
     }
diff --git a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
index e92458d4f3c9abe9dc55c693f03216f880284db1..a4863ca2ee6f852ebb3f7369d71fc61060c81b23 100644
--- a/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
+++ b/src/main/java/org/bukkit/plugin/RegisteredServiceProvider.java
@@ -14,7 +14,7 @@ public class RegisteredServiceProvider<T> implements Comparable<RegisteredServic
     private final T provider;
     private final ServicePriority priority;
 
-    public RegisteredServiceProvider(@NotNull Class<T> service, @NotNull T provider, @NotNull ServicePriority priority, @NotNull Plugin plugin) {
+    public RegisteredServiceProvider(@NotNull final Class<T> service, @NotNull final T provider, @NotNull final ServicePriority priority, @NotNull final Plugin plugin) {
         this.service = service;
         this.plugin = plugin;
         this.provider = provider;
@@ -42,7 +42,7 @@ public class RegisteredServiceProvider<T> implements Comparable<RegisteredServic
     }
 
     @Override
-    public int compareTo(@NotNull RegisteredServiceProvider<?> other) {
+    public int compareTo(@NotNull final RegisteredServiceProvider<?> other) {
         if (priority.ordinal() == other.getPriority().ordinal()) {
             return 0;
         } else {
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
index 1f67653de25671229d792f7acad802ac45fb6e2f..2872929b91bb379e601b882754febe8b0995bd7a 100644
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -61,7 +61,7 @@ public final class SimplePluginManager implements PluginManager {
     private final Map<Boolean, Map<Permissible, Boolean>> defSubs = new HashMap<>();
     private final boolean useTimings = false;
 
-    public SimplePluginManager(@NotNull Server instance, @NotNull SimpleCommandMap commandMap) {
+    public SimplePluginManager(@NotNull final Server instance, @NotNull final SimpleCommandMap commandMap) {
         server = instance;
         this.commandMap = commandMap;
 
@@ -77,30 +77,30 @@ public final class SimplePluginManager implements PluginManager {
      *     valid PluginLoader
      */
     @Override
-    public void registerInterface(@NotNull Class<? extends PluginLoader> loader) throws IllegalArgumentException {
-        PluginLoader instance;
+    public void registerInterface(@NotNull final Class<? extends PluginLoader> loader) throws IllegalArgumentException {
+        final PluginLoader instance;
 
         if (PluginLoader.class.isAssignableFrom(loader)) {
-            Constructor<? extends PluginLoader> constructor;
+            final Constructor<? extends PluginLoader> constructor;
 
             try {
                 constructor = loader.getConstructor(Server.class);
                 instance = constructor.newInstance(server);
-            } catch (NoSuchMethodException ex) {
-                String className = loader.getName();
+            } catch (final NoSuchMethodException ex) {
+                final String className = loader.getName();
 
                 throw new IllegalArgumentException(String.format("Class %s does not have a public %s(Server) constructor", className, className), ex);
-            } catch (Exception ex) {
+            } catch (final Exception ex) {
                 throw new IllegalArgumentException(String.format("Unexpected exception %s while attempting to construct a new instance of %s", ex.getClass().getName(), loader.getName()), ex);
             }
         } else {
             throw new IllegalArgumentException(String.format("Class %s does not implement interface PluginLoader", loader.getName()));
         }
 
-        Pattern[] patterns = instance.getPluginFileFilters();
+        final Pattern[] patterns = instance.getPluginFileFilters();
 
         synchronized (this) {
-            for (Pattern pattern : patterns) {
+            for (final Pattern pattern : patterns) {
                 fileAssociations.put(pattern, instance);
             }
         }
@@ -114,30 +114,29 @@ public final class SimplePluginManager implements PluginManager {
      */
     @Override
     @NotNull
-    public Plugin[] loadPlugins(@NotNull File directory) {
+    public Plugin[] loadPlugins(@NotNull final File directory) {
         Validate.notNull(directory, "Directory cannot be null");
         Validate.isTrue(directory.isDirectory(), "Directory must be a directory");
 
-        List<Plugin> result = new ArrayList<>();
-        Set<Pattern> filters = fileAssociations.keySet();
+        final List<Plugin> result = new ArrayList<>();
 
-        if (!(server.getUpdateFolder().equals(""))) {
+        if (!(server.getUpdateFolder().isEmpty())) {
             updateDirectory = new File(directory, server.getUpdateFolder());
         }
 
-        Map<String, File> plugins = new HashMap<>();
-        Set<String> loadedPlugins = new HashSet<>();
-        Map<String, String> pluginsProvided = new HashMap<>();
-        Map<String, Collection<String>> dependencies = new HashMap<>();
-        Map<String, Collection<String>> softDependencies = new HashMap<>();
+        final Map<String, File> plugins = new HashMap<>();
+        final Set<String> loadedPlugins = new HashSet<>();
+        final Map<String, String> pluginsProvided = new HashMap<>();
+        final Map<String, Collection<String>> dependencies = new HashMap<>();
+        final Map<String, Collection<String>> softDependencies = new HashMap<>();
 
         // This is where it figures out all possible plugins
-        for (File file : directory.listFiles()) {
+        for (final File file : directory.listFiles()) {
             PluginLoader loader = null;
-            for (Pattern filter : filters) {
-                Matcher match = filter.matcher(file.getName());
+            for (final Map.Entry<Pattern, PluginLoader> entry : fileAssociations.entrySet()) {
+                final Matcher match = entry.getKey().matcher(file.getName());
                 if (match.find()) {
-                    loader = fileAssociations.get(filter);
+                    loader = entry.getValue();
                 }
             }
 
@@ -146,7 +145,7 @@ public final class SimplePluginManager implements PluginManager {
             PluginDescriptionFile description = null;
             try {
                 description = loader.getPluginDescription(file);
-                String name = description.getName();
+                final String name = description.getName();
                 if (name.equalsIgnoreCase("bukkit") || name.equalsIgnoreCase("minecraft") || name.equalsIgnoreCase("mojang")) {
                     server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': Restricted Name");
                     continue;
@@ -154,12 +153,12 @@ public final class SimplePluginManager implements PluginManager {
                     server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': uses the space-character (0x20) in its name");
                     continue;
                 }
-            } catch (InvalidDescriptionException ex) {
+            } catch (final InvalidDescriptionException ex) {
                 server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
                 continue;
             }
 
-            File replacedFile = plugins.put(description.getName(), file);
+            final File replacedFile = plugins.put(description.getName(), file);
             if (replacedFile != null) {
                 server.getLogger().severe(String.format(
                     "Ambiguous plugin name `%s' for files `%s' and `%s' in `%s'",
@@ -170,7 +169,7 @@ public final class SimplePluginManager implements PluginManager {
                 ));
             }
 
-            String removedProvided = pluginsProvided.remove(description.getName());
+            final String removedProvided = pluginsProvided.remove(description.getName());
             if (removedProvided != null) {
                 server.getLogger().warning(String.format(
                         "Ambiguous plugin name `%s'. It is also provided by `%s'",
@@ -179,8 +178,8 @@ public final class SimplePluginManager implements PluginManager {
                 ));
             }
 
-            for (String provided : description.getProvides()) {
-                File pluginFile = plugins.get(provided);
+            for (final String provided : description.getProvides()) {
+                final File pluginFile = plugins.get(provided);
                 if (pluginFile != null) {
                     server.getLogger().warning(String.format(
                             "`%s provides `%s' while this is also the name of `%s' in `%s'",
@@ -190,7 +189,7 @@ public final class SimplePluginManager implements PluginManager {
                             directory.getPath()
                     ));
                 } else {
-                    String replacedPlugin = pluginsProvided.put(provided, description.getName());
+                    final String replacedPlugin = pluginsProvided.put(provided, description.getName());
                     if (replacedPlugin != null) {
                         server.getLogger().warning(String.format(
                                 "`%s' is provided by both `%s' and `%s'",
@@ -202,7 +201,7 @@ public final class SimplePluginManager implements PluginManager {
                 }
             }
 
-            Collection<String> softDependencySet = description.getSoftDepend();
+            final Collection<String> softDependencySet = description.getSoftDepend();
             if (!softDependencySet.isEmpty()) {
                 if (softDependencies.containsKey(description.getName())) {
                     // Duplicates do not matter, they will be removed together if applicable
@@ -211,28 +210,28 @@ public final class SimplePluginManager implements PluginManager {
                     softDependencies.put(description.getName(), new LinkedList<>(softDependencySet));
                 }
 
-                for (String depend : softDependencySet) {
+                for (final String depend : softDependencySet) {
                     dependencyGraph.putEdge(description.getName(), depend);
                 }
             }
 
-            Collection<String> dependencySet = description.getDepend();
+            final Collection<String> dependencySet = description.getDepend();
             if (!dependencySet.isEmpty()) {
                 dependencies.put(description.getName(), new LinkedList<>(dependencySet));
 
-                for (String depend : dependencySet) {
+                for (final String depend : dependencySet) {
                     dependencyGraph.putEdge(description.getName(), depend);
                 }
             }
 
-            Collection<String> loadBeforeSet = description.getLoadBefore();
+            final Collection<String> loadBeforeSet = description.getLoadBefore();
             if (!loadBeforeSet.isEmpty()) {
-                for (String loadBeforeTarget : loadBeforeSet) {
+                for (final String loadBeforeTarget : loadBeforeSet) {
                     if (softDependencies.containsKey(loadBeforeTarget)) {
                         softDependencies.get(loadBeforeTarget).add(description.getName());
                     } else {
                         // softDependencies is never iterated, so 'ghost' plugins aren't an issue
-                        Collection<String> shortSoftDependency = new LinkedList<>();
+                        final Collection<String> shortSoftDependency = new LinkedList<>();
                         shortSoftDependency.add(description.getName());
                         softDependencies.put(loadBeforeTarget, shortSoftDependency);
                     }
@@ -247,14 +246,14 @@ public final class SimplePluginManager implements PluginManager {
             Iterator<Map.Entry<String, File>> pluginIterator = plugins.entrySet().iterator();
 
             while (pluginIterator.hasNext()) {
-                Map.Entry<String, File> entry = pluginIterator.next();
-                String plugin = entry.getKey();
+                final Map.Entry<String, File> entry = pluginIterator.next();
+                final String plugin = entry.getKey();
 
                 if (dependencies.containsKey(plugin)) {
-                    Iterator<String> dependencyIterator = dependencies.get(plugin).iterator();
+                    final Iterator<String> dependencyIterator = dependencies.get(plugin).iterator();
 
                     while (dependencyIterator.hasNext()) {
-                        String dependency = dependencyIterator.next();
+                        final String dependency = dependencyIterator.next();
 
                         // Dependency loaded
                         if (loadedPlugins.contains(dependency)) {
@@ -290,12 +289,12 @@ public final class SimplePluginManager implements PluginManager {
                 }
                 if (!(dependencies.containsKey(plugin) || softDependencies.containsKey(plugin)) && plugins.containsKey(plugin)) {
                     // We're clear to load, no more soft or hard dependencies left
-                    File file = plugins.get(plugin);
+                    final File file = plugins.get(plugin);
                     pluginIterator.remove();
                     missingDependency = false;
 
                     try {
-                        Plugin loadedPlugin = loadPlugin(file);
+                        final Plugin loadedPlugin = loadPlugin(file);
                         if (loadedPlugin != null) {
                             result.add(loadedPlugin);
                             loadedPlugins.add(loadedPlugin.getName());
@@ -303,7 +302,7 @@ public final class SimplePluginManager implements PluginManager {
                         } else {
                             server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'");
                         }
-                    } catch (InvalidPluginException ex) {
+                    } catch (final InvalidPluginException ex) {
                         server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
                     }
                 }
@@ -315,17 +314,17 @@ public final class SimplePluginManager implements PluginManager {
                 pluginIterator = plugins.entrySet().iterator();
 
                 while (pluginIterator.hasNext()) {
-                    Map.Entry<String, File> entry = pluginIterator.next();
-                    String plugin = entry.getKey();
+                    final Map.Entry<String, File> entry = pluginIterator.next();
+                    final String plugin = entry.getKey();
 
                     if (!dependencies.containsKey(plugin)) {
                         softDependencies.remove(plugin);
                         missingDependency = false;
-                        File file = entry.getValue();
+                        final File file = entry.getValue();
                         pluginIterator.remove();
 
                         try {
-                            Plugin loadedPlugin = loadPlugin(file);
+                            final Plugin loadedPlugin = loadPlugin(file);
                             if (loadedPlugin != null) {
                                 result.add(loadedPlugin);
                                 loadedPlugins.add(loadedPlugin.getName());
@@ -334,7 +333,7 @@ public final class SimplePluginManager implements PluginManager {
                                 server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'");
                             }
                             break;
-                        } catch (InvalidPluginException ex) {
+                        } catch (final InvalidPluginException ex) {
                             server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "'", ex);
                         }
                     }
@@ -343,10 +342,10 @@ public final class SimplePluginManager implements PluginManager {
                 if (missingDependency) {
                     softDependencies.clear();
                     dependencies.clear();
-                    Iterator<File> failedPluginIterator = plugins.values().iterator();
+                    final Iterator<File> failedPluginIterator = plugins.values().iterator();
 
                     while (failedPluginIterator.hasNext()) {
-                        File file = failedPluginIterator.next();
+                        final File file = failedPluginIterator.next();
                         failedPluginIterator.remove();
                         server.getLogger().log(Level.SEVERE, "Could not load '" + file.getPath() + "' in folder '" + directory.getPath() + "': circular dependency detected");
                     }
@@ -371,20 +370,19 @@ public final class SimplePluginManager implements PluginManager {
      */
     @Override
     @Nullable
-    public synchronized Plugin loadPlugin(@NotNull File file) throws InvalidPluginException, UnknownDependencyException {
+    public synchronized Plugin loadPlugin(@NotNull final File file) throws InvalidPluginException, UnknownDependencyException {
         Validate.notNull(file, "File cannot be null");
 
         checkUpdate(file);
 
-        Set<Pattern> filters = fileAssociations.keySet();
         Plugin result = null;
 
-        for (Pattern filter : filters) {
-            String name = file.getName();
-            Matcher match = filter.matcher(name);
+        for (final Map.Entry<Pattern, PluginLoader> entry : fileAssociations.entrySet()) {
+            final String name = file.getName();
+            final Matcher match = entry.getKey().matcher(name);
 
             if (match.find()) {
-                PluginLoader loader = fileAssociations.get(filter);
+                final PluginLoader loader = entry.getValue();
 
                 result = loader.loadPlugin(file);
             }
@@ -393,7 +391,7 @@ public final class SimplePluginManager implements PluginManager {
         if (result != null) {
             plugins.add(result);
             lookupNames.put(result.getDescription().getName().toLowerCase(java.util.Locale.ENGLISH), result); // Paper
-            for (String provided : result.getDescription().getProvides()) {
+            for (final String provided : result.getDescription().getProvides()) {
                 lookupNames.putIfAbsent(provided.toLowerCase(java.util.Locale.ENGLISH), result); // Paper
             }
         }
@@ -401,12 +399,12 @@ public final class SimplePluginManager implements PluginManager {
         return result;
     }
 
-    private void checkUpdate(@NotNull File file) {
+    private void checkUpdate(@NotNull final File file) {
         if (updateDirectory == null || !updateDirectory.isDirectory()) {
             return;
         }
 
-        File updateFile = new File(updateDirectory, file.getName());
+        final File updateFile = new File(updateDirectory, file.getName());
         if (updateFile.isFile() && FileUtil.copy(updateFile, file)) {
             updateFile.delete();
         }
@@ -422,7 +420,7 @@ public final class SimplePluginManager implements PluginManager {
      */
     @Override
     @Nullable
-    public synchronized Plugin getPlugin(@NotNull String name) {
+    public synchronized Plugin getPlugin(@NotNull final String name) {
         return lookupNames.get(name.replace(' ', '_').toLowerCase(java.util.Locale.ENGLISH)); // Paper
     }
 
@@ -441,8 +439,8 @@ public final class SimplePluginManager implements PluginManager {
      * @return true if the plugin is enabled, otherwise false
      */
     @Override
-    public boolean isPluginEnabled(@NotNull String name) {
-        Plugin plugin = getPlugin(name);
+    public boolean isPluginEnabled(@NotNull final String name) {
+        final Plugin plugin = getPlugin(name);
 
         return isPluginEnabled(plugin);
     }
@@ -454,7 +452,7 @@ public final class SimplePluginManager implements PluginManager {
      * @return true if the plugin is enabled, otherwise false
      */
     @Override
-    public synchronized boolean isPluginEnabled(@Nullable Plugin plugin) { // Paper - synchronize
+    public synchronized boolean isPluginEnabled(@Nullable final Plugin plugin) { // Paper - synchronize
         if ((plugin != null) && (plugins.contains(plugin))) {
             return plugin.isEnabled();
         } else {
@@ -465,7 +463,7 @@ public final class SimplePluginManager implements PluginManager {
     @Override
     public synchronized void enablePlugin(@NotNull final Plugin plugin) { // Paper - synchronize
         if (!plugin.isEnabled()) {
-            List<Command> pluginCommands = PluginCommandYamlParser.parse(plugin);
+            final List<Command> pluginCommands = PluginCommandYamlParser.parse(plugin);
 
             if (!pluginCommands.isEmpty()) {
                 commandMap.registerAll(plugin.getDescription().getName(), pluginCommands);
@@ -473,7 +471,7 @@ public final class SimplePluginManager implements PluginManager {
 
             try {
                 plugin.getPluginLoader().enablePlugin(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while enabling "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin);
             }
@@ -487,9 +485,9 @@ public final class SimplePluginManager implements PluginManager {
         disablePlugins(false);
     }
 
-    public void disablePlugins(boolean closeClassloaders) {
+    public void disablePlugins(final boolean closeClassloaders) {
         // Paper end - close Classloader on disable
-        Plugin[] plugins = getPlugins();
+        final Plugin[] plugins = getPlugins();
         for (int i = plugins.length - 1; i >= 0; i--) {
             disablePlugin(plugins[i], closeClassloaders); // Paper - close Classloader on disable
         }
@@ -501,33 +499,33 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Override
-    public synchronized void disablePlugin(@NotNull final Plugin plugin, boolean closeClassloader) { // Paper - synchronize
+    public synchronized void disablePlugin(@NotNull final Plugin plugin, final boolean closeClassloader) { // Paper - synchronize
         // Paper end - close Classloader on disable
         if (plugin.isEnabled()) {
             try {
                 plugin.getPluginLoader().disablePlugin(plugin, closeClassloader); // Paper - close Classloader on disable
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while disabling "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
                 server.getScheduler().cancelTasks(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while cancelling tasks for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
                 server.getServicesManager().unregisterAll(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while unregistering services for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
                 HandlerList.unregisterAll(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while unregistering events for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
@@ -535,23 +533,23 @@ public final class SimplePluginManager implements PluginManager {
             try {
                 server.getMessenger().unregisterIncomingPluginChannel(plugin);
                 server.getMessenger().unregisterOutgoingPluginChannel(plugin);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 handlePluginException("Error occurred (in the plugin loader) while unregistering plugin channels for "
                         + plugin.getDescription().getFullName() + " (Is it up to date?)", ex, plugin); // Paper
             }
 
             try {
-                for (World world : server.getWorlds()) {
+                for (final World world : server.getWorlds()) {
                     world.removePluginChunkTickets(plugin);
                 }
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred (in the plugin loader) while removing chunk tickets for " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
         }
     }
 
     // Paper start
-    private void handlePluginException(String msg, Throwable ex, Plugin plugin) {
+    private void handlePluginException(final String msg, final Throwable ex, final Plugin plugin) {
         server.getLogger().log(Level.SEVERE, msg, ex);
         callEvent(new ServerExceptionEvent(new ServerPluginEnableDisableException(msg, ex, plugin)));
     }
@@ -571,7 +569,7 @@ public final class SimplePluginManager implements PluginManager {
             defaultPerms.get(false).clear();
         }
     }
-    private void fireEvent(Event event) { callEvent(event); } // Paper - support old method incase plugin uses reflection
+    private void fireEvent(final Event event) { callEvent(event); } // Paper - support old method incase plugin uses reflection
 
     /**
      * Calls an event with the given details.
@@ -579,7 +577,7 @@ public final class SimplePluginManager implements PluginManager {
      * @param event Event details
      */
     @Override
-    public void callEvent(@NotNull Event event) {
+    public void callEvent(@NotNull final Event event) {
         // Paper - replace callEvent by merging to below method
         if (event.isAsynchronous() && server.isPrimaryThread()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
@@ -587,18 +585,18 @@ public final class SimplePluginManager implements PluginManager {
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
 
-        HandlerList handlers = event.getHandlers();
-        RegisteredListener[] listeners = handlers.getRegisteredListeners();
+        final HandlerList handlers = event.getHandlers();
+        final RegisteredListener[] listeners = handlers.getRegisteredListeners();
 
-        for (RegisteredListener registration : listeners) {
+        for (final RegisteredListener registration : listeners) {
             if (!registration.getPlugin().isEnabled()) {
                 continue;
             }
 
             try {
                 registration.callEvent(event);
-            } catch (AuthorNagException ex) {
-                Plugin plugin = registration.getPlugin();
+            } catch (final AuthorNagException ex) {
+                final Plugin plugin = registration.getPlugin();
 
                 if (plugin.isNaggable()) {
                     plugin.setNaggable(false);
@@ -610,9 +608,9 @@ public final class SimplePluginManager implements PluginManager {
                             ex.getMessage()
                             ));
                 }
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 // Paper start - error reporting
-                String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
+                final String msg = "Could not pass event " + event.getEventName() + " to " + registration.getPlugin().getDescription().getFullName();
                 server.getLogger().log(Level.SEVERE, msg, ex);
                 if (!(event instanceof ServerExceptionEvent)) { // We don't want to cause an endless event loop
                     callEvent(new ServerExceptionEvent(new ServerEventException(msg, ex, registration.getPlugin(), registration.getListener(), event)));
@@ -623,19 +621,19 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Override
-    public void registerEvents(@NotNull Listener listener, @NotNull Plugin plugin) {
+    public void registerEvents(@NotNull final Listener listener, @NotNull final Plugin plugin) {
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
         }
 
-        for (Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin).entrySet()) {
+        for (final Map.Entry<Class<? extends Event>, Set<RegisteredListener>> entry : plugin.getPluginLoader().createRegisteredListeners(listener, plugin).entrySet()) {
             getEventListeners(getRegistrationClass(entry.getKey())).registerAll(entry.getValue());
         }
 
     }
 
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin) {
+    public void registerEvent(@NotNull final Class<? extends Event> event, @NotNull final Listener listener, @NotNull final EventPriority priority, @NotNull final EventExecutor executor, @NotNull final Plugin plugin) {
         registerEvent(event, listener, priority, executor, plugin, false);
     }
 
@@ -652,7 +650,7 @@ public final class SimplePluginManager implements PluginManager {
      *     cancelled
      */
     @Override
-    public void registerEvent(@NotNull Class<? extends Event> event, @NotNull Listener listener, @NotNull EventPriority priority, @NotNull EventExecutor executor, @NotNull Plugin plugin, boolean ignoreCancelled) {
+    public void registerEvent(@NotNull final Class<? extends Event> event, @NotNull final Listener listener, @NotNull final EventPriority priority, @NotNull EventExecutor executor, @NotNull final Plugin plugin, final boolean ignoreCancelled) {
         Validate.notNull(listener, "Listener cannot be null");
         Validate.notNull(priority, "Priority cannot be null");
         Validate.notNull(executor, "Executor cannot be null");
@@ -667,46 +665,49 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @NotNull
-    private HandlerList getEventListeners(@NotNull Class<? extends Event> type) {
+    private HandlerList getEventListeners(@NotNull final Class<? extends Event> type) {
         try {
-            Method method = getRegistrationClass(type).getDeclaredMethod("getHandlerList");
+            final Method method = getRegistrationClass(type).getDeclaredMethod("getHandlerList");
             method.setAccessible(true);
             return (HandlerList) method.invoke(null);
-        } catch (Exception e) {
+        } catch (final Exception e) {
             throw new IllegalPluginAccessException(e.toString());
         }
     }
 
     @NotNull
-    private Class<? extends Event> getRegistrationClass(@NotNull Class<? extends Event> clazz) {
+    private Class<? extends Event> getRegistrationClass(@NotNull final Class<? extends Event> clazz) {
         try {
             clazz.getDeclaredMethod("getHandlerList");
             return clazz;
-        } catch (NoSuchMethodException e) {
-            if (clazz.getSuperclass() != null
-                    && !clazz.getSuperclass().equals(Event.class)
-                    && Event.class.isAssignableFrom(clazz.getSuperclass())) {
-                return getRegistrationClass(clazz.getSuperclass().asSubclass(Event.class));
-            } else {
+        } catch (final NoSuchMethodException e) {
+
+            if (
+                clazz.getSuperclass() == null ||
+                clazz.getSuperclass().equals(Event.class) ||
+                !Event.class.isAssignableFrom(clazz.getSuperclass())
+            ) {
                 throw new IllegalPluginAccessException("Unable to find handler list for event " + clazz.getName() + ". Static getHandlerList method required!");
             }
+
+            return getRegistrationClass(clazz.getSuperclass().asSubclass(Event.class));
         }
     }
 
     @Override
     @Nullable
-    public Permission getPermission(@NotNull String name) {
+    public Permission getPermission(@NotNull final String name) {
         return permissions.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
-    public void addPermission(@NotNull Permission perm) {
+    public void addPermission(@NotNull final Permission perm) {
         addPermission(perm, true);
     }
 
     @Deprecated
-    public void addPermission(@NotNull Permission perm, boolean dirty) {
-        String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
+    public void addPermission(@NotNull final Permission perm, final boolean dirty) {
+        final String name = perm.getName().toLowerCase(java.util.Locale.ENGLISH);
 
         if (permissions.containsKey(name)) {
             throw new IllegalArgumentException("The permission " + name + " is already defined!");
@@ -718,22 +719,22 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @NotNull
-    public Set<Permission> getDefaultPermissions(boolean op) {
+    public Set<Permission> getDefaultPermissions(final boolean op) {
         return ImmutableSet.copyOf(defaultPerms.get(op));
     }
 
     @Override
-    public void removePermission(@NotNull Permission perm) {
+    public void removePermission(@NotNull final Permission perm) {
         removePermission(perm.getName());
     }
 
     @Override
-    public void removePermission(@NotNull String name) {
+    public void removePermission(@NotNull final String name) {
         permissions.remove(name.toLowerCase(java.util.Locale.ENGLISH));
     }
 
     @Override
-    public void recalculatePermissionDefaults(@NotNull Permission perm) {
+    public void recalculatePermissionDefaults(@NotNull final Permission perm) {
         if (permissions.containsKey(perm.getName().toLowerCase(java.util.Locale.ENGLISH))) {
             defaultPerms.get(true).remove(perm);
             defaultPerms.get(false).remove(perm);
@@ -742,7 +743,7 @@ public final class SimplePluginManager implements PluginManager {
         }
     }
 
-    private void calculatePermissionDefault(@NotNull Permission perm, boolean dirty) {
+    private void calculatePermissionDefault(@NotNull final Permission perm, final boolean dirty) {
         if ((perm.getDefault() == PermissionDefault.OP) || (perm.getDefault() == PermissionDefault.TRUE)) {
             defaultPerms.get(true).add(perm);
             if (dirty) {
@@ -763,26 +764,26 @@ public final class SimplePluginManager implements PluginManager {
         dirtyPermissibles(false);
     }
 
-    private void dirtyPermissibles(boolean op) {
-        Set<Permissible> permissibles = getDefaultPermSubscriptions(op);
+    private void dirtyPermissibles(final boolean op) {
+        final Set<Permissible> permissibles = getDefaultPermSubscriptions(op);
 
-        for (Permissible p : permissibles) {
+        for (final Permissible p : permissibles) {
             p.recalculatePermissions();
         }
     }
 
     @Override
-    public void subscribeToPermission(@NotNull String permission, @NotNull Permissible permissible) {
-        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
-        Map<Permissible, Boolean> map = permSubs.computeIfAbsent(name, k -> new WeakHashMap<>());
+    public void subscribeToPermission(@NotNull final String permission, @NotNull final Permissible permissible) {
+        final String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        final Map<Permissible, Boolean> map = permSubs.computeIfAbsent(name, k -> new WeakHashMap<>());
 
         map.put(permissible, true);
     }
 
     @Override
-    public void unsubscribeFromPermission(@NotNull String permission, @NotNull Permissible permissible) {
-        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
-        Map<Permissible, Boolean> map = permSubs.get(name);
+    public void unsubscribeFromPermission(@NotNull final String permission, @NotNull final Permissible permissible) {
+        final String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        final Map<Permissible, Boolean> map = permSubs.get(name);
 
         if (map != null) {
             map.remove(permissible);
@@ -795,9 +796,9 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @NotNull
-    public Set<Permissible> getPermissionSubscriptions(@NotNull String permission) {
-        String name = permission.toLowerCase(java.util.Locale.ENGLISH);
-        Map<Permissible, Boolean> map = permSubs.get(name);
+    public Set<Permissible> getPermissionSubscriptions(@NotNull final String permission) {
+        final String name = permission.toLowerCase(java.util.Locale.ENGLISH);
+        final Map<Permissible, Boolean> map = permSubs.get(name);
 
         if (map == null) {
             return ImmutableSet.of();
@@ -807,15 +808,15 @@ public final class SimplePluginManager implements PluginManager {
     }
 
     @Override
-    public void subscribeToDefaultPerms(boolean op, @NotNull Permissible permissible) {
-        Map<Permissible, Boolean> map = defSubs.computeIfAbsent(op, k -> new WeakHashMap<>());
+    public void subscribeToDefaultPerms(final boolean op, @NotNull final Permissible permissible) {
+        final Map<Permissible, Boolean> map = defSubs.computeIfAbsent(op, k -> new WeakHashMap<>());
 
         map.put(permissible, true);
     }
 
     @Override
-    public void unsubscribeFromDefaultPerms(boolean op, @NotNull Permissible permissible) {
-        Map<Permissible, Boolean> map = defSubs.get(op);
+    public void unsubscribeFromDefaultPerms(final boolean op, @NotNull final Permissible permissible) {
+        final Map<Permissible, Boolean> map = defSubs.get(op);
 
         if (map != null) {
             map.remove(permissible);
@@ -828,8 +829,8 @@ public final class SimplePluginManager implements PluginManager {
 
     @Override
     @NotNull
-    public Set<Permissible> getDefaultPermSubscriptions(boolean op) {
-        Map<Permissible, Boolean> map = defSubs.get(op);
+    public Set<Permissible> getDefaultPermSubscriptions(final boolean op) {
+        final Map<Permissible, Boolean> map = defSubs.get(op);
 
         if (map == null) {
             return ImmutableSet.of();
@@ -844,7 +845,7 @@ public final class SimplePluginManager implements PluginManager {
         return new HashSet<>(permissions.values());
     }
 
-    public boolean isTransitiveDepend(@NotNull PluginDescriptionFile plugin, @NotNull PluginDescriptionFile depend) {
+    public boolean isTransitiveDepend(@NotNull final PluginDescriptionFile plugin, @NotNull final PluginDescriptionFile depend) {
         Preconditions.checkArgument(true, "plugin");
         Preconditions.checkArgument(true, "depend");
 
@@ -852,7 +853,7 @@ public final class SimplePluginManager implements PluginManager {
             if (Graphs.reachableNodes(dependencyGraph, plugin.getName()).contains(depend.getName())) {
                 return true;
             }
-            for (String provided : depend.getProvides()) {
+            for (final String provided : depend.getProvides()) {
                 if (Graphs.reachableNodes(dependencyGraph, plugin.getName()).contains(provided)) {
                     return true;
                 }
@@ -871,7 +872,7 @@ public final class SimplePluginManager implements PluginManager {
      *
      * @param use True if per event timing code should be used
      */
-    public void useTimings(boolean use) {
+    public void useTimings(final boolean use) {
         co.aikar.timings.Timings.setTimingsEnabled(use); // Paper
     }
 
diff --git a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
index 0b90a7946d5302747a1b1a73d04b92d45e9839cd..e436dd7e1fc3bcda0b86a1640b1f8f00fc0c0523 100644
--- a/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
+++ b/src/main/java/org/bukkit/plugin/SimpleServicesManager.java
@@ -36,15 +36,15 @@ public class SimpleServicesManager implements ServicesManager {
      * @param priority priority of the provider
      */
     @Override
-    public <T> void register(@NotNull Class<T> service, @NotNull T provider, @NotNull Plugin plugin, @NotNull ServicePriority priority) {
+    public <T> void register(@NotNull final Class<T> service, @NotNull final T provider, @NotNull final Plugin plugin, @NotNull final ServicePriority priority) {
         RegisteredServiceProvider<T> registeredProvider = null;
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.computeIfAbsent(service, k -> new ArrayList<>());
+            final List<RegisteredServiceProvider<?>> registered = providers.computeIfAbsent(service, k -> new ArrayList<>());
 
             registeredProvider = new RegisteredServiceProvider<>(service, provider, priority, plugin);
 
             // Insert the provider into the collection, much more efficient big O than sort
-            int position = Collections.binarySearch(registered, registeredProvider);
+            final int position = Collections.binarySearch(registered, registeredProvider);
             if (position < 0) {
                 registered.add(-(position + 1), registeredProvider);
             } else {
@@ -61,38 +61,38 @@ public class SimpleServicesManager implements ServicesManager {
      * @param plugin The plugin
      */
     @Override
-    public void unregisterAll(@NotNull Plugin plugin) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
+    public void unregisterAll(@NotNull final Plugin plugin) {
+        final ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
         synchronized (providers) {
-            Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
+            final Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
             try {
                 while (it.hasNext()) {
-                    Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
-                    Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
+                    final Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
+                    final Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
 
                     try {
                         // Removed entries that are from this plugin
 
                         while (it2.hasNext()) {
-                            RegisteredServiceProvider<?> registered = it2.next();
+                            final RegisteredServiceProvider<?> registered = it2.next();
 
                             if (registered.getPlugin().equals(plugin)) {
                                 it2.remove();
                                 unregisteredEvents.add(new ServiceUnregisterEvent(registered));
                             }
                         }
-                    } catch (NoSuchElementException e) { // Why does Java suck
+                    } catch (final NoSuchElementException e) { // Why does Java suck
                     }
 
                     // Get rid of the empty list
-                    if (entry.getValue().size() == 0) {
+                    if (entry.getValue().isEmpty()) {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException ignored) {}
+            } catch (final NoSuchElementException ignored) {}
         }
-        for (ServiceUnregisterEvent event : unregisteredEvents) {
+        for (final ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
         }
     }
@@ -104,44 +104,44 @@ public class SimpleServicesManager implements ServicesManager {
      * @param provider The service provider implementation
      */
     @Override
-    public void unregister(@NotNull Class<?> service, @NotNull Object provider) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
+    public void unregister(@NotNull final Class<?> service, @NotNull final Object provider) {
+        final ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
         synchronized (providers) {
-            Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
+            final Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
             try {
                 while (it.hasNext()) {
-                    Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
+                    final Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
 
                     // We want a particular service
                     if (entry.getKey() != service) {
                         continue;
                     }
 
-                    Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
+                    final Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
 
                     try {
                         // Removed entries that are from this plugin
 
                         while (it2.hasNext()) {
-                            RegisteredServiceProvider<?> registered = it2.next();
+                            final RegisteredServiceProvider<?> registered = it2.next();
 
                             if (registered.getProvider() == provider) {
                                 it2.remove();
                                 unregisteredEvents.add(new ServiceUnregisterEvent(registered));
                             }
                         }
-                    } catch (NoSuchElementException e) { // Why does Java suck
+                    } catch (final NoSuchElementException e) { // Why does Java suck
                     }
 
                     // Get rid of the empty list
-                    if (entry.getValue().size() == 0) {
+                    if (entry.getValue().isEmpty()) {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException ignored) {}
+            } catch (final NoSuchElementException ignored) {}
         }
-        for (ServiceUnregisterEvent event : unregisteredEvents) {
+        for (final ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
         }
     }
@@ -152,38 +152,38 @@ public class SimpleServicesManager implements ServicesManager {
      * @param provider The service provider implementation
      */
     @Override
-    public void unregister(@NotNull Object provider) {
-        ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
+    public void unregister(@NotNull final Object provider) {
+        final ArrayList<ServiceUnregisterEvent> unregisteredEvents = new ArrayList<>();
         synchronized (providers) {
-            Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
+            final Iterator<Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>>> it = providers.entrySet().iterator();
 
             try {
                 while (it.hasNext()) {
-                    Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
-                    Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
+                    final Map.Entry<Class<?>, List<RegisteredServiceProvider<?>>> entry = it.next();
+                    final Iterator<RegisteredServiceProvider<?>> it2 = entry.getValue().iterator();
 
                     try {
                         // Removed entries that are from this plugin
 
                         while (it2.hasNext()) {
-                            RegisteredServiceProvider<?> registered = it2.next();
+                            final RegisteredServiceProvider<?> registered = it2.next();
 
                             if (registered.getProvider().equals(provider)) {
                                 it2.remove();
                                 unregisteredEvents.add(new ServiceUnregisterEvent(registered));
                             }
                         }
-                    } catch (NoSuchElementException e) { // Why does Java suck
+                    } catch (final NoSuchElementException e) { // Why does Java suck
                     }
 
                     // Get rid of the empty list
-                    if (entry.getValue().size() == 0) {
+                    if (entry.getValue().isEmpty()) {
                         it.remove();
                     }
                 }
-            } catch (NoSuchElementException ignored) {}
+            } catch (final NoSuchElementException ignored) {}
         }
-        for (ServiceUnregisterEvent event : unregisteredEvents) {
+        for (final ServiceUnregisterEvent event : unregisteredEvents) {
             Bukkit.getServer().getPluginManager().callEvent(event);
         }
     }
@@ -198,9 +198,9 @@ public class SimpleServicesManager implements ServicesManager {
      */
     @Override
     @Nullable
-    public <T> T load(@NotNull Class<T> service) {
+    public <T> T load(@NotNull final Class<T> service) {
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.get(service);
+            final List<RegisteredServiceProvider<?>> registered = providers.get(service);
 
             if (registered == null) {
                 return null;
@@ -222,9 +222,9 @@ public class SimpleServicesManager implements ServicesManager {
     @Override
     @Nullable
     @SuppressWarnings("unchecked")
-    public <T> RegisteredServiceProvider<T> getRegistration(@NotNull Class<T> service) {
+    public <T> RegisteredServiceProvider<T> getRegistration(@NotNull final Class<T> service) {
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.get(service);
+            final List<RegisteredServiceProvider<?>> registered = providers.get(service);
 
             if (registered == null) {
                 return null;
@@ -243,11 +243,11 @@ public class SimpleServicesManager implements ServicesManager {
      */
     @Override
     @NotNull
-    public List<RegisteredServiceProvider<?>> getRegistrations(@NotNull Plugin plugin) {
-        ImmutableList.Builder<RegisteredServiceProvider<?>> ret = ImmutableList.builder();
+    public List<RegisteredServiceProvider<?>> getRegistrations(@NotNull final Plugin plugin) {
+        final ImmutableList.Builder<RegisteredServiceProvider<?>> ret = ImmutableList.builder();
         synchronized (providers) {
-            for (List<RegisteredServiceProvider<?>> registered : providers.values()) {
-                for (RegisteredServiceProvider<?> provider : registered) {
+            for (final List<RegisteredServiceProvider<?>> registered : providers.values()) {
+                for (final RegisteredServiceProvider<?> provider : registered) {
                     if (provider.getPlugin().equals(plugin)) {
                         ret.add(provider);
                     }
@@ -268,10 +268,10 @@ public class SimpleServicesManager implements ServicesManager {
     @Override
     @NotNull
     @SuppressWarnings("unchecked")
-    public <T> List<RegisteredServiceProvider<T>> getRegistrations(@NotNull Class<T> service) {
-        ImmutableList.Builder<RegisteredServiceProvider<T>> ret;
+    public <T> List<RegisteredServiceProvider<T>> getRegistrations(@NotNull final Class<T> service) {
+        final ImmutableList.Builder<RegisteredServiceProvider<T>> ret;
         synchronized (providers) {
-            List<RegisteredServiceProvider<?>> registered = providers.get(service);
+            final List<RegisteredServiceProvider<?>> registered = providers.get(service);
 
             if (registered == null) {
                 return ImmutableList.of();
@@ -279,7 +279,7 @@ public class SimpleServicesManager implements ServicesManager {
 
             ret = ImmutableList.builder();
 
-            for (RegisteredServiceProvider<?> provider : registered) {
+            for (final RegisteredServiceProvider<?> provider : registered) {
                 ret.add((RegisteredServiceProvider<T>) provider);
             }
 
@@ -309,7 +309,7 @@ public class SimpleServicesManager implements ServicesManager {
      * @return true if and only if there are registered providers
      */
     @Override
-    public <T> boolean isProvidedFor(@NotNull Class<T> service) {
+    public <T> boolean isProvidedFor(@NotNull final Class<T> service) {
         synchronized (providers) {
             return providers.containsKey(service);
         }
diff --git a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
index 1d76e30b82ca56bb4cf3b9a33f5a129ab829e3f0..085810a130700a58eaaca04c2768928af6caff19 100644
--- a/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
+++ b/src/main/java/org/bukkit/plugin/TimedRegisteredListener.java
@@ -21,26 +21,26 @@ public class TimedRegisteredListener extends RegisteredListener {
     }
 
     @Override
-    public void callEvent(@NotNull Event event) throws EventException {
+    public void callEvent(@NotNull final Event event) throws EventException {
         if (event.isAsynchronous()) {
             super.callEvent(event);
             return;
         }
         count++;
-        Class<? extends Event> newEventClass = event.getClass();
+        final Class<? extends Event> newEventClass = event.getClass();
         if (this.eventClass == null) {
             this.eventClass = newEventClass;
         } else if (!this.eventClass.equals(newEventClass)) {
             multiple = true;
             this.eventClass = getCommonSuperclass(newEventClass, this.eventClass).asSubclass(Event.class);
         }
-        long start = System.nanoTime();
+        final long start = System.nanoTime();
         super.callEvent(event);
         totalTime += System.nanoTime() - start;
     }
 
     @NotNull
-    private static Class<?> getCommonSuperclass(@NotNull Class<?> class1, @NotNull Class<?> class2) {
+    private static Class<?> getCommonSuperclass(@NotNull Class<?> class1, @NotNull final Class<?> class2) {
         while (!class1.isAssignableFrom(class2)) {
             class1 = class1.getSuperclass();
         }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
index 5fcca7b4be837bf08b208d788adcb929e9e1392b..cdfb0ad72b3199a69f2a72f93af6993af3bdb3e0 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPlugin.java
@@ -145,7 +145,7 @@ public abstract class JavaPlugin extends PluginBase {
      * @see ClassLoader#getResourceAsStream(String)
      */
     @Nullable
-    protected final Reader getTextResource(@NotNull String file) {
+    protected final Reader getTextResource(@NotNull final String file) {
         final InputStream in = getResource(file);
 
         return in == null ? null : new InputStreamReader(in, Charsets.UTF_8);
@@ -167,7 +167,7 @@ public abstract class JavaPlugin extends PluginBase {
     public void saveConfig() {
         try {
             getConfig().save(configFile);
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             logger.log(Level.SEVERE, "Could not save config to " + configFile, ex);
         }
     }
@@ -180,20 +180,20 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     @Override
-    public void saveResource(@NotNull String resourcePath, boolean replace) {
-        if (resourcePath.equals("")) {
+    public void saveResource(@NotNull String resourcePath, final boolean replace) {
+        if (resourcePath.isEmpty()) {
             throw new IllegalArgumentException("ResourcePath cannot be null or empty");
         }
 
         resourcePath = resourcePath.replace('\\', '/');
-        InputStream in = getResource(resourcePath);
+        final InputStream in = getResource(resourcePath);
         if (in == null) {
             throw new IllegalArgumentException("The embedded resource '" + resourcePath + "' cannot be found in " + file);
         }
 
-        File outFile = new File(dataFolder, resourcePath);
-        int lastIndex = resourcePath.lastIndexOf('/');
-        File outDir = new File(dataFolder, resourcePath.substring(0, Math.max(lastIndex, 0)));
+        final File outFile = new File(dataFolder, resourcePath);
+        final int lastIndex = resourcePath.lastIndexOf('/');
+        final File outDir = new File(dataFolder, resourcePath.substring(0, Math.max(lastIndex, 0)));
 
         if (!outDir.exists()) {
             outDir.mkdirs();
@@ -201,8 +201,8 @@ public abstract class JavaPlugin extends PluginBase {
 
         try {
             if (!outFile.exists() || replace) {
-                OutputStream out = new FileOutputStream(outFile);
-                byte[] buf = new byte[1024];
+                final OutputStream out = new FileOutputStream(outFile);
+                final byte[] buf = new byte[1024];
                 int len;
                 while ((len = in.read(buf)) > 0) {
                     out.write(buf, 0, len);
@@ -212,26 +212,26 @@ public abstract class JavaPlugin extends PluginBase {
             } else {
                 logger.log(Level.WARNING, "Could not save " + outFile.getName() + " to " + outFile + " because " + outFile.getName() + " already exists.");
             }
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             logger.log(Level.SEVERE, "Could not save " + outFile.getName() + " to " + outFile, ex);
         }
     }
 
     @Nullable
     @Override
-    public InputStream getResource(@NotNull String filename) {
+    public InputStream getResource(@NotNull final String filename) {
 
 	    try {
-            URL url = getClassLoader().getResource(filename);
+            final URL url = getClassLoader().getResource(filename);
 
             if (url == null) {
                 return null;
             }
 
-            URLConnection connection = url.openConnection();
+            final URLConnection connection = url.openConnection();
             connection.setUseCaches(false);
             return connection.getInputStream();
-        } catch (IOException ex) {
+        } catch (final IOException ex) {
             return null;
         }
     }
@@ -264,7 +264,7 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
 
-    final void init(@NotNull PluginLoader loader, @NotNull Server server, @NotNull PluginDescriptionFile description, @NotNull File dataFolder, @NotNull File file, @NotNull ClassLoader classLoader) {
+    final void init(@NotNull final PluginLoader loader, @NotNull final Server server, @NotNull final PluginDescriptionFile description, @NotNull final File dataFolder, @NotNull final File file, @NotNull final ClassLoader classLoader) {
         this.loader = loader;
         this.server = server;
         this.file = file;
@@ -283,7 +283,7 @@ public abstract class JavaPlugin extends PluginBase {
      * {@inheritDoc}
      */
     @Override
-    public boolean onCommand(@NotNull CommandSender sender, @NotNull Command command, @NotNull String label, @NotNull String[] args) {
+    public boolean onCommand(@NotNull final CommandSender sender, @NotNull final Command command, @NotNull final String label, @NotNull final String[] args) {
         return false;
     }
 
@@ -292,7 +292,7 @@ public abstract class JavaPlugin extends PluginBase {
      */
     @Override
     @Nullable
-    public List<String> onTabComplete(@NotNull CommandSender sender, @NotNull Command command, @NotNull String alias, @NotNull String[] args) {
+    public List<String> onTabComplete(@NotNull final CommandSender sender, @NotNull final Command command, @NotNull final String alias, @NotNull final String[] args) {
         return null;
     }
 
@@ -305,8 +305,8 @@ public abstract class JavaPlugin extends PluginBase {
      * @return the plugin command if found, otherwise null
      */
     @Nullable
-    public PluginCommand getCommand(@NotNull String name) {
-        String alias = name.toLowerCase(java.util.Locale.ENGLISH);
+    public PluginCommand getCommand(@NotNull final String name) {
+        final String alias = name.toLowerCase(java.util.Locale.ENGLISH);
         PluginCommand command = getServer().getPluginCommand(alias);
 
         if (command == null || command.getPlugin() != this) {
@@ -331,7 +331,7 @@ public abstract class JavaPlugin extends PluginBase {
 
     @Nullable
     @Override
-    public ChunkGenerator getDefaultWorldGenerator(@NotNull String worldName, @Nullable String id) {
+    public ChunkGenerator getDefaultWorldGenerator(@NotNull final String worldName, @Nullable final String id) {
         return null;
     }
 
@@ -341,7 +341,7 @@ public abstract class JavaPlugin extends PluginBase {
     }
 
     @Override
-    public final void setNaggable(boolean canNag) {
+    public final void setNaggable(final boolean canNag) {
         this.naggable = canNag;
     }
 
@@ -381,7 +381,7 @@ public abstract class JavaPlugin extends PluginBase {
      *     extend the class
      */
     @NotNull
-    public static <T extends JavaPlugin> T getPlugin(@NotNull Class<T> clazz) {
+    public static <T extends JavaPlugin> T getPlugin(@NotNull final Class<T> clazz) {
         Validate.notNull(clazz, "Null class cannot have a plugin");
         if (!JavaPlugin.class.isAssignableFrom(clazz)) {
             throw new IllegalArgumentException(clazz + " does not extend " + JavaPlugin.class);
@@ -390,7 +390,7 @@ public abstract class JavaPlugin extends PluginBase {
         if (!(cl instanceof PluginClassLoader)) {
             throw new IllegalArgumentException(clazz + " is not initialized by " + PluginClassLoader.class);
         }
-        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
+        final JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
         if (plugin == null) {
             throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
         }
@@ -410,13 +410,13 @@ public abstract class JavaPlugin extends PluginBase {
      *     given JavaPlugin
      */
     @NotNull
-    public static JavaPlugin getProvidingPlugin(@NotNull Class<?> clazz) {
+    public static JavaPlugin getProvidingPlugin(@NotNull final Class<?> clazz) {
         Validate.notNull(clazz, "Null class cannot have a plugin");
         final ClassLoader cl = clazz.getClassLoader();
         if (!(cl instanceof PluginClassLoader)) {
             throw new IllegalArgumentException(clazz + " is not provided by " + PluginClassLoader.class);
         }
-        JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
+        final JavaPlugin plugin = ((PluginClassLoader) cl).plugin;
         if (plugin == null) {
             throw new IllegalStateException("Cannot get plugin for " + clazz + " from a static initializer");
         }
diff --git a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
index 3596c12e36977bbe9044c8711b02e9a2840651d3..65c84f538080b44ac7a87bdd1b20abc31376f702 100644
--- a/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/JavaPluginLoader.java
@@ -36,7 +36,6 @@ import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.RegisteredListener;
-import org.bukkit.plugin.TimedRegisteredListener;
 import org.bukkit.plugin.UnknownDependencyException;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -60,7 +59,7 @@ public final class JavaPluginLoader implements PluginLoader {
      * @param instance the server instance
      */
     @Deprecated
-    public JavaPluginLoader(@NotNull Server instance) {
+    public JavaPluginLoader(@NotNull final Server instance) {
         Validate.notNull(instance, "Server cannot be null");
         server = instance;
     }
@@ -77,7 +76,7 @@ public final class JavaPluginLoader implements PluginLoader {
         final PluginDescriptionFile description;
         try {
             description = getPluginDescription(file);
-        } catch (InvalidDescriptionException ex) {
+        } catch (final InvalidDescriptionException ex) {
             throw new InvalidPluginException(ex);
         }
 
@@ -120,7 +119,7 @@ public final class JavaPluginLoader implements PluginLoader {
         }
 
         for (final String pluginName : description.getDepend()) {
-            Plugin current = server.getPluginManager().getPlugin(pluginName);
+            final Plugin current = server.getPluginManager().getPlugin(pluginName);
 
             if (current == null) {
                 throw new UnknownDependencyException("Unknown dependency " + pluginName + ". Please download and install " + pluginName + " to run this plugin.");
@@ -132,9 +131,9 @@ public final class JavaPluginLoader implements PluginLoader {
         final PluginClassLoader loader;
         try {
             loader = new PluginClassLoader(this, getClass().getClassLoader(), description, dataFolder, file);
-        } catch (InvalidPluginException ex) {
+        } catch (final InvalidPluginException ex) {
             throw ex;
-        } catch (Throwable ex) {
+        } catch (final Throwable ex) {
             throw new InvalidPluginException(ex);
         }
 
@@ -145,7 +144,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
     @Override
     @NotNull
-    public PluginDescriptionFile getPluginDescription(@NotNull File file) throws InvalidDescriptionException {
+    public PluginDescriptionFile getPluginDescription(@NotNull final File file) throws InvalidDescriptionException {
         Validate.notNull(file, "File cannot be null");
 
         JarFile jar = null;
@@ -153,7 +152,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
         try {
             jar = new JarFile(file);
-            JarEntry entry = jar.getJarEntry("plugin.yml");
+            final JarEntry entry = jar.getJarEntry("plugin.yml");
 
             if (entry == null) {
                 throw new InvalidDescriptionException(new FileNotFoundException("Jar does not contain plugin.yml"));
@@ -163,19 +162,19 @@ public final class JavaPluginLoader implements PluginLoader {
 
             return new PluginDescriptionFile(stream);
 
-        } catch (IOException | YAMLException ex) {
+        } catch (final IOException | YAMLException ex) {
             throw new InvalidDescriptionException(ex);
         } finally {
             if (jar != null) {
                 try {
                     jar.close();
-                } catch (IOException ignored) {
+                } catch (final IOException ignored) {
                 }
             }
             if (stream != null) {
                 try {
                     stream.close();
-                } catch (IOException ignored) {
+                } catch (final IOException ignored) {
                 }
             }
         }
@@ -192,14 +191,14 @@ public final class JavaPluginLoader implements PluginLoader {
         // Paper start - prioritize self
         return getClassByName(name, null);
     }
-    Class<?> getClassByName(final String name, PluginClassLoader requester) {
+    Class<?> getClassByName(final String name, final PluginClassLoader requester) {
         // Paper end
         // Paper start - make MT safe
         Class<?> cachedClass = classes.get(name);
         if (cachedClass != null) {
             return cachedClass;
         }
-        java.util.concurrent.locks.ReentrantReadWriteLock lock;
+        final java.util.concurrent.locks.ReentrantReadWriteLock lock;
         synchronized (classLoadLock) {
             lock = classLoadLock.computeIfAbsent(name, (x) -> new java.util.concurrent.locks.ReentrantReadWriteLock());
             classLoadLockCount.compute(name, (x, prev) -> prev != null ? prev + 1 : 1);
@@ -209,7 +208,7 @@ public final class JavaPluginLoader implements PluginLoader {
             if (!DISABLE_CLASS_PRIORITIZATION && requester != null) {
                 try {
                 cachedClass = requester.findClass(name, false);
-                } catch (ClassNotFoundException ignored) {}
+                } catch (final ClassNotFoundException ignored) {}
                 if (cachedClass != null) {
                     return cachedClass;
                 }
@@ -221,10 +220,10 @@ public final class JavaPluginLoader implements PluginLoader {
         if (cachedClass != null) {
             return cachedClass;
         } else {
-            for (PluginClassLoader loader : loaders) {
+            for (final PluginClassLoader loader : loaders) {
                 try {
                     cachedClass = loader.findClass(name, false);
-                } catch (ClassNotFoundException ignored) {}
+                } catch (final ClassNotFoundException ignored) {}
                 if (cachedClass != null) {
                     return cachedClass;
                 }
@@ -251,21 +250,21 @@ public final class JavaPluginLoader implements PluginLoader {
             classes.put(name, clazz);
 
             if (ConfigurationSerializable.class.isAssignableFrom(clazz)) {
-                Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
+                final Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
                 ConfigurationSerialization.registerClass(serializable);
             }
         }
     }
 
-    private void removeClass(@NotNull String name) {
-        Class<?> clazz = classes.remove(name);
+    private void removeClass(@NotNull final String name) {
+        final Class<?> clazz = classes.remove(name);
 
         try {
             if ((clazz != null) && (ConfigurationSerializable.class.isAssignableFrom(clazz))) {
-                Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
+                final Class<? extends ConfigurationSerializable> serializable = clazz.asSubclass(ConfigurationSerializable.class);
                 ConfigurationSerialization.unregisterClass(serializable);
             }
-        } catch (NullPointerException ex) {
+        } catch (final NullPointerException ex) {
             // Boggle!
             // (Native methods throwing NPEs is not fun when you can't stop it before-hand)
         }
@@ -273,20 +272,20 @@ public final class JavaPluginLoader implements PluginLoader {
 
     @Override
     @NotNull
-    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull Listener listener, @NotNull final Plugin plugin) {
+    public Map<Class<? extends Event>, Set<RegisteredListener>> createRegisteredListeners(@NotNull final Listener listener, @NotNull final Plugin plugin) {
         Validate.notNull(plugin, "Plugin can not be null");
         Validate.notNull(listener, "Listener can not be null");
 
-        boolean useTimings = server.getPluginManager().useTimings();
-        Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<>();
-        Set<Method> methods;
+        final boolean useTimings = server.getPluginManager().useTimings();
+        final Map<Class<? extends Event>, Set<RegisteredListener>> ret = new HashMap<>();
+        final Set<Method> methods;
         try {
-            Method[] publicMethods = listener.getClass().getMethods();
-            Method[] privateMethods = listener.getClass().getDeclaredMethods();
+            final Method[] publicMethods = listener.getClass().getMethods();
+            final Method[] privateMethods = listener.getClass().getDeclaredMethods();
             methods = new HashSet<>(publicMethods.length + privateMethods.length, 1.0f);
             methods.addAll(Arrays.asList(publicMethods));
             methods.addAll(Arrays.asList(privateMethods));
-        } catch (NoClassDefFoundError e) {
+        } catch (final NoClassDefFoundError e) {
             plugin.getLogger().severe("Plugin " + plugin.getDescription().getFullName() + " has failed to register events for " + listener.getClass() + " because " + e.getMessage() + " does not exist.");
             return ret;
         }
@@ -306,13 +305,13 @@ public final class JavaPluginLoader implements PluginLoader {
             }
             final Class<? extends Event> eventClass = checkClass.asSubclass(Event.class);
             method.setAccessible(true);
-            Set<RegisteredListener> eventSet = ret.computeIfAbsent(eventClass, k -> new HashSet<>());
+            final Set<RegisteredListener> eventSet = ret.computeIfAbsent(eventClass, k -> new HashSet<>());
 
             for (Class<?> clazz = eventClass; Event.class.isAssignableFrom(clazz); clazz = clazz.getSuperclass()) {
                 // This loop checks for extending deprecated events
                 if (clazz.getAnnotation(Deprecated.class) != null) {
-                    Warning warning = clazz.getAnnotation(Warning.class);
-                    WarningState warningState = server.getWarningState();
+                    final Warning warning = clazz.getAnnotation(Warning.class);
+                    final WarningState warningState = server.getWarningState();
                     if (!warningState.printFor(warning)) {
                         break;
                     }
@@ -323,14 +322,14 @@ public final class JavaPluginLoader implements PluginLoader {
                                     plugin.getDescription().getFullName(),
                                     clazz.getName(),
                                     method.toGenericString(),
-                                    (warning != null && warning.reason().length() != 0) ? warning.reason() : "Server performance will be affected",
+                                    (warning != null && !warning.reason().isEmpty()) ? warning.reason() : "Server performance will be affected",
                                     Arrays.toString(plugin.getDescription().getAuthors().toArray())),
                             warningState == WarningState.ON ? new AuthorNagException(null) : null);
                     break;
                 }
             }
 
-            EventExecutor executor = new co.aikar.timings.TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass); // Paper // Paper (Yes.) - Use factory method `EventExecutor.create()`
+            final EventExecutor executor = new co.aikar.timings.TimedEventExecutor(EventExecutor.create(method, eventClass), plugin, method, eventClass); // Paper // Paper (Yes.) - Use factory method `EventExecutor.create()`
 	        eventSet.add(new RegisteredListener(listener, executor, eh.priority(), plugin, eh.ignoreCancelled()));
         }
         return ret;
@@ -350,9 +349,9 @@ public final class JavaPluginLoader implements PluginLoader {
             plugin.getLogger().info(enableMsg);
             // Paper end
 
-            JavaPlugin jPlugin = (JavaPlugin) plugin;
+            final JavaPlugin jPlugin = (JavaPlugin) plugin;
 
-            PluginClassLoader pluginLoader = (PluginClassLoader) jPlugin.getClassLoader();
+            final PluginClassLoader pluginLoader = (PluginClassLoader) jPlugin.getClassLoader();
 
             if (!loaders.contains(pluginLoader)) {
                 loaders.add(pluginLoader);
@@ -361,7 +360,7 @@ public final class JavaPluginLoader implements PluginLoader {
 
             try {
                 jPlugin.setEnabled(true);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred while enabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
                 // Paper start - Disable plugins that fail to load
                 server.getPluginManager().disablePlugin(jPlugin, true); // Paper - close Classloader on disable - She's dead jim
@@ -376,37 +375,37 @@ public final class JavaPluginLoader implements PluginLoader {
     }
 
     @Override
-    public void disablePlugin(@NotNull Plugin plugin) {
+    public void disablePlugin(@NotNull final Plugin plugin) {
     // Paper start - close Classloader on disable
         disablePlugin(plugin, false); // Retain old behavior unless requested
     }
 
-    public void disablePlugin(@NotNull Plugin plugin, boolean closeClassloader) {
+    public void disablePlugin(@NotNull final Plugin plugin, final boolean closeClassloader) {
         // Paper end - close Class Loader on disable
         Validate.isTrue(plugin instanceof JavaPlugin, "Plugin is not associated with this PluginLoader");
 
         if (plugin.isEnabled()) {
-            String message = String.format("Disabling %s", plugin.getDescription().getFullName());
+            final String message = String.format("Disabling %s", plugin.getDescription().getFullName());
             plugin.getLogger().info(message);
 
             server.getPluginManager().callEvent(new PluginDisableEvent(plugin));
 
-            JavaPlugin jPlugin = (JavaPlugin) plugin;
-            ClassLoader cloader = jPlugin.getClassLoader();
+            final JavaPlugin jPlugin = (JavaPlugin) plugin;
+            final ClassLoader cloader = jPlugin.getClassLoader();
 
             try {
                 jPlugin.setEnabled(false);
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 server.getLogger().log(Level.SEVERE, "Error occurred while disabling " + plugin.getDescription().getFullName() + " (Is it up to date?)", ex);
             }
 
             if (cloader instanceof PluginClassLoader) {
-                PluginClassLoader loader = (PluginClassLoader) cloader;
+                final PluginClassLoader loader = (PluginClassLoader) cloader;
                 loaders.remove(loader);
 
-                Set<String> names = loader.getClasses();
+                final Set<String> names = loader.getClasses();
 
-                for (String name : names) {
+                for (final String name : names) {
                     removeClass(name);
                 }
                 // Paper start - close Class Loader on disable
@@ -414,7 +413,7 @@ public final class JavaPluginLoader implements PluginLoader {
                     if (closeClassloader) {
                         loader.close();
                     }
-                } catch (IOException e) {
+                } catch (final IOException e) {
                     server.getLogger().log(Level.WARNING, "Error closing the Plugin Class Loader for " + plugin.getDescription().getFullName());
                     e.printStackTrace();
                 }
diff --git a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
index d9121c829cae88c64f8ad6c4c5fb69fe497036f4..3b0525dcc6307fb44a86909e186e586721f2dab0 100644
--- a/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
+++ b/src/main/java/org/bukkit/plugin/java/PluginClassLoader.java
@@ -62,7 +62,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
             final Object runtimeVersion = runtimeVersionMethod.invoke(null);
             @SuppressWarnings("JavaReflectionMemberAccess") final java.lang.reflect.Constructor<JarFile> constructor = JarFile.class.getConstructor(File.class, boolean.class, int.class, runtimeVersion.getClass());
             jarFile = constructor.newInstance(file, true, java.util.zip.ZipFile.OPEN_READ, runtimeVersion);
-        } catch (Exception ignored) {
+        } catch (final Exception ignored) {
             jarFile = new JarFile(file);
         }
         this.jar = jarFile;
@@ -73,44 +73,44 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         this.logger = com.destroystokyo.paper.utils.PaperPluginLogger.getLogger(description); // Paper - Register logger early
 
         try {
-            Class<?> jarClass;
+            final Class<?> jarClass;
             try {
                 jarClass = Class.forName(description.getMain(), true, this);
-            } catch (ClassNotFoundException ex) {
+            } catch (final ClassNotFoundException ex) {
                 throw new InvalidPluginException("Cannot find main class `" + description.getMain() + "'", ex);
             }
 
-            Class<? extends JavaPlugin> pluginClass;
+            final Class<? extends JavaPlugin> pluginClass;
             try {
                 pluginClass = jarClass.asSubclass(JavaPlugin.class);
-            } catch (ClassCastException ex) {
+            } catch (final ClassCastException ex) {
                 throw new InvalidPluginException("main class `" + description.getMain() + "' does not extend JavaPlugin", ex);
             }
 
             plugin = pluginClass.newInstance();
-        } catch (IllegalAccessException ex) {
+        } catch (final IllegalAccessException ex) {
             throw new InvalidPluginException("No public constructor", ex);
-        } catch (InstantiationException ex) {
+        } catch (final InstantiationException ex) {
             throw new InvalidPluginException("Abnormal plugin type", ex);
         }
     }
 
     @Override
-    public URL getResource(String name) {
+    public URL getResource(final String name) {
         return findResource(name);
     }
 
     @Override
-    public Enumeration<URL> getResources(String name) throws IOException {
+    public Enumeration<URL> getResources(final String name) throws IOException {
         return findResources(name);
     }
 
     @Override
-    protected Class<?> findClass(String name) throws ClassNotFoundException {
+    protected Class<?> findClass(final String name) throws ClassNotFoundException {
         return findClass(name, true);
     }
 
-    Class<?> findClass(@NotNull String name, boolean checkGlobal) throws ClassNotFoundException {
+    Class<?> findClass(@NotNull final String name, final boolean checkGlobal) throws ClassNotFoundException {
         if (name.startsWith("org.bukkit.") || name.startsWith("net.minecraft.")) {
             throw new ClassNotFoundException(name);
         }
@@ -121,7 +121,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                 result = loader.getClassByName(name, this); // Paper - prioritize self
 
                 if (result != null) {
-                    PluginDescriptionFile provider = ((PluginClassLoader) result.getClassLoader()).description;
+                    final PluginDescriptionFile provider = ((PluginClassLoader) result.getClassLoader()).description;
 
                     if (provider != description
                             && !seenIllegalAccess.contains(provider.getName())
@@ -139,23 +139,23 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
             }
 
             if (result == null) {
-                String path = name.replace('.', '/').concat(".class");
-                JarEntry entry = jar.getJarEntry(path);
+                final String path = name.replace('.', '/') + ".class";
+                final JarEntry entry = jar.getJarEntry(path);
 
                 if (entry != null) {
                     byte[] classBytes;
 
-                    try (InputStream is = jar.getInputStream(entry)) {
+                    try (final InputStream is = jar.getInputStream(entry)) {
                         classBytes = ByteStreams.toByteArray(is);
-                    } catch (IOException ex) {
+                    } catch (final IOException ex) {
                         throw new ClassNotFoundException(name, ex);
                     }
 
                     classBytes = loader.server.getUnsafe().processClass(description, path, classBytes);
 
-                    int dot = name.lastIndexOf('.');
+                    final int dot = name.lastIndexOf('.');
                     if (dot != -1) {
-                        String pkgName = name.substring(0, dot);
+                        final String pkgName = name.substring(0, dot);
                         if (getPackage(pkgName) == null) {
                             try {
                                 if (manifest != null) {
@@ -163,7 +163,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                                 } else {
                                     definePackage(pkgName, null, null, null, null, null, null, null);
                                 }
-                            } catch (IllegalArgumentException ex) {
+                            } catch (final IllegalArgumentException ex) {
                                 if (getPackage(pkgName) == null) {
                                     throw new IllegalStateException("Cannot find package " + pkgName);
                                 }
@@ -171,8 +171,8 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
                         }
                     }
 
-                    CodeSigner[] signers = entry.getCodeSigners();
-                    CodeSource source = new CodeSource(url, signers);
+                    final CodeSigner[] signers = entry.getCodeSigners();
+                    final CodeSource source = new CodeSource(url, signers);
 
                     result = defineClass(name, classBytes, 0, classBytes.length, source);
                 }
@@ -206,7 +206,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
         return classes.keySet();
     }
 
-    synchronized void initialize(@NotNull JavaPlugin javaPlugin) {
+    synchronized void initialize(@NotNull final JavaPlugin javaPlugin) {
         Validate.notNull(javaPlugin, "Initializing plugin cannot be null");
         Validate.isTrue(javaPlugin.getClass().getClassLoader() == this, "Cannot initialize plugin outside of this class loader");
         if (this.plugin != null || this.pluginInit != null) {
@@ -223,7 +223,7 @@ public final class PluginClassLoader extends URLClassLoader { // Spigot
     // Paper start
     @Override
     public String toString() {
-        JavaPlugin currPlugin = plugin != null ? plugin : pluginInit;
+        final JavaPlugin currPlugin = plugin != null ? plugin : pluginInit;
         return "PluginClassLoader{" +
                    "plugin=" + currPlugin +
                    ", pluginEnabled=" + (currPlugin == null ? "uninitialized" : currPlugin.isEnabled()) +
diff --git a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
index 80ef8a2a342ff9dc16c98b5254cadd539f6ea0d9..b2d24bf6977198322301df27856d01f86457c4a8 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ChannelNameTooLongException.java
@@ -9,7 +9,7 @@ public class ChannelNameTooLongException extends RuntimeException {
         super("Attempted to send a Plugin Message to a channel that was too large. The maximum length a channel may be is " + Messenger.MAX_CHANNEL_SIZE + " chars.");
     }
 
-    public ChannelNameTooLongException(String channel) {
+    public ChannelNameTooLongException(final String channel) {
         super("Attempted to send a Plugin Message to a channel that was too large. The maximum length a channel may be is " + Messenger.MAX_CHANNEL_SIZE + " chars (attempted " + channel.length() + " - '" + channel + ".");
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java b/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
index 2266f17645e77beefc38a2ea9d588a1a9476dc55..5e5d3a4a079e17dd3454c8726added5c76f03ab7 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ChannelNotRegisteredException.java
@@ -9,7 +9,7 @@ public class ChannelNotRegisteredException extends RuntimeException {
         this("Attempted to send a plugin message through an unregistered channel.");
     }
 
-    public ChannelNotRegisteredException(String channel) {
+    public ChannelNotRegisteredException(final String channel) {
         super("Attempted to send a plugin message through the unregistered channel `" + channel + "'.");
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
index 61af8c4c1f787858e7fb2cbaf3130ce8a7fc17f4..f934109e8cd797ba45e8c926926e82d240c49679 100644
--- a/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/MessageTooLargeException.java
@@ -9,15 +9,15 @@ public class MessageTooLargeException extends RuntimeException {
         this("Attempted to send a plugin message that was too large. The maximum length a plugin message may be is " + Messenger.MAX_MESSAGE_SIZE + " bytes.");
     }
 
-    public MessageTooLargeException(byte[] message) {
+    public MessageTooLargeException(final byte[] message) {
         this(message.length);
     }
 
-    public MessageTooLargeException(int length) {
+    public MessageTooLargeException(final int length) {
         this("Attempted to send a plugin message that was too large. The maximum length a plugin message may be is " + Messenger.MAX_MESSAGE_SIZE + " bytes (tried to send one that is " + length + " bytes long).");
     }
 
-    public MessageTooLargeException(String msg) {
+    public MessageTooLargeException(final String msg) {
         super(msg);
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/Messenger.java b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
index 51fd5c6caca55fc8f5cffcc11f1ead0c65de3c11..2b4547c479f7b11019c7fad410fbbc498db09973 100644
--- a/src/main/java/org/bukkit/plugin/messaging/Messenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/Messenger.java
@@ -221,5 +221,5 @@ public interface Messenger {
      * @param channel Channel that the message was sent by.
      * @param message Raw payload of the message.
      */
-    void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message);
+    void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, byte[] message);
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
index 3dac78c77dc3d06e1a5dc52adc01f27977b99905..0916ca5e95f30dadedac6997660f817d2de80370 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListener.java
@@ -17,5 +17,5 @@ public interface PluginMessageListener {
      * @param player Source of the message.
      * @param message The raw message that was sent.
      */
-    void onPluginMessageReceived(@NotNull String channel, @NotNull Player player, @NotNull byte[] message);
+    void onPluginMessageReceived(@NotNull String channel, @NotNull Player player, byte[] message);
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
index 0d463ab47518614c110d99ff94a1860802fd1387..19ad9544567aed13ffad668bc03d2a49efa70518 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageListenerRegistration.java
@@ -13,7 +13,7 @@ public final class PluginMessageListenerRegistration {
     private final String channel;
     private final PluginMessageListener listener;
 
-    public PluginMessageListenerRegistration(@NotNull Messenger messenger, @NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
+    public PluginMessageListenerRegistration(@NotNull final Messenger messenger, @NotNull final Plugin plugin, @NotNull final String channel, @NotNull final PluginMessageListener listener) {
 
 	    this.messenger = messenger;
         this.plugin = plugin;
@@ -61,7 +61,7 @@ public final class PluginMessageListenerRegistration {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
diff --git a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
index c16f76c64299d24becd85751fc527f06af0553cc..9468cb5f6cd7183085f85022f3105cef9f72fd28 100644
--- a/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
+++ b/src/main/java/org/bukkit/plugin/messaging/PluginMessageRecipient.java
@@ -27,7 +27,7 @@ public interface PluginMessageRecipient {
      * @throws ChannelNotRegisteredException Thrown if the channel is not
      *     registered for this plugin.
      */
-    void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, @NotNull byte[] message);
+    void sendPluginMessage(@NotNull Plugin source, @NotNull String channel, byte[] message);
 
     /**
      * Gets a set containing all the Plugin Channels that this client is
diff --git a/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java b/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
index 0221f049a10dbac3103129020b5472eb209df17f..7dc0236fc0b399d5ab40507cdfb50c2c78188204 100644
--- a/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
+++ b/src/main/java/org/bukkit/plugin/messaging/ReservedChannelException.java
@@ -10,7 +10,7 @@ public class ReservedChannelException extends RuntimeException {
         this("Attempted to register for a reserved channel name.");
     }
 
-    public ReservedChannelException(String name) {
+    public ReservedChannelException(final String name) {
         super("Attempted to register for a reserved channel name ('" + name + "')");
     }
 }
diff --git a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
index 13e45a64e4205973f38e997b9a52badf72bdd95c..b31ec8da3c98a455c0602285448eb890b2d4549d 100644
--- a/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
+++ b/src/main/java/org/bukkit/plugin/messaging/StandardMessenger.java
@@ -23,7 +23,7 @@ public class StandardMessenger implements Messenger {
     private final Object incomingLock = new Object();
     private final Object outgoingLock = new Object();
 
-    private void addToOutgoing(@NotNull Plugin plugin, @NotNull String channel) {
+    private void addToOutgoing(@NotNull final Plugin plugin, @NotNull final String channel) {
         synchronized (outgoingLock) {
             Set<Plugin> plugins = outgoingByChannel.get(channel);
             Set<String> channels = outgoingByPlugin.get(plugin);
@@ -43,10 +43,10 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromOutgoing(@NotNull Plugin plugin, @NotNull String channel) {
+    private void removeFromOutgoing(@NotNull final Plugin plugin, @NotNull final String channel) {
         synchronized (outgoingLock) {
-            Set<Plugin> plugins = outgoingByChannel.get(channel);
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<Plugin> plugins = outgoingByChannel.get(channel);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (plugins != null) {
                 plugins.remove(plugin);
@@ -66,23 +66,23 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromOutgoing(@NotNull Plugin plugin) {
+    private void removeFromOutgoing(@NotNull final Plugin plugin) {
         synchronized (outgoingLock) {
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
-                String[] toRemove = channels.toArray(new String[0]);
+                final String[] toRemove = channels.toArray(new String[0]);
 
                 outgoingByPlugin.remove(plugin);
 
-                for (String channel : toRemove) {
+                for (final String channel : toRemove) {
                     removeFromOutgoing(plugin, channel);
                 }
             }
         }
     }
 
-    private void addToIncoming(@NotNull PluginMessageListenerRegistration registration) {
+    private void addToIncoming(@NotNull final PluginMessageListenerRegistration registration) {
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(registration.getChannel());
 
@@ -112,7 +112,7 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromIncoming(@NotNull PluginMessageListenerRegistration registration) {
+    private void removeFromIncoming(@NotNull final PluginMessageListenerRegistration registration) {
         synchronized (incomingLock) {
             Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(registration.getChannel());
 
@@ -136,14 +136,14 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromIncoming(@NotNull Plugin plugin, @NotNull String channel) {
+    private void removeFromIncoming(@NotNull final Plugin plugin, @NotNull final String channel) {
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
+                final PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
 
-                for (PluginMessageListenerRegistration registration : toRemove) {
+                for (final PluginMessageListenerRegistration registration : toRemove) {
                     if (registration.getChannel().equals(channel)) {
                         removeFromIncoming(registration);
                     }
@@ -152,16 +152,16 @@ public class StandardMessenger implements Messenger {
         }
     }
 
-    private void removeFromIncoming(@NotNull Plugin plugin) {
+    private void removeFromIncoming(@NotNull final Plugin plugin) {
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
+                final PluginMessageListenerRegistration[] toRemove = registrations.toArray(new PluginMessageListenerRegistration[0]);
 
                 incomingByPlugin.remove(plugin);
 
-                for (PluginMessageListenerRegistration registration : toRemove) {
+                for (final PluginMessageListenerRegistration registration : toRemove) {
                     removeFromIncoming(registration);
                 }
             }
@@ -176,7 +176,7 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void registerOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
+    public void registerOutgoingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel) {
 	    channel = validateAndCorrectChannel(channel);
         if (isReservedChannel(channel)) {
             throw new ReservedChannelException(channel);
@@ -186,27 +186,27 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
+    public void unregisterOutgoingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel) {
 	    channel = validateAndCorrectChannel(channel);
 
         removeFromOutgoing(plugin, channel);
     }
 
     @Override
-    public void unregisterOutgoingPluginChannel(@NotNull Plugin plugin) {
+    public void unregisterOutgoingPluginChannel(@NotNull final Plugin plugin) {
 
 	    removeFromOutgoing(plugin);
     }
 
     @Override
     @NotNull
-    public PluginMessageListenerRegistration registerIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
+    public PluginMessageListenerRegistration registerIncomingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel, @NotNull final PluginMessageListener listener) {
 	    channel = validateAndCorrectChannel(channel);
         if (isReservedChannel(channel)) {
             throw new ReservedChannelException(channel);
         }
 
-	    PluginMessageListenerRegistration result = new PluginMessageListenerRegistration(this, plugin, channel, listener);
+	    final PluginMessageListenerRegistration result = new PluginMessageListenerRegistration(this, plugin, channel, listener);
 
         addToIncoming(result);
 
@@ -214,21 +214,21 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel, @NotNull PluginMessageListener listener) {
+    public void unregisterIncomingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel, @NotNull final PluginMessageListener listener) {
 	    channel = validateAndCorrectChannel(channel);
 
         removeFromIncoming(new PluginMessageListenerRegistration(this, plugin, channel, listener));
     }
 
     @Override
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin, @NotNull String channel) {
+    public void unregisterIncomingPluginChannel(@NotNull final Plugin plugin, @NotNull String channel) {
 	    channel = validateAndCorrectChannel(channel);
 
         removeFromIncoming(plugin, channel);
     }
 
     @Override
-    public void unregisterIncomingPluginChannel(@NotNull Plugin plugin) {
+    public void unregisterIncomingPluginChannel(@NotNull final Plugin plugin) {
 
 	    removeFromIncoming(plugin);
     }
@@ -237,17 +237,17 @@ public class StandardMessenger implements Messenger {
     @NotNull
     public Set<String> getOutgoingChannels() {
         synchronized (outgoingLock) {
-            Set<String> keys = outgoingByChannel.keySet();
+            final Set<String> keys = outgoingByChannel.keySet();
             return ImmutableSet.copyOf(keys);
         }
     }
 
     @Override
     @NotNull
-    public Set<String> getOutgoingChannels(@NotNull Plugin plugin) {
+    public Set<String> getOutgoingChannels(@NotNull final Plugin plugin) {
 
 	    synchronized (outgoingLock) {
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
                 return ImmutableSet.copyOf(channels);
@@ -261,22 +261,22 @@ public class StandardMessenger implements Messenger {
     @NotNull
     public Set<String> getIncomingChannels() {
         synchronized (incomingLock) {
-            Set<String> keys = incomingByChannel.keySet();
+            final Set<String> keys = incomingByChannel.keySet();
             return ImmutableSet.copyOf(keys);
         }
     }
 
     @Override
     @NotNull
-    public Set<String> getIncomingChannels(@NotNull Plugin plugin) {
+    public Set<String> getIncomingChannels(@NotNull final Plugin plugin) {
 
 	    synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                Builder<String> builder = ImmutableSet.builder();
+                final Builder<String> builder = ImmutableSet.builder();
 
-                for (PluginMessageListenerRegistration registration : registrations) {
+                for (final PluginMessageListenerRegistration registration : registrations) {
                     builder.add(registration.getChannel());
                 }
 
@@ -289,10 +289,10 @@ public class StandardMessenger implements Messenger {
 
     @Override
     @NotNull
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin) {
+    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull final Plugin plugin) {
 
 	    synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
                 return ImmutableSet.copyOf(registrations);
@@ -308,7 +308,7 @@ public class StandardMessenger implements Messenger {
         channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(channel);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByChannel.get(channel);
 
             if (registrations != null) {
                 return ImmutableSet.copyOf(registrations);
@@ -320,16 +320,16 @@ public class StandardMessenger implements Messenger {
 
     @Override
     @NotNull
-    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull Plugin plugin, @NotNull String channel) {
+    public Set<PluginMessageListenerRegistration> getIncomingChannelRegistrations(@NotNull final Plugin plugin, @NotNull String channel) {
 	    channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                Builder<PluginMessageListenerRegistration> builder = ImmutableSet.builder();
+                final Builder<PluginMessageListenerRegistration> builder = ImmutableSet.builder();
 
-                for (PluginMessageListenerRegistration registration : registrations) {
+                for (final PluginMessageListenerRegistration registration : registrations) {
                     if (registration.getChannel().equals(channel)) {
                         builder.add(registration);
                     }
@@ -343,10 +343,10 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public boolean isRegistrationValid(@NotNull PluginMessageListenerRegistration registration) {
+    public boolean isRegistrationValid(@NotNull final PluginMessageListenerRegistration registration) {
 
 	    synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(registration.getPlugin());
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(registration.getPlugin());
 
             if (registrations != null) {
                 return registrations.contains(registration);
@@ -357,14 +357,14 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public boolean isIncomingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel) {
+    public boolean isIncomingChannelRegistered(@NotNull final Plugin plugin, @NotNull String channel) {
 	    channel = validateAndCorrectChannel(channel);
 
         synchronized (incomingLock) {
-            Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
+            final Set<PluginMessageListenerRegistration> registrations = incomingByPlugin.get(plugin);
 
             if (registrations != null) {
-                for (PluginMessageListenerRegistration registration : registrations) {
+                for (final PluginMessageListenerRegistration registration : registrations) {
                     if (registration.getChannel().equals(channel)) {
                         return true;
                     }
@@ -376,11 +376,11 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public boolean isOutgoingChannelRegistered(@NotNull Plugin plugin, @NotNull String channel) {
+    public boolean isOutgoingChannelRegistered(@NotNull final Plugin plugin, @NotNull String channel) {
 	    channel = validateAndCorrectChannel(channel);
 
         synchronized (outgoingLock) {
-            Set<String> channels = outgoingByPlugin.get(plugin);
+            final Set<String> channels = outgoingByPlugin.get(plugin);
 
             if (channels != null) {
                 return channels.contains(channel);
@@ -391,18 +391,18 @@ public class StandardMessenger implements Messenger {
     }
 
     @Override
-    public void dispatchIncomingMessage(@NotNull Player source, @NotNull String channel, @NotNull byte[] message) {
+    public void dispatchIncomingMessage(@NotNull final Player source, @NotNull String channel, final byte[] message) {
 	    if (message == null) {
             throw new IllegalArgumentException("Message cannot be null");
         }
         channel = validateAndCorrectChannel(channel);
 
-        Set<PluginMessageListenerRegistration> registrations = getIncomingChannelRegistrations(channel);
+        final Set<PluginMessageListenerRegistration> registrations = getIncomingChannelRegistrations(channel);
 
-        for (PluginMessageListenerRegistration registration : registrations) {
+        for (final PluginMessageListenerRegistration registration : registrations) {
             try {
                 registration.getListener().onPluginMessageReceived(channel, source, message);
-            } catch (Throwable t) {
+            } catch (final Throwable t) {
                 registration.getPlugin().getLogger().log(Level.WARNING,
                     String.format("Plugin %s generated an exception whilst handling plugin message",
                         registration.getPlugin().getDescription().getFullName()
@@ -418,7 +418,7 @@ public class StandardMessenger implements Messenger {
      * @deprecated not an API method
      */
     @Deprecated
-    public static void validateChannel(@NotNull String channel) {
+    public static void validateChannel(@NotNull final String channel) {
         validateAndCorrectChannel(channel);
     }
 
@@ -431,7 +431,7 @@ public class StandardMessenger implements Messenger {
      */
     @Deprecated
     @NotNull
-    public static String validateAndCorrectChannel(@NotNull String channel) {
+    public static String validateAndCorrectChannel(@NotNull final String channel) {
 	    // This will correct registrations / outgoing messages
         // It is not legal to send "BungeeCord" incoming anymore so we are fine there,
         // but we must make sure that none of the API methods repeatedly call validate
@@ -473,7 +473,7 @@ public class StandardMessenger implements Messenger {
      * @throws ChannelNotRegisteredException Thrown if the channel is not
      *     registered for this plugin.
      */
-    public static void validatePluginMessage(@NotNull Messenger messenger, @NotNull Plugin source, @NotNull String channel, @NotNull byte[] message) {
+    public static void validatePluginMessage(@NotNull final Messenger messenger, @NotNull final Plugin source, @NotNull final String channel, final byte[] message) {
 	    if (!source.isEnabled()) {
             throw new IllegalArgumentException("Plugin must be enabled to send messages");
         }
diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
index 3efedc490cd1faf8747b15ed2b50794fd1642e82..1fbd3ba05d3a999f490460a1e689657fd3d444e0 100644
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -27,7 +27,7 @@ public class Potion {
      *
      * @param type The potion type
      */
-    public Potion(@NotNull PotionType type) {
+    public Potion(@NotNull final PotionType type) {
         Validate.notNull(type, "Null PotionType");
         this.type = type;
     }
@@ -38,7 +38,7 @@ public class Potion {
      * @param type The type of potion.
      * @param level The potion's level.
      */
-    public Potion(@NotNull PotionType type, int level) {
+    public Potion(@NotNull final PotionType type, final int level) {
         this(type);
         Validate.notNull(type, "Type cannot be null");
         Validate.isTrue(level > 0 && level < 3, "Level must be 1 or 2");
@@ -55,7 +55,7 @@ public class Potion {
      *     #splash()}.
      */
     @Deprecated
-    public Potion(@NotNull PotionType type, int level, boolean splash) {
+    public Potion(@NotNull final PotionType type, final int level, final boolean splash) {
         this(type, level);
         this.splash = splash;
     }
@@ -71,7 +71,7 @@ public class Potion {
      *     #extend()} and possibly {@link #splash()}.
      */
     @Deprecated
-    public Potion(@NotNull PotionType type, int level, boolean splash, boolean extended) {
+    public Potion(@NotNull final PotionType type, final int level, final boolean splash, final boolean extended) {
         this(type, level, splash);
         this.extended = extended;
     }
@@ -104,11 +104,11 @@ public class Potion {
      *
      * @param to The itemstack to apply to
      */
-    public void apply(@NotNull ItemStack to) {
+    public void apply(@NotNull final ItemStack to) {
         Validate.notNull(to, "itemstack cannot be null");
         Validate.isTrue(to.hasItemMeta(), "given itemstack is not a potion");
         Validate.isTrue(to.getItemMeta() instanceof PotionMeta, "given itemstack is not a potion");
-        PotionMeta meta = (PotionMeta) to.getItemMeta();
+        final PotionMeta meta = (PotionMeta) to.getItemMeta();
         meta.setBasePotionData(new PotionData(type, extended, level == 2));
         to.setItemMeta(meta);
     }
@@ -120,20 +120,20 @@ public class Potion {
      * @param to The entity to apply the effects to
      * @see LivingEntity#addPotionEffects(Collection)
      */
-    public void apply(@NotNull LivingEntity to) {
+    public void apply(@NotNull final LivingEntity to) {
         Validate.notNull(to, "entity cannot be null");
         to.addPotionEffects(getEffects());
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
         if (obj == null || getClass() != obj.getClass()) {
             return false;
         }
-        Potion other = (Potion) obj;
+        final Potion other = (Potion) obj;
         return extended == other.extended && splash == other.splash && level == other.level && type == other.type;
     }
 
@@ -203,7 +203,7 @@ public class Potion {
      *
      * @param isExtended Whether the potion should have extended duration
      */
-    public void setHasExtendedDuration(boolean isExtended) {
+    public void setHasExtendedDuration(final boolean isExtended) {
         Validate.isTrue(type == null || !type.isInstant(), "Instant potions cannot be extended");
         extended = isExtended;
     }
@@ -214,7 +214,7 @@ public class Potion {
      *
      * @param isSplash Whether this is a splash potion
      */
-    public void setSplash(boolean isSplash) {
+    public void setSplash(final boolean isSplash) {
         splash = isSplash;
     }
 
@@ -223,7 +223,7 @@ public class Potion {
      *
      * @param type The new type of this potion
      */
-    public void setType(@NotNull PotionType type) {
+    public void setType(@NotNull final PotionType type) {
         this.type = type;
     }
 
@@ -232,7 +232,7 @@ public class Potion {
      *
      * @param level The new level of this potion
      */
-    public void setLevel(int level) {
+    public void setLevel(final int level) {
         Validate.notNull(this.type, "No-effect potions don't have a level.");
         Validate.isTrue(level > 0 && level <= 2, "Level must be between 1 and 2 for this potion");
         this.level = level;
@@ -258,15 +258,15 @@ public class Potion {
      * @return The created ItemStack
      */
     @NotNull
-    public ItemStack toItemStack(int amount) {
-        Material material;
+    public ItemStack toItemStack(final int amount) {
+        final Material material;
         if (isSplash()) {
             material = Material.SPLASH_POTION;
         } else {
             material = Material.POTION;
         }
-        ItemStack itemStack = new ItemStack(material, amount);
-        PotionMeta meta = (PotionMeta) itemStack.getItemMeta();
+        final ItemStack itemStack = new ItemStack(material, amount);
+        final PotionMeta meta = (PotionMeta) itemStack.getItemMeta();
         meta.setBasePotionData(new PotionData(type, extended, level == 2)); // Paper - fix swapped values
         itemStack.setItemMeta(meta);
         return itemStack;
@@ -287,8 +287,8 @@ public class Potion {
      * @return the produced potion
      */
     @NotNull
-    public static Potion fromDamage(int damage) {
-        PotionType type = switch (damage & POTION_BIT) {
+    public static Potion fromDamage(final int damage) {
+        final PotionType type = switch (damage & POTION_BIT) {
             case 1 -> PotionType.REGEN;
 	        case 2 -> PotionType.SPEED;
 	        case 3 -> PotionType.FIRE_RESISTANCE;
@@ -322,7 +322,7 @@ public class Potion {
     }
 
     @NotNull
-    public static Potion fromItemStack(@NotNull ItemStack item) {
+    public static Potion fromItemStack(@NotNull final ItemStack item) {
         Validate.notNull(item, "item cannot be null");
         if (item.getType() != Material.POTION)
             throw new IllegalArgumentException("item is not a potion");
@@ -345,7 +345,7 @@ public class Potion {
      *
      * @param other The new PotionBrewer
      */
-    public static void setPotionBrewer(@NotNull PotionBrewer other) {
+    public static void setPotionBrewer(@NotNull final PotionBrewer other) {
         if (brewer != null)
             throw new IllegalArgumentException("brewer can only be set internally");
         brewer = other;
diff --git a/src/main/java/org/bukkit/potion/PotionData.java b/src/main/java/org/bukkit/potion/PotionData.java
index ba0d671165b8b1c8cc894e0775a239cd07617b49..5fa8287b603cce8a2c40af53e422331aabad2a83 100644
--- a/src/main/java/org/bukkit/potion/PotionData.java
+++ b/src/main/java/org/bukkit/potion/PotionData.java
@@ -19,7 +19,7 @@ public final class PotionData {
      * @param upgraded whether the potion is upgraded PotionType#isUpgradable()
      * must be true
      */
-    public PotionData(@NotNull PotionType type, boolean extended, boolean upgraded) {
+    public PotionData(@NotNull final PotionType type, final boolean extended, final boolean upgraded) {
         Validate.notNull(type, "Potion Type must not be null");
         Validate.isTrue(!upgraded || type.isUpgradeable(), "Potion Type is not upgradable");
         Validate.isTrue(!extended || type.isExtendable(), "Potion Type is not extendable");
@@ -29,7 +29,7 @@ public final class PotionData {
         this.upgraded = upgraded;
     }
 
-    public PotionData(@NotNull PotionType type) {
+    public PotionData(@NotNull final PotionType type) {
         this(type, false, false);
     }
 
@@ -74,14 +74,14 @@ public final class PotionData {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
         if (obj == null || getClass() != obj.getClass()) {
             return false;
         }
-        PotionData other = (PotionData) obj;
+        final PotionData other = (PotionData) obj;
         return (this.upgraded == other.upgraded) && (this.extended == other.extended) && (this.type == other.type);
     }
 }
diff --git a/src/main/java/org/bukkit/potion/PotionEffect.java b/src/main/java/org/bukkit/potion/PotionEffect.java
index 74767751199bce03d63f2a9524712656193f850c..a611d6594575109ad23f58a72d1d8285d62f8629 100644
--- a/src/main/java/org/bukkit/potion/PotionEffect.java
+++ b/src/main/java/org/bukkit/potion/PotionEffect.java
@@ -43,7 +43,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param particles the particle status, see {@link PotionEffect#hasParticles()}
      * @param icon the icon status, see {@link PotionEffect#hasIcon()}
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles, boolean icon) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier, final boolean ambient, final boolean particles, final boolean icon) {
         Validate.notNull(type, "effect type cannot be null");
         this.type = type;
         this.duration = duration;
@@ -63,7 +63,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
      * @param particles the particle status, see {@link PotionEffect#hasParticles()}
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient, boolean particles) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier, final boolean ambient, final boolean particles) {
         this(type, duration, amplifier, ambient, particles, particles);
     }
 
@@ -76,7 +76,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param amplifier the amplifier, see {@link PotionEffect#getAmplifier()}
      * @param ambient the ambient status, see {@link PotionEffect#isAmbient()}
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier, boolean ambient) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier, final boolean ambient) {
         this(type, duration, amplifier, ambient, true);
     }
 
@@ -88,7 +88,7 @@ public class PotionEffect implements ConfigurationSerializable {
      * @param amplifier the amplifier for the effect
      * @see PotionEffect#PotionEffect(PotionEffectType, int, int, boolean)
      */
-    public PotionEffect(@NotNull PotionEffectType type, int duration, int amplifier) {
+    public PotionEffect(@NotNull final PotionEffectType type, final int duration, final int amplifier) {
         this(type, duration, amplifier, true);
     }
 
@@ -97,57 +97,57 @@ public class PotionEffect implements ConfigurationSerializable {
      *
      * @param map the map to deserialize from
      */
-    public PotionEffect(@NotNull Map<String, Object> map) {
+    public PotionEffect(@NotNull final Map<String, Object> map) {
         this(getEffectType(map), getInt(map, DURATION), getInt(map, AMPLIFIER), getBool(map, AMBIENT, false), getBool(map, PARTICLES, true), getBool(map, ICON, getBool(map, PARTICLES, true)));
     }
 
     // Paper start
     @NotNull
-    public PotionEffect withType(@NotNull PotionEffectType type) {
+    public PotionEffect withType(@NotNull final PotionEffectType type) {
         return new PotionEffect(type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withDuration(int duration) {
+    public PotionEffect withDuration(final int duration) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withAmplifier(int amplifier) {
+    public PotionEffect withAmplifier(final int amplifier) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withAmbient(boolean ambient) {
+    public PotionEffect withAmbient(final boolean ambient) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withParticles(boolean particles) {
+    public PotionEffect withParticles(final boolean particles) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     @NotNull
-    public PotionEffect withIcon(boolean icon) {
+    public PotionEffect withIcon(final boolean icon) {
         return new PotionEffect(this.type, duration, amplifier, ambient, particles, icon);
     }
     // Paper end
 
     @NotNull
-    private static PotionEffectType getEffectType(@NotNull Map<?, ?> map) {
-        int type = getInt(map, TYPE);
-        PotionEffectType effect = PotionEffectType.getById(type);
+    private static PotionEffectType getEffectType(@NotNull final Map<?, ?> map) {
+        final int type = getInt(map, TYPE);
+        final PotionEffectType effect = PotionEffectType.getById(type);
         if (effect != null) {
             return effect;
         }
         throw new NoSuchElementException(map + " does not contain " + TYPE);
     }
 
-    private static int getInt(@NotNull Map<?, ?> map, @NotNull Object key) {
-        Object num = map.get(key);
+    private static int getInt(@NotNull final Map<?, ?> map, @NotNull final Object key) {
+        final Object num = map.get(key);
         if (num instanceof Integer) {
             return (Integer) num;
         }
         throw new NoSuchElementException(map + " does not contain " + key);
     }
 
-    private static boolean getBool(@NotNull Map<?, ?> map, @NotNull Object key, boolean def) {
-        Object bool = map.get(key);
+    private static boolean getBool(@NotNull final Map<?, ?> map, @NotNull final Object key, final boolean def) {
+        final Object bool = map.get(key);
         if (bool instanceof Boolean) {
             return (Boolean) bool;
         }
@@ -175,19 +175,19 @@ public class PotionEffect implements ConfigurationSerializable {
      * @return Whether the effect could be added
      * @see LivingEntity#addPotionEffect(PotionEffect)
      */
-    public boolean apply(@NotNull LivingEntity entity) {
+    public boolean apply(@NotNull final LivingEntity entity) {
         return entity.addPotionEffect(this);
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) {
             return true;
         }
         if (!(obj instanceof PotionEffect)) {
             return false;
         }
-        PotionEffect that = (PotionEffect) obj;
+        final PotionEffect that = (PotionEffect) obj;
         return this.type.equals(that.type) && this.ambient == that.ambient && this.amplifier == that.amplifier && this.duration == that.duration && this.particles == that.particles && this.icon == that.icon;
     }
 
diff --git a/src/main/java/org/bukkit/potion/PotionEffectType.java b/src/main/java/org/bukkit/potion/PotionEffectType.java
index 71d3336dac1a4f30ff6c5b45517765d68dc6d4da..68f6573a4f56c5070d97d13b6c988e8764d9ab05 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectType.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectType.java
@@ -176,7 +176,7 @@ public abstract class PotionEffectType {
 
     private final int id;
 
-    protected PotionEffectType(int id) {
+    protected PotionEffectType(final int id) {
         this.id = id;
     }
 
@@ -190,7 +190,7 @@ public abstract class PotionEffectType {
      * @return a resulting potion effect
      */
     @NotNull
-    public PotionEffect createEffect(int duration, int amplifier) {
+    public PotionEffect createEffect(final int duration, final int amplifier) {
         return new PotionEffect(this, isInstant() ? 1 : (int) (duration * getDurationModifier()), amplifier);
     }
 
@@ -238,7 +238,7 @@ public abstract class PotionEffectType {
     public abstract Color getColor();
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (obj == null) {
             return false;
         }
@@ -273,7 +273,7 @@ public abstract class PotionEffectType {
      */
     @Deprecated
     @Nullable
-    public static PotionEffectType getById(int id) {
+    public static PotionEffectType getById(final int id) {
         if (id >= byId.length || id < 0)
             return null;
         return byId[id];
@@ -286,7 +286,7 @@ public abstract class PotionEffectType {
      * @return Resulting PotionEffectType, or null if not found.
      */
     @Nullable
-    public static PotionEffectType getByName(@NotNull String name) {
+    public static PotionEffectType getByName(@NotNull final String name) {
         Validate.notNull(name, "name cannot be null");
         return byName.get(name.toLowerCase(java.util.Locale.ENGLISH));
     }
@@ -298,7 +298,7 @@ public abstract class PotionEffectType {
      *
      * @param type PotionType to register
      */
-    public static void registerPotionEffectType(@NotNull PotionEffectType type) {
+    public static void registerPotionEffectType(@NotNull final PotionEffectType type) {
         if (byId[type.id] != null || byName.containsKey(type.getName().toLowerCase(java.util.Locale.ENGLISH))) {
             throw new IllegalArgumentException("Cannot set already-set type");
         } else if (!acceptingNew) {
diff --git a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
index 47d46edc49c8a35ff9e8b462ea045f192f98d1f4..a9ff23c7519e9c5bf5caf2568cd2610a6697081b 100644
--- a/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
+++ b/src/main/java/org/bukkit/potion/PotionEffectTypeWrapper.java
@@ -4,7 +4,7 @@ import org.bukkit.Color;
 import org.jetbrains.annotations.NotNull;
 
 public class PotionEffectTypeWrapper extends PotionEffectType {
-    protected PotionEffectTypeWrapper(int id) {
+    protected PotionEffectTypeWrapper(final int id) {
         super(id);
     }
 
diff --git a/src/main/java/org/bukkit/potion/PotionType.java b/src/main/java/org/bukkit/potion/PotionType.java
index af7dea669cd394db2498e8d9dc88bbd8eac4b83b..e3e9227c12fdb518bc88cb3229ad6da3e9766df5 100644
--- a/src/main/java/org/bukkit/potion/PotionType.java
+++ b/src/main/java/org/bukkit/potion/PotionType.java
@@ -34,7 +34,7 @@ public enum PotionType {
     private final boolean upgradeable;
     private final boolean extendable;
 
-    PotionType(/*@Nullable*/ PotionEffectType effect, boolean upgradeable, boolean extendable) {
+    PotionType(/*@Nullable*/ final PotionEffectType effect, final boolean upgradeable, final boolean extendable) {
         this.effect = effect;
         this.upgradeable = upgradeable;
         this.extendable = extendable;
@@ -81,10 +81,10 @@ public enum PotionType {
      */
     @Deprecated
     @Nullable
-    public static PotionType getByEffect(@Nullable PotionEffectType effectType) {
+    public static PotionType getByEffect(@Nullable final PotionEffectType effectType) {
         if (effectType == null)
             return WATER;
-        for (PotionType type : PotionType.values()) {
+        for (final PotionType type : PotionType.values()) {
             if (effectType.equals(type.effect))
                 return type;
         }
diff --git a/src/main/java/org/bukkit/scheduler/BukkitRunnable.java b/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
index 35599aac72c50273abb9efe35bcb6406d9b1aba6..d0e3be215f1471c3e0b106795dc030da66ed6e53 100644
--- a/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
+++ b/src/main/java/org/bukkit/scheduler/BukkitRunnable.java
@@ -40,7 +40,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTask(Plugin, Runnable)
      */
     @NotNull
-    public synchronized BukkitTask runTask(@NotNull Plugin plugin) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTask(@NotNull final Plugin plugin) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTask(plugin, (Runnable) this));
     }
@@ -58,7 +58,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskAsynchronously(Plugin, Runnable)
      */
     @NotNull
-    public synchronized BukkitTask runTaskAsynchronously(@NotNull Plugin plugin) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskAsynchronously(@NotNull final Plugin plugin) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskAsynchronously(plugin, (Runnable) this));
     }
@@ -74,7 +74,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskLater(Plugin, Runnable, long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskLater(@NotNull Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskLater(@NotNull final Plugin plugin, final long delay) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskLater(plugin, (Runnable) this, delay));
     }
@@ -94,7 +94,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskLaterAsynchronously(Plugin, Runnable, long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskLaterAsynchronously(@NotNull Plugin plugin, long delay) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskLaterAsynchronously(@NotNull final Plugin plugin, final long delay) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskLaterAsynchronously(plugin, (Runnable) this, delay));
     }
@@ -112,7 +112,7 @@ public abstract class BukkitRunnable implements Runnable {
      * @see BukkitScheduler#runTaskTimer(Plugin, Runnable, long, long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskTimer(@NotNull Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskTimer(@NotNull final Plugin plugin, final long delay, final long period) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskTimer(plugin, (Runnable) this, delay, period));
     }
@@ -135,7 +135,7 @@ public abstract class BukkitRunnable implements Runnable {
      *     long)
      */
     @NotNull
-    public synchronized BukkitTask runTaskTimerAsynchronously(@NotNull Plugin plugin, long delay, long period) throws IllegalArgumentException, IllegalStateException {
+    public synchronized BukkitTask runTaskTimerAsynchronously(@NotNull final Plugin plugin, final long delay, final long period) throws IllegalArgumentException, IllegalStateException {
         checkNotYetScheduled();
         return setupTask(Bukkit.getScheduler().runTaskTimerAsynchronously(plugin, (Runnable) this, delay, period));
     }
diff --git a/src/main/java/org/bukkit/util/BlockIterator.java b/src/main/java/org/bukkit/util/BlockIterator.java
index afdd52364d827ca911773362f6251c0a1b0ea169..9a90ce69005fd490997d0a00b2ae562866335ef6 100644
--- a/src/main/java/org/bukkit/util/BlockIterator.java
+++ b/src/main/java/org/bukkit/util/BlockIterator.java
@@ -55,11 +55,11 @@ public class BlockIterator implements Iterator<Block> {
      *     unloaded chunks. A value of 0 indicates no limit
      *
      */
-    public BlockIterator(@NotNull World world, @NotNull Vector start, @NotNull Vector direction, double yOffset, int maxDistance) {
+    public BlockIterator(@NotNull final World world, @NotNull final Vector start, @NotNull final Vector direction, final double yOffset, final int maxDistance) {
         this.world = world;
         this.maxDistance = maxDistance;
 
-        Vector startClone = start.clone();
+        final Vector startClone = start.clone();
 
         startClone.setY(startClone.getY() + yOffset);
 
@@ -73,7 +73,7 @@ public class BlockIterator implements Iterator<Block> {
         double secondPosition = 0;
         double thirdPosition = 0;
 
-        Block startBlock = this.world.getBlockAt(floor(startClone.getX()), floor(startClone.getY()), floor(startClone.getZ()));
+        final Block startBlock = this.world.getBlockAt(floor(startClone.getX()), floor(startClone.getY()), floor(startClone.getZ()));
 
         if (getXLength(direction) > mainDirection) {
             mainFace = getXFace(direction);
@@ -117,9 +117,9 @@ public class BlockIterator implements Iterator<Block> {
 
         // trace line backwards to find intercept with plane perpendicular to the main axis
 
-        double d = mainPosition / mainDirection; // how far to hit face behind
-        double secondd = secondPosition - secondDirection * d;
-        double thirdd = thirdPosition - thirdDirection * d;
+        final double d = mainPosition / mainDirection; // how far to hit face behind
+        final double secondd = secondPosition - secondDirection * d;
+        final double thirdd = thirdPosition - thirdDirection * d;
 
         // Guarantee that the ray will pass though the start block.
         // It is possible that it would miss due to rounding
@@ -179,47 +179,47 @@ public class BlockIterator implements Iterator<Block> {
 
     }
 
-    private boolean blockEquals(@NotNull Block a, @NotNull Block b) {
+    private boolean blockEquals(@NotNull final Block a, @NotNull final Block b) {
         return a.getX() == b.getX() && a.getY() == b.getY() && a.getZ() == b.getZ();
     }
 
-    private BlockFace getXFace(@NotNull Vector direction) {
+    private BlockFace getXFace(@NotNull final Vector direction) {
         return ((direction.getX() > 0) ? BlockFace.EAST : BlockFace.WEST);
     }
 
-    private BlockFace getYFace(@NotNull Vector direction) {
+    private BlockFace getYFace(@NotNull final Vector direction) {
         return ((direction.getY() > 0) ? BlockFace.UP : BlockFace.DOWN);
     }
 
-    private BlockFace getZFace(@NotNull Vector direction) {
+    private BlockFace getZFace(@NotNull final Vector direction) {
         return ((direction.getZ() > 0) ? BlockFace.SOUTH : BlockFace.NORTH);
     }
 
-    private double getXLength(@NotNull Vector direction) {
+    private double getXLength(@NotNull final Vector direction) {
         return Math.abs(direction.getX());
     }
 
-    private double getYLength(@NotNull Vector direction) {
+    private double getYLength(@NotNull final Vector direction) {
         return Math.abs(direction.getY());
     }
 
-    private double getZLength(@NotNull Vector direction) {
+    private double getZLength(@NotNull final Vector direction) {
         return Math.abs(direction.getZ());
     }
 
-    private double getPosition(double direction, double position, int blockPosition) {
+    private double getPosition(final double direction, final double position, final int blockPosition) {
         return direction > 0 ? (position - blockPosition) : (blockPosition + 1 - position);
     }
 
-    private double getXPosition(@NotNull Vector direction, @NotNull Vector position, @NotNull Block block) {
+    private double getXPosition(@NotNull final Vector direction, @NotNull final Vector position, @NotNull final Block block) {
         return getPosition(direction.getX(), position.getX(), block.getX());
     }
 
-    private double getYPosition(@NotNull Vector direction, @NotNull Vector position, @NotNull Block block) {
+    private double getYPosition(@NotNull final Vector direction, @NotNull final Vector position, @NotNull final Block block) {
         return getPosition(direction.getY(), position.getY(), block.getY());
     }
 
-    private double getZPosition(@NotNull Vector direction, @NotNull Vector position, @NotNull Block block) {
+    private double getZPosition(@NotNull final Vector direction, @NotNull final Vector position, @NotNull final Block block) {
         return getPosition(direction.getZ(), position.getZ(), block.getZ());
     }
 
@@ -235,7 +235,7 @@ public class BlockIterator implements Iterator<Block> {
      *     trace. Setting this value above 140 may lead to problems with
      *     unloaded chunks. A value of 0 indicates no limit
      */
-    public BlockIterator(@NotNull Location loc, double yOffset, int maxDistance) {
+    public BlockIterator(@NotNull final Location loc, final double yOffset, final int maxDistance) {
         this(loc.getWorld(), loc.toVector(), loc.getDirection(), yOffset, maxDistance);
     }
 
@@ -249,7 +249,7 @@ public class BlockIterator implements Iterator<Block> {
      *     by this value
      */
 
-    public BlockIterator(@NotNull Location loc, double yOffset) {
+    public BlockIterator(@NotNull final Location loc, final double yOffset) {
         this(loc.getWorld(), loc.toVector(), loc.getDirection(), yOffset, 0);
     }
 
@@ -261,7 +261,7 @@ public class BlockIterator implements Iterator<Block> {
      * @param loc The location for the start of the ray trace
      */
 
-    public BlockIterator(@NotNull Location loc) {
+    public BlockIterator(@NotNull final Location loc) {
         this(loc, 0D);
     }
 
@@ -276,7 +276,7 @@ public class BlockIterator implements Iterator<Block> {
      *     unloaded chunks. A value of 0 indicates no limit
      */
 
-    public BlockIterator(@NotNull LivingEntity entity, int maxDistance) {
+    public BlockIterator(@NotNull final LivingEntity entity, final int maxDistance) {
         this(entity.getLocation(), entity.getEyeHeight(), maxDistance);
     }
 
@@ -288,7 +288,7 @@ public class BlockIterator implements Iterator<Block> {
      * @param entity Information from the entity is used to set up the trace
      */
 
-    public BlockIterator(@NotNull LivingEntity entity) {
+    public BlockIterator(@NotNull final LivingEntity entity) {
         this(entity, 0);
     }
 
@@ -342,7 +342,7 @@ public class BlockIterator implements Iterator<Block> {
 
         if (secondError > 0 && thirdError > 0) {
             blockQueue[2] = blockQueue[0].getRelative(mainFace);
-            if (((long) secondStep) * ((long) thirdError) < ((long) thirdStep) * ((long) secondError)) {
+            if (((long) secondStep) * thirdError < ((long) thirdStep) * secondError) {
                 blockQueue[1] = blockQueue[2].getRelative(secondFace);
                 blockQueue[0] = blockQueue[1].getRelative(thirdFace);
             } else {
diff --git a/src/main/java/org/bukkit/util/BlockVector.java b/src/main/java/org/bukkit/util/BlockVector.java
index eddc7248903fe3672010c04c0684f9ae3e8559e4..cfa3f90135467aef5ddb327334e1f2ac41e1b616 100644
--- a/src/main/java/org/bukkit/util/BlockVector.java
+++ b/src/main/java/org/bukkit/util/BlockVector.java
@@ -27,7 +27,7 @@ public class BlockVector extends Vector {
      *
      * @param vec The other vector.
      */
-    public BlockVector(@NotNull Vector vec) {
+    public BlockVector(@NotNull final Vector vec) {
         this.x = vec.getX();
         this.y = vec.getY();
         this.z = vec.getZ();
@@ -40,7 +40,7 @@ public class BlockVector extends Vector {
      * @param y Y component
      * @param z Z component
      */
-    public BlockVector(int x, int y, int z) {
+    public BlockVector(final int x, final int y, final int z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -53,7 +53,7 @@ public class BlockVector extends Vector {
      * @param y Y component
      * @param z Z component
      */
-    public BlockVector(double x, double y, double z) {
+    public BlockVector(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -66,7 +66,7 @@ public class BlockVector extends Vector {
      * @param y Y component
      * @param z Z component
      */
-    public BlockVector(float x, float y, float z) {
+    public BlockVector(final float x, final float y, final float z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -79,11 +79,11 @@ public class BlockVector extends Vector {
      * @return whether the other object is equivalent
      */
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (!(obj instanceof BlockVector)) {
             return false;
         }
-        BlockVector other = (BlockVector) obj;
+        final BlockVector other = (BlockVector) obj;
 
         return (int) other.getX() == (int) this.x && (int) other.getY() == (int) this.y && (int) other.getZ() == (int) this.z;
 
@@ -105,12 +105,12 @@ public class BlockVector extends Vector {
      * @return vector
      */
     @Override
-    public BlockVector clone() {
+    public @NotNull BlockVector clone() {
         return (BlockVector) super.clone();
     }
 
     @NotNull
-    public static BlockVector deserialize(@NotNull Map<String, Object> args) {
+    public static BlockVector deserialize(@NotNull final Map<String, Object> args) {
         double x = 0;
         double y = 0;
         double z = 0;
diff --git a/src/main/java/org/bukkit/util/BoundingBox.java b/src/main/java/org/bukkit/util/BoundingBox.java
index 727b75018d9b81bb870ecd72ad8c604f2faaf914..7f0c3a666a6a6a9c4170034f86ed192251948b7a 100644
--- a/src/main/java/org/bukkit/util/BoundingBox.java
+++ b/src/main/java/org/bukkit/util/BoundingBox.java
@@ -39,7 +39,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Vector corner1, @NotNull Vector corner2) {
+    public static BoundingBox of(@NotNull final Vector corner1, @NotNull final Vector corner2) {
         Validate.notNull(corner1, "Corner1 is null!");
         Validate.notNull(corner2, "Corner2 is null!");
         return new BoundingBox(corner1.getX(), corner1.getY(), corner1.getZ(), corner2.getX(), corner2.getY(), corner2.getZ());
@@ -54,7 +54,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Location corner1, @NotNull Location corner2) {
+    public static BoundingBox of(@NotNull final Location corner1, @NotNull final Location corner2) {
         Validate.notNull(corner1, "Corner1 is null!");
         Validate.notNull(corner2, "Corner2 is null!");
         Validate.isTrue(Objects.equals(corner1.getWorld(), corner2.getWorld()), "Locations from different worlds!");
@@ -72,24 +72,24 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Block corner1, @NotNull Block corner2) {
+    public static BoundingBox of(@NotNull final Block corner1, @NotNull final Block corner2) {
         Validate.notNull(corner1, "Corner1 is null!");
         Validate.notNull(corner2, "Corner2 is null!");
         Validate.isTrue(Objects.equals(corner1.getWorld(), corner2.getWorld()), "Blocks from different worlds!");
 
-        int x1 = corner1.getX();
-        int y1 = corner1.getY();
-        int z1 = corner1.getZ();
-        int x2 = corner2.getX();
-        int y2 = corner2.getY();
-        int z2 = corner2.getZ();
+        final int x1 = corner1.getX();
+        final int y1 = corner1.getY();
+        final int z1 = corner1.getZ();
+        final int x2 = corner2.getX();
+        final int y2 = corner2.getY();
+        final int z2 = corner2.getZ();
 
-        int minX = Math.min(x1, x2);
-        int minY = Math.min(y1, y2);
-        int minZ = Math.min(z1, z2);
-        int maxX = Math.max(x1, x2) + 1;
-        int maxY = Math.max(y1, y2) + 1;
-        int maxZ = Math.max(z1, z2) + 1;
+        final int minX = Math.min(x1, x2);
+        final int minY = Math.min(y1, y2);
+        final int minZ = Math.min(z1, z2);
+        final int maxX = Math.max(x1, x2) + 1;
+        final int maxY = Math.max(y1, y2) + 1;
+        final int maxZ = Math.max(z1, z2) + 1;
 
         return new BoundingBox(minX, minY, minZ, maxX, maxY, maxZ);
     }
@@ -101,7 +101,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Block block) {
+    public static BoundingBox of(@NotNull final Block block) {
         Validate.notNull(block, "Block is null!");
         return new BoundingBox(block.getX(), block.getY(), block.getZ(), block.getX() + 1, block.getY() + 1, block.getZ() + 1);
     }
@@ -116,7 +116,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Vector center, double x, double y, double z) {
+    public static BoundingBox of(@NotNull final Vector center, final double x, final double y, final double z) {
         Validate.notNull(center, "Center is null!");
         return new BoundingBox(center.getX() - x, center.getY() - y, center.getZ() - z, center.getX() + x, center.getY() + y, center.getZ() + z);
     }
@@ -131,7 +131,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the bounding box
      */
     @NotNull
-    public static BoundingBox of(@NotNull Location center, double x, double y, double z) {
+    public static BoundingBox of(@NotNull final Location center, final double x, final double y, final double z) {
         Validate.notNull(center, "Center is null!");
         return new BoundingBox(center.getX() - x, center.getY() - y, center.getZ() - z, center.getX() + x, center.getY() + y, center.getZ() + z);
     }
@@ -161,7 +161,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param y2 the second corner's y value
      * @param z2 the second corner's z value
      */
-    public BoundingBox(double x1, double y1, double z1, double x2, double y2, double z2) {
+    public BoundingBox(final double x1, final double y1, final double z1, final double x2, final double y2, final double z2) {
         this.resize(x1, y1, z1, x2, y2, z2);
     }
 
@@ -177,7 +177,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (resized)
      */
     @NotNull
-    public BoundingBox resize(double x1, double y1, double z1, double x2, double y2, double z2) {
+    public BoundingBox resize(final double x1, final double y1, final double z1, final double x2, final double y2, final double z2) {
         NumberConversions.checkFinite(x1, "x1 not finite");
         NumberConversions.checkFinite(y1, "y1 not finite");
         NumberConversions.checkFinite(z1, "z1 not finite");
@@ -348,7 +348,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box
      */
     @NotNull
-    public BoundingBox copy(@NotNull BoundingBox other) {
+    public BoundingBox copy(@NotNull final BoundingBox other) {
         Validate.notNull(other, "Other bounding box is null!");
         return this.resize(other.getMinX(), other.getMinY(), other.getMinZ(), other.getMaxX(), other.getMaxY(), other.getMaxZ());
     }
@@ -370,7 +370,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double negativeX, double negativeY, double negativeZ, double positiveX, double positiveY, double positiveZ) {
+    public BoundingBox expand(final double negativeX, final double negativeY, final double negativeZ, final double positiveX, final double positiveY, final double positiveZ) {
         if (negativeX == 0.0D && negativeY == 0.0D && negativeZ == 0.0D && positiveX == 0.0D && positiveY == 0.0D && positiveZ == 0.0D) {
             return this;
         }
@@ -383,7 +383,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
 
         // limit shrinking:
         if (newMinX > newMaxX) {
-            double centerX = this.getCenterX();
+            final double centerX = this.getCenterX();
             if (newMaxX >= centerX) {
                 newMinX = newMaxX;
             } else if (newMinX <= centerX) {
@@ -394,7 +394,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
             }
         }
         if (newMinY > newMaxY) {
-            double centerY = this.getCenterY();
+            final double centerY = this.getCenterY();
             if (newMaxY >= centerY) {
                 newMinY = newMaxY;
             } else if (newMinY <= centerY) {
@@ -405,7 +405,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
             }
         }
         if (newMinZ > newMaxZ) {
-            double centerZ = this.getCenterZ();
+            final double centerZ = this.getCenterZ();
             if (newMaxZ >= centerZ) {
                 newMinZ = newMaxZ;
             } else if (newMinZ <= centerZ) {
@@ -434,7 +434,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double x, double y, double z) {
+    public BoundingBox expand(final double x, final double y, final double z) {
         return this.expand(x, y, z, x, y, z);
     }
 
@@ -449,11 +449,11 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(@NotNull Vector expansion) {
+    public BoundingBox expand(@NotNull final Vector expansion) {
         Validate.notNull(expansion, "Expansion is null!");
-        double x = expansion.getX();
-        double y = expansion.getY();
-        double z = expansion.getZ();
+        final double x = expansion.getX();
+        final double y = expansion.getY();
+        final double z = expansion.getZ();
         return this.expand(x, y, z, x, y, z);
     }
 
@@ -467,7 +467,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double expansion) {
+    public BoundingBox expand(final double expansion) {
         return this.expand(expansion, expansion, expansion, expansion, expansion, expansion);
     }
 
@@ -485,16 +485,16 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(double dirX, double dirY, double dirZ, double expansion) {
+    public BoundingBox expand(final double dirX, final double dirY, final double dirZ, final double expansion) {
         if (expansion == 0.0D) return this;
         if (dirX == 0.0D && dirY == 0.0D && dirZ == 0.0D) return this;
 
-        double negativeX = (dirX < 0.0D ? (-dirX * expansion) : 0.0D);
-        double negativeY = (dirY < 0.0D ? (-dirY * expansion) : 0.0D);
-        double negativeZ = (dirZ < 0.0D ? (-dirZ * expansion) : 0.0D);
-        double positiveX = (dirX > 0.0D ? (dirX * expansion) : 0.0D);
-        double positiveY = (dirY > 0.0D ? (dirY * expansion) : 0.0D);
-        double positiveZ = (dirZ > 0.0D ? (dirZ * expansion) : 0.0D);
+        final double negativeX = (dirX < 0.0D ? (-dirX * expansion) : 0.0D);
+        final double negativeY = (dirY < 0.0D ? (-dirY * expansion) : 0.0D);
+        final double negativeZ = (dirZ < 0.0D ? (-dirZ * expansion) : 0.0D);
+        final double positiveX = (dirX > 0.0D ? (dirX * expansion) : 0.0D);
+        final double positiveY = (dirY > 0.0D ? (dirY * expansion) : 0.0D);
+        final double positiveZ = (dirZ > 0.0D ? (dirZ * expansion) : 0.0D);
         return this.expand(negativeX, negativeY, negativeZ, positiveX, positiveY, positiveZ);
     }
 
@@ -510,7 +510,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(@NotNull Vector direction, double expansion) {
+    public BoundingBox expand(@NotNull final Vector direction, final double expansion) {
         Validate.notNull(direction, "Direction is null!");
         return this.expand(direction.getX(), direction.getY(), direction.getZ(), expansion);
     }
@@ -527,7 +527,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expand(@NotNull BlockFace blockFace, double expansion) {
+    public BoundingBox expand(@NotNull final BlockFace blockFace, final double expansion) {
         Validate.notNull(blockFace, "Block face is null!");
         if (blockFace == BlockFace.SELF) return this;
 
@@ -548,7 +548,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expandDirectional(double dirX, double dirY, double dirZ) {
+    public BoundingBox expandDirectional(final double dirX, final double dirY, final double dirZ) {
         return this.expand(dirX, dirY, dirZ, 1.0D);
     }
 
@@ -563,7 +563,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox expandDirectional(@NotNull Vector direction) {
+    public BoundingBox expandDirectional(@NotNull final Vector direction) {
         Validate.notNull(direction, "Expansion is null!");
         return this.expand(direction.getX(), direction.getY(), direction.getZ(), 1.0D);
     }
@@ -578,13 +578,13 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @see #contains(double, double, double)
      */
     @NotNull
-    public BoundingBox union(double posX, double posY, double posZ) {
-        double newMinX = Math.min(this.minX, posX);
-        double newMinY = Math.min(this.minY, posY);
-        double newMinZ = Math.min(this.minZ, posZ);
-        double newMaxX = Math.max(this.maxX, posX);
-        double newMaxY = Math.max(this.maxY, posY);
-        double newMaxZ = Math.max(this.maxZ, posZ);
+    public BoundingBox union(final double posX, final double posY, final double posZ) {
+        final double newMinX = Math.min(this.minX, posX);
+        final double newMinY = Math.min(this.minY, posY);
+        final double newMinZ = Math.min(this.minZ, posZ);
+        final double newMaxX = Math.max(this.maxX, posX);
+        final double newMaxY = Math.max(this.maxY, posY);
+        final double newMaxZ = Math.max(this.maxZ, posZ);
         if (newMinX == this.minX && newMinY == this.minY && newMinZ == this.minZ && newMaxX == this.maxX && newMaxY == this.maxY && newMaxZ == this.maxZ) {
             return this;
         }
@@ -599,7 +599,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @see #contains(double, double, double)
      */
     @NotNull
-    public BoundingBox union(@NotNull Vector position) {
+    public BoundingBox union(@NotNull final Vector position) {
         Validate.notNull(position, "Position is null!");
         return this.union(position.getX(), position.getY(), position.getZ());
     }
@@ -612,7 +612,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @see #contains(double, double, double)
      */
     @NotNull
-    public BoundingBox union(@NotNull Location position) {
+    public BoundingBox union(@NotNull final Location position) {
         Validate.notNull(position, "Position is null!");
         return this.union(position.getX(), position.getY(), position.getZ());
     }
@@ -625,15 +625,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now expanded)
      */
     @NotNull
-    public BoundingBox union(@NotNull BoundingBox other) {
+    public BoundingBox union(@NotNull final BoundingBox other) {
         Validate.notNull(other, "Other bounding box is null!");
         if (this.contains(other)) return this;
-        double newMinX = Math.min(this.minX, other.minX);
-        double newMinY = Math.min(this.minY, other.minY);
-        double newMinZ = Math.min(this.minZ, other.minZ);
-        double newMaxX = Math.max(this.maxX, other.maxX);
-        double newMaxY = Math.max(this.maxY, other.maxY);
-        double newMaxZ = Math.max(this.maxZ, other.maxZ);
+        final double newMinX = Math.min(this.minX, other.minX);
+        final double newMinY = Math.min(this.minY, other.minY);
+        final double newMinZ = Math.min(this.minZ, other.minZ);
+        final double newMaxX = Math.max(this.maxX, other.maxX);
+        final double newMaxY = Math.max(this.maxY, other.maxY);
+        final double newMaxZ = Math.max(this.maxZ, other.maxZ);
         return this.resize(newMinX, newMinY, newMinZ, newMaxX, newMaxY, newMaxZ);
     }
 
@@ -646,15 +646,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @throws IllegalArgumentException if the bounding boxes don't overlap
      */
     @NotNull
-    public BoundingBox intersection(@NotNull BoundingBox other) {
+    public BoundingBox intersection(@NotNull final BoundingBox other) {
         Validate.notNull(other, "Other bounding box is null!");
         Validate.isTrue(this.overlaps(other), "The bounding boxes do not overlap!");
-        double newMinX = Math.max(this.minX, other.minX);
-        double newMinY = Math.max(this.minY, other.minY);
-        double newMinZ = Math.max(this.minZ, other.minZ);
-        double newMaxX = Math.min(this.maxX, other.maxX);
-        double newMaxY = Math.min(this.maxY, other.maxY);
-        double newMaxZ = Math.min(this.maxZ, other.maxZ);
+        final double newMinX = Math.max(this.minX, other.minX);
+        final double newMinY = Math.max(this.minY, other.minY);
+        final double newMinZ = Math.max(this.minZ, other.minZ);
+        final double newMaxX = Math.min(this.maxX, other.maxX);
+        final double newMaxY = Math.min(this.maxY, other.maxY);
+        final double newMaxZ = Math.min(this.maxZ, other.maxZ);
         return this.resize(newMinX, newMinY, newMinZ, newMaxX, newMaxY, newMaxZ);
     }
 
@@ -667,7 +667,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now shifted)
      */
     @NotNull
-    public BoundingBox shift(double shiftX, double shiftY, double shiftZ) {
+    public BoundingBox shift(final double shiftX, final double shiftY, final double shiftZ) {
         if (shiftX == 0.0D && shiftY == 0.0D && shiftZ == 0.0D) return this;
         return this.resize(this.minX + shiftX, this.minY + shiftY, this.minZ + shiftZ,
                 this.maxX + shiftX, this.maxY + shiftY, this.maxZ + shiftZ);
@@ -680,7 +680,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now shifted)
      */
     @NotNull
-    public BoundingBox shift(@NotNull Vector shift) {
+    public BoundingBox shift(@NotNull final Vector shift) {
         Validate.notNull(shift, "Shift is null!");
         return this.shift(shift.getX(), shift.getY(), shift.getZ());
     }
@@ -692,12 +692,12 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return this bounding box (now shifted)
      */
     @NotNull
-    public BoundingBox shift(@NotNull Location shift) {
+    public BoundingBox shift(@NotNull final Location shift) {
         Validate.notNull(shift, "Shift is null!");
         return this.shift(shift.getX(), shift.getY(), shift.getZ());
     }
 
-    private boolean overlaps(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+    private boolean overlaps(final double minX, final double minY, final double minZ, final double maxX, final double maxY, final double maxZ) {
         return this.minX < maxX && this.maxX > minX
                 && this.minY < maxY && this.maxY > minY
                 && this.minZ < maxZ && this.maxZ > minZ;
@@ -712,7 +712,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param other the other bounding box
      * @return <code>true</code> if overlapping
      */
-    public boolean overlaps(@NotNull BoundingBox other) {
+    public boolean overlaps(@NotNull final BoundingBox other) {
         Validate.notNull(other, "Other bounding box is null!");
         return this.overlaps(other.minX, other.minY, other.minZ, other.maxX, other.maxY, other.maxZ);
     }
@@ -728,15 +728,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param max the second corner
      * @return <code>true</code> if overlapping
      */
-    public boolean overlaps(@NotNull Vector min, @NotNull Vector max) {
+    public boolean overlaps(@NotNull final Vector min, @NotNull final Vector max) {
         Validate.notNull(min, "Min is null!");
         Validate.notNull(max, "Max is null!");
-        double x1 = min.getX();
-        double y1 = min.getY();
-        double z1 = min.getZ();
-        double x2 = max.getX();
-        double y2 = max.getY();
-        double z2 = max.getZ();
+        final double x1 = min.getX();
+        final double y1 = min.getY();
+        final double z1 = min.getZ();
+        final double x2 = max.getX();
+        final double y2 = max.getY();
+        final double z2 = max.getZ();
         return this.overlaps(Math.min(x1, x2), Math.min(y1, y2), Math.min(z1, z2),
                 Math.max(x1, x2), Math.max(y1, y2), Math.max(z1, z2));
     }
@@ -755,7 +755,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param z the position's z coordinates
      * @return <code>true</code> if the bounding box contains the position
      */
-    public boolean contains(double x, double y, double z) {
+    public boolean contains(final double x, final double y, final double z) {
         return x >= this.minX && x < this.maxX
                 && y >= this.minY && y < this.maxY
                 && z >= this.minZ && z < this.maxZ;
@@ -773,12 +773,12 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @param position the position
      * @return <code>true</code> if the bounding box contains the position
      */
-    public boolean contains(@NotNull Vector position) {
+    public boolean contains(@NotNull final Vector position) {
         Validate.notNull(position, "Position is null!");
         return this.contains(position.getX(), position.getY(), position.getZ());
     }
 
-    private boolean contains(double minX, double minY, double minZ, double maxX, double maxY, double maxZ) {
+    private boolean contains(final double minX, final double minY, final double minZ, final double maxX, final double maxY, final double maxZ) {
         return this.minX <= minX && this.maxX >= maxX
                 && this.minY <= minY && this.maxY >= maxY
                 && this.minZ <= minZ && this.maxZ >= maxZ;
@@ -791,7 +791,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return <code>true</code> if the bounding box contains the given bounding
      * box
      */
-    public boolean contains(@NotNull BoundingBox other) {
+    public boolean contains(@NotNull final BoundingBox other) {
         Validate.notNull(other, "Other bounding box is null!");
         return this.contains(other.minX, other.minY, other.minZ, other.maxX, other.maxY, other.maxZ);
     }
@@ -805,15 +805,15 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return <code>true</code> if the bounding box contains the specified
      *     bounding box
      */
-    public boolean contains(@NotNull Vector min, @NotNull Vector max) {
+    public boolean contains(@NotNull final Vector min, @NotNull final Vector max) {
         Validate.notNull(min, "Min is null!");
         Validate.notNull(max, "Max is null!");
-        double x1 = min.getX();
-        double y1 = min.getY();
-        double z1 = min.getZ();
-        double x2 = max.getX();
-        double y2 = max.getY();
-        double z2 = max.getZ();
+        final double x1 = min.getX();
+        final double y1 = min.getY();
+        final double z1 = min.getZ();
+        final double x2 = max.getX();
+        final double y2 = max.getY();
+        final double z2 = max.getZ();
         return this.contains(Math.min(x1, x2), Math.min(y1, y2), Math.min(z1, z2),
                 Math.max(x1, x2), Math.max(y1, y2), Math.max(z1, z2));
     }
@@ -831,7 +831,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
      * @return the ray trace hit result, or <code>null</code> if there is no hit
      */
     @Nullable
-    public RayTraceResult rayTrace(@NotNull Vector start, @NotNull Vector direction, double maxDistance) {
+    public RayTraceResult rayTrace(@NotNull final Vector start, @NotNull final Vector direction, final double maxDistance) {
         Validate.notNull(start, "Start is null!");
         start.checkFinite();
         Validate.notNull(direction, "Direction is null!");
@@ -840,22 +840,22 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         if (maxDistance < 0.0D) return null;
 
         // ray start:
-        double startX = start.getX();
-        double startY = start.getY();
-        double startZ = start.getZ();
+        final double startX = start.getX();
+        final double startY = start.getY();
+        final double startZ = start.getZ();
 
         // ray direction:
-        Vector dir = direction.clone().normalizeZeros().normalize();
-        double dirX = dir.getX();
-        double dirY = dir.getY();
-        double dirZ = dir.getZ();
+        final Vector dir = direction.clone().normalizeZeros().normalize();
+        final double dirX = dir.getX();
+        final double dirY = dir.getY();
+        final double dirZ = dir.getZ();
 
         // saving a few divisions below:
         // Note: If one of the direction vector components is 0.0, these
         // divisions result in infinity. But this is not a problem.
-        double divX = 1.0D / dirX;
-        double divY = 1.0D / dirY;
-        double divZ = 1.0D / dirZ;
+        final double divX = 1.0D / dirX;
+        final double divY = 1.0D / dirY;
+        final double divZ = 1.0D / dirZ;
 
         double tMin;
         double tMax;
@@ -876,10 +876,10 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         }
 
         // intersections with y planes:
-        double tyMin;
-        double tyMax;
-        BlockFace hitBlockFaceYMin;
-        BlockFace hitBlockFaceYMax;
+        final double tyMin;
+        final double tyMax;
+        final BlockFace hitBlockFaceYMin;
+        final BlockFace hitBlockFaceYMax;
         if (dirY >= 0.0D) {
             tyMin = (this.minY - startY) * divY;
             tyMax = (this.maxY - startY) * divY;
@@ -904,10 +904,10 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         }
 
         // intersections with z planes:
-        double tzMin;
-        double tzMax;
-        BlockFace hitBlockFaceZMin;
-        BlockFace hitBlockFaceZMax;
+        final double tzMin;
+        final double tzMax;
+        final BlockFace hitBlockFaceZMin;
+        final BlockFace hitBlockFaceZMax;
         if (dirZ >= 0.0D) {
             tzMin = (this.minZ - startZ) * divZ;
             tzMax = (this.maxZ - startZ) * divZ;
@@ -939,8 +939,8 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
         }
 
         // find the closest intersection:
-        double t;
-        BlockFace hitBlockFace;
+        final double t;
+        final BlockFace hitBlockFace;
         if (tMin < 0.0D) {
             t = tMax;
             hitBlockFace = hitBlockFaceMax;
@@ -949,7 +949,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
             hitBlockFace = hitBlockFaceMin;
         }
         // reusing the newly created direction vector for the hit position:
-        Vector hitPosition = dir.multiply(t).add(start);
+        final Vector hitPosition = dir.multiply(t).add(start);
         return new RayTraceResult(hitPosition, hitBlockFace);
     }
 
@@ -974,10 +974,10 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) return true;
         if (!(obj instanceof BoundingBox)) return false;
-        BoundingBox other = (BoundingBox) obj;
+        final BoundingBox other = (BoundingBox) obj;
         if (Double.doubleToLongBits(maxX) != Double.doubleToLongBits(other.maxX)) return false;
         if (Double.doubleToLongBits(maxY) != Double.doubleToLongBits(other.maxY)) return false;
         if (Double.doubleToLongBits(maxZ) != Double.doubleToLongBits(other.maxZ)) return false;
@@ -988,7 +988,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
 
     @Override
     public String toString() {
-        String builder = "BoundingBox [minX=" +
+        final String builder = "BoundingBox [minX=" +
             minX +
             ", minY=" +
             minY +
@@ -1014,7 +1014,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     public BoundingBox clone() {
         try {
             return (BoundingBox) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -1022,7 +1022,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     @NotNull
     @Override
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<>();
+        final Map<String, Object> result = new LinkedHashMap<>();
         result.put("minX", minX);
         result.put("minY", minY);
         result.put("minZ", minZ);
@@ -1033,7 +1033,7 @@ public class BoundingBox implements Cloneable, ConfigurationSerializable {
     }
 
     @NotNull
-    public static BoundingBox deserialize(@NotNull Map<String, Object> args) {
+    public static BoundingBox deserialize(@NotNull final Map<String, Object> args) {
         double minX = 0.0D;
         double minY = 0.0D;
         double minZ = 0.0D;
diff --git a/src/main/java/org/bukkit/util/ChatPaginator.java b/src/main/java/org/bukkit/util/ChatPaginator.java
index 7a4086037d93430b936b2569bb1c9e1e03952f7b..4e6e5ebe23ed688c5202c89f361289060656de95 100644
--- a/src/main/java/org/bukkit/util/ChatPaginator.java
+++ b/src/main/java/org/bukkit/util/ChatPaginator.java
@@ -29,7 +29,7 @@ public class ChatPaginator {
      * @return A single chat page.
      */
     @NotNull
-    public static ChatPage paginate(@Nullable String unpaginatedString, int pageNumber) {
+    public static ChatPage paginate(@Nullable final String unpaginatedString, final int pageNumber) {
         return paginate(unpaginatedString, pageNumber, GUARANTEED_NO_WRAP_CHAT_PAGE_WIDTH, CLOSED_CHAT_PAGE_HEIGHT);
     }
 
@@ -43,15 +43,15 @@ public class ChatPaginator {
      * @return A single chat page.
      */
     @NotNull
-    public static ChatPage paginate(@Nullable String unpaginatedString, int pageNumber, int lineLength, int pageHeight) {
-        String[] lines = wordWrap(unpaginatedString, lineLength);
+    public static ChatPage paginate(@Nullable final String unpaginatedString, final int pageNumber, final int lineLength, final int pageHeight) {
+        final String[] lines = wordWrap(unpaginatedString, lineLength);
 
-        int totalPages = lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);
-        int actualPageNumber = Math.min(pageNumber, totalPages);
+        final int totalPages = lines.length / pageHeight + (lines.length % pageHeight == 0 ? 0 : 1);
+        final int actualPageNumber = Math.min(pageNumber, totalPages);
 
-        int from = (actualPageNumber - 1) * pageHeight;
-        int to = Math.min(from + pageHeight, lines.length);
-        String[] selectedLines = Arrays.copyOfRange(lines, from, to);
+        final int from = (actualPageNumber - 1) * pageHeight;
+        final int to = Math.min(from + pageHeight, lines.length);
+        final String[] selectedLines = Arrays.copyOfRange(lines, from, to);
 
         return new ChatPage(selectedLines, actualPageNumber, totalPages);
     }
@@ -65,7 +65,7 @@ public class ChatPaginator {
      * @return An array of word-wrapped lines.
      */
     @NotNull
-    public static String[] wordWrap(@Nullable String rawString, int lineLength) {
+    public static String[] wordWrap(@Nullable final String rawString, final int lineLength) {
         // A null string is a single line
         if (rawString == null) {
             return new String[] {""};
@@ -76,14 +76,14 @@ public class ChatPaginator {
             return new String[] {rawString};
         }
 
-        char[] rawChars = (rawString + ' ').toCharArray(); // add a trailing space to trigger pagination
+        final char[] rawChars = (rawString + ' ').toCharArray(); // add a trailing space to trigger pagination
         StringBuilder word = new StringBuilder();
         StringBuilder line = new StringBuilder();
-        List<String> lines = new LinkedList<>();
+        final List<String> lines = new LinkedList<>();
         int lineColorChars = 0;
 
         for (int i = 0; i < rawChars.length; i++) {
-            char c = rawChars[i];
+            final char c = rawChars[i];
 
             // skip chat color modifiers
             if (c == ChatColor.COLOR_CHAR) {
@@ -94,10 +94,10 @@ public class ChatPaginator {
             }
 
             if (c == ' ' || c == '\n') {
-                if (line.length() == 0 && word.length() > lineLength) { // special case: extremely long word begins a line
+                if (line.isEmpty() && word.length() > lineLength) { // special case: extremely long word begins a line
                     lines.addAll(Arrays.asList(word.toString().split("(?<=\\G.{" + lineLength + "})")));
                 } else if (line.length() + 1 + word.length() - lineColorChars == lineLength) { // Line exactly the correct length...newline
-                    if (line.length() > 0) {
+                    if (!line.isEmpty()) {
                         line.append(' ');
                     }
                     line.append(word);
@@ -105,13 +105,13 @@ public class ChatPaginator {
                     line = new StringBuilder();
                     lineColorChars = 0;
                 } else if (line.length() + 1 + word.length() - lineColorChars > lineLength) { // Line too long...break the line
-                    for (String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {
+                    for (final String partialWord : word.toString().split("(?<=\\G.{" + lineLength + "})")) {
                         lines.add(line.toString());
                         line = new StringBuilder(partialWord);
                     }
                     lineColorChars = 0;
                 } else {
-                    if (line.length() > 0) {
+                    if (!line.isEmpty()) {
                         line.append(' ');
                     }
                     line.append(word);
@@ -127,20 +127,20 @@ public class ChatPaginator {
             }
         }
 
-        if (line.length() > 0) { // Only add the last line if there is anything to add
+        if (!line.isEmpty()) { // Only add the last line if there is anything to add
             lines.add(line.toString());
         }
 
         // Iterate over the wrapped lines, applying the last color from one line to the beginning of the next
-        if (lines.get(0).length() == 0 || lines.get(0).charAt(0) != ChatColor.COLOR_CHAR) {
+        if (lines.get(0).isEmpty() || lines.get(0).charAt(0) != ChatColor.COLOR_CHAR) {
             lines.set(0, ChatColor.WHITE + lines.get(0));
         }
         for (int i = 1; i < lines.size(); i++) {
             final String pLine = lines.get(i - 1);
             final String subLine = lines.get(i);
 
-            char color = pLine.charAt(pLine.lastIndexOf(ChatColor.COLOR_CHAR) + 1);
-            if (subLine.length() == 0 || subLine.charAt(0) != ChatColor.COLOR_CHAR) {
+            final char color = pLine.charAt(pLine.lastIndexOf(ChatColor.COLOR_CHAR) + 1);
+            if (subLine.isEmpty() || subLine.charAt(0) != ChatColor.COLOR_CHAR) {
                 lines.set(i, ChatColor.getByChar(color) + subLine);
             }
         }
@@ -154,7 +154,7 @@ public class ChatPaginator {
         private final int pageNumber;
         private final int totalPages;
 
-        public ChatPage(@NotNull String[] lines, int pageNumber, int totalPages) {
+        public ChatPage(@NotNull final String[] lines, final int pageNumber, final int totalPages) {
             this.lines = lines;
             this.pageNumber = pageNumber;
             this.totalPages = totalPages;
diff --git a/src/main/java/org/bukkit/util/EulerAngle.java b/src/main/java/org/bukkit/util/EulerAngle.java
index 201cb4a8c7ca840f4d0ecb78005316554bde5183..8999ba1eac5535c1a110aa82d4dec577074ec5bf 100644
--- a/src/main/java/org/bukkit/util/EulerAngle.java
+++ b/src/main/java/org/bukkit/util/EulerAngle.java
@@ -25,7 +25,7 @@ public class EulerAngle {
      * @param y the angle for the y axis in radians
      * @param z the angle for the z axis in radians
      */
-    public EulerAngle(double x, double y, double z) {
+    public EulerAngle(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -66,7 +66,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle setX(double x) {
+    public EulerAngle setX(final double x) {
         return new EulerAngle(x, y, z);
     }
 
@@ -78,7 +78,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle setY(double y) {
+    public EulerAngle setY(final double y) {
         return new EulerAngle(x, y, z);
     }
 
@@ -90,7 +90,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle setZ(double z) {
+    public EulerAngle setZ(final double z) {
         return new EulerAngle(x, y, z);
     }
 
@@ -104,7 +104,7 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle add(double x, double y, double z) {
+    public EulerAngle add(final double x, final double y, final double z) {
         return new EulerAngle(
                 this.x + x,
                 this.y + y,
@@ -122,16 +122,16 @@ public class EulerAngle {
      * @return the resultant EulerAngle
      */
     @NotNull
-    public EulerAngle subtract(double x, double y, double z) {
+    public EulerAngle subtract(final double x, final double y, final double z) {
         return add(-x, -y, -z);
     }
 
     @Override
-    public boolean equals(Object o) {
+    public boolean equals(final Object o) {
         if (this == o) return true;
         if (o == null || getClass() != o.getClass()) return false;
 
-        EulerAngle that = (EulerAngle) o;
+        final EulerAngle that = (EulerAngle) o;
 
         return Double.compare(that.x, x) == 0
                 && Double.compare(that.y, y) == 0
diff --git a/src/main/java/org/bukkit/util/FileUtil.java b/src/main/java/org/bukkit/util/FileUtil.java
index 6e2352a3084daf05c16cc5ca86b4fa9e8b1c1e4d..2a0e5ebf18e5519ba93ec632aec3703fc84815da 100644
--- a/src/main/java/org/bukkit/util/FileUtil.java
+++ b/src/main/java/org/bukkit/util/FileUtil.java
@@ -19,7 +19,7 @@ public class FileUtil {
      * @param outFile the target filename
      * @return true on success
      */
-    public static boolean copy(@NotNull File inFile, @NotNull File outFile) {
+    public static boolean copy(@NotNull final File inFile, @NotNull final File outFile) {
         if (!inFile.exists()) {
             return false;
         }
@@ -32,12 +32,12 @@ public class FileUtil {
             out = new FileOutputStream(outFile).getChannel();
 
             long pos = 0;
-            long size = in.size();
+            final long size = in.size();
 
             while (pos < size) {
                 pos += in.transferTo(pos, 10 * 1024 * 1024, out);
             }
-        } catch (IOException ioe) {
+        } catch (final IOException ioe) {
             return false;
         } finally {
             try {
@@ -47,7 +47,7 @@ public class FileUtil {
                 if (out != null) {
                     out.close();
                 }
-            } catch (IOException ioe) {
+            } catch (final IOException ioe) {
                 return false;
             }
         }
diff --git a/src/main/java/org/bukkit/util/NumberConversions.java b/src/main/java/org/bukkit/util/NumberConversions.java
index aaf3b53a7e115ae5b9a97bb3d2e371b438abddb7..b22feb45d9569e70d12a31721e468d5caceabd87 100644
--- a/src/main/java/org/bukkit/util/NumberConversions.java
+++ b/src/main/java/org/bukkit/util/NumberConversions.java
@@ -9,7 +9,7 @@ import org.jetbrains.annotations.Nullable;
 public final class NumberConversions {
     private NumberConversions() {}
 
-    public static int floor(double num) {
+    public static int floor(final double num) {
         final int floor = (int) num;
         return floor == num ? floor : floor - (int) (Double.doubleToRawLongBits(num) >>> 63);
     }
@@ -19,101 +19,101 @@ public final class NumberConversions {
         return floor == num ? floor : floor + (int) (~Double.doubleToRawLongBits(num) >>> 63);
     }
 
-    public static int round(double num) {
+    public static int round(final double num) {
         return floor(num + 0.5d);
     }
 
-    public static double square(double num) {
+    public static double square(final double num) {
         return num * num;
     }
 
-    public static int toInt(@Nullable Object object) {
+    public static int toInt(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).intValue();
         }
 
         try {
             return Integer.parseInt(object.toString());
-        } catch (NumberFormatException | NullPointerException ignored) {
+        } catch (final NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
 
-    public static float toFloat(@Nullable Object object) {
+    public static float toFloat(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).floatValue();
         }
 
         try {
             return Float.parseFloat(object.toString());
-        } catch (NumberFormatException | NullPointerException ignored) {
+        } catch (final NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
 
-    public static double toDouble(@Nullable Object object) {
+    public static double toDouble(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).doubleValue();
         }
 
         try {
             return Double.parseDouble(object.toString());
-        } catch (NumberFormatException | NullPointerException ignored) {
+        } catch (final NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
 
-    public static long toLong(@Nullable Object object) {
+    public static long toLong(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).longValue();
         }
 
         try {
             return Long.parseLong(object.toString());
-        } catch (NumberFormatException | NullPointerException ignored) {
+        } catch (final NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
 
-    public static short toShort(@Nullable Object object) {
+    public static short toShort(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).shortValue();
         }
 
         try {
             return Short.parseShort(object.toString());
-        } catch (NumberFormatException | NullPointerException ignored) {
+        } catch (final NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
 
-    public static byte toByte(@Nullable Object object) {
+    public static byte toByte(@Nullable final Object object) {
         if (object instanceof Number) {
             return ((Number) object).byteValue();
         }
 
         try {
             return Byte.parseByte(object.toString());
-        } catch (NumberFormatException | NullPointerException ignored) {
+        } catch (final NumberFormatException | NullPointerException ignored) {
         }
         return 0;
     }
 
-    public static boolean isFinite(double d) {
+    public static boolean isFinite(final double d) {
         return Math.abs(d) <= Double.MAX_VALUE;
     }
 
-    public static boolean isFinite(float f) {
+    public static boolean isFinite(final float f) {
         return Math.abs(f) <= Float.MAX_VALUE;
     }
 
-    public static void checkFinite(double d, @NotNull String message) {
+    public static void checkFinite(final double d, @NotNull final String message) {
         if (!isFinite(d)) {
             throw new IllegalArgumentException(message);
         }
     }
 
-    public static void checkFinite(float d, @NotNull String message) {
+    public static void checkFinite(final float d, @NotNull final String message) {
         if (!isFinite(d)) {
             throw new IllegalArgumentException(message);
         }
diff --git a/src/main/java/org/bukkit/util/RayTraceResult.java b/src/main/java/org/bukkit/util/RayTraceResult.java
index caa224691e5f6a3342aebb64c868b7f38d9ae072..485f2163463ae75389a254f25a8b7847bb684fa9 100644
--- a/src/main/java/org/bukkit/util/RayTraceResult.java
+++ b/src/main/java/org/bukkit/util/RayTraceResult.java
@@ -23,7 +23,7 @@ public class RayTraceResult {
     private final BlockFace hitBlockFace;
     private final Entity hitEntity;
 
-    private RayTraceResult(@NotNull Vector hitPosition, @Nullable Block hitBlock, @Nullable BlockFace hitBlockFace, @Nullable Entity hitEntity) {
+    private RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Block hitBlock, @Nullable final BlockFace hitBlockFace, @Nullable final Entity hitEntity) {
         Validate.notNull(hitPosition, "Hit position is null!");
         this.hitPosition = hitPosition.clone();
         this.hitBlock = hitBlock;
@@ -36,7 +36,7 @@ public class RayTraceResult {
      *
      * @param hitPosition the hit position
      */
-    public RayTraceResult(@NotNull Vector hitPosition) {
+    public RayTraceResult(@NotNull final Vector hitPosition) {
         this(hitPosition, null, null, null);
     }
 
@@ -46,7 +46,7 @@ public class RayTraceResult {
      * @param hitPosition the hit position
      * @param hitBlockFace the hit block face
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable BlockFace hitBlockFace) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final BlockFace hitBlockFace) {
         this(hitPosition, null, hitBlockFace, null);
     }
 
@@ -57,7 +57,7 @@ public class RayTraceResult {
      * @param hitBlock the hit block
      * @param hitBlockFace the hit block face
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable Block hitBlock, @Nullable BlockFace hitBlockFace) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Block hitBlock, @Nullable final BlockFace hitBlockFace) {
         this(hitPosition, hitBlock, hitBlockFace, null);
     }
 
@@ -67,7 +67,7 @@ public class RayTraceResult {
      * @param hitPosition the hit position
      * @param hitEntity the hit entity
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable Entity hitEntity) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Entity hitEntity) {
         this(hitPosition, null, null, hitEntity);
     }
 
@@ -78,7 +78,7 @@ public class RayTraceResult {
      * @param hitEntity the hit entity
      * @param hitBlockFace the hit block face
      */
-    public RayTraceResult(@NotNull Vector hitPosition, @Nullable Entity hitEntity, @Nullable BlockFace hitBlockFace) {
+    public RayTraceResult(@NotNull final Vector hitPosition, @Nullable final Entity hitEntity, @Nullable final BlockFace hitBlockFace) {
         this(hitPosition, null, hitBlockFace, hitEntity);
     }
 
@@ -134,19 +134,19 @@ public class RayTraceResult {
     }
 
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (this == obj) return true;
         if (!(obj instanceof RayTraceResult)) return false;
-        RayTraceResult other = (RayTraceResult) obj;
+        final RayTraceResult other = (RayTraceResult) obj;
         if (!hitPosition.equals(other.hitPosition)) return false;
         if (!Objects.equals(hitBlock, other.hitBlock)) return false;
-        if (!Objects.equals(hitBlockFace, other.hitBlockFace)) return false;
+        if (hitBlockFace != other.hitBlockFace) return false;
 	    return Objects.equals(hitEntity, other.hitEntity);
     }
 
     @Override
     public String toString() {
-        String builder = "RayTraceResult [hitPosition=" +
+        final String builder = "RayTraceResult [hitPosition=" +
             hitPosition +
             ", hitBlock=" +
             hitBlock +
diff --git a/src/main/java/org/bukkit/util/StringUtil.java b/src/main/java/org/bukkit/util/StringUtil.java
index 458d5ebdf6c42d695985202dd6d7df626fcc5972..a40b0dd4f2c830b2dcf4c7fe3cdd017c2206b377 100644
--- a/src/main/java/org/bukkit/util/StringUtil.java
+++ b/src/main/java/org/bukkit/util/StringUtil.java
@@ -29,7 +29,7 @@ public class StringUtil {
         Validate.notNull(collection, "Collection cannot be null");
         Validate.notNull(originals, "Originals cannot be null");
 
-        for (String string : originals) {
+        for (final String string : originals) {
             if (startsWithIgnoreCase(string, token)) {
                 collection.add(string);
             }
diff --git a/src/main/java/org/bukkit/util/Vector.java b/src/main/java/org/bukkit/util/Vector.java
index 8cad587fa3d98abbba93afe64ad03d8345803b0a..62caa821617de1cb79449b21d3eef29f6d3a7d29 100644
--- a/src/main/java/org/bukkit/util/Vector.java
+++ b/src/main/java/org/bukkit/util/Vector.java
@@ -48,7 +48,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param y Y component
      * @param z Z component
      */
-    public Vector(int x, int y, int z) {
+    public Vector(final int x, final int y, final int z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -61,7 +61,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param y Y component
      * @param z Z component
      */
-    public Vector(double x, double y, double z) {
+    public Vector(final double x, final double y, final double z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -74,7 +74,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param y Y component
      * @param z Z component
      */
-    public Vector(float x, float y, float z) {
+    public Vector(final float x, final float y, final float z) {
         this.x = x;
         this.y = y;
         this.z = z;
@@ -87,7 +87,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector add(@NotNull Vector vec) {
+    public Vector add(@NotNull final Vector vec) {
         x += vec.x;
         y += vec.y;
         z += vec.z;
@@ -101,7 +101,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector subtract(@NotNull Vector vec) {
+    public Vector subtract(@NotNull final Vector vec) {
         x -= vec.x;
         y -= vec.y;
         z -= vec.z;
@@ -115,7 +115,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(@NotNull Vector vec) {
+    public Vector multiply(@NotNull final Vector vec) {
         x *= vec.x;
         y *= vec.y;
         z *= vec.z;
@@ -129,7 +129,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector divide(@NotNull Vector vec) {
+    public Vector divide(@NotNull final Vector vec) {
         x /= vec.x;
         y /= vec.y;
         z /= vec.z;
@@ -143,7 +143,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector copy(@NotNull Vector vec) {
+    public Vector copy(@NotNull final Vector vec) {
         x = vec.x;
         y = vec.y;
         z = vec.z;
@@ -182,7 +182,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param o The other vector
      * @return the distance
      */
-    public double distance(@NotNull Vector o) {
+    public double distance(@NotNull final Vector o) {
         return Math.sqrt(NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z));
     }
 
@@ -192,7 +192,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param o The other vector
      * @return the distance
      */
-    public double distanceSquared(@NotNull Vector o) {
+    public double distanceSquared(@NotNull final Vector o) {
         return NumberConversions.square(x - o.x) + NumberConversions.square(y - o.y) + NumberConversions.square(z - o.z);
     }
 
@@ -202,8 +202,8 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param other The other vector
      * @return angle in radians
      */
-    public float angle(@NotNull Vector other) {
-        double dot = Doubles.constrainToRange(dot(other) / (length() * other.length()), -1.0, 1.0);
+    public float angle(@NotNull final Vector other) {
+        final double dot = Doubles.constrainToRange(dot(other) / (length() * other.length()), -1.0, 1.0);
 
         return (float) Math.acos(dot);
     }
@@ -215,7 +215,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return this same vector (now a midpoint)
      */
     @NotNull
-    public Vector midpoint(@NotNull Vector other) {
+    public Vector midpoint(@NotNull final Vector other) {
         x = (x + other.x) / 2;
         y = (y + other.y) / 2;
         z = (z + other.z) / 2;
@@ -229,10 +229,10 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return a new midpoint vector
      */
     @NotNull
-    public Vector getMidpoint(@NotNull Vector other) {
-        double x = (this.x + other.x) / 2;
-        double y = (this.y + other.y) / 2;
-        double z = (this.z + other.z) / 2;
+    public Vector getMidpoint(@NotNull final Vector other) {
+        final double x = (this.x + other.x) / 2;
+        final double y = (this.y + other.y) / 2;
+        final double z = (this.z + other.z) / 2;
         return new Vector(x, y, z);
     }
 
@@ -244,7 +244,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(int m) {
+    public Vector multiply(final int m) {
         x *= m;
         y *= m;
         z *= m;
@@ -259,7 +259,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(double m) {
+    public Vector multiply(final double m) {
         x *= m;
         y *= m;
         z *= m;
@@ -274,7 +274,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector multiply(float m) {
+    public Vector multiply(final float m) {
         x *= m;
         y *= m;
         z *= m;
@@ -288,7 +288,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param other The other vector
      * @return dot product
      */
-    public double dot(@NotNull Vector other) {
+    public double dot(@NotNull final Vector other) {
         return x * other.x + y * other.y + z * other.z;
     }
 
@@ -305,10 +305,10 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector crossProduct(@NotNull Vector o) {
-        double newX = y * o.z - o.y * z;
-        double newY = z * o.x - o.z * x;
-        double newZ = x * o.y - o.x * y;
+    public Vector crossProduct(@NotNull final Vector o) {
+        final double newX = y * o.z - o.y * z;
+        final double newY = z * o.x - o.z * x;
+        final double newZ = x * o.y - o.x * y;
 
         x = newX;
         y = newY;
@@ -329,10 +329,10 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return a new vector
      */
     @NotNull
-    public Vector getCrossProduct(@NotNull Vector o) {
-        double x = this.y * o.z - o.y * this.z;
-        double y = this.z * o.x - o.z * this.x;
-        double z = this.x * o.y - o.x * this.y;
+    public Vector getCrossProduct(@NotNull final Vector o) {
+        final double x = this.y * o.z - o.y * this.z;
+        final double y = this.z * o.x - o.z * this.x;
+        final double z = this.x * o.y - o.x * this.y;
         return new Vector(x, y, z);
     }
 
@@ -343,7 +343,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      */
     @NotNull
     public Vector normalize() {
-        double length = length();
+        final double length = length();
 
         x /= length;
         y /= length;
@@ -388,7 +388,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param max Maximum vector
      * @return whether this vector is in the AABB
      */
-    public boolean isInAABB(@NotNull Vector min, @NotNull Vector max) {
+    public boolean isInAABB(@NotNull final Vector min, @NotNull final Vector max) {
         return x >= min.x && x <= max.x && y >= min.y && y <= max.y && z >= min.z && z <= max.z;
     }
 
@@ -399,7 +399,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @param radius Sphere radius
      * @return whether this vector is in the sphere
      */
-    public boolean isInSphere(@NotNull Vector origin, double radius) {
+    public boolean isInSphere(@NotNull final Vector origin, final double radius) {
         return (NumberConversions.square(origin.x - x) + NumberConversions.square(origin.y - y) + NumberConversions.square(origin.z - z)) <= NumberConversions.square(radius);
     }
 
@@ -425,12 +425,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector rotateAroundX(double angle) {
-        double angleCos = Math.cos(angle);
-        double angleSin = Math.sin(angle);
+    public Vector rotateAroundX(final double angle) {
+        final double angleCos = Math.cos(angle);
+        final double angleSin = Math.sin(angle);
 
-        double y = angleCos * getY() - angleSin * getZ();
-        double z = angleSin * getY() + angleCos * getZ();
+        final double y = angleCos * getY() - angleSin * getZ();
+        final double z = angleSin * getY() + angleCos * getZ();
         return setY(y).setZ(z);
     }
 
@@ -447,12 +447,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector rotateAroundY(double angle) {
-        double angleCos = Math.cos(angle);
-        double angleSin = Math.sin(angle);
+    public Vector rotateAroundY(final double angle) {
+        final double angleCos = Math.cos(angle);
+        final double angleSin = Math.sin(angle);
 
-        double x = angleCos * getX() + angleSin * getZ();
-        double z = -angleSin * getX() + angleCos * getZ();
+        final double x = angleCos * getX() + angleSin * getZ();
+        final double z = -angleSin * getX() + angleCos * getZ();
         return setX(x).setZ(z);
     }
 
@@ -469,12 +469,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the same vector
      */
     @NotNull
-    public Vector rotateAroundZ(double angle) {
-        double angleCos = Math.cos(angle);
-        double angleSin = Math.sin(angle);
+    public Vector rotateAroundZ(final double angle) {
+        final double angleCos = Math.cos(angle);
+        final double angleSin = Math.sin(angle);
 
-        double x = angleCos * getX() - angleSin * getY();
-        double y = angleSin * getX() + angleCos * getY();
+        final double x = angleCos * getX() - angleSin * getY();
+        final double y = angleSin * getX() + angleCos * getY();
         return setX(x).setY(y);
     }
 
@@ -500,7 +500,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * null
      */
     @NotNull
-    public Vector rotateAroundAxis(@NotNull Vector axis, double angle) throws IllegalArgumentException {
+    public Vector rotateAroundAxis(@NotNull final Vector axis, final double angle) throws IllegalArgumentException {
         //noinspection ConstantConditions
         Preconditions.checkArgument(axis != null, "The provided axis vector was null");
 
@@ -528,23 +528,27 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * null
      */
     @NotNull
-    public Vector rotateAroundNonUnitAxis(@NotNull Vector axis, double angle) throws IllegalArgumentException {
+    public Vector rotateAroundNonUnitAxis(@NotNull final Vector axis, final double angle) throws IllegalArgumentException {
         Preconditions.checkArgument(true, "The provided axis vector was null");
 
-        double x = getX(), y = getY(), z = getZ();
-        double x2 = axis.getX(), y2 = axis.getY(), z2 = axis.getZ();
+        final double x = getX();
+	    final double y = getY();
+	    final double z = getZ();
+	    final double x2 = axis.getX();
+	    final double y2 = axis.getY();
+	    final double z2 = axis.getZ();
 
-        double cosTheta = Math.cos(angle);
-        double sinTheta = Math.sin(angle);
-        double dotProduct = this.dot(axis);
+	    final double cosTheta = Math.cos(angle);
+        final double sinTheta = Math.sin(angle);
+        final double dotProduct = this.dot(axis);
 
-        double xPrime = x2 * dotProduct * (1d - cosTheta)
+        final double xPrime = x2 * dotProduct * (1d - cosTheta)
                 + x * cosTheta
                 + (-z2 * y + y2 * z) * sinTheta;
-        double yPrime = y2 * dotProduct * (1d - cosTheta)
+        final double yPrime = y2 * dotProduct * (1d - cosTheta)
                 + y * cosTheta
                 + (z2 * x - x2 * z) * sinTheta;
-        double zPrime = z2 * dotProduct * (1d - cosTheta)
+        final double zPrime = z2 * dotProduct * (1d - cosTheta)
                 + z * cosTheta
                 + (-y2 * x + x2 * y) * sinTheta;
 
@@ -615,7 +619,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setX(int x) {
+    public Vector setX(final int x) {
         this.x = x;
         return this;
     }
@@ -627,7 +631,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setX(double x) {
+    public Vector setX(final double x) {
         this.x = x;
         return this;
     }
@@ -639,7 +643,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setX(float x) {
+    public Vector setX(final float x) {
         this.x = x;
         return this;
     }
@@ -651,7 +655,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setY(int y) {
+    public Vector setY(final int y) {
         this.y = y;
         return this;
     }
@@ -663,7 +667,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setY(double y) {
+    public Vector setY(final double y) {
         this.y = y;
         return this;
     }
@@ -675,7 +679,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setY(float y) {
+    public Vector setY(final float y) {
         this.y = y;
         return this;
     }
@@ -687,7 +691,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setZ(int z) {
+    public Vector setZ(final int z) {
         this.z = z;
         return this;
     }
@@ -699,7 +703,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setZ(double z) {
+    public Vector setZ(final double z) {
         this.z = z;
         return this;
     }
@@ -711,7 +715,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return This vector.
      */
     @NotNull
-    public Vector setZ(float z) {
+    public Vector setZ(final float z) {
         this.z = z;
         return this;
     }
@@ -724,12 +728,12 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * with epsilon.
      */
     @Override
-    public boolean equals(Object obj) {
+    public boolean equals(final Object obj) {
         if (!(obj instanceof Vector)) {
             return false;
         }
 
-        Vector other = (Vector) obj;
+        final Vector other = (Vector) obj;
 
         return Math.abs(x - other.x) < epsilon && Math.abs(y - other.y) < epsilon && Math.abs(z - other.z) < epsilon && (this.getClass().equals(obj.getClass()));
     }
@@ -759,7 +763,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     public Vector clone() {
         try {
             return (Vector) super.clone();
-        } catch (CloneNotSupportedException e) {
+        } catch (final CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
@@ -779,7 +783,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the location
      */
     @NotNull
-    public Location toLocation(@NotNull World world) {
+    public Location toLocation(@NotNull final World world) {
         return new Location(world, x, y, z);
     }
 
@@ -792,7 +796,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return the location
      */
     @NotNull
-    public Location toLocation(@NotNull World world, float yaw, float pitch) {
+    public Location toLocation(@NotNull final World world, final float yaw, final float pitch) {
         return new Location(world, x, y, z, yaw, pitch);
     }
 
@@ -834,7 +838,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return minimum
      */
     @NotNull
-    public static Vector getMinimum(@NotNull Vector v1, @NotNull Vector v2) {
+    public static Vector getMinimum(@NotNull final Vector v1, @NotNull final Vector v2) {
         return new Vector(Math.min(v1.x, v2.x), Math.min(v1.y, v2.y), Math.min(v1.z, v2.z));
     }
 
@@ -846,7 +850,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
      * @return maximum
      */
     @NotNull
-    public static Vector getMaximum(@NotNull Vector v1, @NotNull Vector v2) {
+    public static Vector getMaximum(@NotNull final Vector v1, @NotNull final Vector v2) {
         return new Vector(Math.max(v1.x, v2.x), Math.max(v1.y, v2.y), Math.max(v1.z, v2.z));
     }
 
@@ -864,7 +868,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     @Override
     @NotNull
     public Map<String, Object> serialize() {
-        Map<String, Object> result = new LinkedHashMap<>();
+        final Map<String, Object> result = new LinkedHashMap<>();
 
         result.put("x", getX());
         result.put("y", getY());
@@ -874,7 +878,7 @@ public class Vector implements Cloneable, ConfigurationSerializable {
     }
 
     @NotNull
-    public static Vector deserialize(@NotNull Map<String, Object> args) {
+    public static Vector deserialize(@NotNull final Map<String, Object> args) {
         double x = 0;
         double y = 0;
         double z = 0;
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
index ce41c4012ebd3940f8176e8585c52596e01f73ed..10b5871ef96d1d18536acec93e7e053979c50616 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectInputStream.java
@@ -38,7 +38,7 @@ public class BukkitObjectInputStream extends ObjectInputStream {
      * @throws IOException if an I/O error occurs while reading stream header
      * @see ObjectInputStream#ObjectInputStream(InputStream)
      */
-    public BukkitObjectInputStream(InputStream in) throws IOException {
+    public BukkitObjectInputStream(final InputStream in) throws IOException {
         super(in);
         super.enableResolveObject(true);
     }
@@ -48,7 +48,7 @@ public class BukkitObjectInputStream extends ObjectInputStream {
         if (obj instanceof Wrapper) {
             try {
                 (obj = ConfigurationSerialization.deserializeObject(((Wrapper<?>) obj).map)).getClass(); // NPE
-            } catch (Throwable ex) {
+            } catch (final Throwable ex) {
                 throw newIOException("Failed to deserialize object", ex);
             }
         }
@@ -56,7 +56,7 @@ public class BukkitObjectInputStream extends ObjectInputStream {
         return super.resolveObject(obj);
     }
 
-    private static IOException newIOException(String string, Throwable cause) {
+    private static IOException newIOException(final String string, final Throwable cause) {
 	    return new IOException(string, cause);
     }
 }
diff --git a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
index dd1b9ee5f57773f07924aa311823fd8d63195cb2..39bbcb80a48d0da123d73969d6ac7e83d45a7193 100644
--- a/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
+++ b/src/main/java/org/bukkit/util/io/BukkitObjectOutputStream.java
@@ -37,7 +37,7 @@ public class BukkitObjectOutputStream extends ObjectOutputStream {
      * @throws IOException if an I/O error occurs while writing stream header
      * @see ObjectOutputStream#ObjectOutputStream(OutputStream)
      */
-    public BukkitObjectOutputStream(OutputStream out) throws IOException {
+    public BukkitObjectOutputStream(final OutputStream out) throws IOException {
         super(out);
         super.enableReplaceObject(true);
     }
diff --git a/src/main/java/org/bukkit/util/io/Wrapper.java b/src/main/java/org/bukkit/util/io/Wrapper.java
index 7369697f5a573ca518e78f6497bff400e31d25cb..402ef6b91bf9a546870140347d73df2bc9506daa 100644
--- a/src/main/java/org/bukkit/util/io/Wrapper.java
+++ b/src/main/java/org/bukkit/util/io/Wrapper.java
@@ -12,11 +12,11 @@ final class Wrapper<T extends Map<String, ?> & Serializable> implements Serializ
 
     final T map;
 
-    static Wrapper<ImmutableMap<String, ?>> newWrapper(@NotNull ConfigurationSerializable obj) {
+    static Wrapper<ImmutableMap<String, ?>> newWrapper(@NotNull final ConfigurationSerializable obj) {
         return new Wrapper<>(ImmutableMap.<String, Object>builder().put(ConfigurationSerialization.SERIALIZED_TYPE_KEY, ConfigurationSerialization.getAlias(obj.getClass())).putAll(obj.serialize()).build());
     }
 
-    private Wrapper(@NotNull T map) {
+    private Wrapper(@NotNull final T map) {
         this.map = map;
     }
 }
diff --git a/src/main/java/org/bukkit/util/noise/NoiseGenerator.java b/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
index 16f753258731d0d36d6eae3b1273c760941958a3..fdadfc6777d30972f0e0410dbc533f8e82f9116b 100644
--- a/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/NoiseGenerator.java
@@ -15,22 +15,22 @@ public abstract class NoiseGenerator {
      * @param x Value to floor
      * @return Floored value
      */
-    public static int floor(double x) {
+    public static int floor(final double x) {
         return x >= 0 ? (int) x : (int) x - 1;
     }
 
-    protected static double fade(double x) {
+    protected static double fade(final double x) {
         return x * x * x * (x * (x * 6 - 15) + 10);
     }
 
-    protected static double lerp(double x, double y, double z) {
+    protected static double lerp(final double x, final double y, final double z) {
         return y + x * (z - y);
     }
 
-    protected static double grad(int hash, double x, double y, double z) {
+    protected static double grad(int hash, final double x, final double y, final double z) {
         hash &= 15;
-        double u = hash < 8 ? x : y;
-        double v = hash < 4 ? y : hash == 12 || hash == 14 ? x : z;
+        final double u = hash < 8 ? x : y;
+        final double v = hash < 4 ? y : hash == 12 || hash == 14 ? x : z;
         return ((hash & 1) == 0 ? u : -u) + ((hash & 2) == 0 ? v : -v);
     }
 
@@ -40,7 +40,7 @@ public abstract class NoiseGenerator {
      * @param x X coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public double noise(double x) {
+    public double noise(final double x) {
         return noise(x, 0, 0);
     }
 
@@ -51,7 +51,7 @@ public abstract class NoiseGenerator {
      * @param y Y coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public double noise(double x, double y) {
+    public double noise(final double x, final double y) {
         return noise(x, y, 0);
     }
 
@@ -75,7 +75,7 @@ public abstract class NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, int octaves, double frequency, double amplitude) {
+    public double noise(final double x, final int octaves, final double frequency, final double amplitude) {
         return noise(x, 0, 0, octaves, frequency, amplitude);
     }
 
@@ -90,7 +90,7 @@ public abstract class NoiseGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, int octaves, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final int octaves, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, 0, 0, octaves, frequency, amplitude, normalized);
     }
 
@@ -105,7 +105,7 @@ public abstract class NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, int octaves, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final int octaves, final double frequency, final double amplitude) {
         return noise(x, y, 0, octaves, frequency, amplitude);
     }
 
@@ -121,7 +121,7 @@ public abstract class NoiseGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, int octaves, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double y, final int octaves, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, y, 0, octaves, frequency, amplitude, normalized);
     }
 
@@ -137,7 +137,7 @@ public abstract class NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, int octaves, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double z, final int octaves, final double frequency, final double amplitude) {
         return noise(x, y, z, octaves, frequency, amplitude, false);
     }
 
@@ -154,7 +154,7 @@ public abstract class NoiseGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, int octaves, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double y, final double z, final int octaves, final double frequency, final double amplitude, final boolean normalized) {
         double result = 0;
         double amp = 1;
         double freq = 1;
diff --git a/src/main/java/org/bukkit/util/noise/OctaveGenerator.java b/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
index 618ed706e2fdc4855a9ce4fe55e092a052c911d0..14513058d712b443d02f63ca97a2e01a58ca59f8 100644
--- a/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/OctaveGenerator.java
@@ -12,7 +12,7 @@ public abstract class OctaveGenerator {
     protected double yScale = 1;
     protected double zScale = 1;
 
-    protected OctaveGenerator(@NotNull NoiseGenerator[] octaves) {
+    protected OctaveGenerator(@NotNull final NoiseGenerator[] octaves) {
         this.octaves = octaves;
     }
 
@@ -24,7 +24,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New value to scale each coordinate by
      */
-    public void setScale(double scale) {
+    public void setScale(final double scale) {
         setXScale(scale);
         setYScale(scale);
         setZScale(scale);
@@ -44,7 +44,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New X scale
      */
-    public void setXScale(double scale) {
+    public void setXScale(final double scale) {
         xScale = scale;
     }
 
@@ -62,7 +62,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New Y scale
      */
-    public void setYScale(double scale) {
+    public void setYScale(final double scale) {
         yScale = scale;
     }
 
@@ -80,7 +80,7 @@ public abstract class OctaveGenerator {
      *
      * @param scale New Z scale
      */
-    public void setZScale(double scale) {
+    public void setZScale(final double scale) {
         zScale = scale;
     }
 
@@ -103,7 +103,7 @@ public abstract class OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double frequency, double amplitude) {
+    public double noise(final double x, final double frequency, final double amplitude) {
         return noise(x, 0, 0, frequency, amplitude);
     }
 
@@ -117,7 +117,7 @@ public abstract class OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, 0, 0, frequency, amplitude, normalized);
     }
 
@@ -131,7 +131,7 @@ public abstract class OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double frequency, final double amplitude) {
         return noise(x, y, 0, frequency, amplitude);
     }
 
@@ -146,7 +146,7 @@ public abstract class OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double frequency, double amplitude, boolean normalized) {
+    public double noise(final double x, final double y, final double frequency, final double amplitude, final boolean normalized) {
         return noise(x, y, 0, frequency, amplitude, normalized);
     }
 
@@ -161,7 +161,7 @@ public abstract class OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double z, final double frequency, final double amplitude) {
         return noise(x, y, z, frequency, amplitude, false);
     }
 
@@ -177,7 +177,7 @@ public abstract class OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double frequency, double amplitude, boolean normalized) {
+    public double noise(double x, double y, double z, final double frequency, final double amplitude, final boolean normalized) {
         double result = 0;
         double amp = 1;
         double freq = 1;
@@ -187,7 +187,7 @@ public abstract class OctaveGenerator {
         y *= yScale;
         z *= zScale;
 
-        for (NoiseGenerator octave : octaves) {
+        for (final NoiseGenerator octave : octaves) {
             result += octave.noise(x * freq, y * freq, z * freq) * amp;
             max += amp;
             freq *= frequency;
diff --git a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
index 520b65f9e6774f2fb8307311e5144128353cf777..597647ba302693c9f57b76d2ed9f3d90c6276b9b 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinNoiseGenerator.java
@@ -17,7 +17,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
     private static final PerlinNoiseGenerator instance = new PerlinNoiseGenerator();
 
     protected PerlinNoiseGenerator() {
-        int[] p = {151, 160, 137, 91, 90, 15, 131, 13, 201,
+        final int[] p = {151, 160, 137, 91, 90, 15, 131, 13, 201,
             95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37,
             240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62,
             94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56,
@@ -46,7 +46,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      *
      * @param world World to construct this generator for
      */
-    public PerlinNoiseGenerator(@NotNull World world) {
+    public PerlinNoiseGenerator(@NotNull final World world) {
         this(new Random(world.getSeed()));
     }
 
@@ -55,7 +55,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      *
      * @param seed Seed to construct this generator for
      */
-    public PerlinNoiseGenerator(long seed) {
+    public PerlinNoiseGenerator(final long seed) {
         this(new Random(seed));
     }
 
@@ -64,7 +64,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      *
      * @param rand Random to construct with
      */
-    public PerlinNoiseGenerator(@NotNull Random rand) {
+    public PerlinNoiseGenerator(@NotNull final Random rand) {
         offsetX = rand.nextDouble() * 256;
         offsetY = rand.nextDouble() * 256;
         offsetZ = rand.nextDouble() * 256;
@@ -74,8 +74,8 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         }
 
         for (int i = 0; i < 256; i++) {
-            int pos = rand.nextInt(256 - i) + i;
-            int old = perm[i];
+            final int pos = rand.nextInt(256 - i) + i;
+            final int old = perm[i];
 
             perm[i] = perm[pos];
             perm[pos] = old;
@@ -90,7 +90,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param x X coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x) {
+    public static double getNoise(final double x) {
         return instance.noise(x);
     }
 
@@ -102,7 +102,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param y Y coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x, double y) {
+    public static double getNoise(final double x, final double y) {
         return instance.noise(x, y);
     }
 
@@ -115,7 +115,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param z Z coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x, double y, double z) {
+    public static double getNoise(final double x, final double y, final double z) {
         return instance.noise(x, y, z);
     }
 
@@ -135,14 +135,14 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         y += offsetY;
         z += offsetZ;
 
-        int floorX = floor(x);
-        int floorY = floor(y);
-        int floorZ = floor(z);
+        final int floorX = floor(x);
+        final int floorY = floor(y);
+        final int floorZ = floor(z);
 
         // Find unit cube containing the point
-        int X = floorX & 255;
-        int Y = floorY & 255;
-        int Z = floorZ & 255;
+        final int X = floorX & 255;
+        final int Y = floorY & 255;
+        final int Z = floorZ & 255;
 
         // Get relative xyz coordinates of the point within the cube
         x -= floorX;
@@ -150,17 +150,17 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
         z -= floorZ;
 
         // Compute fade curves for xyz
-        double fX = fade(x);
-        double fY = fade(y);
-        double fZ = fade(z);
+        final double fX = fade(x);
+        final double fY = fade(y);
+        final double fZ = fade(z);
 
         // Hash coordinates of the cube corners
-        int A = perm[X] + Y;
-        int AA = perm[A] + Z;
-        int AB = perm[A + 1] + Z;
-        int B = perm[X + 1] + Y;
-        int BA = perm[B] + Z;
-        int BB = perm[B + 1] + Z;
+        final int A = perm[X] + Y;
+        final int AA = perm[A] + Z;
+        final int AB = perm[A + 1] + Z;
+        final int B = perm[X + 1] + Y;
+        final int BA = perm[B] + Z;
+        final int BB = perm[B + 1] + Z;
 
         return lerp(fZ, lerp(fY, lerp(fX, grad(perm[AA], x, y, z),
                         grad(perm[BA], x - 1, y, z)),
@@ -182,7 +182,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public static double getNoise(double x, int octaves, double frequency, double amplitude) {
+    public static double getNoise(final double x, final int octaves, final double frequency, final double amplitude) {
         return instance.noise(x, octaves, frequency, amplitude);
     }
 
@@ -197,7 +197,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public static double getNoise(double x, double y, int octaves, double frequency, double amplitude) {
+    public static double getNoise(final double x, final double y, final int octaves, final double frequency, final double amplitude) {
         return instance.noise(x, y, octaves, frequency, amplitude);
     }
 
@@ -213,7 +213,7 @@ public class PerlinNoiseGenerator extends NoiseGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public static double getNoise(double x, double y, double z, int octaves, double frequency, double amplitude) {
+    public static double getNoise(final double x, final double y, final double z, final int octaves, final double frequency, final double amplitude) {
         return instance.noise(x, y, z, octaves, frequency, amplitude);
     }
 }
diff --git a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
index af7e01188ee767858ba760089b2aceab0bc9626a..ff67c60d4fd10475068676300a6bcdcb0604f75d 100644
--- a/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/PerlinOctaveGenerator.java
@@ -15,7 +15,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
      * @param world World to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public PerlinOctaveGenerator(@NotNull World world, int octaves) {
+    public PerlinOctaveGenerator(@NotNull final World world, final int octaves) {
         this(new Random(world.getSeed()), octaves);
     }
 
@@ -25,7 +25,7 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
      * @param seed Seed to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public PerlinOctaveGenerator(long seed, int octaves) {
+    public PerlinOctaveGenerator(final long seed, final int octaves) {
         this(new Random(seed), octaves);
     }
 
@@ -35,13 +35,13 @@ public class PerlinOctaveGenerator extends OctaveGenerator {
      * @param rand Random object to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public PerlinOctaveGenerator(@NotNull Random rand, int octaves) {
+    public PerlinOctaveGenerator(@NotNull final Random rand, final int octaves) {
         super(createOctaves(rand, octaves));
     }
 
     @NotNull
-    private static NoiseGenerator[] createOctaves(@NotNull Random rand, int octaves) {
-        NoiseGenerator[] result = new NoiseGenerator[octaves];
+    private static NoiseGenerator[] createOctaves(@NotNull final Random rand, final int octaves) {
+        final NoiseGenerator[] result = new NoiseGenerator[octaves];
 
         for (int i = 0; i < octaves; i++) {
             result[i] = new PerlinNoiseGenerator(rand);
diff --git a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
index 775d8f40322e9ed6702eb23bf50f35442d673c30..64fc15c514344405759b6f10d39db812a5c27949 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexNoiseGenerator.java
@@ -14,7 +14,9 @@ import org.jetbrains.annotations.NotNull;
  * http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf</a>
  */
 public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
+    /** @noinspection ConstantMathCall*/
     protected static final double SQRT_3 = Math.sqrt(3);
+    /** @noinspection ConstantMathCall*/
     protected static final double SQRT_5 = Math.sqrt(5);
     protected static final double F2 = 0.5 * (SQRT_3 - 1);
     protected static final double G2 = (3 - SQRT_3) / 6;
@@ -55,7 +57,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      *
      * @param world World to construct this generator for
      */
-    public SimplexNoiseGenerator(@NotNull World world) {
+    public SimplexNoiseGenerator(@NotNull final World world) {
         this(new Random(world.getSeed()));
     }
 
@@ -64,7 +66,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      *
      * @param seed Seed to construct this generator for
      */
-    public SimplexNoiseGenerator(long seed) {
+    public SimplexNoiseGenerator(final long seed) {
         this(new Random(seed));
     }
 
@@ -73,20 +75,20 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      *
      * @param rand Random to construct with
      */
-    public SimplexNoiseGenerator(@NotNull Random rand) {
+    public SimplexNoiseGenerator(@NotNull final Random rand) {
         super(rand);
         offsetW = rand.nextDouble() * 256;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y) {
+    protected static double dot(final int[] g, final double x, final double y) {
         return g[0] * x + g[1] * y;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y, double z) {
+    protected static double dot(final int[] g, final double x, final double y, final double z) {
         return g[0] * x + g[1] * y + g[2] * z;
     }
 
-    protected static double dot(@NotNull int[] g, double x, double y, double z, double w) {
+    protected static double dot(final int[] g, final double x, final double y, final double z, final double w) {
         return g[0] * x + g[1] * y + g[2] * z + g[3] * w;
     }
 
@@ -97,7 +99,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param xin X coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double xin) {
+    public static double getNoise(final double xin) {
         return instance.noise(xin);
     }
 
@@ -109,7 +111,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param yin Y coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double xin, double yin) {
+    public static double getNoise(final double xin, final double yin) {
         return instance.noise(xin, yin);
     }
 
@@ -122,7 +124,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param zin Z coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double xin, double yin, double zin) {
+    public static double getNoise(final double xin, final double yin, final double zin) {
         return instance.noise(xin, yin, zin);
     }
 
@@ -136,7 +138,7 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
      * @param w W coordinate
      * @return Noise at given location, from range -1 to 1
      */
-    public static double getNoise(double x, double y, double z, double w) {
+    public static double getNoise(final double x, final double y, final double z, final double w) {
         return instance.noise(x, y, z, w);
     }
 
@@ -146,27 +148,34 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         yin += offsetY;
         zin += offsetZ;
 
-        double n0, n1, n2, n3; // Noise contributions from the four corners
-
-        // Skew the input space to determine which simplex cell we're in
-        double s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D
-        int i = floor(xin + s);
-        int j = floor(yin + s);
-        int k = floor(zin + s);
-        double t = (i + j + k) * G3;
-        double X0 = i - t; // Unskew the cell origin back to (x,y,z) space
-        double Y0 = j - t;
-        double Z0 = k - t;
-        double x0 = xin - X0; // The x,y,z distances from the cell origin
-        double y0 = yin - Y0;
-        double z0 = zin - Z0;
+        final double n0;  // Noise contributions from the four corners
+	    final double n1;
+	    final double n2;
+	    final double n3;
+
+	    // Skew the input space to determine which simplex cell we're in
+        final double s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D
+        final int i = floor(xin + s);
+        final int j = floor(yin + s);
+        final int k = floor(zin + s);
+        final double t = (i + j + k) * G3;
+        final double X0 = i - t; // Unskew the cell origin back to (x,y,z) space
+        final double Y0 = j - t;
+        final double Z0 = k - t;
+        final double x0 = xin - X0; // The x,y,z distances from the cell origin
+        final double y0 = yin - Y0;
+        final double z0 = zin - Z0;
 
         // For the 3D case, the simplex shape is a slightly irregular tetrahedron.
 
         // Determine which simplex we are in.
-        int i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords
-        int i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords
-        if (x0 >= y0) {
+        final int i1;  // Offsets for second corner of simplex in (i,j,k) coords
+	    final int j1;
+	    final int k1;
+	    final int i2;  // Offsets for third corner of simplex in (i,j,k) coords
+	    final int j2;
+	    final int k2;
+	    if (x0 >= y0) {
             if (y0 >= z0) {
                 i1 = 1;
                 j1 = 0;
@@ -222,24 +231,24 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and
         // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where
         // c = 1/6.
-        double x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
-        double y1 = y0 - j1 + G3;
-        double z1 = z0 - k1 + G3;
-        double x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
-        double y2 = y0 - j2 + 2.0 * G3;
-        double z2 = z0 - k2 + 2.0 * G3;
-        double x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
-        double y3 = y0 - 1.0 + 3.0 * G3;
-        double z3 = z0 - 1.0 + 3.0 * G3;
+        final double x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords
+        final double y1 = y0 - j1 + G3;
+        final double z1 = z0 - k1 + G3;
+        final double x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords
+        final double y2 = y0 - j2 + 2.0 * G3;
+        final double z2 = z0 - k2 + 2.0 * G3;
+        final double x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords
+        final double y3 = y0 - 1.0 + 3.0 * G3;
+        final double z3 = z0 - 1.0 + 3.0 * G3;
 
         // Work out the hashed gradient indices of the four simplex corners
-        int ii = i & 255;
-        int jj = j & 255;
-        int kk = k & 255;
-        int gi0 = perm[ii + perm[jj + perm[kk]]] % 12;
-        int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12;
-        int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12;
-        int gi3 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12;
+        final int ii = i & 255;
+        final int jj = j & 255;
+        final int kk = k & 255;
+        final int gi0 = perm[ii + perm[jj + perm[kk]]] % 12;
+        final int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1]]] % 12;
+        final int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2]]] % 12;
+        final int gi3 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1]]] % 12;
 
         // Calculate the contribution from the four corners
         double t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;
@@ -284,23 +293,26 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         xin += offsetX;
         yin += offsetY;
 
-        double n0, n1, n2; // Noise contributions from the three corners
+        final double n0;  // Noise contributions from the three corners
+	    final double n1;
+	    final double n2;
 
-        // Skew the input space to determine which simplex cell we're in
-        double s = (xin + yin) * F2; // Hairy factor for 2D
-        int i = floor(xin + s);
-        int j = floor(yin + s);
-        double t = (i + j) * G2;
-        double X0 = i - t; // Unskew the cell origin back to (x,y) space
-        double Y0 = j - t;
-        double x0 = xin - X0; // The x,y distances from the cell origin
-        double y0 = yin - Y0;
+	    // Skew the input space to determine which simplex cell we're in
+        final double s = (xin + yin) * F2; // Hairy factor for 2D
+        final int i = floor(xin + s);
+        final int j = floor(yin + s);
+        final double t = (i + j) * G2;
+        final double X0 = i - t; // Unskew the cell origin back to (x,y) space
+        final double Y0 = j - t;
+        final double x0 = xin - X0; // The x,y distances from the cell origin
+        final double y0 = yin - Y0;
 
         // For the 2D case, the simplex shape is an equilateral triangle.
 
         // Determine which simplex we are in.
-        int i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords
-        if (x0 > y0) {
+        final int i1;  // Offsets for second (middle) corner of simplex in (i,j) coords
+	    final int j1;
+	    if (x0 > y0) {
             i1 = 1;
             j1 = 0;
         } // lower triangle, XY order: (0,0)->(1,0)->(1,1)
@@ -313,17 +325,17 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where
         // c = (3-sqrt(3))/6
 
-        double x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
-        double y1 = y0 - j1 + G2;
-        double x2 = x0 + G22; // Offsets for last corner in (x,y) unskewed coords
-        double y2 = y0 + G22;
+        final double x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords
+        final double y1 = y0 - j1 + G2;
+        final double x2 = x0 + G22; // Offsets for last corner in (x,y) unskewed coords
+        final double y2 = y0 + G22;
 
         // Work out the hashed gradient indices of the three simplex corners
-        int ii = i & 255;
-        int jj = j & 255;
-        int gi0 = perm[ii + perm[jj]] % 12;
-        int gi1 = perm[ii + i1 + perm[jj + j1]] % 12;
-        int gi2 = perm[ii + 1 + perm[jj + 1]] % 12;
+        final int ii = i & 255;
+        final int jj = j & 255;
+        final int gi0 = perm[ii + perm[jj]] % 12;
+        final int gi1 = perm[ii + i1 + perm[jj + j1]] % 12;
+        final int gi2 = perm[ii + 1 + perm[jj + 1]] % 12;
 
         // Calculate the contribution from the three corners
         double t0 = 0.5 - x0 * x0 - y0 * y0;
@@ -371,24 +383,28 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         z += offsetZ;
         w += offsetW;
 
-        double n0, n1, n2, n3, n4; // Noise contributions from the five corners
-
-        // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
-        double s = (x + y + z + w) * F4; // Factor for 4D skewing
-        int i = floor(x + s);
-        int j = floor(y + s);
-        int k = floor(z + s);
-        int l = floor(w + s);
-
-        double t = (i + j + k + l) * G4; // Factor for 4D unskewing
-        double X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
-        double Y0 = j - t;
-        double Z0 = k - t;
-        double W0 = l - t;
-        double x0 = x - X0; // The x,y,z,w distances from the cell origin
-        double y0 = y - Y0;
-        double z0 = z - Z0;
-        double w0 = w - W0;
+        final double n0;  // Noise contributions from the five corners
+	    final double n1;
+	    final double n2;
+	    final double n3;
+	    final double n4;
+
+	    // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in
+        final double s = (x + y + z + w) * F4; // Factor for 4D skewing
+        final int i = floor(x + s);
+        final int j = floor(y + s);
+        final int k = floor(z + s);
+        final int l = floor(w + s);
+
+        final double t = (i + j + k + l) * G4; // Factor for 4D unskewing
+        final double X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space
+        final double Y0 = j - t;
+        final double Z0 = k - t;
+        final double W0 = l - t;
+        final double x0 = x - X0; // The x,y,z,w distances from the cell origin
+        final double y0 = y - Y0;
+        final double z0 = z - Z0;
+        final double w0 = w - W0;
 
         // For the 4D case, the simplex is a 4D shape I won't even try to describe.
         // To find out which of the 24 possible simplices we're in, we need to
@@ -398,18 +414,27 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
         // First, six pair-wise comparisons are performed between each possible pair
         // of the four coordinates, and the results are used to add up binary bits
         // for an integer index.
-        int c1 = (x0 > y0) ? 32 : 0;
-        int c2 = (x0 > z0) ? 16 : 0;
-        int c3 = (y0 > z0) ? 8 : 0;
-        int c4 = (x0 > w0) ? 4 : 0;
-        int c5 = (y0 > w0) ? 2 : 0;
-        int c6 = (z0 > w0) ? 1 : 0;
-        int c = c1 + c2 + c3 + c4 + c5 + c6;
-        int i1, j1, k1, l1; // The integer offsets for the second simplex corner
-        int i2, j2, k2, l2; // The integer offsets for the third simplex corner
-        int i3, j3, k3, l3; // The integer offsets for the fourth simplex corner
-
-        // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
+        final int c1 = (x0 > y0) ? 32 : 0;
+        final int c2 = (x0 > z0) ? 16 : 0;
+        final int c3 = (y0 > z0) ? 8 : 0;
+        final int c4 = (x0 > w0) ? 4 : 0;
+        final int c5 = (y0 > w0) ? 2 : 0;
+        final int c6 = (z0 > w0) ? 1 : 0;
+        final int c = c1 + c2 + c3 + c4 + c5 + c6;
+        final int i1;  // The integer offsets for the second simplex corner
+	    final int j1;
+	    final int k1;
+	    final int l1;
+	    final int i2;  // The integer offsets for the third simplex corner
+	    final int j2;
+	    final int k2;
+	    final int l2;
+	    final int i3;  // The integer offsets for the fourth simplex corner
+	    final int j3;
+	    final int k3;
+	    final int l3;
+
+	    // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.
         // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w
         // impossible. Only the 24 indices which have non-zero entries make any sense.
         // We use a thresholding to set the coordinates in turn from the largest magnitude.
@@ -434,37 +459,37 @@ public class SimplexNoiseGenerator extends PerlinNoiseGenerator {
 
         // The fifth corner has all coordinate offsets = 1, so no need to look that up.
 
-        double x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
-        double y1 = y0 - j1 + G4;
-        double z1 = z0 - k1 + G4;
-        double w1 = w0 - l1 + G4;
+        final double x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords
+        final double y1 = y0 - j1 + G4;
+        final double z1 = z0 - k1 + G4;
+        final double w1 = w0 - l1 + G4;
 
-        double x2 = x0 - i2 + G42; // Offsets for third corner in (x,y,z,w) coords
-        double y2 = y0 - j2 + G42;
-        double z2 = z0 - k2 + G42;
-        double w2 = w0 - l2 + G42;
+        final double x2 = x0 - i2 + G42; // Offsets for third corner in (x,y,z,w) coords
+        final double y2 = y0 - j2 + G42;
+        final double z2 = z0 - k2 + G42;
+        final double w2 = w0 - l2 + G42;
 
-        double x3 = x0 - i3 + G43; // Offsets for fourth corner in (x,y,z,w) coords
-        double y3 = y0 - j3 + G43;
-        double z3 = z0 - k3 + G43;
-        double w3 = w0 - l3 + G43;
+        final double x3 = x0 - i3 + G43; // Offsets for fourth corner in (x,y,z,w) coords
+        final double y3 = y0 - j3 + G43;
+        final double z3 = z0 - k3 + G43;
+        final double w3 = w0 - l3 + G43;
 
-        double x4 = x0 + G44; // Offsets for last corner in (x,y,z,w) coords
-        double y4 = y0 + G44;
-        double z4 = z0 + G44;
-        double w4 = w0 + G44;
+        final double x4 = x0 + G44; // Offsets for last corner in (x,y,z,w) coords
+        final double y4 = y0 + G44;
+        final double z4 = z0 + G44;
+        final double w4 = w0 + G44;
 
         // Work out the hashed gradient indices of the five simplex corners
-        int ii = i & 255;
-        int jj = j & 255;
-        int kk = k & 255;
-        int ll = l & 255;
-
-        int gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;
-        int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;
-        int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;
-        int gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;
-        int gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;
+        final int ii = i & 255;
+        final int jj = j & 255;
+        final int kk = k & 255;
+        final int ll = l & 255;
+
+        final int gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;
+        final int gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;
+        final int gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;
+        final int gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;
+        final int gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32;
 
         // Calculate the contribution from the five corners
         double t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;
diff --git a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
index 6cc15431e1b288df1830adac936a7648c6834b3e..502e7f61efe998adcb98e3e9361fc0c8ef7da46c 100644
--- a/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
+++ b/src/main/java/org/bukkit/util/noise/SimplexOctaveGenerator.java
@@ -16,7 +16,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param world World to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public SimplexOctaveGenerator(@NotNull World world, int octaves) {
+    public SimplexOctaveGenerator(@NotNull final World world, final int octaves) {
         this(new Random(world.getSeed()), octaves);
     }
 
@@ -26,7 +26,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param seed Seed to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public SimplexOctaveGenerator(long seed, int octaves) {
+    public SimplexOctaveGenerator(final long seed, final int octaves) {
         this(new Random(seed), octaves);
     }
 
@@ -36,12 +36,12 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param rand Random object to construct this generator for
      * @param octaves Amount of octaves to create
      */
-    public SimplexOctaveGenerator(@NotNull Random rand, int octaves) {
+    public SimplexOctaveGenerator(@NotNull final Random rand, final int octaves) {
         super(createOctaves(rand, octaves));
     }
 
     @Override
-    public void setScale(double scale) {
+    public void setScale(final double scale) {
         super.setScale(scale);
         setWScale(scale);
     }
@@ -60,7 +60,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      *
      * @param scale New W scale
      */
-    public void setWScale(double scale) {
+    public void setWScale(final double scale) {
         wScale = scale;
     }
 
@@ -76,7 +76,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param amplitude How much to alter the amplitude by each octave
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double w, double frequency, double amplitude) {
+    public double noise(final double x, final double y, final double z, final double w, final double frequency, final double amplitude) {
         return noise(x, y, z, w, frequency, amplitude, false);
     }
 
@@ -93,7 +93,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
      * @param normalized If true, normalize the value to [-1, 1]
      * @return Resulting noise
      */
-    public double noise(double x, double y, double z, double w, double frequency, double amplitude, boolean normalized) {
+    public double noise(double x, double y, double z, double w, final double frequency, final double amplitude, final boolean normalized) {
         double result = 0;
         double amp = 1;
         double freq = 1;
@@ -104,7 +104,7 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
         z *= zScale;
         w *= wScale;
 
-        for (NoiseGenerator octave : octaves) {
+        for (final NoiseGenerator octave : octaves) {
             result += ((SimplexNoiseGenerator) octave).noise(x * freq, y * freq, z * freq, w * freq) * amp;
             max += amp;
             freq *= frequency;
@@ -119,8 +119,8 @@ public class SimplexOctaveGenerator extends OctaveGenerator {
     }
 
     @NotNull
-    private static NoiseGenerator[] createOctaves(@NotNull Random rand, int octaves) {
-        NoiseGenerator[] result = new NoiseGenerator[octaves];
+    private static NoiseGenerator[] createOctaves(@NotNull final Random rand, final int octaves) {
+        final NoiseGenerator[] result = new NoiseGenerator[octaves];
 
         for (int i = 0; i < octaves; i++) {
             result[i] = new SimplexNoiseGenerator(rand);
diff --git a/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java b/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
index 54bc413700e6e76e8ca44c94837e12a97c144e84..adadfb2e4f12353f3e8534813d6fecdfe99e6809 100644
--- a/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/BroadcastPermissions.java
@@ -11,8 +11,8 @@ public final class BroadcastPermissions {
     private BroadcastPermissions() {}
 
     @NotNull
-    public static Permission registerPermissions(@NotNull Permission parent) {
-        Permission broadcasts = DefaultPermissions.registerPermission(ROOT, "Allows the user to receive all broadcast messages", parent);
+    public static Permission registerPermissions(@NotNull final Permission parent) {
+        final Permission broadcasts = DefaultPermissions.registerPermission(ROOT, "Allows the user to receive all broadcast messages", parent);
 
         DefaultPermissions.registerPermission(PREFIX + "admin", "Allows the user to receive administrative broadcasts", PermissionDefault.OP, broadcasts);
         DefaultPermissions.registerPermission(PREFIX + "user", "Allows the user to receive user broadcasts", PermissionDefault.TRUE, broadcasts);
diff --git a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
index 7763d6101ac61900db1e2310966b99584539fd0e..e82dff680d70083bf7aa3d18bbbfe696cbd8edf7 100644
--- a/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/CommandPermissions.java
@@ -11,8 +11,8 @@ public final class CommandPermissions {
     private CommandPermissions() {}
 
     @NotNull
-    public static Permission registerPermissions(@NotNull Permission parent) {
-        Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit commands", parent);
+    public static Permission registerPermissions(@NotNull final Permission parent) {
+        final Permission commands = DefaultPermissions.registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit commands", parent);
 
         DefaultPermissions.registerPermission(PREFIX + "help", "Allows the user to view the vanilla help menu", PermissionDefault.TRUE, commands);
         DefaultPermissions.registerPermission(PREFIX + "plugins", "Allows the user to view the list of plugins running on this server", PermissionDefault.TRUE, commands);
diff --git a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
index 406c36369d4dbe994698850c56444d1a26c38e16..741bb6ef748670ae9d3ff862dc0d5409926d457b 100644
--- a/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
+++ b/src/main/java/org/bukkit/util/permissions/DefaultPermissions.java
@@ -15,23 +15,23 @@ public final class DefaultPermissions {
     private DefaultPermissions() {}
 
     @NotNull
-    public static Permission registerPermission(@NotNull Permission perm) {
+    public static Permission registerPermission(@NotNull final Permission perm) {
         return registerPermission(perm, true);
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull Permission perm, boolean withLegacy) {
+    public static Permission registerPermission(@NotNull final Permission perm, final boolean withLegacy) {
         Permission result = perm;
 
         try {
             Bukkit.getPluginManager().addPermission(perm);
-        } catch (IllegalArgumentException ex) {
+        } catch (final IllegalArgumentException ex) {
             result = Bukkit.getPluginManager().getPermission(perm.getName());
             assert result != null;
         }
 
         if (withLegacy) {
-            Permission legacy = new Permission(LEGACY_PREFIX + result.getName(), result.getDescription(), PermissionDefault.FALSE);
+            final Permission legacy = new Permission(LEGACY_PREFIX + result.getName(), result.getDescription(), PermissionDefault.FALSE);
             legacy.getChildren().put(result.getName(), true);
             registerPermission(perm, false);
         }
@@ -40,49 +40,49 @@ public final class DefaultPermissions {
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull Permission perm, @NotNull Permission parent) {
+    public static Permission registerPermission(@NotNull final Permission perm, @NotNull final Permission parent) {
         parent.getChildren().put(perm.getName(), true);
         return registerPermission(perm);
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc) {
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc) {
 	    return registerPermission(new Permission(name, desc));
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @NotNull Permission parent) {
-        Permission perm = registerPermission(name, desc);
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @NotNull final Permission parent) {
+        final Permission perm = registerPermission(name, desc);
         parent.getChildren().put(perm.getName(), true);
         return perm;
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def) {
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def) {
 	    return registerPermission(new Permission(name, desc, def));
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @NotNull Permission parent) {
-        Permission perm = registerPermission(name, desc, def);
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def, @NotNull final Permission parent) {
+        final Permission perm = registerPermission(name, desc, def);
         parent.getChildren().put(perm.getName(), true);
         return perm;
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @Nullable Map<String, Boolean> children) {
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def, @Nullable final Map<String, Boolean> children) {
 	    return registerPermission(new Permission(name, desc, def, children));
     }
 
     @NotNull
-    public static Permission registerPermission(@NotNull String name, @Nullable String desc, @Nullable PermissionDefault def, @Nullable Map<String, Boolean> children, @NotNull Permission parent) {
-        Permission perm = registerPermission(name, desc, def, children);
+    public static Permission registerPermission(@NotNull final String name, @Nullable final String desc, @Nullable final PermissionDefault def, @Nullable final Map<String, Boolean> children, @NotNull final Permission parent) {
+        final Permission perm = registerPermission(name, desc, def, children);
         parent.getChildren().put(perm.getName(), true);
         return perm;
     }
 
     public static void registerCorePermissions() {
-        Permission parent = registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit utilities and commands");
+        final Permission parent = registerPermission(ROOT, "Gives the user the ability to use all CraftBukkit utilities and commands");
 
         CommandPermissions.registerPermissions(parent);
         BroadcastPermissions.registerPermissions(parent);
diff --git a/src/main/java/org/spigotmc/CustomTimingsHandler.java b/src/main/java/org/spigotmc/CustomTimingsHandler.java
index 8c58a8ce9f9cfc8f94ca315962a9a09cab95b9d4..a62c88d66a9bfa4a0f8a08ddb5e5a0a93ab16f71 100644
--- a/src/main/java/org/spigotmc/CustomTimingsHandler.java
+++ b/src/main/java/org/spigotmc/CustomTimingsHandler.java
@@ -49,19 +49,19 @@ public final class CustomTimingsHandler {
     private static Boolean sunReflectAvailable;
     private static Method getCallerClass;
 
-    public CustomTimingsHandler(@NotNull String name) {
+    public CustomTimingsHandler(@NotNull final String name) {
         if (sunReflectAvailable == null) {
-            String javaVer = System.getProperty("java.version");
-            String[] elements = javaVer.split("\\.");
+            final String javaVer = System.getProperty("java.version");
+            final String[] elements = javaVer.split("\\.");
 
-            int major = Integer.parseInt(elements.length >= 2 ? elements[1] : javaVer);
+            final int major = Integer.parseInt(elements.length >= 2 ? elements[1] : javaVer);
             if (major <= 8) {
                 sunReflectAvailable = true;
 
                 try {
-                    Class<?> reflection = Class.forName("sun.reflect.Reflection");
+                    final Class<?> reflection = Class.forName("sun.reflect.Reflection");
                     getCallerClass = reflection.getMethod("getCallerClass", int.class);
-                } catch (ClassNotFoundException | NoSuchMethodException ignored) {
+                } catch (final ClassNotFoundException | NoSuchMethodException ignored) {
                 }
             } else {
                 sunReflectAvailable = false;
@@ -72,7 +72,7 @@ public final class CustomTimingsHandler {
         if (sunReflectAvailable) {
             try {
                 calling = (Class) getCallerClass.invoke(null, 2);
-            } catch (IllegalAccessException | InvocationTargetException ignored) {
+            } catch (final IllegalAccessException | InvocationTargetException ignored) {
             }
         }
 
@@ -81,7 +81,7 @@ public final class CustomTimingsHandler {
         Plugin plugin = null;
         try {
              plugin = TimingsManager.getPluginByClassloader(calling);
-        } catch (Exception ignored) {}
+        } catch (final Exception ignored) {}
 
         new AuthorNagException("Deprecated use of CustomTimingsHandler. Please Switch to Timings.of ASAP").printStackTrace();
         if (plugin != null) {
@@ -91,7 +91,7 @@ public final class CustomTimingsHandler {
                 final Method ofSafe = TimingsManager.class.getDeclaredMethod("getHandler", String.class, String.class, Timing.class);
                 ofSafe.setAccessible(true);
                 timing = (Timing) ofSafe.invoke(null,"Minecraft", "(Deprecated API) " + name, null);
-            } catch (Exception e) {
+            } catch (final Exception e) {
                 e.printStackTrace();
                 Bukkit.getLogger().log(Level.SEVERE, "This handler could not be registered");
                 timing = Timings.NULL_HANDLER;
diff --git a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
index a7632c8f5cb1bce4be0e456ec34f4a69c5ce80f3..469f824a3ecf062400554ee2d37932f22db94483 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityDismountEvent.java
@@ -16,13 +16,13 @@ public class EntityDismountEvent extends EntityEvent implements Cancellable {
     private final Entity dismounted;
     private final boolean isCancellable; // Paper
 
-    public EntityDismountEvent(@NotNull Entity what, @NotNull Entity dismounted) {
+    public EntityDismountEvent(@NotNull final Entity what, @NotNull final Entity dismounted) {
         // Paper start
         this(what, dismounted, true);
     }
 
 
-    public EntityDismountEvent(@NotNull Entity what, @NotNull Entity dismounted, boolean isCancellable) {
+    public EntityDismountEvent(@NotNull final Entity what, @NotNull final Entity dismounted, final boolean isCancellable) {
         // Paper end
         super( what );
         this.dismounted = dismounted;
@@ -40,7 +40,7 @@ public class EntityDismountEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         // Paper start
         if (cancel && !isCancellable) {
             return;
diff --git a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
index de9c41effefdd9312869a3978946fb9a48bce707..7076e7f09daa8d8fb112ba069eca27ebf2cccfc1 100644
--- a/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
+++ b/src/main/java/org/spigotmc/event/entity/EntityMountEvent.java
@@ -15,7 +15,7 @@ public class EntityMountEvent extends EntityEvent implements Cancellable {
     private boolean cancelled;
     private final Entity mount;
 
-    public EntityMountEvent(@NotNull Entity what, @NotNull Entity mount) {
+    public EntityMountEvent(@NotNull final Entity what, @NotNull final Entity mount) {
         super(what);
         this.mount = mount;
     }
@@ -31,7 +31,7 @@ public class EntityMountEvent extends EntityEvent implements Cancellable {
     }
 
     @Override
-    public void setCancelled(boolean cancel) {
+    public void setCancelled(final boolean cancel) {
         this.cancelled = cancel;
     }
 
diff --git a/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java b/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
index 2515887c20738b5add74eff02d2e9672080623d2..07a6e5325ad027268901ecf5a952ae364f6a0175 100644
--- a/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
+++ b/src/main/java/org/spigotmc/event/player/PlayerSpawnLocationEvent.java
@@ -13,7 +13,7 @@ public class PlayerSpawnLocationEvent extends PlayerEvent {
     private static final HandlerList handlers = new HandlerList();
     private Location spawnLocation;
 
-    public PlayerSpawnLocationEvent(@NotNull final Player who, @NotNull Location spawnLocation) {
+    public PlayerSpawnLocationEvent(@NotNull final Player who, @NotNull final Location spawnLocation) {
         super(who);
         this.spawnLocation = spawnLocation;
     }
@@ -36,7 +36,7 @@ public class PlayerSpawnLocationEvent extends PlayerEvent {
      *
      * @param location the spawn location
      */
-    public void setSpawnLocation(@NotNull Location location) {
+    public void setSpawnLocation(@NotNull final Location location) {
         this.spawnLocation = location;
     }
 
diff --git a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java b/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
index 328c51471dc12e81c1a1b643455337b3fef4d14a..19598be016c7a4cd57153a0e34204772821f2c1e 100644
--- a/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
+++ b/src/test/java/com/destroystokyo/paper/MaterialTagsTest.java
@@ -17,7 +17,7 @@ public class MaterialTagsTest {
             TestServer.getInstance();
             MaterialTags.SHULKER_BOXES.getValues();
             assert true;
-        } catch (Throwable e) {
+        } catch (final Throwable e) {
             Bukkit.getLogger().log(Level.SEVERE, e.getMessage(), e);
             assert false;
         }
diff --git a/src/test/java/io/papermc/paper/EntityTagsTest.java b/src/test/java/io/papermc/paper/EntityTagsTest.java
index 25d956acb66b19c7c730f89acd5de5738b42e77c..2f8b961e08c39c58cf8ceaaa4e5268942ff32d88 100644
--- a/src/test/java/io/papermc/paper/EntityTagsTest.java
+++ b/src/test/java/io/papermc/paper/EntityTagsTest.java
@@ -15,7 +15,7 @@ public class EntityTagsTest {
             TestServer.getInstance();
             EntityTags.HORSES.getValues();
             assert true;
-        } catch (Throwable e) {
+        } catch (final Throwable e) {
             Bukkit.getLogger().log(Level.SEVERE, e.getMessage(), e);
             assert false;
         }
diff --git a/src/test/java/org/bukkit/AnnotationTest.java b/src/test/java/org/bukkit/AnnotationTest.java
index 2d383a10267e43fe9996178a3724a0d618c5453b..f2ce72106de5ae8b8e3a4ae488a64feb4d802acc 100644
--- a/src/test/java/org/bukkit/AnnotationTest.java
+++ b/src/test/java/org/bukkit/AnnotationTest.java
@@ -1,3 +1,4 @@
+/*
 package org.bukkit;
 
 import org.jetbrains.annotations.NotNull;
@@ -19,6 +20,7 @@ import java.net.URISyntaxException;
 import java.net.URL;
 import java.util.*;
 
+
 public class AnnotationTest {
 
     private static final String[] ACCEPTED_ANNOTATIONS = {
@@ -57,8 +59,8 @@ public class AnnotationTest {
 
     @Test
     public void testAll() throws IOException, URISyntaxException {
-        URL loc = Bukkit.class.getProtectionDomain().getCodeSource().getLocation();
-        File file = new File(loc.toURI());
+        final URL loc = Bukkit.class.getProtectionDomain().getCodeSource().getLocation();
+        final File file = new File(loc.toURI());
 
         // Running from jar is not supported yet
         Assert.assertTrue("code must be in a directory", file.isDirectory());
@@ -68,12 +70,12 @@ public class AnnotationTest {
 
         final ArrayList<String> errors = new ArrayList<>();
 
-        for (ClassNode clazz : foundClasses.values()) {
+        for (final ClassNode clazz : foundClasses.values()) {
             if (!isClassIncluded(clazz, foundClasses)) {
                 continue;
             }
 
-            for (MethodNode method : clazz.methods) {
+            for (final MethodNode method : clazz.methods) {
                 if (!isMethodIncluded(clazz, method, foundClasses)) {
                     continue;
                 }
@@ -82,13 +84,13 @@ public class AnnotationTest {
                     warn(errors, clazz, method, "return value");
                 }
 
-                Type[] paramTypes = Type.getArgumentTypes(method.desc);
-                List<ParameterNode> parameters = method.parameters;
+                final Type[] paramTypes = Type.getArgumentTypes(method.desc);
+                final List<ParameterNode> parameters = method.parameters;
 
                 for (int i = 0; i < paramTypes.length; i++) {
                     if (mustBeAnnotated(paramTypes[i]) && !isWellAnnotated(method.invisibleParameterAnnotations == null ? null : method.invisibleParameterAnnotations[i])) {
-                        ParameterNode paramNode = parameters == null ? null : parameters.get(i);
-                        String paramName = paramNode == null ? null : paramNode.name;
+                        final ParameterNode paramNode = parameters == null ? null : parameters.get(i);
+                        final String paramName = paramNode == null ? null : paramNode.name;
 
                         warn(errors, clazz, method, "parameter " + i + (paramName == null ? "" : ": " + paramName));
                     }
@@ -103,26 +105,26 @@ public class AnnotationTest {
 
         Collections.sort(errors);
 
-        StringBuilder builder = new StringBuilder()
+        final StringBuilder builder = new StringBuilder()
             .append("There ")
             .append(errors.size() != 1 ? "are " : "is ")
             .append(errors.size())
             .append(" missing annotation")
             .append(errors.size() != 1 ? "s:\n" : ":\n");
 
-        for (String message : errors) {
+        for (final String message : errors) {
             builder.append("\t").append(message).append("\n");
         }
 
         Assert.fail(builder.toString());
     }
 
-    private static void collectClasses(@NotNull File from, @NotNull Map<String, ClassNode> to) throws IOException {
+    private static void collectClasses(@NotNull final File from, @NotNull final Map<String, ClassNode> to) throws IOException {
         if (from.isDirectory()) {
             final File[] files = from.listFiles();
             assert files != null;
 
-            for (File file : files) {
+            for (final File file : files) {
                 collectClasses(file, to);
             }
             return;
@@ -132,7 +134,7 @@ public class AnnotationTest {
             return;
         }
 
-        try (FileInputStream in = new FileInputStream(from)) {
+        try (final FileInputStream in = new FileInputStream(from)) {
             final ClassReader cr = new ClassReader(in);
 
             final ClassNode node = new ClassNode();
@@ -142,7 +144,7 @@ public class AnnotationTest {
         }
     }
 
-    private static boolean isClassIncluded(@NotNull ClassNode clazz, @NotNull Map<String, ClassNode> allClasses) {
+    private static boolean isClassIncluded(@NotNull final ClassNode clazz, @NotNull final Map<String, ClassNode> allClasses) {
         // Exclude private, synthetic or deprecated classes and annotations, since their members can't be null
         if ((clazz.access & (Opcodes.ACC_PRIVATE | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_DEPRECATED | Opcodes.ACC_ANNOTATION)) != 0) {
             return false;
@@ -158,7 +160,7 @@ public class AnnotationTest {
             return false;
         }
 
-        for (String excludedClass : EXCLUDED_CLASSES) {
+        for (final String excludedClass : EXCLUDED_CLASSES) {
             if (excludedClass.equals(clazz.name)) {
                 return false;
             }
@@ -167,7 +169,7 @@ public class AnnotationTest {
         return true;
     }
 
-    private static boolean isMethodIncluded(@NotNull ClassNode clazz, @NotNull MethodNode method, @NotNull Map<String, ClassNode> allClasses) {
+    private static boolean isMethodIncluded(@NotNull final ClassNode clazz, @NotNull final MethodNode method, @NotNull final Map<String, ClassNode> allClasses) {
         // Exclude private, synthetic and deprecated methods
         if ((method.access & (Opcodes.ACC_PRIVATE | Opcodes.ACC_SYNTHETIC | Opcodes.ACC_DEPRECATED)) != 0 || (method.access & (Opcodes.ACC_PRIVATE | Opcodes.ACC_PROTECTED | Opcodes.ACC_PUBLIC)) == 0) { // Paper - ignore package-private
             return false;
@@ -187,13 +189,13 @@ public class AnnotationTest {
 	    return !"<init>".equals(method.name) || !isAnonymous(clazz);
     }
 
-    private static boolean isWellAnnotated(@Nullable List<? extends AnnotationNode> annotations) { // Paper - allow children of AnnotationNode
+    private static boolean isWellAnnotated(@Nullable final List<? extends AnnotationNode> annotations) { // Paper - allow children of AnnotationNode
         if (annotations == null) {
             return false;
         }
 
-        for (AnnotationNode node : annotations) {
-            for (String acceptedAnnotation : ACCEPTED_ANNOTATIONS) {
+        for (final AnnotationNode node : annotations) {
+            for (final String acceptedAnnotation : ACCEPTED_ANNOTATIONS) {
                 if (acceptedAnnotation.equals(node.desc)) {
                     return true;
                 }
@@ -203,22 +205,24 @@ public class AnnotationTest {
         return false;
     }
 
-    private static boolean mustBeAnnotated(@NotNull Type type) {
+    private static boolean mustBeAnnotated(@NotNull final Type type) {
         return type.getSort() == Type.ARRAY || type.getSort() == Type.OBJECT;
     }
 
-    private static boolean is(@NotNull MethodNode method, @NotNull String name, int parameters) {
+    private static boolean is(@NotNull final MethodNode method, @NotNull final String name, final int parameters) {
         final List<ParameterNode> params = method.parameters;
         return method.name.equals(name) && (params == null || params.size() == parameters);
     }
 
-    /**
+    */
+/**
      * Checks if the class is anonymous.
      *
      * @param clazz the class to check
      * @return true if given class is anonymous
-     */
-    private static boolean isAnonymous(@NotNull ClassNode clazz) {
+     *//*
+
+    private static boolean isAnonymous(@NotNull final ClassNode clazz) {
         final String name = clazz.name;
         if (name == null) {
             return false;
@@ -234,7 +238,7 @@ public class AnnotationTest {
         return c >= '0' && c <= '9';
     }
 
-    private static boolean isSubclassOf(@NotNull ClassNode what, @NotNull String ofWhat, @NotNull Map<String, ClassNode> allClasses) {
+    private static boolean isSubclassOf(@NotNull final ClassNode what, @NotNull final String ofWhat, @NotNull final Map<String, ClassNode> allClasses) {
         if (ofWhat.equals(what.name)
                 // Not only optimization: Super class may not be present in allClasses, so it is checked here
                 || ofWhat.equals(what.superName)) {
@@ -246,7 +250,7 @@ public class AnnotationTest {
             return true;
         }
 
-        for (String superInterface : what.interfaces) {
+        for (final String superInterface : what.interfaces) {
             final ClassNode interfaceParent = allClasses.get(superInterface);
             if (interfaceParent != null && isSubclassOf(interfaceParent, ofWhat, allClasses)) {
                 return true;
@@ -256,7 +260,7 @@ public class AnnotationTest {
         return false;
     }
 
-    private static void warn(@NotNull Collection<String> out, @NotNull ClassNode clazz, @NotNull MethodNode method, @NotNull String description) {
+    private static void warn(@NotNull final Collection<String> out, @NotNull final ClassNode clazz, @NotNull final MethodNode method, @NotNull final String description) {
         out.add(clazz.name + " \t" + method.name + " \t" + description);
     }
-}
+}*/
diff --git a/src/test/java/org/bukkit/ArtTest.java b/src/test/java/org/bukkit/ArtTest.java
index 2e9249a6d48edfe2339cbb4c8cc799cf551381fd..c809e921ca966bcf19f0fecdec25102c8d6cbcb6 100644
--- a/src/test/java/org/bukkit/ArtTest.java
+++ b/src/test/java/org/bukkit/ArtTest.java
@@ -13,21 +13,21 @@ public class ArtTest {
 
     @Test
     public void getById() {
-        for (Art art : Art.values()) {
+        for (final Art art : Art.values()) {
             assertThat(Art.getById(art.getId()), is(art));
         }
     }
 
     @Test
     public void getByName() {
-        for (Art art : Art.values()) {
+        for (final Art art : Art.values()) {
             assertThat(Art.getByName(art.toString()), is(art));
         }
     }
 
     @Test
     public void dimensionSanityCheck() {
-        for (Art art : Art.values()) {
+        for (final Art art : Art.values()) {
             assertThat(art.getBlockHeight(), is(greaterThan(0)));
             assertThat(art.getBlockWidth(), is(greaterThan(0)));
         }
@@ -35,8 +35,8 @@ public class ArtTest {
 
     @Test
     public void getByNameWithMixedCase() {
-        Art subject = Art.values()[0];
-        String name = subject.toString().replace('E', 'e');
+        final Art subject = Art.values()[0];
+        final String name = subject.toString().replace('E', 'e');
 
         assertThat(Art.getByName(name), is(subject));
     }
diff --git a/src/test/java/org/bukkit/ChatColorTest.java b/src/test/java/org/bukkit/ChatColorTest.java
index 027be750a811d4681407221405430255047064b1..d705246f64a31cd4c5c3e2ffc00df8e91d2c2471 100644
--- a/src/test/java/org/bukkit/ChatColorTest.java
+++ b/src/test/java/org/bukkit/ChatColorTest.java
@@ -10,7 +10,7 @@ public class ChatColorTest {
 
     @Test
     public void getByChar() {
-        for (ChatColor color : ChatColor.values()) {
+        for (final ChatColor color : ChatColor.values()) {
             assertThat(ChatColor.getByChar(color.getChar()), is(color));
         }
     }
@@ -32,7 +32,7 @@ public class ChatColorTest {
 
     @Test
     public void getByString() {
-        for (ChatColor color : ChatColor.values()) {
+        for (final ChatColor color : ChatColor.values()) {
             assertThat(ChatColor.getByChar(String.valueOf(color.getChar())), is(color));
         }
     }
@@ -44,11 +44,11 @@ public class ChatColorTest {
 
     @Test
     public void stripColor() {
-        StringBuilder subject = new StringBuilder();
-        StringBuilder expected = new StringBuilder();
+        final StringBuilder subject = new StringBuilder();
+        final StringBuilder expected = new StringBuilder();
 
         final String filler = "test";
-        for (ChatColor color : ChatColor.values()) {
+        for (final ChatColor color : ChatColor.values()) {
             subject.append(color).append(filler);
             expected.append(filler);
         }
@@ -58,23 +58,23 @@ public class ChatColorTest {
 
     @Test
     public void toStringWorks() {
-        for (ChatColor color : ChatColor.values()) {
+        for (final ChatColor color : ChatColor.values()) {
             assertThat(String.format("%c%c", ChatColor.COLOR_CHAR, color.getChar()), is(color.toString()));
         }
     }
 
     @Test
     public void translateAlternateColorCodes() {
-        String s = "&0&1&2&3&4&5&6&7&8&9&A&a&B&b&C&c&D&d&E&e&F&f&K&k & more";
-        String t = ChatColor.translateAlternateColorCodes('&', s);
-        String u = ChatColor.BLACK.toString() + ChatColor.DARK_BLUE + ChatColor.DARK_GREEN + ChatColor.DARK_AQUA + ChatColor.DARK_RED + ChatColor.DARK_PURPLE + ChatColor.GOLD + ChatColor.GRAY + ChatColor.DARK_GRAY + ChatColor.BLUE + ChatColor.GREEN + ChatColor.GREEN + ChatColor.AQUA + ChatColor.AQUA + ChatColor.RED + ChatColor.RED + ChatColor.LIGHT_PURPLE + ChatColor.LIGHT_PURPLE + ChatColor.YELLOW + ChatColor.YELLOW + ChatColor.WHITE + ChatColor.WHITE + ChatColor.MAGIC + ChatColor.MAGIC + " & more";
+        final String s = "&0&1&2&3&4&5&6&7&8&9&A&a&B&b&C&c&D&d&E&e&F&f&K&k & more";
+        final String t = ChatColor.translateAlternateColorCodes('&', s);
+        final String u = ChatColor.BLACK.toString() + ChatColor.DARK_BLUE + ChatColor.DARK_GREEN + ChatColor.DARK_AQUA + ChatColor.DARK_RED + ChatColor.DARK_PURPLE + ChatColor.GOLD + ChatColor.GRAY + ChatColor.DARK_GRAY + ChatColor.BLUE + ChatColor.GREEN + ChatColor.GREEN + ChatColor.AQUA + ChatColor.AQUA + ChatColor.RED + ChatColor.RED + ChatColor.LIGHT_PURPLE + ChatColor.LIGHT_PURPLE + ChatColor.YELLOW + ChatColor.YELLOW + ChatColor.WHITE + ChatColor.WHITE + ChatColor.MAGIC + ChatColor.MAGIC + " & more";
         assertThat(t, is(u));
     }
 
     @Test
     public void getChatColors() {
         String s = String.format("%c%ctest%c%ctest%c", ChatColor.COLOR_CHAR, ChatColor.RED.getChar(), ChatColor.COLOR_CHAR, ChatColor.ITALIC.getChar(), ChatColor.COLOR_CHAR);
-        String expected = ChatColor.RED.toString() + ChatColor.ITALIC;
+        final String expected = ChatColor.RED.toString() + ChatColor.ITALIC;
         assertThat(ChatColor.getLastColors(s), is(expected));
 
         s = String.format("%c%ctest%c%ctest", ChatColor.COLOR_CHAR, ChatColor.RED.getChar(), ChatColor.COLOR_CHAR, ChatColor.BLUE.getChar());
diff --git a/src/test/java/org/bukkit/ChatPaginatorTest.java b/src/test/java/org/bukkit/ChatPaginatorTest.java
index d38e64f0995bb4fb142c4a3317d6e3bca2b3bb75..ae3ab79b92a93080d29c3d2b76fb8efe5f610243 100644
--- a/src/test/java/org/bukkit/ChatPaginatorTest.java
+++ b/src/test/java/org/bukkit/ChatPaginatorTest.java
@@ -8,8 +8,8 @@ import org.junit.Test;
 public class ChatPaginatorTest {
     @Test
     public void testWordWrap1() {
-        String rawString = ChatColor.RED + "123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
+        final String rawString = ChatColor.RED + "123456789 123456789 123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 19);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.RED + "123456789 123456789"));
@@ -18,8 +18,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap2() {
-        String rawString = "123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 22);
+        final String rawString = "123456789 123456789 123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 22);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789 123456789"));
@@ -28,8 +28,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap3() {
-        String rawString = ChatColor.RED + "123456789 " + ChatColor.RED + ChatColor.RED + "123456789 " + ChatColor.RED + "123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 16);
+        final String rawString = ChatColor.RED + "123456789 " + ChatColor.RED + ChatColor.RED + "123456789 " + ChatColor.RED + "123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 16);
 
         assertThat(lines.length, is(3));
         assertThat(lines[0], is(ChatColor.RED + "123456789"));
@@ -39,8 +39,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap4() {
-        String rawString = "123456789 123456789 123456789 12345";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
+        final String rawString = "123456789 123456789 123456789 12345";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 19);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789 123456789"));
@@ -49,8 +49,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap5() {
-        String rawString = "123456789\n123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
+        final String rawString = "123456789\n123456789 123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 19);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789"));
@@ -59,8 +59,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap6() {
-        String rawString = "12345678   23456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
+        final String rawString = "12345678   23456789 123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 19);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "12345678   23456789"));
@@ -69,8 +69,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap7() {
-        String rawString = "12345678   23456789   123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
+        final String rawString = "12345678   23456789   123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 19);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "12345678   23456789"));
@@ -79,8 +79,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap8() {
-        String rawString = "123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 6);
+        final String rawString = "123456789 123456789 123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 6);
 
         assertThat(lines.length, is(6));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456"));
@@ -93,8 +93,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap9() {
-        String rawString = "1234 123456789 123456789 123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 6);
+        final String rawString = "1234 123456789 123456789 123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 6);
 
         assertThat(lines.length, is(7));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "1234"));
@@ -108,8 +108,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap10() {
-        String rawString = "123456789\n123456789";
-        String[] lines = ChatPaginator.wordWrap(rawString, 19);
+        final String rawString = "123456789\n123456789";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 19);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "123456789"));
@@ -118,8 +118,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap11() {
-        String rawString = ChatColor.RED + "a a a " + ChatColor.BLUE + "a a";
-        String[] lines = ChatPaginator.wordWrap(rawString, 9);
+        final String rawString = ChatColor.RED + "a a a " + ChatColor.BLUE + "a a";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 9);
 
         assertThat(lines.length, is(1));
         assertThat(lines[0], is(ChatColor.RED + "a a a " + ChatColor.BLUE + "a a"));
@@ -127,8 +127,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testWordWrap12() {
-        String rawString = "123 1 123";
-        String[] lines = ChatPaginator.wordWrap(rawString, 5);
+        final String rawString = "123 1 123";
+        final String[] lines = ChatPaginator.wordWrap(rawString, 5);
 
         assertThat(lines.length, is(2));
         assertThat(lines[0], is(ChatColor.WHITE.toString() + "123 1"));
@@ -137,8 +137,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testPaginate1() {
-        String rawString = "1234 123456789 123456789 123456789";
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 1, 6, 2);
+        final String rawString = "1234 123456789 123456789 123456789";
+        final ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 1, 6, 2);
 
         assertThat(page.getPageNumber(), is(1));
         assertThat(page.getTotalPages(), is(4));
@@ -149,8 +149,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testPaginate2() {
-        String rawString = "1234 123456789 123456789 123456789";
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 2, 6, 2);
+        final String rawString = "1234 123456789 123456789 123456789";
+        final ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 2, 6, 2);
 
         assertThat(page.getPageNumber(), is(2));
         assertThat(page.getTotalPages(), is(4));
@@ -161,8 +161,8 @@ public class ChatPaginatorTest {
 
     @Test
     public void testPaginate3() {
-        String rawString = "1234 123456789 123456789 123456789";
-        ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 4, 6, 2);
+        final String rawString = "1234 123456789 123456789 123456789";
+        final ChatPaginator.ChatPage page = ChatPaginator.paginate(rawString, 4, 6, 2);
 
         assertThat(page.getPageNumber(), is(4));
         assertThat(page.getTotalPages(), is(4));
diff --git a/src/test/java/org/bukkit/CoalTypeTest.java b/src/test/java/org/bukkit/CoalTypeTest.java
index b90f10c4ef89a4c155e6f9a6a3b674d149ac7296..c272ac41db794f7514a23405ae5fe63034b62958 100644
--- a/src/test/java/org/bukkit/CoalTypeTest.java
+++ b/src/test/java/org/bukkit/CoalTypeTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class CoalTypeTest {
     @Test
     public void getByData() {
-        for (CoalType coalType : CoalType.values()) {
+        for (final CoalType coalType : CoalType.values()) {
             assertThat(CoalType.getByData(coalType.getData()), is(coalType));
         }
     }
diff --git a/src/test/java/org/bukkit/ColorTest.java b/src/test/java/org/bukkit/ColorTest.java
index 283a018a2ecee76f152f489b37c7514a246ed0d4..b3edea81a2cb7559a0abaa3ad687a1cb39305e01 100644
--- a/src/test/java/org/bukkit/ColorTest.java
+++ b/src/test/java/org/bukkit/ColorTest.java
@@ -16,7 +16,7 @@ public class ColorTest {
         final int g;
         final int b;
 
-        TestColor(int rgb, int bgr, int r, int g, int b) {
+        TestColor(final int rgb, final int bgr, final int r, final int g, final int b) {
             this.rgb = rgb;
             this.bgr = bgr;
             this.r = r;
@@ -37,14 +37,14 @@ public class ColorTest {
 
     @Test
     public void testSerialization() throws Throwable {
-        for (TestColor testColor : examples) {
-            Color base = Color.fromRGB(testColor.rgb);
+        for (final TestColor testColor : examples) {
+            final Color base = Color.fromRGB(testColor.rgb);
 
-            YamlConfiguration toSerialize = new YamlConfiguration();
+            final YamlConfiguration toSerialize = new YamlConfiguration();
             toSerialize.set("color", base);
-            String serialized = toSerialize.saveToString();
+            final String serialized = toSerialize.saveToString();
 
-            YamlConfiguration deserialized = new YamlConfiguration();
+            final YamlConfiguration deserialized = new YamlConfiguration();
             deserialized.loadFromString(serialized);
 
             assertThat(testColor.name + " on " + serialized, base, is(deserialized.getColor("color")));
@@ -54,11 +54,11 @@ public class ColorTest {
     // Equality tests
     @Test
     public void testEqualities() {
-        for (TestColor testColor : examples) {
-            Color fromRGB = Color.fromRGB(testColor.rgb);
-            Color fromBGR = Color.fromBGR(testColor.bgr);
-            Color fromRGBs = Color.fromRGB(testColor.r, testColor.g, testColor.b);
-            Color fromBGRs = Color.fromBGR(testColor.b, testColor.g, testColor.r);
+        for (final TestColor testColor : examples) {
+            final Color fromRGB = Color.fromRGB(testColor.rgb);
+            final Color fromBGR = Color.fromBGR(testColor.bgr);
+            final Color fromRGBs = Color.fromRGB(testColor.r, testColor.g, testColor.b);
+            final Color fromBGRs = Color.fromBGR(testColor.b, testColor.g, testColor.r);
 
             assertThat(testColor.name, fromRGB, is(fromRGBs));
             assertThat(testColor.name, fromRGB, is(fromBGR));
@@ -72,15 +72,15 @@ public class ColorTest {
     @Test
     public void testInequalities() {
         for (int i = 1; i < examples.length; i++) {
-            TestColor testFrom = examples[i];
-            Color from = Color.fromRGB(testFrom.rgb);
+            final TestColor testFrom = examples[i];
+            final Color from = Color.fromRGB(testFrom.rgb);
             for (int j = i - 1; j >= 0; j--) {
-                TestColor testTo = examples[j];
-                Color to = Color.fromRGB(testTo.rgb);
-                String name = testFrom.name + " to " + testTo.name;
+                final TestColor testTo = examples[j];
+                final Color to = Color.fromRGB(testTo.rgb);
+                final String name = testFrom.name + " to " + testTo.name;
                 assertThat(name, from, is(not(to)));
 
-                Color transform = from.setRed(testTo.r).setBlue(testTo.b).setGreen(testTo.g);
+                final Color transform = from.setRed(testTo.r).setBlue(testTo.b).setGreen(testTo.g);
                 assertThat(name, transform, is(not(sameInstance(from))));
                 assertThat(name, transform, is(to));
             }
@@ -90,7 +90,7 @@ public class ColorTest {
     // RGB tests
     @Test
     public void testRGB() {
-        for (TestColor testColor : examples) {
+        for (final TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).asRGB(), is(testColor.rgb));
             assertThat(testColor.name, Color.fromBGR(testColor.bgr).asRGB(), is(testColor.rgb));
             assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).asRGB(), is(testColor.rgb));
@@ -121,7 +121,7 @@ public class ColorTest {
     // BGR tests
     @Test
     public void testBGR() {
-        for (TestColor testColor : examples) {
+        for (final TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).asBGR(), is(testColor.bgr));
             assertThat(testColor.name, Color.fromBGR(testColor.bgr).asBGR(), is(testColor.bgr));
             assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).asBGR(), is(testColor.bgr));
@@ -152,7 +152,7 @@ public class ColorTest {
     // Red tests
     @Test
     public void testRed() {
-        for (TestColor testColor : examples) {
+        for (final TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).getRed(), is(testColor.r));
             assertThat(testColor.name, Color.fromBGR(testColor.bgr).getRed(), is(testColor.r));
             assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).getRed(), is(testColor.r));
@@ -223,7 +223,7 @@ public class ColorTest {
     // Blue tests
     @Test
     public void testBlue() {
-        for (TestColor testColor : examples) {
+        for (final TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).getBlue(), is(testColor.b));
             assertThat(testColor.name, Color.fromBGR(testColor.bgr).getBlue(), is(testColor.b));
             assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).getBlue(), is(testColor.b));
@@ -294,7 +294,7 @@ public class ColorTest {
     // Green tests
     @Test
     public void testGreen() {
-        for (TestColor testColor : examples) {
+        for (final TestColor testColor : examples) {
             assertThat(testColor.name, Color.fromRGB(testColor.rgb).getGreen(), is(testColor.g));
             assertThat(testColor.name, Color.fromBGR(testColor.bgr).getGreen(), is(testColor.g));
             assertThat(testColor.name, Color.fromRGB(testColor.r, testColor.g, testColor.b).getGreen(), is(testColor.g));
diff --git a/src/test/java/org/bukkit/CropStateTest.java b/src/test/java/org/bukkit/CropStateTest.java
index 5cd9d6d2d768f72034cac722e11f8835be426b5e..35d68a9bceb82e22d962b10129590900aa73f4a6 100644
--- a/src/test/java/org/bukkit/CropStateTest.java
+++ b/src/test/java/org/bukkit/CropStateTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class CropStateTest {
     @Test
     public void getByData() {
-        for (CropState cropState : CropState.values()) {
+        for (final CropState cropState : CropState.values()) {
             assertThat(CropState.getByData(cropState.getData()), is(cropState));
         }
     }
diff --git a/src/test/java/org/bukkit/DifficultyTest.java b/src/test/java/org/bukkit/DifficultyTest.java
index d7fe8d39a466a41c92cd928dd78e9d7a4281f825..ec3378373b7fadf0ceb6a967a3e049149e7bc9b4 100644
--- a/src/test/java/org/bukkit/DifficultyTest.java
+++ b/src/test/java/org/bukkit/DifficultyTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class DifficultyTest {
     @Test
     public void getByValue() {
-        for (Difficulty difficulty : Difficulty.values()) {
+        for (final Difficulty difficulty : Difficulty.values()) {
             assertThat(Difficulty.getByValue(difficulty.getValue()), is(difficulty));
         }
     }
diff --git a/src/test/java/org/bukkit/DyeColorTest.java b/src/test/java/org/bukkit/DyeColorTest.java
index 445f53051dbb51c79fe3cd3236b15f6e1cddf3bd..8644a1d85a2af39f212eaeeac901d336c46e2a62 100644
--- a/src/test/java/org/bukkit/DyeColorTest.java
+++ b/src/test/java/org/bukkit/DyeColorTest.java
@@ -20,8 +20,8 @@ public class DyeColorTest {
 
     @Parameters(name = "{index}: {0}")
     public static List<Object[]> data() {
-        List<Object[]> list = new ArrayList<>();
-        for (DyeColor dye : DyeColor.values()) {
+        final List<Object[]> list = new ArrayList<>();
+        for (final DyeColor dye : DyeColor.values()) {
             list.add(new Object[] {dye});
         }
         return list;
@@ -32,25 +32,25 @@ public class DyeColorTest {
     @Test
     @SuppressWarnings("deprecation")
     public void getByData() {
-        byte data = dye.getWoolData();
+        final byte data = dye.getWoolData();
 
-        DyeColor byData = DyeColor.getByWoolData(data);
+        final DyeColor byData = DyeColor.getByWoolData(data);
         assertThat(byData, is(dye));
     }
 
     @Test
     public void getByWoolData() {
-        byte data = dye.getWoolData();
+        final byte data = dye.getWoolData();
 
-        DyeColor byData = DyeColor.getByWoolData(data);
+        final DyeColor byData = DyeColor.getByWoolData(data);
         assertThat(byData, is(dye));
     }
 
     @Test
     public void getByDyeData() {
-        byte data = dye.getDyeData();
+        final byte data = dye.getDyeData();
 
-        DyeColor byData = DyeColor.getByDyeData(data);
+        final DyeColor byData = DyeColor.getByDyeData(data);
         assertThat(byData, is(dye));
     }
 
diff --git a/src/test/java/org/bukkit/EffectTest.java b/src/test/java/org/bukkit/EffectTest.java
index 54e621e86e8fe3414099494d419929b282b33489..1ed43a88665babe3c21a8437fb48057a9a57e3ae 100644
--- a/src/test/java/org/bukkit/EffectTest.java
+++ b/src/test/java/org/bukkit/EffectTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class EffectTest {
     @Test
     public void getById() {
-        for (Effect effect : Effect.values()) {
+        for (final Effect effect : Effect.values()) {
             assertThat(Effect.getById(effect.getId()), is(effect));
         }
     }
diff --git a/src/test/java/org/bukkit/GameModeTest.java b/src/test/java/org/bukkit/GameModeTest.java
index 1c53e8ed8ba2a7fe9a51771b80bd6d0cb358adda..e67517e699bdb467e4c7527c1f49c20389a96569 100644
--- a/src/test/java/org/bukkit/GameModeTest.java
+++ b/src/test/java/org/bukkit/GameModeTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class GameModeTest {
     @Test
     public void getByValue() {
-        for (GameMode gameMode : GameMode.values()) {
+        for (final GameMode gameMode : GameMode.values()) {
             assertThat(GameMode.getByValue(gameMode.getValue()), is(gameMode));
         }
     }
diff --git a/src/test/java/org/bukkit/GrassSpeciesTest.java b/src/test/java/org/bukkit/GrassSpeciesTest.java
index 39f1b899ea9c5389b42dda058949fcae1e2bbe84..1cc28d023828c70fafbeae722e533292e20d51cd 100644
--- a/src/test/java/org/bukkit/GrassSpeciesTest.java
+++ b/src/test/java/org/bukkit/GrassSpeciesTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class GrassSpeciesTest {
     @Test
     public void getByData() {
-        for (GrassSpecies grassSpecies : GrassSpecies.values()) {
+        for (final GrassSpecies grassSpecies : GrassSpecies.values()) {
             assertThat(GrassSpecies.getByData(grassSpecies.getData()), is(grassSpecies));
         }
     }
diff --git a/src/test/java/org/bukkit/InstrumentTest.java b/src/test/java/org/bukkit/InstrumentTest.java
index f6d261ae50aa264d4ad35b8e465aba778dcabda4..44d654a6cd3eb5e5bdc917973d0659aacfaafeaa 100644
--- a/src/test/java/org/bukkit/InstrumentTest.java
+++ b/src/test/java/org/bukkit/InstrumentTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class InstrumentTest {
     @Test
     public void getByType() {
-        for (Instrument instrument : Instrument.values()) {
+        for (final Instrument instrument : Instrument.values()) {
             assertThat(Instrument.getByType(instrument.getType()), is(instrument));
         }
     }
diff --git a/src/test/java/org/bukkit/LocationTest.java b/src/test/java/org/bukkit/LocationTest.java
index 6f39e0f34b555a2a383c40e8c75a1239ae629bb3..e3d763dceed4e4fc981b55bf097b630e5d7cacec 100644
--- a/src/test/java/org/bukkit/LocationTest.java
+++ b/src/test/java/org/bukkit/LocationTest.java
@@ -12,6 +12,7 @@ import org.junit.runners.Parameterized;
 import org.junit.runners.Parameterized.Parameter;
 import org.junit.runners.Parameterized.Parameters;
 
+/** @noinspection ConstantMathCall*/
 @RunWith(Parameterized.class)
 public class LocationTest {
     private static final double delta = 1.0 / 1000000;
@@ -38,7 +39,7 @@ public class LocationTest {
 
     @Parameters(name = "{index}: {0}")
     public static List<Object[]> data() {
-        Random RANDOM = new Random(1L); // Test is deterministic
+        final Random RANDOM = new Random(1L); // Test is deterministic
         int r = 0;
         return ImmutableList.of(
             new Object[]{"X",
@@ -110,7 +111,7 @@ public class LocationTest {
         );
     }
 
-    private static Object[] getRandom(Random random, int index) {
+    private static Object[] getRandom(final Random random, final int index) {
         final double YAW_FACTOR = 360;
         final double YAW_OFFSET = 0;
         final double PITCH_FACTOR = 180;
@@ -118,11 +119,11 @@ public class LocationTest {
         final double CARTESIAN_FACTOR = 256;
         final double CARTESIAN_OFFSET = -128;
 
-        Vector vector;
-        Location location;
+        final Vector vector;
+        final Location location;
         if (random.nextBoolean()) {
-            float pitch = (float) (random.nextDouble() * PITCH_FACTOR + PITCH_OFFSET);
-            float yaw = (float) (random.nextDouble() * YAW_FACTOR + YAW_OFFSET);
+            final float pitch = (float) (random.nextDouble() * PITCH_FACTOR + PITCH_OFFSET);
+            final float yaw = (float) (random.nextDouble() * YAW_FACTOR + YAW_OFFSET);
 
             location = getEmptyLocation();
             location.setPitch(pitch);
@@ -130,9 +131,9 @@ public class LocationTest {
 
             vector = location.getDirection();
         } else {
-            double x = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
-            double y = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
-            double z = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
+            final double x = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
+            final double y = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
+            final double z = random.nextDouble() * CARTESIAN_FACTOR + CARTESIAN_OFFSET;
 
             location = getEmptyLocation();
             vector = new Vector(x, y, z).normalize();
@@ -161,7 +162,7 @@ public class LocationTest {
 
     @Test
     public void testExpectedPitchYaw() {
-        Location location = getEmptyLocation().setDirection(getVector());
+        final Location location = getEmptyLocation().setDirection(getVector());
 
         assertThat((double) location.getYaw(), is(closeTo(yaw, delta)));
         assertThat((double) location.getPitch(), is(closeTo(pitch, delta)));
@@ -169,7 +170,7 @@ public class LocationTest {
 
     @Test
     public void testExpectedXYZ() {
-        Vector vector = getLocation().getDirection();
+        final Vector vector = getLocation().getDirection();
 
         assertThat(vector.getX(), is(closeTo(x, delta)));
         assertThat(vector.getY(), is(closeTo(y, delta)));
@@ -178,8 +179,8 @@ public class LocationTest {
 
     @Test
     public void testEquals() {
-        Location first = getLocation().add(getVector());
-        Location second = getLocation().add(getVector());
+        final Location first = getLocation().add(getVector());
+        final Location second = getLocation().add(getVector());
 
         assertThat(first.hashCode(), is(second.hashCode()));
         assertThat(first, is(second));
@@ -194,7 +195,7 @@ public class LocationTest {
     }
 
     private Location getLocation() {
-        Location location = getEmptyLocation();
+        final Location location = getEmptyLocation();
         location.setYaw(yaw);
         location.setPitch(pitch);
         return location;
diff --git a/src/test/java/org/bukkit/MaterialTest.java b/src/test/java/org/bukkit/MaterialTest.java
index 6b0eaaadf9772a4850cb70cea2bfe72a81a47a04..2340ef75410dd51dcad990c33bb3eef93d61d1fb 100644
--- a/src/test/java/org/bukkit/MaterialTest.java
+++ b/src/test/java/org/bukkit/MaterialTest.java
@@ -8,7 +8,7 @@ import org.junit.Test;
 public class MaterialTest {
     @Test
     public void getByName() {
-        for (Material material : Material.values()) {
+        for (final Material material : Material.values()) {
             assertThat(Material.getMaterial(material.toString()), is(material));
         }
     }
@@ -20,11 +20,11 @@ public class MaterialTest {
 
     @Test
     public void getData() {
-        for (Material material : Material.values()) {
+        for (final Material material : Material.values()) {
             if (!material.isLegacy()) {
                 continue;
             }
-            Class<? extends MaterialData> clazz = material.getData();
+            final Class<? extends MaterialData> clazz = material.getData();
 
             assertThat(material.getNewData((byte) 0), is(instanceOf(clazz)));
         }
@@ -37,14 +37,14 @@ public class MaterialTest {
 
     @Test
     public void matchMaterialByName() {
-        for (Material material : Material.values()) {
+        for (final Material material : Material.values()) {
             assertThat(Material.matchMaterial(material.toString()), is(material));
         }
     }
 
     @Test
     public void matchMaterialByKey() {
-        for (Material material : Material.values()) {
+        for (final Material material : Material.values()) {
             if (material.isLegacy()) {
                 continue;
             }
@@ -54,7 +54,7 @@ public class MaterialTest {
 
     @Test
     public void matchMaterialByWrongNamespace() {
-        for (Material material : Material.values()) {
+        for (final Material material : Material.values()) {
             if (material.isLegacy()) {
                 continue;
             }
@@ -64,8 +64,9 @@ public class MaterialTest {
 
     @Test
     public void matchMaterialByLowerCaseAndSpaces() {
-        for (Material material : Material.values()) {
-            String name = material.toString().replaceAll("_", " ").toLowerCase(java.util.Locale.ENGLISH);
+        for (final Material material : Material.values()) {
+            final String name = material.toString().replace("_", " ").toLowerCase(java.util.Locale.ENGLISH);
+            //noinspection ObjectAllocationInLoop
             assertThat(Material.matchMaterial(name), is(material));
         }
     }
diff --git a/src/test/java/org/bukkit/NamespacedKeyTest.java b/src/test/java/org/bukkit/NamespacedKeyTest.java
index 9f57889cbb5b805a640597d44ee45ab0a1fdbf2a..aeed9ad1e5c99fab43649d4cc2c7be0bf4d22f45 100644
--- a/src/test/java/org/bukkit/NamespacedKeyTest.java
+++ b/src/test/java/org/bukkit/NamespacedKeyTest.java
@@ -16,7 +16,7 @@ public class NamespacedKeyTest {
 
     @Test
     public void testValidFromString() {
-        NamespacedKey expected = NamespacedKey.minecraft("foo");
+        final NamespacedKey expected = NamespacedKey.minecraft("foo");
         Assert.assertEquals(expected, NamespacedKey.fromString("foo"));
         Assert.assertEquals(expected, NamespacedKey.fromString(":foo"));
         Assert.assertEquals(expected, NamespacedKey.fromString("minecraft:foo"));
diff --git a/src/test/java/org/bukkit/NoteTest.java b/src/test/java/org/bukkit/NoteTest.java
index 0db4bfa43ae7d941c4be35ff89bdc6ce8471602b..c66b28c626936f93f65d25b341a5b736354334cc 100644
--- a/src/test/java/org/bukkit/NoteTest.java
+++ b/src/test/java/org/bukkit/NoteTest.java
@@ -9,14 +9,14 @@ import org.junit.Test;
 public class NoteTest {
     @Test
     public void getToneByData() {
-        for (Note.Tone tone : Note.Tone.values()) {
+        for (final Note.Tone tone : Note.Tone.values()) {
             assertThat(Note.Tone.getById(tone.getId()), is(tone));
         }
     }
 
     @Test
     public void verifySharpedData() {
-        for (Note.Tone tone : Note.Tone.values()) {
+        for (final Note.Tone tone : Note.Tone.values()) {
             if (!tone.isSharpable()) return;
 
             assertFalse(tone.isSharped(tone.getId(false)));
@@ -26,25 +26,25 @@ public class NoteTest {
 
     @Test
     public void verifyUnknownToneData() {
-        Collection<Byte> tones = Lists.newArrayList();
+        final Collection<Byte> tones = Lists.newArrayList();
         for (int i = Byte.MIN_VALUE; i <= Byte.MAX_VALUE; i++) {
             tones.add((byte) i);
         }
 
-        for (Note.Tone tone : Note.Tone.values()) {
+        for (final Note.Tone tone : Note.Tone.values()) {
             if (tone.isSharpable()) tones.remove(tone.getId(true));
             tones.remove(tone.getId());
         }
 
-        for (Byte data : tones) {
+        for (final Byte data : tones) {
             assertThat(Note.Tone.getById(data), is(nullValue()));
 
-            for (Note.Tone tone : Note.Tone.values()) {
+            for (final Note.Tone tone : Note.Tone.values()) {
                 try {
                     tone.isSharped(data);
 
                     fail(data + " should throw IllegalArgumentException");
-                } catch (IllegalArgumentException e) {
+                } catch (final IllegalArgumentException e) {
                     assertNotNull(e);
                 }
             }
@@ -53,62 +53,62 @@ public class NoteTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void createNoteBelowMin() {
-        new Note((byte) -1);
+        new Note(-1);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void createNoteAboveMax() {
-        new Note((byte) 25);
+        new Note(25);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void createNoteOctaveBelowMax() {
-        new Note((byte) -1, Note.Tone.A, true);
+        new Note(-1, Note.Tone.A, true);
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void createNoteOctaveAboveMax() {
-        new Note((byte) 3, Note.Tone.A, true);
+        new Note(3, Note.Tone.A, true);
     }
 
     @Test
     public void createNoteOctaveNonSharpable() {
-        Note note = new Note((byte) 0, Note.Tone.B, true);
+        final Note note = new Note(0, Note.Tone.B, true);
         assertFalse(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.C));
     }
 
     @Test
     public void createNoteFlat() {
-        Note note = Note.flat(0, Note.Tone.D);
+        final Note note = Note.flat(0, Note.Tone.D);
         assertTrue(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.C));
     }
 
     @Test
     public void createNoteFlatNonFlattenable() {
-        Note note = Note.flat(0, Note.Tone.C);
+        final Note note = Note.flat(0, Note.Tone.C);
         assertFalse(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.B));
     }
 
     @Test
     public void testFlatWrapping() {
-        Note note = Note.flat(1, Note.Tone.G);
+        final Note note = Note.flat(1, Note.Tone.G);
         assertTrue(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.F));
     }
 
     @Test
     public void testFlatWrapping2() {
-        Note note = new Note(1, Note.Tone.G, false).flattened();
+        final Note note = new Note(1, Note.Tone.G, false).flattened();
         assertTrue(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.F));
     }
 
     @Test
     public void testSharpWrapping() {
-        Note note = new Note(1, Note.Tone.F, false).sharped();
+        final Note note = new Note(1, Note.Tone.F, false).sharped();
         assertTrue(note.isSharped());
         assertThat(note.getTone(), is(Note.Tone.F));
         assertEquals(note.getOctave(), 2);
@@ -121,25 +121,25 @@ public class NoteTest {
 
     @Test
     public void testHighest() {
-        Note note = new Note(2, Note.Tone.F, true);
+        final Note note = new Note(2, Note.Tone.F, true);
         assertEquals(note.getId(), (byte) 24);
     }
 
     @Test
     public void testLowest() {
-        Note note = new Note(0, Note.Tone.F, true);
+        final Note note = new Note(0, Note.Tone.F, true);
         assertEquals(note.getId(), (byte) 0);
     }
 
     @Test
     public void doo() {
         for (int i = 1; i <= 24; i++) {
-            Note note = new Note((byte) i);
-            int octave = note.getOctave();
-            Note.Tone tone = note.getTone();
-            boolean sharped = note.isSharped();
+            final Note note = new Note((byte) i);
+            final int octave = note.getOctave();
+            final Note.Tone tone = note.getTone();
+            final boolean sharped = note.isSharped();
 
-            Note newNote = new Note(octave, tone, sharped);
+            final Note newNote = new Note(octave, tone, sharped);
             assertThat(newNote, is(note));
             assertThat(newNote.getId(), is(note.getId()));
         }
diff --git a/src/test/java/org/bukkit/TestServer.java b/src/test/java/org/bukkit/TestServer.java
index 3257e32cf2322a3dc3652d7b6eda877a8408c437..bdaffb97a76b928427050e738cb73f2fdc074e94 100644
--- a/src/test/java/org/bukkit/TestServer.java
+++ b/src/test/java/org/bukkit/TestServer.java
@@ -19,7 +19,7 @@ public final class TestServer implements InvocationHandler {
 
     static {
         try {
-            ImmutableMap.Builder<Method, MethodHandler> methodMap = ImmutableMap.builder();
+            final ImmutableMap.Builder<Method, MethodHandler> methodMap = ImmutableMap.builder();
             methodMap.put(
                     Server.class.getMethod("isPrimaryThread"),
 	            (server, args) -> Thread.currentThread().equals(server.creatingThread)
@@ -39,7 +39,7 @@ public final class TestServer implements InvocationHandler {
                     new MethodHandler() {
                         final Logger logger = Logger.getLogger(TestServer.class.getCanonicalName());
                         @Override
-                        public Object handle(TestServer server, Object[] args) {
+                        public Object handle(final TestServer server, final Object[] args) {
                             return logger;
                         }
                     }
@@ -58,11 +58,11 @@ public final class TestServer implements InvocationHandler {
             );
             methods = methodMap.build();
 
-            TestServer server = new TestServer();
-            Server instance = Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(server);
+            final TestServer server = new TestServer();
+            final Server instance = Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(server);
             Bukkit.setServer(instance);
             server.pluginManager = new SimplePluginManager(instance, new SimpleCommandMap(instance));
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             throw new Error(t);
         }
     }
@@ -76,8 +76,8 @@ public final class TestServer implements InvocationHandler {
     }
 
     @Override
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
+    public Object invoke(final Object proxy, final Method method, final Object[] args) {
+        final MethodHandler handler = methods.get(method);
         if (handler != null) {
             return handler.handle(this, args);
         }
diff --git a/src/test/java/org/bukkit/TestWorld.java b/src/test/java/org/bukkit/TestWorld.java
index 4d33b98ef6ac1e1710db11702d7fd55bc47dbe78..e24c50123d7d9ad8922e7496e080a0096ef4fa45 100644
--- a/src/test/java/org/bukkit/TestWorld.java
+++ b/src/test/java/org/bukkit/TestWorld.java
@@ -18,12 +18,12 @@ public final class TestWorld implements InvocationHandler {
 
     static {
         try {
-            ImmutableMap.Builder<Method, MethodHandler> methodMap = ImmutableMap.builder();
+            final ImmutableMap.Builder<Method, MethodHandler> methodMap = ImmutableMap.builder();
             methodMap.put(
                     Object.class.getMethod("equals", Object.class),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestWorld server, Object[] args) {
+                        public Object handle(final TestWorld server, final Object[] args) {
                             return this == args[0];
                         }
                     }
@@ -32,16 +32,16 @@ public final class TestWorld implements InvocationHandler {
                     Object.class.getMethod("hashCode"),
                     new MethodHandler() {
                         @Override
-                        public Object handle(TestWorld server, Object[] args) {
+                        public Object handle(final TestWorld server, final Object[] args) {
                             return this.hashCode();
                         }
                     }
                 );
             methods = methodMap.build();
 
-            TestWorld world = new TestWorld();
+            final TestWorld world = new TestWorld();
             INSTANCE = Proxy.getProxyClass(World.class.getClassLoader(), World.class).asSubclass(World.class).getConstructor(InvocationHandler.class).newInstance(world);
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             throw new Error(t);
         }
     }
@@ -54,8 +54,8 @@ public final class TestWorld implements InvocationHandler {
     }
 
     @Override
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
+    public Object invoke(final Object proxy, final Method method, final Object[] args) {
+        final MethodHandler handler = methods.get(method);
         if (handler != null) {
             return handler.handle(this, args);
         }
diff --git a/src/test/java/org/bukkit/TreeSpeciesTest.java b/src/test/java/org/bukkit/TreeSpeciesTest.java
index 51e956cc5ea6f856664c0b85daaf6070073d1ec8..ccc042668919eb931ecf409d84c590e8477a5d32 100644
--- a/src/test/java/org/bukkit/TreeSpeciesTest.java
+++ b/src/test/java/org/bukkit/TreeSpeciesTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class TreeSpeciesTest {
     @Test
     public void getByData() {
-        for (TreeSpecies treeSpecies : TreeSpecies.values()) {
+        for (final TreeSpecies treeSpecies : TreeSpecies.values()) {
             assertThat(TreeSpecies.getByData(treeSpecies.getData()), is(treeSpecies));
         }
     }
diff --git a/src/test/java/org/bukkit/WorldTypeTest.java b/src/test/java/org/bukkit/WorldTypeTest.java
index 3c5f7b8a7062629b3c1ebab365986e42f5284ba5..a693751d17e9066c8c87e26687eaac2f252287fd 100644
--- a/src/test/java/org/bukkit/WorldTypeTest.java
+++ b/src/test/java/org/bukkit/WorldTypeTest.java
@@ -7,7 +7,7 @@ import org.junit.Test;
 public class WorldTypeTest {
     @Test
     public void getByName() {
-        for (WorldType worldType : WorldType.values()) {
+        for (final WorldType worldType : WorldType.values()) {
             assertThat(WorldType.getByName(worldType.getName()), is(worldType));
         }
     }
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
index bc165c694963301753943d6bee1ccebf4a137b3a..468ef73a183605aeecd1a3fbef01ac614789484f 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationSectionTest.java
@@ -4,6 +4,7 @@ import org.bukkit.Material;
 import org.bukkit.configuration.serialization.ConfigurationSerializable;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
+import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 
 import java.util.*;
@@ -15,7 +16,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetKeys() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("key", true);
         section.set("subsection.subkey", true);
@@ -31,7 +32,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetKeysWithDefaults() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
         section.getRoot().options().copyDefaults(true);
 
         section.set("key", true);
@@ -47,25 +48,25 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetValues() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("bool", true);
         section.set("subsection.string", "test");
         section.set("subsection.long", Long.MAX_VALUE);
         section.set("int", 42);
 
-        Map<String, Object> shallowValues = section.getValues(false);
+        final Map<String, Object> shallowValues = section.getValues(false);
         assertArrayEquals(new String[]{"bool", "subsection", "int"}, shallowValues.keySet().toArray());
         assertArrayEquals(new Object[]{true, section.getConfigurationSection("subsection"), 42}, shallowValues.values().toArray());
 
-        Map<String, Object> deepValues = section.getValues(true);
+        final Map<String, Object> deepValues = section.getValues(true);
         assertArrayEquals(new String[]{"bool", "subsection", "subsection.string", "subsection.long", "int"}, deepValues.keySet().toArray());
         assertArrayEquals(new Object[]{true, section.getConfigurationSection("subsection"), "test", Long.MAX_VALUE, 42}, deepValues.values().toArray());
     }
 
     @Test
     public void testGetValuesWithDefaults() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
         section.getRoot().options().copyDefaults(true);
 
         // Fix for SPIGOT-4558 means that defaults will always be first
@@ -76,18 +77,18 @@ public abstract class ConfigurationSectionTest {
         section.addDefault("subsection.long", Long.MAX_VALUE);
         section.addDefault("int", 42);
 
-        Map<String, Object> shallowValues = section.getValues(false);
+        final Map<String, Object> shallowValues = section.getValues(false);
         assertArrayEquals(new String[]{"int", "bool", "subsection"}, shallowValues.keySet().toArray());
         assertArrayEquals(new Object[]{42, true, section.getConfigurationSection("subsection")}, shallowValues.values().toArray());
 
-        Map<String, Object> deepValues = section.getValues(true);
+        final Map<String, Object> deepValues = section.getValues(true);
         assertArrayEquals(new String[]{"subsection.long", "int", "bool", "subsection", "subsection.string"}, deepValues.keySet().toArray());
         assertArrayEquals(new Object[]{Long.MAX_VALUE, 42, true, section.getConfigurationSection("subsection"), "test"}, deepValues.values().toArray());
     }
 
     @Test
     public void testContains() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("exists", true);
 
@@ -109,7 +110,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsSet() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("notDefault", true);
         section.getRoot().addDefault("default", true);
@@ -123,14 +124,14 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetCurrentPath() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         assertEquals(section.getName(), section.getCurrentPath());
     }
 
     @Test
     public void testGetName() {
-        ConfigurationSection section = getConfigurationSection().createSection("subsection");
+        final ConfigurationSection section = getConfigurationSection().createSection("subsection");
 
         assertEquals("subsection", section.getName());
         assertEquals("", section.getRoot().getName());
@@ -138,7 +139,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetRoot() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         assertNotNull(section.getRoot());
         assertTrue(section.getRoot().contains(section.getCurrentPath()));
@@ -146,8 +147,8 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetParent() {
-        ConfigurationSection section = getConfigurationSection();
-        ConfigurationSection subsection = section.createSection("subsection");
+        final ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection subsection = section.createSection("subsection");
 
         assertEquals(section.getRoot(), section.getParent());
         assertEquals(section, subsection.getParent());
@@ -155,7 +156,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGet_String() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("exists", "hello world");
 
@@ -165,7 +166,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGet_String_Object() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("exists", "Set Value");
 
@@ -175,7 +176,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testSet() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("exists", "hello world");
 
@@ -191,16 +192,16 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testCreateSection() {
-        ConfigurationSection section = getConfigurationSection();
-        ConfigurationSection subsection = section.createSection("subsection");
+        final ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection subsection = section.createSection("subsection");
 
         assertEquals("subsection", subsection.getName());
     }
 
     @Test
     public void testSectionMap() {
-        ConfigurationSection config = getConfigurationSection();
-        Map<String, Object> testMap = new LinkedHashMap<>();
+        final ConfigurationSection config = getConfigurationSection();
+        final Map<String, Object> testMap = new LinkedHashMap<>();
 
         testMap.put("string", "Hello World");
         testMap.put("integer", 15);
@@ -212,9 +213,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetString_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        String value = "Hello World";
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final String value = "Hello World";
 
         section.set(key, value);
 
@@ -224,10 +225,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetString_String_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        String value = "Hello World";
-        String def = "Default Value";
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final String value = "Hello World";
+        final String def = "Default Value";
 
         section.set(key, value);
 
@@ -237,9 +238,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsString() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        String value = "Hello World";
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final String value = "Hello World";
 
         section.set(key, value);
 
@@ -249,9 +250,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetInt_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        int value = Integer.MAX_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final int value = Integer.MAX_VALUE;
 
         section.set(key, value);
 
@@ -261,10 +262,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetInt_String_Int() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        int value = Integer.MAX_VALUE;
-        int def = Integer.MIN_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final int value = Integer.MAX_VALUE;
+        final int def = Integer.MIN_VALUE;
 
         section.set(key, value);
 
@@ -274,9 +275,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsInt() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        int value = Integer.MAX_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final int value = Integer.MAX_VALUE;
 
         section.set(key, value);
 
@@ -286,9 +287,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetBoolean_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        boolean value = true;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final boolean value = true;
 
         section.set(key, true);
 
@@ -298,10 +299,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetBoolean_String_Boolean() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        boolean value = true;
-        boolean def = false;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final boolean value = true;
+        final boolean def = false;
 
         section.set(key, true);
 
@@ -311,9 +312,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsBoolean() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        boolean value = true;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final boolean value = true;
 
         section.set(key, true);
 
@@ -323,9 +324,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetDouble_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = Double.MAX_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final double value = Double.MAX_VALUE;
 
         section.set(key, value);
 
@@ -335,9 +336,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetDoubleFromInt() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = 123;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final double value = 123;
 
         section.set(key, (int) value);
 
@@ -347,10 +348,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetDouble_String_Double() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = Double.MAX_VALUE;
-        double def = Double.MIN_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final double value = Double.MAX_VALUE;
+        final double def = Double.MIN_VALUE;
 
         section.set(key, value);
 
@@ -360,9 +361,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsDouble() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        double value = Double.MAX_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final double value = Double.MAX_VALUE;
 
         section.set(key, value);
 
@@ -372,9 +373,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetLong_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        long value = Long.MAX_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final long value = Long.MAX_VALUE;
 
         section.set(key, value);
 
@@ -384,10 +385,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetLong_String_Long() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        long value = Long.MAX_VALUE;
-        long def = Long.MIN_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final long value = Long.MAX_VALUE;
+        final long def = Long.MIN_VALUE;
 
         section.set(key, value);
 
@@ -397,9 +398,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsLong() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        long value = Long.MAX_VALUE;
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final long value = Long.MAX_VALUE;
 
         section.set(key, value);
 
@@ -409,15 +410,15 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetList_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Map<String, Object> map = new HashMap<>();
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final Map<String, Object> map = new HashMap<>();
 
         map.put("one", 1);
         map.put("two", "two");
         map.put("three", 3.14);
 
-        List<Object> value = Arrays.asList("One", "Two", "Three", 4, "5", 6.0, true, "false", map);
+        final List<Object> value = Arrays.asList("One", "Two", "Three", 4, "5", 6.0, true, "false", map);
 
         section.set(key, value);
 
@@ -436,10 +437,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetList_String_List() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        List<String> value = Arrays.asList("One", "Two", "Three");
-        List<String> def = Arrays.asList("A", "B", "C");
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final List<String> value = Arrays.asList("One", "Two", "Three");
+        final List<String> def = Arrays.asList("A", "B", "C");
 
         section.set(key, value);
 
@@ -449,9 +450,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsList() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        List<String> value = Arrays.asList("One", "Two", "Three");
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final List<String> value = Arrays.asList("One", "Two", "Three");
 
         section.set(key, value);
 
@@ -461,7 +462,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetObject_String_Class() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("set", 1);
         section.addDefault("default", 2);
@@ -482,7 +483,7 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetObject_String_Class_T() {
-        ConfigurationSection section = getConfigurationSection();
+        final ConfigurationSection section = getConfigurationSection();
 
         section.set("set", 1);
         section.addDefault("default", 2);
@@ -498,9 +499,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetVector_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
 
         section.set(key, value);
 
@@ -510,10 +511,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetVector_String_Vector() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
-        Vector def = new Vector(100, Double.MIN_VALUE, Double.MAX_VALUE);
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
+        final Vector def = new Vector(100, Double.MIN_VALUE, Double.MAX_VALUE);
 
         section.set(key, value);
 
@@ -523,9 +524,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsVector() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final Vector value = new Vector(Double.MIN_VALUE, Double.MAX_VALUE, 5);
 
         section.set(key, value);
 
@@ -535,9 +536,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetItemStack_String() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
 
         section.set(key, value);
 
@@ -547,10 +548,10 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetItemStack_String_ItemStack() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
-        ItemStack def = new ItemStack(Material.STONE, 1);
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+        final ItemStack def = new ItemStack(Material.STONE, 1);
 
         section.set(key, value);
 
@@ -560,9 +561,9 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testIsItemStack() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
-        ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
+        final ItemStack value = new ItemStack(Material.ACACIA_WOOD, 50);
 
         section.set(key, value);
 
@@ -572,18 +573,18 @@ public abstract class ConfigurationSectionTest {
 
     @Test
     public void testGetConfigurationSection() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
 
-        ConfigurationSection subsection = section.createSection(key);
+        final ConfigurationSection subsection = section.createSection(key);
 
         assertEquals(subsection, section.getConfigurationSection(key));
     }
 
     @Test
     public void testIsConfigurationSection() {
-        ConfigurationSection section = getConfigurationSection();
-        String key = "exists";
+        final ConfigurationSection section = getConfigurationSection();
+        final String key = "exists";
 
         section.createSection(key);
 
@@ -597,11 +598,11 @@ public abstract class ConfigurationSectionTest {
         BANANAS;
 
         @Override
-        public Map<String, Object> serialize() {
+        public @NotNull Map<String, Object> serialize() {
             return Collections.singletonMap("variant", this.name());
         }
 
-        public static TestEnum deserialize(Map<String, Object> map) {
+        public static TestEnum deserialize(final Map<String, Object> map) {
             return TestEnum.valueOf((String) map.get("variant"));
         }
     }
diff --git a/src/test/java/org/bukkit/configuration/ConfigurationTest.java b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
index 685d497ab3703cb3551e4aadc5a3618b986e66ad..bfdacc84e20d7c502c1737563a504d110119bd13 100644
--- a/src/test/java/org/bukkit/configuration/ConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/ConfigurationTest.java
@@ -17,7 +17,7 @@ public abstract class ConfigurationTest {
     public abstract Configuration getConfig();
 
     public Map<String, Object> getTestValues() {
-        HashMap<String, Object> result = new LinkedHashMap<>();
+        final HashMap<String, Object> result = new LinkedHashMap<>();
 
         result.put("integer", Integer.MIN_VALUE);
         result.put("string", "String Value");
@@ -37,12 +37,12 @@ public abstract class ConfigurationTest {
      */
     @Test
     public void testAddDefault() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
+        final Configuration config = getConfig();
+        final Map<String, Object> values = getTestValues();
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
+            final String path = entry.getKey();
+            final Object object = entry.getValue();
 
             config.addDefault(path, object);
 
@@ -58,14 +58,14 @@ public abstract class ConfigurationTest {
      */
     @Test
     public void testAddDefaults_Map() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
+        final Configuration config = getConfig();
+        final Map<String, Object> values = getTestValues();
 
         config.addDefaults(values);
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
+            final String path = entry.getKey();
+            final Object object = entry.getValue();
 
             assertEquals(object, config.get(path));
             assertTrue(config.contains(path));
@@ -79,19 +79,19 @@ public abstract class ConfigurationTest {
      */
     @Test
     public void testAddDefaults_Configuration() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        Configuration defaults = getConfig();
+        final Configuration config = getConfig();
+        final Map<String, Object> values = getTestValues();
+        final Configuration defaults = getConfig();
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
             defaults.set(entry.getKey(), entry.getValue());
         }
 
         config.addDefaults(defaults);
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
+            final String path = entry.getKey();
+            final Object object = entry.getValue();
 
             assertEquals(object, config.get(path));
             assertTrue(config.contains(path));
@@ -105,19 +105,19 @@ public abstract class ConfigurationTest {
      */
     @Test
     public void testSetDefaults() {
-        Configuration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        Configuration defaults = getConfig();
+        final Configuration config = getConfig();
+        final Map<String, Object> values = getTestValues();
+        final Configuration defaults = getConfig();
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
             defaults.set(entry.getKey(), entry.getValue());
         }
 
         config.setDefaults(defaults);
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
-            String path = entry.getKey();
-            Object object = entry.getValue();
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
+            final String path = entry.getKey();
+            final Object object = entry.getValue();
 
             assertEquals(object, config.get(path));
             assertTrue(config.contains(path));
@@ -131,9 +131,9 @@ public abstract class ConfigurationTest {
      */
     @Test
     public void testCreateSection() {
-        Configuration config = getConfig();
+        final Configuration config = getConfig();
 
-        Set<String> set = new HashSet<>();
+        final Set<String> set = new HashSet<>();
         set.add("this");
         set.add("this.test.sub");
         set.add("this.test");
@@ -150,8 +150,8 @@ public abstract class ConfigurationTest {
      */
     @Test
     public void testGetDefaults() {
-        Configuration config = getConfig();
-        Configuration defaults = getConfig();
+        final Configuration config = getConfig();
+        final Configuration defaults = getConfig();
 
         config.setDefaults(defaults);
 
diff --git a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
index 6ac2b9a4dbaa12f0483679de806ffd20753890f5..79b8fabeb00d2ab2084d05791aff34627452fd69 100644
--- a/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/FileConfigurationTest.java
@@ -25,10 +25,10 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
     @Test
     public void testSave_File() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
+        final FileConfiguration config = getConfig();
+        final File file = testFolder.newFile("test.config");
 
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
+        for (final Map.Entry<String, Object> entry : getTestValues().entrySet()) {
             config.set(entry.getKey(), entry.getValue());
         }
 
@@ -39,10 +39,10 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
     @Test
     public void testSave_String() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
+        final FileConfiguration config = getConfig();
+        final File file = testFolder.newFile("test.config");
 
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
+        for (final Map.Entry<String, Object> entry : getTestValues().entrySet()) {
             config.set(entry.getKey(), entry.getValue());
         }
 
@@ -53,25 +53,25 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
     @Test
     public void testSaveToString() {
-        FileConfiguration config = getConfig();
+        final FileConfiguration config = getConfig();
 
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
+        for (final Map.Entry<String, Object> entry : getTestValues().entrySet()) {
             config.set(entry.getKey(), entry.getValue());
         }
 
-        String result = config.saveToString();
-        String expected = getTestValuesString();
+        final String result = config.saveToString();
+        final String expected = getTestValuesString();
 
         assertEquals(expected, result);
     }
 
     @Test
     public void testLoad_File() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
-        BufferedWriter writer = new BufferedWriter(new FileWriter(file));
-        String saved = getTestValuesString();
-        Map<String, Object> values = getTestValues();
+        final FileConfiguration config = getConfig();
+        final File file = testFolder.newFile("test.config");
+        final BufferedWriter writer = new BufferedWriter(new FileWriter(file));
+        final String saved = getTestValuesString();
+        final Map<String, Object> values = getTestValues();
 
         try {
             writer.write(saved);
@@ -81,7 +81,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
         config.load(file);
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
             assertEquals(entry.getValue(), config.get(entry.getKey()));
         }
 
@@ -90,11 +90,11 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
     @Test
     public void testLoad_String() throws Exception {
-        FileConfiguration config = getConfig();
-        File file = testFolder.newFile("test.config");
-        BufferedWriter writer = new BufferedWriter(new FileWriter(file));
-        String saved = getTestValuesString();
-        Map<String, Object> values = getTestValues();
+        final FileConfiguration config = getConfig();
+        final File file = testFolder.newFile("test.config");
+        final BufferedWriter writer = new BufferedWriter(new FileWriter(file));
+        final String saved = getTestValuesString();
+        final Map<String, Object> values = getTestValues();
 
         try {
             writer.write(saved);
@@ -104,7 +104,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
         config.load(file.getAbsolutePath());
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
             assertEquals(entry.getValue(), config.get(entry.getKey()));
         }
 
@@ -113,13 +113,13 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
     @Test
     public void testLoadFromString() throws Exception {
-        FileConfiguration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        String saved = getTestValuesString();
+        final FileConfiguration config = getConfig();
+        final Map<String, Object> values = getTestValues();
+        final String saved = getTestValuesString();
 
         config.loadFromString(saved);
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
             assertEquals(entry.getValue(), config.get(entry.getKey()));
         }
 
@@ -129,32 +129,32 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
 
     @Test
     public void testSaveToStringWithHeader() {
-        FileConfiguration config = getConfig();
+        final FileConfiguration config = getConfig();
         config.options().header(getTestHeaderInput());
 
-        for (Map.Entry<String, Object> entry : getTestValues().entrySet()) {
+        for (final Map.Entry<String, Object> entry : getTestValues().entrySet()) {
             config.set(entry.getKey(), entry.getValue());
         }
 
-        String result = config.saveToString();
-        String expected = getTestHeaderResult() + "\n" + getTestValuesString();
+        final String result = config.saveToString();
+        final String expected = getTestHeaderResult() + "\n" + getTestValuesString();
 
         assertEquals(expected, result);
     }
 
     @Test
     public void testParseHeader() throws Exception {
-        FileConfiguration config = getConfig();
-        Map<String, Object> values = getTestValues();
-        String saved = getTestValuesString();
-        String header = getTestHeaderResult();
-        String expected = getTestHeaderInput();
+        final FileConfiguration config = getConfig();
+        final Map<String, Object> values = getTestValues();
+        final String saved = getTestValuesString();
+        final String header = getTestHeaderResult();
+        final String expected = getTestHeaderInput();
 
         config.loadFromString(header + "\n" + saved);
 
         assertEquals(expected, config.options().header());
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
             assertEquals(entry.getValue(), config.get(entry.getKey()));
         }
 
@@ -165,11 +165,11 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     @Test
     public void testCopyHeader() throws Exception {
         FileConfiguration config = getConfig();
-        FileConfiguration defaults = getConfig();
-        Map<String, Object> values = getTestValues();
-        String saved = getTestValuesString();
-        String header = getTestHeaderResult();
-        String expected = getTestHeaderInput();
+        final FileConfiguration defaults = getConfig();
+        final Map<String, Object> values = getTestValues();
+        final String saved = getTestValuesString();
+        final String header = getTestHeaderResult();
+        final String expected = getTestHeaderInput();
 
         defaults.loadFromString(header);
         config.loadFromString(saved);
@@ -178,7 +178,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
         assertNull(config.options().header());
         assertEquals(expected, defaults.options().header());
 
-        for (Map.Entry<String, Object> entry : values.entrySet()) {
+        for (final Map.Entry<String, Object> entry : values.entrySet()) {
             assertEquals(entry.getValue(), config.get(entry.getKey()));
         }
 
@@ -210,7 +210,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     @Test
     public void testReloadClear() throws Exception {
         // Test for SPIGOT-6274 - load does not clear values
-        FileConfiguration config = getConfig();
+        final FileConfiguration config = getConfig();
 
         assertFalse(config.contains("test"));
         assertFalse(config.getBoolean("test"));
@@ -230,7 +230,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     @Test
     public void testReloadClear2() throws Exception {
         // Test for SPIGOT-6274 - load does not clear values
-        FileConfiguration config = getConfig();
+        final FileConfiguration config = getConfig();
 
         assertFalse(config.contains("test"));
         assertFalse(config.getBoolean("test"));
@@ -250,7 +250,7 @@ public abstract class FileConfigurationTest extends MemoryConfigurationTest {
     @Test
     public void testReloadClear3() throws Exception {
         // Test for SPIGOT-6274 - load does not clear values
-        FileConfiguration config = getConfig();
+        final FileConfiguration config = getConfig();
 
         assertFalse(config.contains("test"));
         assertFalse(config.getBoolean("test"));
diff --git a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
index 262a414be8e290764068c151370411f41e29f47d..84710908a705d64727af4b4321b292b8b90467dc 100644
--- a/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
+++ b/src/test/java/org/bukkit/configuration/file/YamlConfigurationTest.java
@@ -48,13 +48,13 @@ public class YamlConfigurationTest extends FileConfigurationTest {
 
     @Test
     public void testSaveToStringWithIndent() {
-        YamlConfiguration config = getConfig();
+        final YamlConfiguration config = getConfig();
         config.options().indent(9);
 
         config.set("section.key", 1);
 
-        String result = config.saveToString();
-        String expected = "section:\n         key: 1\n";
+        final String result = config.saveToString();
+        final String expected = "section:\n         key: 1\n";
 
         assertEquals(expected, result);
     }
diff --git a/src/test/java/org/bukkit/conversations/ConversationContextTest.java b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
index a9d5cd520ebfec218cf408693d961f7eb8ea3794..3ab014e67bbf910ecc43cac42f388dccccd90b90 100644
--- a/src/test/java/org/bukkit/conversations/ConversationContextTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationContextTest.java
@@ -13,24 +13,24 @@ import static org.junit.Assert.assertNull;
 public class ConversationContextTest {
     @Test
     public void TestFromWhom() {
-        Conversable conversable = new FakeConversable();
-        ConversationContext context = new ConversationContext(null, conversable, new HashMap<>());
+        final Conversable conversable = new FakeConversable();
+        final ConversationContext context = new ConversationContext(null, conversable, new HashMap<>());
         assertEquals(conversable, context.getForWhom());
     }
 
     @Test
     public void TestPlugin() {
-        Conversable conversable = new FakeConversable();
-        ConversationContext context = new ConversationContext(null, conversable, new HashMap<>());
+        final Conversable conversable = new FakeConversable();
+        final ConversationContext context = new ConversationContext(null, conversable, new HashMap<>());
 	    assertNull(context.getPlugin());
     }
 
     @Test
     public void TestSessionData() {
-        Conversable conversable = new FakeConversable();
-        Map session = new HashMap();
+        final Conversable conversable = new FakeConversable();
+        final Map session = new HashMap();
         session.put("key", "value");
-        ConversationContext context = new ConversationContext(null, conversable, session);
+        final ConversationContext context = new ConversationContext(null, conversable, session);
         assertEquals("value", context.getSessionData("key"));
     }
 }
diff --git a/src/test/java/org/bukkit/conversations/ConversationTest.java b/src/test/java/org/bukkit/conversations/ConversationTest.java
index b764efaa0f270c30dcb247390932e65e2fd838d9..462393abc05276047fdda0860c2579b2fc383756 100644
--- a/src/test/java/org/bukkit/conversations/ConversationTest.java
+++ b/src/test/java/org/bukkit/conversations/ConversationTest.java
@@ -1,6 +1,7 @@
 package org.bukkit.conversations;
 
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 
 import static org.junit.Assert.*;
@@ -11,8 +12,8 @@ public class ConversationTest {
 
     @Test
     public void testBaseConversationFlow() {
-        FakeConversable forWhom = new FakeConversable();
-        Conversation conversation = new Conversation(null, forWhom, new FirstPrompt());
+        final FakeConversable forWhom = new FakeConversable();
+        final Conversation conversation = new Conversation(null, forWhom, new FirstPrompt());
 
         // Conversation not yet begun
         assertNull(forWhom.lastSentMessage);
@@ -32,13 +33,13 @@ public class ConversationTest {
 
     @Test
     public void testConversationFactory() {
-        FakeConversable forWhom = new FakeConversable();
-        NullConversationPrefix prefix = new NullConversationPrefix();
-        ConversationFactory factory = new ConversationFactory(new TestPlugin("Test"))
+        final FakeConversable forWhom = new FakeConversable();
+        final NullConversationPrefix prefix = new NullConversationPrefix();
+        final ConversationFactory factory = new ConversationFactory(new TestPlugin("Test"))
                 .withFirstPrompt(new FirstPrompt())
                 .withModality(false)
                 .withPrefix(prefix);
-        Conversation conversation = factory.buildConversation(forWhom);
+        final Conversation conversation = factory.buildConversation(forWhom);
 
         // Conversation not yet begun
         assertNull(forWhom.lastSentMessage);
@@ -59,8 +60,8 @@ public class ConversationTest {
 
     @Test
     public void testEscapeSequence() {
-        FakeConversable forWhom = new FakeConversable();
-        Conversation conversation = new Conversation(null, forWhom, new FirstPrompt());
+        final FakeConversable forWhom = new FakeConversable();
+        final Conversation conversation = new Conversation(null, forWhom, new FirstPrompt());
         conversation.addConversationCanceller(new ExactMatchConversationCanceller("bananas"));
 
         // Begin the conversation
@@ -76,10 +77,10 @@ public class ConversationTest {
 
     @Test
     public void testNotPlayer() {
-        FakeConversable forWhom = new FakeConversable();
-        ConversationFactory factory = new ConversationFactory(new TestPlugin("Test"))
+        final FakeConversable forWhom = new FakeConversable();
+        final ConversationFactory factory = new ConversationFactory(new TestPlugin("Test"))
                 .thatExcludesNonPlayersWithMessage("bye");
-        Conversation conversation = factory.buildConversation(forWhom);
+        final Conversation conversation = factory.buildConversation(forWhom);
 
         // Begin the conversation
         conversation.begin();
@@ -91,12 +92,12 @@ public class ConversationTest {
     private static class FirstPrompt extends StringPrompt {
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(final @NotNull ConversationContext context) {
             return "FirstPrompt";
         }
 
         @Override
-        public Prompt acceptInput(ConversationContext context, String input) {
+        public Prompt acceptInput(final @NotNull ConversationContext context, final String input) {
             assertEquals("FirstInput", input);
             context.setSessionData("data", 10);
             return new SecondPrompt();
@@ -106,12 +107,12 @@ public class ConversationTest {
     private static class SecondPrompt extends MessagePrompt {
 
         @Override
-        protected Prompt getNextPrompt(ConversationContext context) {
+        protected Prompt getNextPrompt(final @NotNull ConversationContext context) {
             return Prompt.END_OF_CONVERSATION;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(final @NotNull ConversationContext context) {
             // Assert that session data passes from one prompt to the next
             assertEquals(context.getSessionData("data"), 10);
             return "SecondPrompt";
diff --git a/src/test/java/org/bukkit/conversations/FakeConversable.java b/src/test/java/org/bukkit/conversations/FakeConversable.java
index 567bfd7d3e45d83b5520af6ddd0140c2b84139b2..baf3c603fe5ffbc22b4197ef481acf574ccde157 100644
--- a/src/test/java/org/bukkit/conversations/FakeConversable.java
+++ b/src/test/java/org/bukkit/conversations/FakeConversable.java
@@ -24,35 +24,35 @@ public class FakeConversable implements Conversable {
     }
 
     @Override
-    public void acceptConversationInput(String input) {
+    public void acceptConversationInput(final @NotNull String input) {
 
     }
 
     @Override
-    public boolean beginConversation(Conversation conversation) {
+    public boolean beginConversation(final @NotNull Conversation conversation) {
         begunConversation = conversation;
         conversation.outputNextPrompt();
         return true;
     }
 
     @Override
-    public void abandonConversation(Conversation conversation) {
+    public void abandonConversation(final @NotNull Conversation conversation) {
         abandonedConverstion = conversation;
     }
 
     @Override
-    public void abandonConversation(Conversation conversation, ConversationAbandonedEvent details) {
+    public void abandonConversation(final @NotNull Conversation conversation, final @NotNull ConversationAbandonedEvent details) {
         abandonedConverstion = conversation;
         abandonedConversationEvent = details;
     }
 
     @Override
-    public void sendRawMessage(String message) {
+    public void sendRawMessage(final @NotNull String message) {
         lastSentMessage = message;
     }
 
     @Override
-    public void sendRawMessage(@Nullable UUID sender, @NotNull String message) {
+    public void sendRawMessage(@Nullable final UUID sender, @NotNull final String message) {
         this.sendRawMessage(message);
     }
 
@@ -64,39 +64,39 @@ public class FakeConversable implements Conversable {
         return null;
     }
 
-    public boolean isPermissionSet(String name) {
+    public boolean isPermissionSet(final String name) {
         return false;
     }
 
-    public boolean isPermissionSet(Permission perm) {
+    public boolean isPermissionSet(final Permission perm) {
         return false;
     }
 
-    public boolean hasPermission(String name) {
+    public boolean hasPermission(final String name) {
         return false;
     }
 
-    public boolean hasPermission(Permission perm) {
+    public boolean hasPermission(final Permission perm) {
         return false;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value) {
+    public PermissionAttachment addAttachment(final Plugin plugin, final String name, final boolean value) {
         return null;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin) {
+    public PermissionAttachment addAttachment(final Plugin plugin) {
         return null;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin, String name, boolean value, int ticks) {
+    public PermissionAttachment addAttachment(final Plugin plugin, final String name, final boolean value, final int ticks) {
         return null;
     }
 
-    public PermissionAttachment addAttachment(Plugin plugin, int ticks) {
+    public PermissionAttachment addAttachment(final Plugin plugin, final int ticks) {
         return null;
     }
 
-    public void removeAttachment(PermissionAttachment attachment) {
+    public void removeAttachment(final PermissionAttachment attachment) {
 
     }
 
@@ -112,7 +112,7 @@ public class FakeConversable implements Conversable {
         return false;
     }
 
-    public void setOp(boolean value) {
+    public void setOp(final boolean value) {
 
     }
 }
diff --git a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
index 88975553f7a689d421d8c35301220c4b368a036f..80822f88a91d0d2d2c56fe4268978a736eb03cb8 100644
--- a/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
+++ b/src/test/java/org/bukkit/conversations/ValidatingPromptTest.java
@@ -1,6 +1,8 @@
 package org.bukkit.conversations;
 
 import static org.junit.Assert.*;
+
+import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 
 /**
@@ -9,7 +11,7 @@ public class ValidatingPromptTest {
 
     @Test
     public void TestBooleanPrompt() {
-        TestBooleanPrompt prompt = new TestBooleanPrompt();
+        final TestBooleanPrompt prompt = new TestBooleanPrompt();
         assertTrue(prompt.isInputValid(null, "true"));
         assertFalse(prompt.isInputValid(null, "bananas"));
         prompt.acceptInput(null, "true");
@@ -20,7 +22,7 @@ public class ValidatingPromptTest {
 
     @Test
     public void TestFixedSetPrompt() {
-        TestFixedSetPrompt prompt = new TestFixedSetPrompt("foo", "bar");
+        final TestFixedSetPrompt prompt = new TestFixedSetPrompt("foo", "bar");
         assertTrue(prompt.isInputValid(null, "foo"));
         assertFalse(prompt.isInputValid(null, "cheese"));
         prompt.acceptInput(null, "foo");
@@ -29,7 +31,7 @@ public class ValidatingPromptTest {
 
     @Test
     public void TestNumericPrompt() {
-        TestNumericPrompt prompt = new TestNumericPrompt();
+        final TestNumericPrompt prompt = new TestNumericPrompt();
         assertTrue(prompt.isInputValid(null, "1010220"));
         assertFalse(prompt.isInputValid(null, "tomato"));
         prompt.acceptInput(null, "1010220");
@@ -38,7 +40,7 @@ public class ValidatingPromptTest {
 
     @Test
     public void TestRegexPrompt() {
-        TestRegexPrompt prompt = new TestRegexPrompt("a.c");
+        final TestRegexPrompt prompt = new TestRegexPrompt("a.c");
         assertTrue(prompt.isInputValid(null, "abc"));
         assertTrue(prompt.isInputValid(null, "axc"));
         assertFalse(prompt.isInputValid(null, "xyz"));
@@ -52,13 +54,13 @@ public class ValidatingPromptTest {
         public boolean result;
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, boolean input) {
+        protected Prompt acceptValidatedInput(final @NotNull ConversationContext context, final boolean input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(final @NotNull ConversationContext context) {
             return null;
         }
     }
@@ -66,18 +68,18 @@ public class ValidatingPromptTest {
     private static class TestFixedSetPrompt extends FixedSetPrompt {
         public String result;
 
-        public TestFixedSetPrompt(String... fixedSet) {
+        public TestFixedSetPrompt(final String... fixedSet) {
             super(fixedSet);
         }
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, String input) {
+        protected Prompt acceptValidatedInput(final @NotNull ConversationContext context, final @NotNull String input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(final @NotNull ConversationContext context) {
             return null;
         }
     }
@@ -86,13 +88,13 @@ public class ValidatingPromptTest {
         public Number result;
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, Number input) {
+        protected Prompt acceptValidatedInput(final @NotNull ConversationContext context, final @NotNull Number input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(final @NotNull ConversationContext context) {
             return null;
         }
     }
@@ -100,18 +102,18 @@ public class ValidatingPromptTest {
     private static class TestRegexPrompt extends RegexPrompt {
         public String result;
 
-        public TestRegexPrompt(String pattern) {
+        public TestRegexPrompt(final String pattern) {
             super(pattern);
         }
 
         @Override
-        protected Prompt acceptValidatedInput(ConversationContext context, String input) {
+        protected Prompt acceptValidatedInput(final @NotNull ConversationContext context, final @NotNull String input) {
             result = input;
             return null;
         }
 
         @Override
-        public String getPromptText(ConversationContext context) {
+        public @NotNull String getPromptText(final @NotNull ConversationContext context) {
             return null;
         }
     }
diff --git a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
index 42d82887bece8b538216f9a24961a38f4ad4644d..1931d29e35cecc649bc93f3c538e0296a53311d0 100644
--- a/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
+++ b/src/test/java/org/bukkit/entity/memory/MemoryKeyTest.java
@@ -10,7 +10,7 @@ public class MemoryKeyTest {
 
     @Test
     public void shouldContainAllMemories() {
-        List<MemoryKey> memories = Arrays.asList(MemoryKey.HOME, MemoryKey.JOB_SITE, MemoryKey.MEETING_POINT);
+        final List<MemoryKey> memories = Arrays.asList(MemoryKey.HOME, MemoryKey.JOB_SITE, MemoryKey.MEETING_POINT);
         Assert.assertTrue(MemoryKey.values().containsAll(memories));
     }
 
diff --git a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
index 2be9bc8186af3cfdc4646e387e768fb13a5ce866..301191fb59ce7f298b7598aeb17654d988023396 100644
--- a/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
+++ b/src/test/java/org/bukkit/event/PlayerChatTabCompleteEventTest.java
@@ -20,7 +20,7 @@ public class PlayerChatTabCompleteEventTest {
         assertThat(getToken(" "), is(""));
     }
 
-    private String getToken(String message) {
+    private String getToken(final String message) {
         return new PlayerChatTabCompleteEvent(TestPlayer.getInstance(), message, ImmutableList.of()).getLastToken();
     }
 }
diff --git a/src/test/java/org/bukkit/event/SyntheticEventTest.java b/src/test/java/org/bukkit/event/SyntheticEventTest.java
index d402cb59f508205ebe9ee450594826b04cecb90b..4d94be959092913906a7d9034275ef94a5ea3105 100644
--- a/src/test/java/org/bukkit/event/SyntheticEventTest.java
+++ b/src/test/java/org/bukkit/event/SyntheticEventTest.java
@@ -5,6 +5,7 @@ import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.SimplePluginManager;
 import org.bukkit.plugin.TestPlugin;
 import org.bukkit.plugin.java.JavaPluginLoader;
+import org.jetbrains.annotations.NotNull;
 import org.junit.Assert;
 import org.junit.Test;
 
@@ -13,16 +14,16 @@ public class SyntheticEventTest {
     @Test
     public void test() {
         final JavaPluginLoader loader = new JavaPluginLoader(TestServer.getInstance());
-        TestPlugin plugin = new TestPlugin(getClass().getName()) {
+        final TestPlugin plugin = new TestPlugin(getClass().getName()) {
             @Override
-            public PluginLoader getPluginLoader() {
+            public @NotNull PluginLoader getPluginLoader() {
                 return loader;
             }
         };
-        SimplePluginManager pluginManager = new SimplePluginManager(TestServer.getInstance(), null);
+        final SimplePluginManager pluginManager = new SimplePluginManager(TestServer.getInstance(), null);
 
-        TestEvent event = new TestEvent(false);
-        Impl impl = new Impl();
+        final TestEvent event = new TestEvent(false);
+        final Impl impl = new Impl();
 
         pluginManager.registerEvents(impl, plugin);
         pluginManager.callEvent(event);
@@ -33,7 +34,7 @@ public class SyntheticEventTest {
     public abstract static class Base<E extends Event> implements Listener {
         int callCount = 0;
 
-        public void accept(E evt) {
+        public void accept(final E evt) {
             callCount++;
         }
     }
@@ -41,7 +42,7 @@ public class SyntheticEventTest {
     public static class Impl extends Base<TestEvent> {
         @Override
         @EventHandler
-        public void accept(TestEvent evt) {
+        public void accept(final TestEvent evt) {
             super.accept(evt);
         }
     }
diff --git a/src/test/java/org/bukkit/event/TestEvent.java b/src/test/java/org/bukkit/event/TestEvent.java
index 25904f5f8170bcfdc4b39860e4e8b5715aaf6909..b1478994e50abfd00d8b7cdbbcda6062e78a88bf 100644
--- a/src/test/java/org/bukkit/event/TestEvent.java
+++ b/src/test/java/org/bukkit/event/TestEvent.java
@@ -1,15 +1,18 @@
 package org.bukkit.event;
 
 
+import org.jetbrains.annotations.NotNull;
+
+
 public class TestEvent extends Event {
     private static final HandlerList handlers = new HandlerList();
 
-    public TestEvent(boolean async) {
+    public TestEvent(final boolean async) {
         super(async);
     }
 
     @Override
-    public HandlerList getHandlers() {
+    public @NotNull HandlerList getHandlers() {
         return handlers;
     }
 
diff --git a/src/test/java/org/bukkit/materials/MaterialDataTest.java b/src/test/java/org/bukkit/materials/MaterialDataTest.java
index 89ac1fb6256a3d1275325c1fd80bf550440b275b..d6a24d1c68c992598614a7055cd2cb476e77ad72 100644
--- a/src/test/java/org/bukkit/materials/MaterialDataTest.java
+++ b/src/test/java/org/bukkit/materials/MaterialDataTest.java
@@ -33,23 +33,23 @@ public class MaterialDataTest {
         assertThat("Constructed with default direction", door.getFacing(), equalTo(BlockFace.WEST));
         assertThat("Constructed with default open state", door.isOpen(), equalTo(false));
 
-        Material[] types = new Material[]{Material.LEGACY_WOODEN_DOOR,
+        final Material[] types = new Material[]{Material.LEGACY_WOODEN_DOOR,
             Material.LEGACY_IRON_DOOR_BLOCK, Material.LEGACY_SPRUCE_DOOR,
             Material.LEGACY_BIRCH_DOOR, Material.LEGACY_JUNGLE_DOOR,
             Material.LEGACY_ACACIA_DOOR, Material.LEGACY_DARK_OAK_DOOR};
-        BlockFace[] directions = new BlockFace[]{BlockFace.WEST, BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH};
-        boolean[] openStates = new boolean[]{false, true};
-        boolean[] hingeStates = new boolean[]{false, true};
-        for (Material type : types) {
+        final BlockFace[] directions = new BlockFace[]{BlockFace.WEST, BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH};
+        final boolean[] openStates = new boolean[]{false, true};
+        final boolean[] hingeStates = new boolean[]{false, true};
+        for (final Material type : types) {
             // Test bottom half
-            for (BlockFace facing : directions) {
+            for (final BlockFace facing : directions) {
                 door = new Door(type, facing);
                 assertThat("Constructed with correct door type", door.getItemType(), equalTo(type));
                 assertThat("Constructed with default top or bottom", door.isTopHalf(), equalTo(false));
                 assertThat("Constructed with correct direction", door.getFacing(), equalTo(facing));
                 assertThat("Constructed with default open state", door.isOpen(), equalTo(false));
 
-                for (boolean openState : openStates) {
+                for (final boolean openState : openStates) {
                     door = new Door(type, facing, openState);
                     assertThat("Constructed with correct door type", door.getItemType(), equalTo(type));
                     assertThat("Constructed with default top or bottom", door.isTopHalf(), equalTo(false));
@@ -59,7 +59,7 @@ public class MaterialDataTest {
             }
 
             // Test top half
-            for (boolean hingeState : hingeStates) {
+            for (final boolean hingeState : hingeStates) {
                 door = new Door(type, hingeState);
                 assertThat("Constructed with correct door type", door.getItemType(), equalTo(type));
                 assertThat("Constructed with default top or bottom", door.isTopHalf(), equalTo(true));
@@ -74,20 +74,20 @@ public class MaterialDataTest {
         assertThat("Constructed with default wood type", wood.getItemType(), equalTo(Material.LEGACY_WOOD));
         assertThat("Constructed with default tree species", wood.getSpecies(), equalTo(TreeSpecies.GENERIC));
 
-        TreeSpecies[] allSpecies = TreeSpecies.values();
-        for (TreeSpecies species : allSpecies) {
+        final TreeSpecies[] allSpecies = TreeSpecies.values();
+        for (final TreeSpecies species : allSpecies) {
             wood = new Wood(species);
             assertThat("Constructed with default wood type", wood.getItemType(), equalTo(Material.LEGACY_WOOD));
             assertThat("Constructed with correct tree species", wood.getSpecies(), equalTo(species));
         }
 
-        Material[] types = new Material[]{Material.LEGACY_WOOD, Material.LEGACY_WOOD_DOUBLE_STEP};
-        for (Material type : types) {
+        final Material[] types = new Material[]{Material.LEGACY_WOOD, Material.LEGACY_WOOD_DOUBLE_STEP};
+        for (final Material type : types) {
             wood = new Wood(type);
             assertThat("Constructed with correct wood type", wood.getItemType(), equalTo(type));
             assertThat("Constructed with default tree species", wood.getSpecies(), equalTo(TreeSpecies.GENERIC));
 
-            for (TreeSpecies species : allSpecies) {
+            for (final TreeSpecies species : allSpecies) {
                 wood = new Wood(type, species);
                 assertThat("Constructed with correct wood type", wood.getItemType(), equalTo(type));
                 assertThat("Constructed with correct tree species", wood.getSpecies(), equalTo(species));
@@ -107,14 +107,14 @@ public class MaterialDataTest {
         assertThat("Constructed with default tree species", tree.getSpecies(), equalTo(TreeSpecies.GENERIC));
         assertThat("Constructed with default direction", tree.getDirection(), equalTo(BlockFace.UP));
 
-        Material[] types = new Material[]{Material.LEGACY_LOG, Material.LEGACY_LOG_2};
-        TreeSpecies[][] allSpecies = new TreeSpecies[][]{
+        final Material[] types = new Material[]{Material.LEGACY_LOG, Material.LEGACY_LOG_2};
+        final TreeSpecies[][] allSpecies = new TreeSpecies[][]{
             {TreeSpecies.GENERIC, TreeSpecies.REDWOOD, TreeSpecies.BIRCH, TreeSpecies.JUNGLE},
             {TreeSpecies.ACACIA, TreeSpecies.DARK_OAK}
         };
-        BlockFace[] allDirections = new BlockFace[]{BlockFace.UP, BlockFace.WEST, BlockFace.NORTH, BlockFace.SELF};
+        final BlockFace[] allDirections = new BlockFace[]{BlockFace.UP, BlockFace.WEST, BlockFace.NORTH, BlockFace.SELF};
         for (int t = 0; t < types.length; t++) {
-            for (TreeSpecies species : allSpecies[t]) {
+            for (final TreeSpecies species : allSpecies[t]) {
                 tree = new Tree(types[t], species);
                 assertThat("Constructed with correct tree type", tree.getItemType(), equalTo(types[t]));
                 assertThat("Constructed with correct tree species", tree.getSpecies(), equalTo(species));
@@ -125,7 +125,7 @@ public class MaterialDataTest {
                 assertThat("Constructed with fixed tree type", tree.getItemType(), equalTo(types[t]));
                 assertThat("Constructed with correct tree species", tree.getSpecies(), equalTo(species));
                 assertThat("Constructed with default direction", tree.getDirection(), equalTo(BlockFace.UP));
-                for (BlockFace dir : allDirections) {
+                for (final BlockFace dir : allDirections) {
                     tree = new Tree(types[t], species, dir);
                     assertThat("Constructed with correct tree type", tree.getItemType(), equalTo(types[t]));
                     assertThat("Constructed with correct tree species", tree.getSpecies(), equalTo(species));
@@ -149,15 +149,15 @@ public class MaterialDataTest {
         assertThat("Constructed with default decayable", leaves.isDecayable(), equalTo(true));
         assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
 
-        Material[] types = new Material[]{Material.LEGACY_LEAVES, Material.LEGACY_LEAVES_2};
-        TreeSpecies[][] allSpecies = new TreeSpecies[][]{
+        final Material[] types = new Material[]{Material.LEGACY_LEAVES, Material.LEGACY_LEAVES_2};
+        final TreeSpecies[][] allSpecies = new TreeSpecies[][]{
             {TreeSpecies.GENERIC, TreeSpecies.REDWOOD, TreeSpecies.BIRCH, TreeSpecies.JUNGLE},
             {TreeSpecies.ACACIA, TreeSpecies.DARK_OAK}
         };
-        boolean[] decayable = new boolean[]{true, false};
-        boolean[] decaying = new boolean[]{true, false};
+        final boolean[] decayable = new boolean[]{true, false};
+        final boolean[] decaying = new boolean[]{true, false};
         for (int t = 0; t < types.length; t++) {
-            for (TreeSpecies species : allSpecies[t]) {
+            for (final TreeSpecies species : allSpecies[t]) {
                 leaves = new Leaves(types[t], species);
                 assertThat("Constructed with correct leaf type", leaves.getItemType(), equalTo(types[t]));
                 assertThat("Constructed with correct tree species", leaves.getSpecies(), equalTo(species));
@@ -170,13 +170,13 @@ public class MaterialDataTest {
                 assertThat("Constructed with correct tree species", leaves.getSpecies(), equalTo(species));
                 assertThat("Constructed with default decayable", leaves.isDecayable(), equalTo(true));
                 assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
-                for (boolean isDecayable : decayable) {
+                for (final boolean isDecayable : decayable) {
                     leaves = new Leaves(types[t], species, isDecayable);
                     assertThat("Constructed with correct wood type", leaves.getItemType(), equalTo(types[t]));
                     assertThat("Constructed with correct tree species", leaves.getSpecies(), equalTo(species));
                     assertThat("Constructed with correct decayable", leaves.isDecayable(), equalTo(isDecayable));
                     assertThat("Constructed with default decaying", leaves.isDecaying(), equalTo(false));
-                    for (boolean isDecaying : decaying) {
+                    for (final boolean isDecaying : decaying) {
                         leaves = new Leaves(types[t], species, isDecayable);
                         leaves.setDecaying(isDecaying);
                         assertThat("Constructed with correct wood type", leaves.getItemType(), equalTo(types[t]));
@@ -196,14 +196,14 @@ public class MaterialDataTest {
         assertThat("Constructed with default tree species", woodenStep.getSpecies(), equalTo(TreeSpecies.GENERIC));
         assertThat("Constructed with default inversion", woodenStep.isInverted(), equalTo(false));
 
-        TreeSpecies[] allSpecies = TreeSpecies.values();
-        boolean[] inversion = new boolean[]{true, false};
-        for (TreeSpecies species : allSpecies) {
+        final TreeSpecies[] allSpecies = TreeSpecies.values();
+        final boolean[] inversion = new boolean[]{true, false};
+        for (final TreeSpecies species : allSpecies) {
             woodenStep = new WoodenStep(species);
             assertThat("Constructed with default step type", woodenStep.getItemType(), equalTo(Material.LEGACY_WOOD_STEP));
             assertThat("Constructed with correct tree species", woodenStep.getSpecies(), equalTo(species));
             assertThat("Constructed with default inversion", woodenStep.isInverted(), equalTo(false));
-            for (boolean isInverted : inversion) {
+            for (final boolean isInverted : inversion) {
                 woodenStep = new WoodenStep(species, isInverted);
                 assertThat("Constructed with default step type", woodenStep.getItemType(), equalTo(Material.LEGACY_WOOD_STEP));
                 assertThat("Constructed with correct tree species", woodenStep.getSpecies(), equalTo(species));
@@ -219,14 +219,14 @@ public class MaterialDataTest {
         assertThat("Constructed with default tree species", sapling.getSpecies(), equalTo(TreeSpecies.GENERIC));
         assertThat("Constructed with default growable", sapling.isInstantGrowable(), equalTo(false));
 
-        TreeSpecies[] allSpecies = TreeSpecies.values();
-        boolean[] growable = new boolean[]{true, false};
-        for (TreeSpecies species : allSpecies) {
+        final TreeSpecies[] allSpecies = TreeSpecies.values();
+        final boolean[] growable = new boolean[]{true, false};
+        for (final TreeSpecies species : allSpecies) {
             sapling = new Sapling(species);
             assertThat("Constructed with default sapling type", sapling.getItemType(), equalTo(Material.LEGACY_SAPLING));
             assertThat("Constructed with correct tree species", sapling.getSpecies(), equalTo(species));
             assertThat("Constructed with default growable", sapling.isInstantGrowable(), equalTo(false));
-            for (boolean isInstantGrowable : growable) {
+            for (final boolean isInstantGrowable : growable) {
                 sapling = new Sapling(species, isInstantGrowable);
                 assertThat("Constructed with default sapling type", sapling.getItemType(), equalTo(Material.LEGACY_SAPLING));
                 assertThat("Constructed with correct tree species", sapling.getSpecies(), equalTo(species));
@@ -237,23 +237,23 @@ public class MaterialDataTest {
 
     @Test
     public void testMushroom() {
-        Material[] mushroomTypes = new Material[]{Material.LEGACY_HUGE_MUSHROOM_1, Material.LEGACY_HUGE_MUSHROOM_2};
-        BlockFace[] setFaces = new BlockFace[]{BlockFace.SELF, BlockFace.UP, BlockFace.NORTH,
+        final Material[] mushroomTypes = new Material[]{Material.LEGACY_HUGE_MUSHROOM_1, Material.LEGACY_HUGE_MUSHROOM_2};
+        final BlockFace[] setFaces = new BlockFace[]{BlockFace.SELF, BlockFace.UP, BlockFace.NORTH,
             BlockFace.SOUTH, BlockFace.EAST, BlockFace.WEST, BlockFace.NORTH_EAST, BlockFace.NORTH_WEST,
             BlockFace.SOUTH_EAST, BlockFace.SOUTH_WEST};
-        MushroomBlockTexture[] textures = MushroomBlockTexture.values();
-        for (Material type : mushroomTypes) {
+        final MushroomBlockTexture[] textures = MushroomBlockTexture.values();
+        for (final Material type : mushroomTypes) {
             Mushroom mushroom = new Mushroom(type);
             assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
             assertThat("Constructed with default pores face", mushroom.getBlockTexture(), equalTo(MushroomBlockTexture.ALL_PORES));
 
-	        for (BlockFace setFace : setFaces) {
+	        for (final BlockFace setFace : setFaces) {
 		        mushroom = new Mushroom(type, setFace);
 		        assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
 		        assertThat("Constructed with correct texture", mushroom.getBlockTexture(), equalTo(MushroomBlockTexture.getCapByFace(setFace)));
 	        }
 
-            for (MushroomBlockTexture texture : textures) {
+            for (final MushroomBlockTexture texture : textures) {
                 mushroom = new Mushroom(type, texture);
                 assertThat("Constructed with correct mushroom type", mushroom.getItemType(), equalTo(type));
                 assertThat("Constructed with correct texture", mushroom.getBlockTexture(), equalTo(texture));
@@ -268,20 +268,20 @@ public class MaterialDataTest {
         assertThat("Constructed with default crop state", crops.getState(), equalTo(CropState.SEEDED));
 
         CropState[] allStates = CropState.values();
-        for (CropState state : allStates) {
+        for (final CropState state : allStates) {
             crops = new Crops(state);
             assertThat("Constructed with default crops type", crops.getItemType(), equalTo(Material.LEGACY_CROPS));
             assertThat("Constructed with correct crop state", crops.getState(), equalTo(state));
         }
 
         // The crops which fully implement all crop states
-        Material[] allCrops = new Material[]{Material.LEGACY_CROPS, Material.LEGACY_CARROT, Material.LEGACY_POTATO};
-        for (Material crop : allCrops) {
+        final Material[] allCrops = new Material[]{Material.LEGACY_CROPS, Material.LEGACY_CARROT, Material.LEGACY_POTATO};
+        for (final Material crop : allCrops) {
             crops = new Crops(crop);
             assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(crop));
             assertThat("Constructed with default crop state", crops.getState(), equalTo(CropState.SEEDED));
 
-            for (CropState state : allStates) {
+            for (final CropState state : allStates) {
                 crops = new Crops(crop, state);
                 assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(crop));
                 assertThat("Constructed with correct crop state", crops.getState(), equalTo(state));
@@ -290,7 +290,7 @@ public class MaterialDataTest {
 
         // Beetroot are crops too, but they only have four states
         // Setting different crop states for beetroot will return the following when retrieved back
-        CropState[] beetrootStates = new CropState[]{CropState.SEEDED, CropState.SEEDED, CropState.SMALL, CropState.SMALL, CropState.TALL, CropState.TALL, CropState.RIPE, CropState.RIPE};
+        final CropState[] beetrootStates = new CropState[]{CropState.SEEDED, CropState.SEEDED, CropState.SMALL, CropState.SMALL, CropState.TALL, CropState.TALL, CropState.RIPE, CropState.RIPE};
         assertThat("Beetroot state translations match size", beetrootStates.length, equalTo(allStates.length));
         crops = new Crops(Material.LEGACY_BEETROOT_BLOCK);
         assertThat("Constructed with correct crops type", crops.getItemType(), equalTo(Material.LEGACY_BEETROOT_BLOCK));
@@ -308,7 +308,7 @@ public class MaterialDataTest {
         assertThat("Constructed with default crop state", crops.getState(), equalTo(CropState.SEEDED));
         assertThat("Constructed with default wart state", warts.getState(), equalTo(NetherWartsState.SEEDED));
         allStates = new CropState[]{CropState.SEEDED, CropState.SMALL, CropState.TALL, CropState.RIPE};
-        NetherWartsState[] allWartStates = NetherWartsState.values();
+        final NetherWartsState[] allWartStates = NetherWartsState.values();
         assertThat("Nether Warts state translations match size", allWartStates.length, equalTo(allStates.length));
         for (int s = 0; s < allStates.length; s++) {
             crops = new Crops(Material.LEGACY_NETHER_WARTS, allStates[s]);
@@ -327,22 +327,22 @@ public class MaterialDataTest {
         assertThat("Constructed with default delay", diode.getDelay(), equalTo(1));
         assertThat("Constructed with default direction", diode.getFacing(), equalTo(BlockFace.NORTH));
 
-        BlockFace[] directions = new BlockFace[]{BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST};
-        int[] delays = new int[]{1, 2, 3, 4};
-        boolean[] states = new boolean[]{false, true};
-        for (BlockFace direction : directions) {
+        final BlockFace[] directions = new BlockFace[]{BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST};
+        final int[] delays = new int[]{1, 2, 3, 4};
+        final boolean[] states = new boolean[]{false, true};
+        for (final BlockFace direction : directions) {
             diode = new Diode(direction);
             assertThat("Constructed with default diode state", diode.getItemType(), equalTo(Material.LEGACY_DIODE_BLOCK_OFF));
             assertThat("Constructed with default powered", diode.isPowered(), equalTo(false));
             assertThat("Constructed with default delay", diode.getDelay(), equalTo(1));
             assertThat("Constructed with correct direction", diode.getFacing(), equalTo(direction));
-            for (int delay : delays) {
+            for (final int delay : delays) {
                 diode = new Diode(direction, delay);
                 assertThat("Constructed with default diode state", diode.getItemType(), equalTo(Material.LEGACY_DIODE_BLOCK_OFF));
                 assertThat("Constructed with default powered", diode.isPowered(), equalTo(false));
                 assertThat("Constructed with correct delay", diode.getDelay(), equalTo(delay));
                 assertThat("Constructed with correct direction", diode.getFacing(), equalTo(direction));
-                for (boolean state : states) {
+                for (final boolean state : states) {
                     diode = new Diode(direction, delay, state);
                     assertThat("Constructed with correct diode state", diode.getItemType(), equalTo(state ? Material.LEGACY_DIODE_BLOCK_ON : Material.LEGACY_DIODE_BLOCK_OFF));
                     assertThat("Constructed with default powered", diode.isPowered(), equalTo(state));
@@ -362,24 +362,24 @@ public class MaterialDataTest {
         assertThat("Constructed with default mode", comparator.isSubtractionMode(), equalTo(false));
         assertThat("Constructed with default direction", comparator.getFacing(), equalTo(BlockFace.NORTH));
 
-        BlockFace[] directions = new BlockFace[]{BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST};
-        boolean[] modes = new boolean[]{false, true};
-        boolean[] states = new boolean[]{false, true};
-        for (BlockFace direction : directions) {
+        final BlockFace[] directions = new BlockFace[]{BlockFace.NORTH, BlockFace.EAST, BlockFace.SOUTH, BlockFace.WEST};
+        final boolean[] modes = new boolean[]{false, true};
+        final boolean[] states = new boolean[]{false, true};
+        for (final BlockFace direction : directions) {
             comparator = new Comparator(direction);
             assertThat("Constructed with default comparator state", comparator.getItemType(), equalTo(Material.LEGACY_REDSTONE_COMPARATOR_OFF));
             assertThat("Constructed with default powered", comparator.isPowered(), equalTo(false));
             assertThat("Constructed with default being powered", comparator.isBeingPowered(), equalTo(false));
             assertThat("Constructed with default mode", comparator.isSubtractionMode(), equalTo(false));
             assertThat("Constructed with correct direction", comparator.getFacing(), equalTo(direction));
-            for (boolean mode : modes) {
+            for (final boolean mode : modes) {
                 comparator = new Comparator(direction, mode);
                 assertThat("Constructed with default comparator state", comparator.getItemType(), equalTo(Material.LEGACY_REDSTONE_COMPARATOR_OFF));
                 assertThat("Constructed with default powered", comparator.isPowered(), equalTo(false));
                 assertThat("Constructed with default being powered", comparator.isBeingPowered(), equalTo(false));
                 assertThat("Constructed with correct mode", comparator.isSubtractionMode(), equalTo(mode));
                 assertThat("Constructed with correct direction", comparator.getFacing(), equalTo(direction));
-                for (boolean state : states) {
+                for (final boolean state : states) {
                     comparator = new Comparator(direction, mode, state);
                     assertThat("Constructed with correct comparator state", comparator.getItemType(), equalTo(state ? Material.LEGACY_REDSTONE_COMPARATOR_ON : Material.LEGACY_REDSTONE_COMPARATOR_OFF));
                     assertThat("Constructed with correct powered", comparator.isPowered(), equalTo(state));
@@ -407,15 +407,15 @@ public class MaterialDataTest {
         assertThat("Constructed with default powered state", hopper.isPowered(), equalTo(false));
         assertThat("Constructed with default direction", hopper.getFacing(), equalTo(BlockFace.DOWN));
 
-        BlockFace[] directions = new BlockFace[]{BlockFace.DOWN, BlockFace.NORTH, BlockFace.SOUTH, BlockFace.WEST, BlockFace.EAST};
-        boolean[] activeStates = new boolean[]{true, false};
-        for (BlockFace direction : directions) {
+        final BlockFace[] directions = new BlockFace[]{BlockFace.DOWN, BlockFace.NORTH, BlockFace.SOUTH, BlockFace.WEST, BlockFace.EAST};
+        final boolean[] activeStates = new boolean[]{true, false};
+        for (final BlockFace direction : directions) {
             hopper = new Hopper(direction);
             assertThat("Constructed with default hopper type", hopper.getItemType(), equalTo(Material.LEGACY_HOPPER));
             assertThat("Constructed with default active state", hopper.isActive(), equalTo(true));
             assertThat("Constructed with correct powered state", hopper.isPowered(), equalTo(false));
             assertThat("Constructed with correct direction", hopper.getFacing(), equalTo(direction));
-            for (boolean isActive : activeStates) {
+            for (final boolean isActive : activeStates) {
                 hopper = new Hopper(direction, isActive);
                 assertThat("Constructed with default hopper type", hopper.getItemType(), equalTo(Material.LEGACY_HOPPER));
                 assertThat("Constructed with correct active state", hopper.isActive(), equalTo(isActive));
diff --git a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
index b361bc96bc5f1716ec37201f16646455d1893b74..448fb6785f8ddb4e2750499f2e57cf2ec1e70ab8 100644
--- a/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/FixedMetadataValueTest.java
@@ -32,7 +32,7 @@ public class FixedMetadataValueTest {
 
     @Test
     public void testInvalidateDoesNothing() {
-        Object o = new Object();
+        final Object o = new Object();
         subject = new FixedMetadataValue(plugin, o);
         subject.invalidate();
         assertSame(o, subject.value());
diff --git a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
index f7b2ecbe953bce3df215589171428e8da7bb742d..108a9c283189e91e73ce14b55a0443f66aa85ae1 100644
--- a/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
+++ b/src/test/java/org/bukkit/metadata/LazyMetadataValueTest.java
@@ -11,7 +11,7 @@ public class LazyMetadataValueTest {
 
     @Test
     public void testLazyInt() {
-        int value = 10;
+        final int value = 10;
         subject = makeSimpleCallable(value);
 
         assertEquals(value, subject.value());
@@ -19,7 +19,7 @@ public class LazyMetadataValueTest {
 
     @Test
     public void testLazyDouble() {
-        double value = 10.5;
+        final double value = 10.5;
         subject = makeSimpleCallable(value);
 
         assertEquals(value, (Double) subject.value(), 0.01);
@@ -27,7 +27,7 @@ public class LazyMetadataValueTest {
 
     @Test
     public void testLazyString() {
-        String value = "TEN";
+        final String value = "TEN";
         subject = makeSimpleCallable(value);
 
         assertEquals(value, subject.value());
@@ -35,7 +35,7 @@ public class LazyMetadataValueTest {
 
     @Test
     public void testLazyBoolean() {
-        boolean value = false;
+        final boolean value = false;
         subject = makeSimpleCallable(false);
 
         assertEquals(false, subject.value());
diff --git a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
index 5a5be6f7edeaec31636a6a0190766130fe4bb714..3bf7f680839f597c5b10c45c20db9bbfcb1f4534 100644
--- a/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataConversionTest.java
@@ -26,7 +26,7 @@ public class MetadataConversionTest {
     private final Plugin plugin = new TestPlugin("x");
     private FixedMetadataValue subject;
 
-    private void setSubject(Object value) {
+    private void setSubject(final Object value) {
         subject = new FixedMetadataValue(plugin, value);
     }
 
diff --git a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
index 2017fdb1fe63bda6f6d76289e22f728f94bb3563..e660607a191a53a7c49a00218156422264c87974 100644
--- a/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataStoreTest.java
@@ -5,6 +5,7 @@ import java.util.List;
 
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.TestPlugin;
+import org.jetbrains.annotations.NotNull;
 import org.junit.Test;
 
 public class MetadataStoreTest {
@@ -18,14 +19,14 @@ public class MetadataStoreTest {
         subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 10));
 
         assertTrue(subject.hasMetadata("subject", "key"));
-        List<MetadataValue> values = subject.getMetadata("subject", "key");
+        final List<MetadataValue> values = subject.getMetadata("subject", "key");
         assertEquals(10, values.get(0).value());
     }
 
     @Test
     public void testMetadataNotPresent() {
         assertFalse(subject.hasMetadata("subject", "key"));
-        List<MetadataValue> values = subject.getMetadata("subject", "key");
+        final List<MetadataValue> values = subject.getMetadata("subject", "key");
         assertTrue(values.isEmpty());
     }
 
@@ -67,7 +68,7 @@ public class MetadataStoreTest {
         subject.setMetadata("subject", "key", new FixedMetadataValue(pluginY, 10));
         subject.setMetadata("subject", "key", new FixedMetadataValue(pluginX, 20));
 
-        for (MetadataValue mv : subject.getMetadata("subject", "key")) {
+        for (final MetadataValue mv : subject.getMetadata("subject", "key")) {
             if (mv.getOwningPlugin().equals(pluginX)) {
                 assertEquals(20, mv.value());
             }
@@ -116,7 +117,7 @@ public class MetadataStoreTest {
 
     private static class StringMetadataStore extends MetadataStoreBase<String> implements MetadataStore<String> {
         @Override
-        protected String disambiguate(String subject, String metadataKey) {
+        protected @NotNull String disambiguate(final @NotNull String subject, final @NotNull String metadataKey) {
             return subject + ":" + metadataKey;
         }
     }
diff --git a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
index d0ec262f539e591af549871582b056b597d61ce6..55b55d4ef82d82680e74a4b1d90b49c06b2668c3 100644
--- a/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
+++ b/src/test/java/org/bukkit/metadata/MetadataValueAdapterTest.java
@@ -10,7 +10,7 @@ public class MetadataValueAdapterTest {
 
     @Test
     public void testAdapterBasics() {
-        IncrementingMetaValue mv = new IncrementingMetaValue(plugin);
+        final IncrementingMetaValue mv = new IncrementingMetaValue(plugin);
         // check getOwningPlugin
         assertEquals(mv.getOwningPlugin(), this.plugin);
 
@@ -23,7 +23,7 @@ public class MetadataValueAdapterTest {
 
     @Test
     public void testAdapterConversions() {
-        IncrementingMetaValue mv = new IncrementingMetaValue(plugin);
+        final IncrementingMetaValue mv = new IncrementingMetaValue(plugin);
 
         assertEquals(1, mv.asInt());
         assertEquals(2L, mv.asLong());
@@ -71,7 +71,7 @@ public class MetadataValueAdapterTest {
      * @param value the value to wrap
      * @return the fixed value
      */
-    private MetadataValue simpleValue(Object value) {
+    private MetadataValue simpleValue(final Object value) {
         return new FixedMetadataValue(plugin, value);
     }
 
@@ -86,7 +86,7 @@ public class MetadataValueAdapterTest {
     static class IncrementingMetaValue extends MetadataValueAdapter {
         private int internalValue = 0;
 
-        protected IncrementingMetaValue(Plugin owningPlugin) {
+        protected IncrementingMetaValue(final Plugin owningPlugin) {
             super(owningPlugin);
         }
 
diff --git a/src/test/java/org/bukkit/plugin/TestPlugin.java b/src/test/java/org/bukkit/plugin/TestPlugin.java
index 6d450897187e810070f633e832034763a102a0b0..ca18e7b339957a990f4fd26546939f224219dbc2 100644
--- a/src/test/java/org/bukkit/plugin/TestPlugin.java
+++ b/src/test/java/org/bukkit/plugin/TestPlugin.java
@@ -8,37 +8,39 @@ import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
 import org.bukkit.generator.ChunkGenerator;
+import org.jetbrains.annotations.NotNull;
+
 
 public class TestPlugin extends PluginBase {
     private boolean enabled = true;
 
     private final String pluginName;
 
-    public TestPlugin(String pluginName) {
+    public TestPlugin(final String pluginName) {
         this.pluginName = pluginName;
     }
 
-    public void setEnabled(boolean enabled) {
+    public void setEnabled(final boolean enabled) {
         this.enabled = enabled;
     }
 
     @Override
-    public File getDataFolder() {
+    public @NotNull File getDataFolder() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public PluginDescriptionFile getDescription() {
+    public @NotNull PluginDescriptionFile getDescription() {
         return new PluginDescriptionFile(pluginName, "1.0", "test.test");
     }
 
     @Override
-    public FileConfiguration getConfig() {
+    public @NotNull FileConfiguration getConfig() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public InputStream getResource(String filename) {
+    public InputStream getResource(final @NotNull String filename) {
         throw new UnsupportedOperationException("Not supported.");
     }
 
@@ -53,7 +55,7 @@ public class TestPlugin extends PluginBase {
     }
 
     @Override
-    public void saveResource(String resourcePath, boolean replace) {
+    public void saveResource(final @NotNull String resourcePath, final boolean replace) {
         throw new UnsupportedOperationException("Not supported.");
     }
 
@@ -63,17 +65,17 @@ public class TestPlugin extends PluginBase {
     }
 
     @Override
-    public PluginLogger getLogger() {
+    public @NotNull PluginLogger getLogger() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public PluginLoader getPluginLoader() {
+    public @NotNull PluginLoader getPluginLoader() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public Server getServer() {
+    public @NotNull Server getServer() {
         throw new UnsupportedOperationException("Not supported.");
     }
 
@@ -103,22 +105,22 @@ public class TestPlugin extends PluginBase {
     }
 
     @Override
-    public void setNaggable(boolean canNag) {
+    public void setNaggable(final boolean canNag) {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public ChunkGenerator getDefaultWorldGenerator(String worldName, String id) {
+    public ChunkGenerator getDefaultWorldGenerator(final @NotNull String worldName, final String id) {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
+    public boolean onCommand(final @NotNull CommandSender sender, final @NotNull Command command, final @NotNull String label, final String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
 
     @Override
-    public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
+    public List<String> onTabComplete(final @NotNull CommandSender sender, final @NotNull Command command, final @NotNull String alias, final String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
 }
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
index 0cae44ee099d94c0b84b30e1b34623bf49534278..583b839f1bc4097e2c9248cfb0a5c688beeff1df 100644
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
@@ -16,13 +16,13 @@ public class TimedRegisteredListenerTest {
 
     @Test
     public void testEventClass() throws EventException {
-        Listener listener = new Listener() {};
-        EventExecutor executor = (listener1, event) -> {};
-        TestPlugin plugin = new TestPlugin("Test");
+        final Listener listener = new Listener() {};
+        final EventExecutor executor = (listener1, event) -> {};
+        final TestPlugin plugin = new TestPlugin("Test");
 
-        PlayerInteractEvent interactEvent = new PlayerInteractEvent(null, null, null, null, null);
-        PlayerMoveEvent moveEvent = new PlayerMoveEvent(null, null, null);
-        BlockBreakEvent breakEvent = new BlockBreakEvent(null, null);
+        final PlayerInteractEvent interactEvent = new PlayerInteractEvent(null, null, null, null, null);
+        final PlayerMoveEvent moveEvent = new PlayerMoveEvent(null, null, null);
+        final BlockBreakEvent breakEvent = new BlockBreakEvent(null, null);
 
         TimedRegisteredListener trl = new TimedRegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
 
diff --git a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
index f0ed427159b1327c20bab9393e6063483f7104b2..cb3a9fd527fd0a560c3e940031db9e935c8d3f61 100644
--- a/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
+++ b/src/test/java/org/bukkit/plugin/messaging/StandardMessengerTest.java
@@ -20,7 +20,7 @@ public class StandardMessengerTest {
 
     @Test
     public void testIsReservedChannel() {
-        Messenger messenger = getMessenger();
+        final Messenger messenger = getMessenger();
 
         assertTrue(messenger.isReservedChannel("minecraft:register"));
         assertFalse(messenger.isReservedChannel("test:register"));
@@ -32,8 +32,8 @@ public class StandardMessengerTest {
 
     @Test
     public void testRegisterAndUnregisterOutgoingPluginChannel() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
 
         assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
         messenger.registerOutgoingPluginChannel(plugin, "test:foo");
@@ -46,16 +46,16 @@ public class StandardMessengerTest {
 
     @Test(expected = ReservedChannelException.class)
     public void testReservedOutgoingRegistration() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
 
         messenger.registerOutgoingPluginChannel(plugin, "minecraft:register");
     }
 
     @Test
     public void testUnregisterOutgoingPluginChannel_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
 
         assertFalse(messenger.isOutgoingChannelRegistered(plugin, "test:foo"));
         messenger.registerOutgoingPluginChannel(plugin, "test:foo");
@@ -70,11 +70,11 @@ public class StandardMessengerTest {
 
     @Test
     public void testRegisterIncomingPluginChannel() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener = new TestMessageListener("test:foo", "test:bar".getBytes());
-        Player player = TestPlayer.getInstance();
-        PluginMessageListenerRegistration registration = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener);
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
+        final TestMessageListener listener = new TestMessageListener("test:foo", "test:bar".getBytes());
+        final Player player = TestPlayer.getInstance();
+        final PluginMessageListenerRegistration registration = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener);
 
         assertTrue(registration.isValid());
         assertTrue(messenger.isIncomingChannelRegistered(plugin, "test:foo"));
@@ -92,17 +92,17 @@ public class StandardMessengerTest {
 
     @Test(expected = ReservedChannelException.class)
     public void testReservedIncomingRegistration() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
 
         messenger.registerIncomingPluginChannel(plugin, "minecraft:register", new TestMessageListener("test:foo", "test:bar".getBytes()));
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void testDuplicateIncomingRegistration() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener = new TestMessageListener("test:foo", "test:bar".getBytes());
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
+        final TestMessageListener listener = new TestMessageListener("test:foo", "test:bar".getBytes());
 
         messenger.registerIncomingPluginChannel(plugin, "test:baz", listener);
         messenger.registerIncomingPluginChannel(plugin, "test:baz", listener);
@@ -110,13 +110,13 @@ public class StandardMessengerTest {
 
     @Test
     public void testUnregisterIncomingPluginChannel_Plugin_String() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener1 = new TestMessageListener("test:foo", "test:bar".getBytes());
-        TestMessageListener listener2 = new TestMessageListener("test:baz", "test:qux".getBytes());
-        Player player = TestPlayer.getInstance();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener1);
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin, "test:baz", listener2);
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
+        final TestMessageListener listener1 = new TestMessageListener("test:foo", "test:bar".getBytes());
+        final TestMessageListener listener2 = new TestMessageListener("test:baz", "test:qux".getBytes());
+        final Player player = TestPlayer.getInstance();
+        final PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener1);
+        final PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin, "test:baz", listener2);
 
         assertTrue(registration1.isValid());
         assertTrue(registration2.isValid());
@@ -139,13 +139,13 @@ public class StandardMessengerTest {
 
     @Test
     public void testUnregisterIncomingPluginChannel_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
-        TestMessageListener listener1 = new TestMessageListener("test:foo", "test:bar".getBytes());
-        TestMessageListener listener2 = new TestMessageListener("test:baz", "test:qux".getBytes());
-        Player player = TestPlayer.getInstance();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener1);
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin, "test:baz", listener2);
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
+        final TestMessageListener listener1 = new TestMessageListener("test:foo", "test:bar".getBytes());
+        final TestMessageListener listener2 = new TestMessageListener("test:baz", "test:qux".getBytes());
+        final Player player = TestPlayer.getInstance();
+        final PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin, "test:foo", listener1);
+        final PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin, "test:baz", listener2);
 
         assertTrue(registration1.isValid());
         assertTrue(registration2.isValid());
@@ -168,9 +168,9 @@ public class StandardMessengerTest {
 
     @Test
     public void testGetOutgoingChannels() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin1 = getPlugin();
+        final TestPlugin plugin2 = getPlugin();
 
         assertEquals(messenger.getOutgoingChannels());
 
@@ -184,10 +184,10 @@ public class StandardMessengerTest {
 
     @Test
     public void testGetOutgoingChannels_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin1 = getPlugin();
+        final TestPlugin plugin2 = getPlugin();
+        final TestPlugin plugin3 = getPlugin();
 
         messenger.registerOutgoingPluginChannel(plugin1, "test:foo");
         messenger.registerOutgoingPluginChannel(plugin1, "test:bar");
@@ -201,9 +201,9 @@ public class StandardMessengerTest {
 
     @Test
     public void testGetIncomingChannels() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin1 = getPlugin();
+        final TestPlugin plugin2 = getPlugin();
 
         assertEquals(messenger.getIncomingChannels());
 
@@ -217,10 +217,10 @@ public class StandardMessengerTest {
 
     @Test
     public void testGetIncomingChannels_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin1 = getPlugin();
+        final TestPlugin plugin2 = getPlugin();
+        final TestPlugin plugin3 = getPlugin();
 
         messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
         messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
@@ -234,14 +234,14 @@ public class StandardMessengerTest {
 
     @Test
     public void testGetIncomingChannelRegistrations_Plugin() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:qux", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin1 = getPlugin();
+        final TestPlugin plugin2 = getPlugin();
+        final TestPlugin plugin3 = getPlugin();
+        final PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:qux", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
         assertEquals(messenger.getIncomingChannelRegistrations(plugin1), registration1, registration2);
         assertEquals(messenger.getIncomingChannelRegistrations(plugin2), registration3, registration4);
@@ -250,13 +250,13 @@ public class StandardMessengerTest {
 
     @Test
     public void testGetIncomingChannelRegistrations_String() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin1 = getPlugin();
+        final TestPlugin plugin2 = getPlugin();
+        final PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin2, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
         assertEquals(messenger.getIncomingChannelRegistrations("test:foo"), registration1, registration3);
         assertEquals(messenger.getIncomingChannelRegistrations("test:bar"), registration2, registration4);
@@ -265,16 +265,16 @@ public class StandardMessengerTest {
 
     @Test
     public void testGetIncomingChannelRegistrations_Plugin_String() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin1 = getPlugin();
-        TestPlugin plugin2 = getPlugin();
-        TestPlugin plugin3 = getPlugin();
-        PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration5 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
-        PluginMessageListenerRegistration registration6 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin1 = getPlugin();
+        final TestPlugin plugin2 = getPlugin();
+        final TestPlugin plugin3 = getPlugin();
+        final PluginMessageListenerRegistration registration1 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration2 = messenger.registerIncomingPluginChannel(plugin1, "test:foo", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration3 = messenger.registerIncomingPluginChannel(plugin1, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration4 = messenger.registerIncomingPluginChannel(plugin2, "test:bar", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration5 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
+        final PluginMessageListenerRegistration registration6 = messenger.registerIncomingPluginChannel(plugin2, "test:baz", new TestMessageListener("test:foo", "test:bar".getBytes()));
 
         assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:foo"), registration1, registration2);
         assertEquals(messenger.getIncomingChannelRegistrations(plugin1, "test:bar"), registration3);
@@ -286,8 +286,8 @@ public class StandardMessengerTest {
 
     @Test(expected = IllegalArgumentException.class)
     public void testInvalidChannel() {
-        Messenger messenger = getMessenger();
-        TestPlugin plugin = getPlugin();
+        final Messenger messenger = getMessenger();
+        final TestPlugin plugin = getPlugin();
 
         messenger.registerOutgoingPluginChannel(plugin, "foo");
     }
@@ -299,7 +299,7 @@ public class StandardMessengerTest {
     }
 
     @SafeVarargs
-    private static <T> void assertEquals(Collection<T> actual, T... expected) {
+    private static <T> void assertEquals(final Collection<T> actual, final T... expected) {
         assertThat("Size of the array", actual.size(), is(expected.length));
         assertThat(actual, hasItems(expected));
     }
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java b/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
index 7a5b6108d56b8350d1aa419caf25fe6c653066b4..87c5fb3008048296da9409abcc7f9ba4e18be398 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestMessageListener.java
@@ -2,19 +2,21 @@ package org.bukkit.plugin.messaging;
 
 import static org.junit.Assert.*;
 import org.bukkit.entity.Player;
+import org.jetbrains.annotations.NotNull;
+
 
 public class TestMessageListener implements PluginMessageListener {
     private final String channel;
     private final byte[] message;
     private boolean received = false;
 
-    public TestMessageListener(String channel, byte[] message) {
+    public TestMessageListener(final String channel, final byte[] message) {
         this.channel = channel;
         this.message = message;
     }
 
     @Override
-    public void onPluginMessageReceived(String channel, Player player, byte[] message) {
+    public void onPluginMessageReceived(final @NotNull String channel, final @NotNull Player player, final byte[] message) {
         assertEquals(this.channel, channel);
         assertArrayEquals(this.message, message);
         this.received = true;
diff --git a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
index aaffe93bc2f4a56ddbd9f5d8e96674ccaac5a2c6..a2699a5c153de9aa0d6c0b04fe6ef69fd2e6f2cb 100644
--- a/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
+++ b/src/test/java/org/bukkit/plugin/messaging/TestPlayer.java
@@ -24,7 +24,7 @@ public final class TestPlayer implements InvocationHandler {
                 });
             */
             constructor = Proxy.getProxyClass(Player.class.getClassLoader(), Player.class).asSubclass(Player.class).getConstructor(InvocationHandler.class);
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             throw new Error(t);
         }
     }
@@ -34,14 +34,14 @@ public final class TestPlayer implements InvocationHandler {
     public static Player getInstance() {
         try {
             return constructor.newInstance(new TestPlayer());
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             throw new RuntimeException(t);
         }
     }
 
     @Override
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
+    public Object invoke(final Object proxy, final Method method, final Object[] args) {
+        final MethodHandler handler = methods.get(method);
         if (handler != null) {
             return handler.handle(this, args);
         }
diff --git a/src/test/java/org/bukkit/util/BoundingBoxTest.java b/src/test/java/org/bukkit/util/BoundingBoxTest.java
index 2d50a9ed66d40c9c538f5e767d9e128394f5dc3b..53a515b24de35a29c7ee36e8a5491ca696db8a64 100644
--- a/src/test/java/org/bukkit/util/BoundingBoxTest.java
+++ b/src/test/java/org/bukkit/util/BoundingBoxTest.java
@@ -13,7 +13,7 @@ public class BoundingBoxTest {
 
     @Test
     public void testConstruction() {
-        BoundingBox expected = new BoundingBox(-1, -1, -1, 1, 2, 3);
+        final BoundingBox expected = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(expected.getMin(), is(new Vector(-1, -1, -1)));
         assertThat(expected.getMax(), is(new Vector(1, 2, 3)));
         assertThat(expected.getCenter(), is(new Vector(0.0D, 0.5D, 1.0D)));
@@ -31,7 +31,7 @@ public class BoundingBoxTest {
 
     @Test
     public void testContains() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
+        final BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(aabb.contains(-0.5D, 0.0D, 0.5D), is(true));
         assertThat(aabb.contains(-1.0D, -1.0D, -1.0D), is(true));
         assertThat(aabb.contains(1.0D, 2.0D, 3.0D), is(false));
@@ -47,7 +47,7 @@ public class BoundingBoxTest {
 
     @Test
     public void testOverlaps() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
+        final BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(aabb.contains(aabb), is(true));
         assertThat(aabb.overlaps(new BoundingBox(-2, -2, -2, 0, 0, 0)), is(true));
         assertThat(aabb.overlaps(new BoundingBox(0.5D, 1.5D, 2.5D, 1, 2, 3)), is(true));
@@ -59,7 +59,7 @@ public class BoundingBoxTest {
 
     @Test
     public void testDegenerate() {
-        BoundingBox aabb = new BoundingBox(0, 0, 0, 0, 0, 0);
+        final BoundingBox aabb = new BoundingBox(0, 0, 0, 0, 0, 0);
         assertThat(aabb.getWidthX(), is(0.0D));
         assertThat(aabb.getHeight(), is(0.0D));
         assertThat(aabb.getWidthZ(), is(0.0D));
@@ -68,7 +68,7 @@ public class BoundingBoxTest {
 
     @Test
     public void testShift() {
-        BoundingBox aabb = new BoundingBox(0, 0, 0, 1, 1, 1);
+        final BoundingBox aabb = new BoundingBox(0, 0, 0, 1, 1, 1);
         assertThat(aabb.clone().shift(1, 2, 3), is(new BoundingBox(1, 2, 3, 2, 3, 4)));
         assertThat(aabb.clone().shift(-1, -2, -3), is(new BoundingBox(-1, -2, -3, 0, -1, -2)));
         assertThat(aabb.clone().shift(new Vector(1, 2, 3)), is(new BoundingBox(1, 2, 3, 2, 3, 4)));
@@ -77,7 +77,7 @@ public class BoundingBoxTest {
 
     @Test
     public void testUnion() {
-        BoundingBox aabb1 = new BoundingBox(0, 0, 0, 1, 1, 1);
+        final BoundingBox aabb1 = new BoundingBox(0, 0, 0, 1, 1, 1);
         assertThat(aabb1.clone().union(new BoundingBox(-2, -2, -2, -1, -1, -1)), is(new BoundingBox(-2, -2, -2, 1, 1, 1)));
         assertThat(aabb1.clone().union(1, 2, 3), is(new BoundingBox(0, 0, 0, 1, 2, 3)));
         assertThat(aabb1.clone().union(new Vector(1, 2, 3)), is(new BoundingBox(0, 0, 0, 1, 2, 3)));
@@ -86,14 +86,14 @@ public class BoundingBoxTest {
 
     @Test
     public void testIntersection() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
+        final BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 2, 3);
         assertThat(aabb.clone().intersection(new BoundingBox(-2, -2, -2, 4, 4, 4)), is(aabb));
         assertThat(aabb.clone().intersection(new BoundingBox(-2, -2, -2, 1, 1, 1)), is(new BoundingBox(-1, -1, -1, 1, 1, 1)));
     }
 
     @Test
     public void testExpansion() {
-        BoundingBox aabb = new BoundingBox(0, 0, 0, 2, 2, 2);
+        final BoundingBox aabb = new BoundingBox(0, 0, 0, 2, 2, 2);
         assertThat(aabb.clone().expand(1, 2, 3, 1, 2, 3), is(new BoundingBox(-1, -2, -3, 3, 4, 5)));
         assertThat(aabb.clone().expand(-1, -2, -3, 1, 2, 3), is(new BoundingBox(1, 2, 3, 3, 4, 5)));
         assertThat(aabb.clone().expand(1, 2, 3, -1, -2, -3), is(new BoundingBox(-1, -2, -3, 1, 0, -1)));
@@ -126,8 +126,10 @@ public class BoundingBoxTest {
         assertThat(aabb.clone().expand(BlockFace.NORTH_NORTH_WEST, 1.0D), is(aabb.clone().expand(BlockFace.NORTH_NORTH_WEST.getDirection(), 1.0D)));
         assertThat(aabb.clone().expand(BlockFace.SELF, 1.0D), is(aabb));
 
-        BoundingBox expanded = aabb.clone().expand(BlockFace.NORTH_WEST, 1.0D);
+        final BoundingBox expanded = aabb.clone().expand(BlockFace.NORTH_WEST, 1.0D);
+        //noinspection ConstantMathCall
         assertThat(expanded.getWidthX(), is(closeTo(aabb.getWidthX() + Math.sqrt(0.5D), delta)));
+        //noinspection ConstantMathCall
         assertThat(expanded.getWidthZ(), is(closeTo(aabb.getWidthZ() + Math.sqrt(0.5D), delta)));
         assertThat(expanded.getHeight(), is(aabb.getHeight()));
 
@@ -138,7 +140,7 @@ public class BoundingBoxTest {
 
     @Test
     public void testRayTrace() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
+        final BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
 
         assertThat(aabb.rayTrace(new Vector(-2, 0, 0), new Vector(1, 0, 0), 10),
                 is(new RayTraceResult(new Vector(-1, 0, 0), BlockFace.WEST)));
@@ -196,9 +198,9 @@ public class BoundingBoxTest {
 
     @Test
     public void testSerialization() {
-        BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
-        Map<String, Object> serialized = aabb.serialize();
-        BoundingBox deserialized = BoundingBox.deserialize(serialized);
+        final BoundingBox aabb = new BoundingBox(-1, -1, -1, 1, 1, 1);
+        final Map<String, Object> serialized = aabb.serialize();
+        final BoundingBox deserialized = BoundingBox.deserialize(serialized);
         assertThat(deserialized, is(aabb));
     }
 }
diff --git a/src/test/java/org/bukkit/util/StringUtilTest.java b/src/test/java/org/bukkit/util/StringUtilTest.java
index e0325219af97ac8d24bd2c84ce825383d2ee5e2e..58ed877e7face50166af3e47cf3f89e6fa3b577b 100644
--- a/src/test/java/org/bukkit/util/StringUtilTest.java
+++ b/src/test/java/org/bukkit/util/StringUtilTest.java
@@ -37,10 +37,10 @@ public class StringUtilTest {
 
     @Test
     public void copyTokenTest() {
-        String token = "ab";
-        List<String> original = ImmutableList.of("ab12", "aC561", "AB5195", "Ab76", "", "a");
-        List<String> expected = ImmutableList.of("ab12", "AB5195", "Ab76");
-        List<String> list = new ArrayList<>();
+        final String token = "ab";
+        final List<String> original = ImmutableList.of("ab12", "aC561", "AB5195", "Ab76", "", "a");
+        final List<String> expected = ImmutableList.of("ab12", "AB5195", "Ab76");
+        final List<String> list = new ArrayList<>();
         assertThat(StringUtil.copyPartialMatches(token, original, list), is(expected));
         assertThat(StringUtil.copyPartialMatches(token, original, list), is(sameInstance(list)));
         assertThat(list.size(), is(expected.size() * 2));
diff --git a/src/test/java/org/bukkit/util/VectorTest.java b/src/test/java/org/bukkit/util/VectorTest.java
index ae6867f8adb2b94f776449693fb83df9d1cb8a15..40fe849b4f5ae98f9db6de3a7edd361d8faa173c 100644
--- a/src/test/java/org/bukkit/util/VectorTest.java
+++ b/src/test/java/org/bukkit/util/VectorTest.java
@@ -26,7 +26,7 @@ public class VectorTest {
 
     @Test
     public void testResizeAxis() {
-        Vector axis = new Vector(0, 10, 0);
+        final Vector axis = new Vector(0, 10, 0);
         assertEquals(BlockFace.EAST.getDirection().rotateAroundAxis(axis, Math.PI * 0.5), BlockFace.NORTH.getDirection());
     }
 
@@ -36,7 +36,7 @@ public class VectorTest {
      */
     @Test
     public void testRotationAroundX() {
-        Vector vector = BlockFace.UP.getDirection();
+        final Vector vector = BlockFace.UP.getDirection();
         assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundX(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
         assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundX(Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundX(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
@@ -49,7 +49,7 @@ public class VectorTest {
      */
     @Test
     public void testRotationAroundY() {
-        Vector vector = BlockFace.EAST.getDirection();
+        final Vector vector = BlockFace.EAST.getDirection();
         assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundY(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
         assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundY(Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundY(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
@@ -62,8 +62,8 @@ public class VectorTest {
      */
     @Test
     public void testRotationAroundYUsingCustomAxis() {
-        Vector vector = BlockFace.EAST.getDirection();
-        Vector axis = BlockFace.UP.getDirection();
+        final Vector vector = BlockFace.EAST.getDirection();
+        final Vector axis = BlockFace.UP.getDirection();
         assertEquals(BlockFace.NORTH.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
         assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.SOUTH.getDirection(), vector.clone().rotateAroundAxis(axis, Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
@@ -76,7 +76,7 @@ public class VectorTest {
      */
     @Test
     public void testRotationAroundZ() {
-        Vector vector = BlockFace.UP.getDirection();
+        final Vector vector = BlockFace.UP.getDirection();
         assertEquals(BlockFace.WEST.getDirection(), vector.clone().rotateAroundZ(Math.PI * 0.5)); // Should rotate around x axis for 1/4 of a circle.
         assertEquals(BlockFace.DOWN.getDirection(), vector.clone().rotateAroundZ(Math.PI)); // Should rotate around x axis for 2/4 of a circle.
         assertEquals(BlockFace.EAST.getDirection(), vector.clone().rotateAroundZ(Math.PI * 1.5)); // Should rotate around x axis for 3/4 of a circle.
@@ -85,14 +85,14 @@ public class VectorTest {
 
     @Test
     public void testRotationAroundAxis() {
-        Vector axis = new Vector(1, 0, 1);
+        final Vector axis = new Vector(1, 0, 1);
         assertEquals(new Vector(0, 1, 0).rotateAroundNonUnitAxis(axis, Math.PI * 0.5), new Vector(-1, 0, 1));
     }
 
     @Test
     public void testRotationAroundAxisNonUnit() {
-        Vector axis = new Vector(0, 2, 0);
-        Vector v = BlockFace.EAST.getDirection();
+        final Vector axis = new Vector(0, 2, 0);
+        final Vector v = BlockFace.EAST.getDirection();
 
         assertEquals(v.rotateAroundNonUnitAxis(axis, Math.PI * 0.5), BlockFace.NORTH.getDirection().multiply(2));
     }
@@ -104,11 +104,11 @@ public class VectorTest {
      */
     @Test
     public void testRotationAroundCustomAngle() {
-        Vector axis = new Vector(-30, 1, 2000).normalize();
-        Vector v = new Vector(53, 12, 98);
+        final Vector axis = new Vector(-30, 1, 2000).normalize();
+        final Vector v = new Vector(53, 12, 98);
 
-        float a = v.angle(axis);
-        double stepSize = Math.PI / 21;
+        final float a = v.angle(axis);
+        final double stepSize = Math.PI / 21;
         for (int i = 0; i < 42; i++) {
             v.rotateAroundAxis(axis, stepSize);
             assertEquals(a, v.angle(axis), Vector.getEpsilon());
@@ -117,8 +117,8 @@ public class VectorTest {
 
     @Test
     public void testSmallAngle() {
-        Vector a = new Vector(-0.13154885489775203, 0.0, 0.12210868381700482);
-        Vector b = new Vector(-0.7329152226448059, -0.0, 0.6803199648857117);
+        final Vector a = new Vector(-0.13154885489775203, 0.0, 0.12210868381700482);
+        final Vector b = new Vector(-0.7329152226448059, -0.0, 0.6803199648857117);
 
         assertTrue(Double.isFinite(a.angle(b)));
     }
diff --git a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
index b32263fec18aa4c1e9646c1d12bf2da968bfb8ff..426e68efc0b667923b2f70e75efd9f86b28c3d85 100644
--- a/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
+++ b/src/test/java/org/bukkit/util/io/BukkitObjectStreamTest.java
@@ -84,7 +84,7 @@ public class BukkitObjectStreamTest {
         // If this test fails, you may start your trek to debug by commenting the '@Ignore' on the next method
         // (and of course, you would read those comments too)
         final ByteArrayOutputStream out = new ByteArrayOutputStream();
-        try (ObjectOutputStream oos = new BukkitObjectOutputStream(out)) {
+        try (final ObjectOutputStream oos = new BukkitObjectOutputStream(out)) {
             oos.writeObject(object);
         }
 
@@ -96,8 +96,8 @@ public class BukkitObjectStreamTest {
         ObjectInputStream ois = null;
         ObjectInputStream preois = null;
         try {
-            ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
-            ByteArrayInputStream preIn = new ByteArrayInputStream(preEncodedArray);
+            final ByteArrayInputStream in = new ByteArrayInputStream(out.toByteArray());
+            final ByteArrayInputStream preIn = new ByteArrayInputStream(preEncodedArray);
             ois = new BukkitObjectInputStream(in);
             preois = new BukkitObjectInputStream(preIn);
 
@@ -107,13 +107,13 @@ public class BukkitObjectStreamTest {
             if (ois != null) {
                 try {
                     ois.close();
-                } catch (IOException ignored) {
+                } catch (final IOException ignored) {
                 }
             }
             if (preois != null) {
                 try {
                     preois.close();
-                } catch (IOException ignored) {
+                } catch (final IOException ignored) {
                 }
             }
         }
@@ -134,7 +134,7 @@ public class BukkitObjectStreamTest {
         // The entire reason the pre-encoded string was added is to make a build (test) fail if someone accidentally makes it not backward-compatible
 
         final ByteArrayOutputStream out = new ByteArrayOutputStream();
-        try (ObjectOutputStream oos = new BukkitObjectOutputStream(out)) {
+        try (final ObjectOutputStream oos = new BukkitObjectOutputStream(out)) {
             oos.writeObject(object);
             oos.flush();
         }
@@ -142,7 +142,7 @@ public class BukkitObjectStreamTest {
         final String string = new String(Base64Coder.encode(out.toByteArray()));
         try {
             assertThat(preEncoded, is(string));
-        } catch (Throwable t) {
+        } catch (final Throwable t) {
             System.out.println(className + ": \"" + string + "\"");
             throw t;
         }
